using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net.WebSockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Versioning;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Acr.UserDialogs;
using MQTTnet;
using MQTTnet.Client;
using MQTTnet.Formatter;
using MotorNet6;
using Plugin.BLE;
using Plugin.BLE.Abstractions;
using Plugin.BLE.Abstractions.Contracts;
using Plugin.BLE.Abstractions.EventArgs;
using Plugin.Permissions;
using Plugin.Permissions.Abstractions;
using SkiaSharp;
using SkiaSharp.Views.Forms;
using Xamarin.CommunityToolkit.Extensions;
using Xamarin.CommunityToolkit.Helpers;
using Xamarin.CommunityToolkit.UI.Views;
using Xamarin.Essentials;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.PlatformConfiguration;
using Xamarin.Forms.PlatformConfiguration.AndroidSpecific;
using Xamarin.Forms.PlatformConfiguration.iOSSpecific;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Diagnostics;
using Xamarin.Forms.Xaml.Internals;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
[assembly: TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName = "")]
[assembly: XamlResourceId("MotorNet6.AdapterPage.xaml", "AdapterPage.xaml", typeof(AdapterPage))]
[assembly: XamlResourceId("MotorNet6.App.xaml", "App.xaml", typeof(App))]
[assembly: XamlResourceId("MotorNet6.CenterPage.xaml", "CenterPage.xaml", typeof(CenterPage))]
[assembly: XamlResourceId("MotorNet6.ConnectPage.xaml", "ConnectPage.xaml", typeof(ConnectPage))]
[assembly: XamlResourceId("MotorNet6.CurvePage.xaml", "CurvePage.xaml", typeof(CurvePage))]
[assembly: XamlResourceId("MotorNet6.FilePage.xaml", "FilePage.xaml", typeof(FilePage))]
[assembly: XamlResourceId("MotorNet6.GraphPage.xaml", "GraphPage.xaml", typeof(GraphPage))]
[assembly: XamlResourceId("MotorNet6.LoginPage.xaml", "LoginPage.xaml", typeof(LoginPage))]
[assembly: XamlResourceId("MotorNet6.LoginPage2.xaml", "LoginPage2.xaml", typeof(LoginPage2))]
[assembly: XamlResourceId("MotorNet6.MapPage.xaml", "MapPage.xaml", typeof(MapPage))]
[assembly: XamlResourceId("MotorNet6.MonthRecordPage.xaml", "MonthRecordPage.xaml", typeof(MonthRecordPage))]
[assembly: XamlResourceId("MotorNet6.MyWebPage.xaml", "MyWebPage.xaml", typeof(MyWebPage))]
[assembly: XamlResourceId("MotorNet6.ParaPage.xaml", "ParaPage.xaml", typeof(ParaPage))]
[assembly: XamlResourceId("MotorNet6.ProBmsPage.xaml", "ProBmsPage.xaml", typeof(ProBmsPage))]
[assembly: XamlResourceId("MotorNet6.ProControlPage.xaml", "ProControlPage.xaml", typeof(ProControlPage))]
[assembly: XamlResourceId("MotorNet6.RecordPage.xaml", "RecordPage.xaml", typeof(RecordPage))]
[assembly: XamlResourceId("MotorNet6.SegRecordPage.xaml", "SegRecordPage.xaml", typeof(SegRecordPage))]
[assembly: XamlResourceId("MotorNet6.StatPage.xaml", "StatPage.xaml", typeof(StatPage))]
[assembly: AssemblyCompany("MotorNet6")]
[assembly: AssemblyConfiguration("Release")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: AssemblyInformationalVersion("1.0.0")]
[assembly: AssemblyProduct("MotorNet6")]
[assembly: AssemblyTitle("MotorNet6")]
[assembly: AssemblyVersion("1.0.0.0")]
namespace Xamarin.CommunityToolkit.Initializer
{
	internal sealed class XCTInitCaller
	{
		public void CallInit()
		{
			XCT.Init();
		}
	}
}
namespace MotorNet6
{
	[XamlCompilation(XamlCompilationOptions.Compile)]
	[XamlFilePath("AdapterPage.xaml")]
	public class AdapterPage : Xamarin.Forms.TabbedPage
	{
		public AdapterPage()
		{
			InitializeComponent();
			base.Children.Add(new ParaPage
			{
				Title = "Para",
				Icon = "settings.png"
			});
			base.Children.Add(new GraphPage
			{
				Title = "Graph",
				Icon = "icon_graph.png"
			});
			if (App.currentvcudeviceid != "00000000")
			{
				base.Children.Add(new CenterPage
				{
					Title = "System",
					Icon = "settings.png"
				});
			}
			base.Children.Add(new CurvePage
			{
				Title = "Curve",
				Icon = "icon_curve.png"
			});
			base.Children.Add(new ConnectPage
			{
				Title = "Connect",
				Icon = "icon_feed.png"
			});
			On<Android>().SetToolbarPlacement(ToolbarPlacement.Bottom);
			Xamarin.Forms.NavigationPage.SetHasNavigationBar(this, value: false);
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			if (ResourceLoader.IsEnabled && ResourceLoader.CanProvideContentFor(new ResourceLoader.ResourceLoadingQuery
			{
				AssemblyName = typeof(AdapterPage).GetTypeInfo().Assembly.GetName(),
				ResourcePath = "AdapterPage.xaml",
				Instance = this
			}))
			{
				__InitComponentRuntime();
				return;
			}
			if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
			{
				__InitComponentRuntime();
				return;
			}
			AdapterPage adapterPage;
			VisualDiagnostics.RegisterSourceInfo(adapterPage = this, new Uri("AdapterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 2, 2);
			NameScope value = (NameScope)(NameScope.GetNameScope(adapterPage) ?? new NameScope());
			NameScope.SetNameScope(adapterPage, value);
			adapterPage.SetValue(Xamarin.Forms.Page.TitleProperty, "ÃÏ‘œº‡øÿ");
		}

		private void __InitComponentRuntime()
		{
			this.LoadFromXaml(typeof(AdapterPage));
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	public class VCUData
	{
		public string SN { get; set; }

		public string ModelType { get; set; }

		public double lat { get; set; }

		public double lng { get; set; }

		public float height { get; set; }

		public int battsoc { get; set; }

		public int vcusoc { get; set; }

		public float restdistance { get; set; }

		public int phoneKey { get; set; }

		public int remoteon { get; set; }

		public int anti_theft { get; set; }

		public int alarmstat { get; set; }

		public double odo { get; set; }

		public int GpsSignal { get; set; }

		public int CAT1Signal { get; set; }

		public int lockdelay { get; set; }

		public int vibalarm { get; set; }

		public bool wheelalarm { get; set; }

		public int keydistance { get; set; }

		public int ratedvoltage { get; set; }

		public bool overspeedalarm { get; set; }

		public bool speedlimit { get; set; }

		public List<string> messageList { get; set; }

		public void Init()
		{
			SN = "";
			ModelType = "";
			lat = 0.0;
			lng = 0.0;
			height = 0f;
			battsoc = 0;
			vcusoc = 0;
			restdistance = 0f;
			phoneKey = 0;
			remoteon = 0;
			anti_theft = 0;
			alarmstat = 0;
			odo = 0.0;
			GpsSignal = 0;
			CAT1Signal = 0;
			messageList = new List<string>();
		}
	}
	public class CMD5
	{
		public uint[] m_data = new uint[4];

		public uint[] total = new uint[2];

		public uint[] state = new uint[4];

		public byte[] buffer = new byte[64];

		private static byte[] md5_padding;

		public int hexstr_to_md5(string str)
		{
			int num = 0;
			uint num2 = 0u;
			if (str == null)
			{
				return 0;
			}
			if (str.Length < 32)
			{
				return 0;
			}
			num = 0;
			for (int i = 0; i < 4; i++)
			{
				m_data[i] = 0u;
				int num3 = 8;
				for (int j = 0; j < 8; j++)
				{
					if (str[num] >= '0' && str[num] <= '9')
					{
						num2 = (uint)(str[num] - 48);
					}
					if (str[num] >= 'A' && str[num] <= 'F')
					{
						num2 = (uint)(str[num] - 65 + 10);
					}
					if (str[num] >= 'a' && str[num] <= 'f')
					{
						num2 = (uint)(str[num] - 97 + 10);
					}
					num++;
					num3--;
					m_data[i] += num2 << num3 * 4;
				}
			}
			return 1;
		}

		public int Add(CMD5 md1, CMD5 md2)
		{
			for (int i = 0; i < 4; i++)
			{
				m_data[i] = md1.m_data[i] ^ md2.m_data[i];
			}
			return 1;
		}

		public int GenMd5()
		{
			byte[] input = new byte[16]
			{
				(byte)m_data[0],
				(byte)(m_data[0] >> 8),
				(byte)(m_data[0] >> 16),
				(byte)(m_data[0] >> 24),
				(byte)m_data[1],
				(byte)(m_data[1] >> 8),
				(byte)(m_data[1] >> 16),
				(byte)(m_data[1] >> 24),
				(byte)m_data[2],
				(byte)(m_data[2] >> 8),
				(byte)(m_data[2] >> 16),
				(byte)(m_data[2] >> 24),
				(byte)m_data[3],
				(byte)(m_data[3] >> 8),
				(byte)(m_data[3] >> 16),
				(byte)(m_data[3] >> 24)
			};
			md5_starts();
			md5_update(input, 16);
			md5_finish();
			return 1;
		}

		private int md5_starts()
		{
			total[0] = 0u;
			total[1] = 0u;
			state[0] = 1732584193u;
			state[1] = 4023233417u;
			state[2] = 2562383102u;
			state[3] = 271733878u;
			return 1;
		}

		private uint GET_UINT32(byte[] b, int i)
		{
			return (uint)(b[i] | (b[i + 1] << 8) | (b[i + 2] << 16) | (b[i + 3] << 24));
		}

		private uint F(uint x, uint y, uint z)
		{
			return z ^ (x & (y ^ z));
		}

		private uint F1(uint x, uint y, uint z)
		{
			return y ^ (z & (x ^ y));
		}

		private uint F2(uint x, uint y, uint z)
		{
			return x ^ y ^ z;
		}

		private uint F3(uint x, uint y, uint z)
		{
			return y ^ (x | ~z);
		}

		private uint S(uint x, int n)
		{
			return (x << n) | ((x & 0xFFFFFFFFu) >> 32 - n);
		}

		private void md5_process(byte[] data)
		{
			uint[] array = new uint[16];
			for (int i = 0; i < 16; i++)
			{
				array[i] = GET_UINT32(data, i * 4);
			}
			uint num = state[0];
			uint num2 = state[1];
			uint num3 = state[2];
			uint num4 = state[3];
			num += (uint)((int)(F(num2, num3, num4) + array[0]) + -680876936);
			num = S(num, 7) + num2;
			num4 += (uint)((int)(F(num, num2, num3) + array[1]) + -389564586);
			num4 = S(num4, 12) + num;
			num3 += F(num4, num, num2) + array[2] + 606105819;
			num3 = S(num3, 17) + num4;
			num2 += (uint)((int)(F(num3, num4, num) + array[3]) + -1044525330);
			num2 = S(num2, 22) + num3;
			num += (uint)((int)(F(num2, num3, num4) + array[4]) + -176418897);
			num = S(num, 7) + num2;
			num4 += F(num, num2, num3) + array[5] + 1200080426;
			num4 = S(num4, 12) + num;
			num3 += (uint)((int)(F(num4, num, num2) + array[6]) + -1473231341);
			num3 = S(num3, 17) + num4;
			num2 += (uint)((int)(F(num3, num4, num) + array[7]) + -45705983);
			num2 = S(num2, 22) + num3;
			num += F(num2, num3, num4) + array[8] + 1770035416;
			num = S(num, 7) + num2;
			num4 += (uint)((int)(F(num, num2, num3) + array[9]) + -1958414417);
			num4 = S(num4, 12) + num;
			num3 += (uint)((int)(F(num4, num, num2) + array[10]) + -42063);
			num3 = S(num3, 17) + num4;
			num2 += (uint)((int)(F(num3, num4, num) + array[11]) + -1990404162);
			num2 = S(num2, 22) + num3;
			num += F(num2, num3, num4) + array[12] + 1804603682;
			num = S(num, 7) + num2;
			num4 += (uint)((int)(F(num, num2, num3) + array[13]) + -40341101);
			num4 = S(num4, 12) + num;
			num3 += (uint)((int)(F(num4, num, num2) + array[14]) + -1502002290);
			num3 = S(num3, 17) + num4;
			num2 += F(num3, num4, num) + array[15] + 1236535329;
			num2 = S(num2, 22) + num3;
			num += (uint)((int)(F1(num2, num3, num4) + array[1]) + -165796510);
			num = S(num, 5) + num2;
			num4 += (uint)((int)(F1(num, num2, num3) + array[6]) + -1069501632);
			num4 = S(num4, 9) + num;
			num3 += F1(num4, num, num2) + array[11] + 643717713;
			num3 = S(num3, 14) + num4;
			num2 += (uint)((int)(F1(num3, num4, num) + array[0]) + -373897302);
			num2 = S(num2, 20) + num3;
			num += (uint)((int)(F1(num2, num3, num4) + array[5]) + -701558691);
			num = S(num, 5) + num2;
			num4 += F1(num, num2, num3) + array[10] + 38016083;
			num4 = S(num4, 9) + num;
			num3 += (uint)((int)(F1(num4, num, num2) + array[15]) + -660478335);
			num3 = S(num3, 14) + num4;
			num2 += (uint)((int)(F1(num3, num4, num) + array[4]) + -405537848);
			num2 = S(num2, 20) + num3;
			num += F1(num2, num3, num4) + array[9] + 568446438;
			num = S(num, 5) + num2;
			num4 += (uint)((int)(F1(num, num2, num3) + array[14]) + -1019803690);
			num4 = S(num4, 9) + num;
			num3 += (uint)((int)(F1(num4, num, num2) + array[3]) + -187363961);
			num3 = S(num3, 14) + num4;
			num2 += F1(num3, num4, num) + array[8] + 1163531501;
			num2 = S(num2, 20) + num3;
			num += (uint)((int)(F1(num2, num3, num4) + array[13]) + -1444681467);
			num = S(num, 5) + num2;
			num4 += (uint)((int)(F1(num, num2, num3) + array[2]) + -51403784);
			num4 = S(num4, 9) + num;
			num3 += F1(num4, num, num2) + array[7] + 1735328473;
			num3 = S(num3, 14) + num4;
			num2 += (uint)((int)(F1(num3, num4, num) + array[12]) + -1926607734);
			num2 = S(num2, 20) + num3;
			num += (uint)((int)(F2(num2, num3, num4) + array[5]) + -378558);
			num = S(num, 4) + num2;
			num4 += (uint)((int)(F2(num, num2, num3) + array[8]) + -2022574463);
			num4 = S(num4, 11) + num;
			num3 += F2(num4, num, num2) + array[11] + 1839030562;
			num3 = S(num3, 16) + num4;
			num2 += (uint)((int)(F2(num3, num4, num) + array[14]) + -35309556);
			num2 = S(num2, 23) + num3;
			num += (uint)((int)(F2(num2, num3, num4) + array[1]) + -1530992060);
			num = S(num, 4) + num2;
			num4 += F2(num, num2, num3) + array[4] + 1272893353;
			num4 = S(num4, 11) + num;
			num3 += (uint)((int)(F2(num4, num, num2) + array[7]) + -155497632);
			num3 = S(num3, 16) + num4;
			num2 += (uint)((int)(F2(num3, num4, num) + array[10]) + -1094730640);
			num2 = S(num2, 23) + num3;
			num += F2(num2, num3, num4) + array[13] + 681279174;
			num = S(num, 4) + num2;
			num4 += (uint)((int)(F2(num, num2, num3) + array[0]) + -358537222);
			num4 = S(num4, 11) + num;
			num3 += (uint)((int)(F2(num4, num, num2) + array[3]) + -722521979);
			num3 = S(num3, 16) + num4;
			num2 += F2(num3, num4, num) + array[6] + 76029189;
			num2 = S(num2, 23) + num3;
			num += (uint)((int)(F2(num2, num3, num4) + array[9]) + -640364487);
			num = S(num, 4) + num2;
			num4 += (uint)((int)(F2(num, num2, num3) + array[12]) + -421815835);
			num4 = S(num4, 11) + num;
			num3 += F2(num4, num, num2) + array[15] + 530742520;
			num3 = S(num3, 16) + num4;
			num2 += (uint)((int)(F2(num3, num4, num) + array[2]) + -995338651);
			num2 = S(num2, 23) + num3;
			num += (uint)((int)(F3(num2, num3, num4) + array[0]) + -198630844);
			num = S(num, 6) + num2;
			num4 += F3(num, num2, num3) + array[7] + 1126891415;
			num4 = S(num4, 10) + num;
			num3 += (uint)((int)(F3(num4, num, num2) + array[14]) + -1416354905);
			num3 = S(num3, 15) + num4;
			num2 += (uint)((int)(F3(num3, num4, num) + array[5]) + -57434055);
			num2 = S(num2, 21) + num3;
			num += F3(num2, num3, num4) + array[12] + 1700485571;
			num = S(num, 6) + num2;
			num4 += (uint)((int)(F3(num, num2, num3) + array[3]) + -1894986606);
			num4 = S(num4, 10) + num;
			num3 += (uint)((int)(F3(num4, num, num2) + array[10]) + -1051523);
			num3 = S(num3, 15) + num4;
			num2 += (uint)((int)(F3(num3, num4, num) + array[1]) + -2054922799);
			num2 = S(num2, 21) + num3;
			num += F3(num2, num3, num4) + array[8] + 1873313359;
			num = S(num, 6) + num2;
			num4 += (uint)((int)(F3(num, num2, num3) + array[15]) + -30611744);
			num4 = S(num4, 10) + num;
			num3 += (uint)((int)(F3(num4, num, num2) + array[6]) + -1560198380);
			num3 = S(num3, 15) + num4;
			num2 += F3(num3, num4, num) + array[13] + 1309151649;
			num2 = S(num2, 21) + num3;
			num += (uint)((int)(F3(num2, num3, num4) + array[4]) + -145523070);
			num = S(num, 6) + num2;
			num4 += (uint)((int)(F3(num, num2, num3) + array[11]) + -1120210379);
			num4 = S(num4, 10) + num;
			num3 += F3(num4, num, num2) + array[2] + 718787259;
			num3 = S(num3, 15) + num4;
			num2 += (uint)((int)(F3(num3, num4, num) + array[9]) + -343485551);
			num2 = S(num2, 21) + num3;
			state[0] += num;
			state[1] += num2;
			state[2] += num3;
			state[3] += num4;
		}

		private void md5_update(byte[] input, int len)
		{
			if (len != 0)
			{
				int num = (int)((total[0] >> 3) & 0x3F);
				int num2 = 64 - num;
				total[0] += (uint)(len << 3);
				total[1] += (uint)(len >> 29);
				total[0] &= uint.MaxValue;
				total[1] += (uint)((total[0] < len << 3) ? 1 : 0);
				int num3 = 0;
				if (num != 0 && len >= num2)
				{
					Buffer.BlockCopy(input, num3, buffer, num, num2);
					md5_process(buffer);
					len -= num2;
					num3 += num2;
					num = 0;
				}
				if (len != 0)
				{
					Buffer.BlockCopy(input, 0, buffer, num, len);
				}
			}
		}

		private int md5_finish()
		{
			byte[] input = new byte[8]
			{
				(byte)total[0],
				(byte)(total[0] >> 8),
				(byte)(total[0] >> 16),
				(byte)(total[0] >> 24),
				(byte)total[1],
				(byte)(total[1] >> 8),
				(byte)(total[1] >> 16),
				(byte)(total[1] >> 24)
			};
			uint num = (total[0] >> 3) & 0x3F;
			uint len = ((num < 56) ? (56 - num) : (120 - num));
			md5_update(md5_padding, (int)len);
			md5_update(input, 8);
			m_data[0] = state[0];
			m_data[1] = state[1];
			m_data[2] = state[2];
			m_data[3] = state[3];
			return 1;
		}

		public string TString()
		{
			return $"{m_data[0]:X8}{m_data[1]:X8}{m_data[2]:X8}{m_data[3]:X8}";
		}

		static CMD5()
		{
			byte[] array = new byte[64];
			array[0] = 128;
			md5_padding = array;
		}
	}
	[XamlFilePath("App.xaml")]
	public class App : Xamarin.Forms.Application
	{
		public static int rssi = -100;

		public static int channel = 1;

		public static int disablecnt = 4;

		public static string bindstr = "";

		public static string keydistance = "";

		public static string filenamehead = "";

		public static string filepathsrc = "";

		public static bool ChatClosed = true;

		public static bool graphrcvd = true;

		public static int sendid = 0;

		public static int remoteack = 0;

		public static string sendmsg;

		public static byte[] sendgraph;

		public static int sendoffset = 0;

		public static bool ReceivedVCUFrame = false;

		public static bool Stop;

		public static bool fdalarm = false;

		public static bool NeedLogin = true;

		public static bool ios = false;

		public static string LastConnectedBlue = "";

		public static string currentvcudeviceid = "";

		public static string shareData = "";

		public static string NewSerialnumber;

		public static string verify;

		public static bool Mark2Old = false;

		public static int loginstat = 0;

		public static string isLogged = "0";

		public static string clientid;

		public static int rcvFrames = 0;

		public static bool rcv_NewBlueKey = false;

		public static string BlueName = "";

		public static bool CheckBlue = false;

		public static ulong phone;

		public static string phonesec = "";

		public static int NotBindStat = 0;

		public static int m_xscontrol = 0;

		public static int hallalarm;

		public static string phoneid;

		public static string id0;

		public static bool loadfile = false;

		public static string fileName;

		public static bool hasSelected;

		public static string autosave = "";

		public static bool CAT1_Connected = false;

		public static bool CAT1_Loggined = false;

		public static int maintainPackCnt;

		public static int hasserialnumber;

		public static bool hasverified;

		public static string ver = "230";

		public static string randompass;

		public static string id;

		public static ScanResultModel scanResult;

		public static string httpaddr = "192.168.0.105";

		public static string monitoraddr = "iot.fardriver.com";

		public static string backupaddr = "182.92.233.85";

		public static string printaddr = "192.168.0.105";

		public static string rcv_serialNumber = "CHINA96Z201901010001";

		public static string rcv_serialNumberfoc = "CHINA96Z201901010001";

		public static int loginway = 0;

		public static string Confirm_password = "0101";

		public static string Old_password = "0101";

		public static string Confirm_PhoneNumber = "8613907739543";

		public static int sendconfirm = 0;

		public static string ConnectAlarmString = "";

		public static int PassOk;

		public static string Link0 = "";

		public static string Link1 = "";

		public static string Link2 = "";

		public static string Link3 = "";

		public static string Link4 = "";

		public static string Link5 = "";

		public static string Link6 = "";

		public static int HasPassOk;

		public static bool isConnectedLost;

		public static bool isConnected;

		public static bool mqttconnected = false;

		public static string username = "";

		public static string password = "";

		public static bool CompPhoneOk;

		public static bool bms;

		public static uint date;

		public static bool GetDataCmd;

		public static bool NewVersion = true;

		public static uint crc_infoc0 = 0u;

		public static uint crc_infoc1 = 0u;

		public static string lang;

		public static string ModelName = "";

		public static string ModelCode;

		public static bool CN = false;

		public static double userlng = 0.0;

		public static double userlat = 0.0;

		public static double vculng = 0.0;

		public static double vculat = 0.0;

		public static Xamarin.Essentials.Location pos = null;

		public static string localAgent = "0";

		public static string custom = "";

		public static byte[] rs485data = new byte[7200];

		public static int rs485index = 0;

		public static int rs485start = 0;

		public static int rs485len = 0;

		public static bool getfilelist = false;

		public static string[] Agent = new string[109]
		{
			"FJ", "GX", "JS", "ZJ", "SH", "SZ", "ZH", "ZA", "GZ", "HZ",
			"FS", "HE", "HA", "HN", "YN", "GU", "SC", "SD", "TW", "LN",
			"16", "16", "16", "16", "16", "16", "16", "16", "16", "30",
			"30", "30", "30", "30", "30", "30", "30", "30", "30", "40",
			"40", "40", "40", "40", "40", "40", "40", "40", "40", "50",
			"50", "50", "50", "50", "50", "50", "50", "50", "50", "60",
			"60", "60", "60", "60", "60", "60", "60", "60", "60", "70",
			"70", "70", "70", "70", "70", "70", "70", "70", "70", "80",
			"80", "80", "80", "80", "80", "80", "80", "80", "80", "90",
			"90", "90", "90", "90", "90", "90", "90", "90", "90", "100",
			"100", "100", "100", "100", "100", "100", "100", "100", "100"
		};

		public static string[] BlueAgent = new string[109]
		{
			"GS", "HL", "JL", "LN", "NM", "QH", "SC", "XJ", "XZ", "YN",
			"HU", "AH", "GX", "HE", "FS", "SX", "JX", "GU", "SZ", "SA",
			"NX", "ZH", "ZA", "GZ", "ND", "16", "16", "16", "16", "30",
			"30", "30", "30", "30", "30", "30", "30", "30", "30", "40",
			"40", "40", "40", "40", "40", "40", "40", "40", "40", "50",
			"50", "50", "50", "50", "50", "50", "50", "50", "50", "60",
			"60", "60", "60", "60", "60", "60", "60", "60", "60", "70",
			"70", "70", "70", "70", "70", "70", "70", "70", "70", "80",
			"80", "80", "80", "80", "80", "80", "80", "80", "80", "90",
			"90", "90", "90", "90", "90", "90", "90", "90", "90", "100",
			"100", "100", "100", "100", "100", "100", "100", "100", "100"
		};

		public static uint[] Discover = new uint[21];

		public static string OldPhoneNumber = "";

		public static uint NewData = 0u;

		public static int NewVcuMessage = 0;

		public static int NoDataCount = 0;

		public static int rotation = 0;

		public static int EnModify = 2;

		public static string recordtime = "";

		public static int SOC = 100;

		public static int MaxPower = 12000;

		public static float RestDistance = 0.1f;

		public static ushort[] gflash = new ushort[156];

		public static ushort[] gcflash = new ushort[192];

		public static byte[] wflash = new byte[312];

		public static byte[] cflash = new byte[384];

		public static string[] hexch = new string[16]
		{
			"A", "C", "0", "1", "9", "7", "2", "5", "8", "3",
			"6", "F", "D", "E", "B", "4"
		};

		public static int HasParaFile;

		public static char HardVer = '\0';

		public static char SoftVer0 = '\0';

		public static int Softver1 = 0;

		public static int Downloaded = 0;

		public static int UpdateNum = 0;

		public static int ownertype = 0;

		public static int BindingStat = -1;

		public static string remoteid = "";

		public static bool SendRemote = false;

		public static int RcvRemoteCount = 0;

		public static List<string> RemoteFileNames = new List<string>();

		public static bool OldPassed = false;

		public static void SaveUpgradeDataFile(string str)
		{
			string text = str;
			int num = 0;
			int num2 = 0;
			if (text != null)
			{
				num = text.LastIndexOf('/');
				if (num >= 0)
				{
					text = text.Substring(num + 1);
					num2++;
				}
			}
			if (num2 <= 0)
			{
				return;
			}
			string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
			if (!Directory.Exists(folderPath))
			{
				Directory.CreateDirectory(folderPath);
			}
			filenamehead = text;
			filepathsrc = folderPath;
			string text2 = $"{folderPath}/{text}";
			if (File.Exists(text2))
			{
				File.Delete(text2);
			}
			if (File.Exists(str))
			{
				File.Copy(str, text2);
				fileName = text2;
				loadfile = true;
				if (fileName.ToUpper().Contains(".HEB"))
				{
					Downloaded = 1;
				}
			}
		}

		public void SetFileName(string str, string ciname)
		{
			if (str == null)
			{
				fileName = "";
			}
			else
			{
				fileName = str;
			}
			if (ciname.Contains("zh"))
			{
				CN = true;
			}
			else
			{
				CN = false;
			}
			if (ciname.Contains("_ios_"))
			{
				ios = true;
			}
			try
			{
				if (!File.Exists(fileName))
				{
					return;
				}
				if (fileName.ToUpper().Contains(".HEB") || fileName.ToUpper().Contains(".BIN") || fileName.ToUpper().Contains(".HEX"))
				{
					SaveUpgradeDataFile(fileName);
					return;
				}
				shareData = File.ReadAllText(fileName);
				if (shareData.Length > 500)
				{
					shareData = "";
				}
			}
			catch (Exception ex)
			{
				UserDialogs.Instance.Alert(ex.ToString());
			}
		}

		public App(string str, string ciname)
		{
			InitializeComponent();
			Random random = new Random();
			if (str == null)
			{
				fileName = "";
			}
			else
			{
				fileName = str;
			}
			if (ciname.Contains("zh"))
			{
				CN = true;
			}
			else
			{
				CN = false;
			}
			if (ciname.Contains("_ios_"))
			{
				ios = true;
			}
			try
			{
				if (File.Exists(fileName))
				{
					if (fileName.ToUpper().Contains(".HEB") || fileName.ToUpper().Contains(".BIN") || fileName.ToUpper().Contains(".HEX"))
					{
						SaveUpgradeDataFile(fileName);
					}
					else
					{
						shareData = File.ReadAllText(fileName);
						if (shareData.Length > 500)
						{
							shareData = "";
						}
					}
				}
			}
			catch (Exception ex)
			{
				UserDialogs.Instance.Alert(ex.ToString());
			}
			maintainPackCnt = 0;
			hasSelected = false;
			isConnected = false;
			isConnectedLost = false;
			hasserialnumber = 0;
			HasParaFile = 0;
			hasverified = false;
			PassOk = 0;
			HasPassOk = 0;
			bms = false;
			CompPhoneOk = false;
			byte[] array = new byte[255];
			random.NextBytes(array);
			byte[] array2 = new byte[16];
			for (int i = 0; i < 16; i++)
			{
				int num = array[i] % 79;
				array2[i] = (byte)(num + 48);
			}
			randompass = Encoding.UTF8.GetString(array2);
			isLogged = SecureStorage.GetAsync("isLogged").Result;
			username = SecureStorage.GetAsync("username").Result;
			password = SecureStorage.GetAsync("password").Result;
			clientid = SecureStorage.GetAsync("clientid").Result;
			try
			{
				Convert.ToInt32(clientid);
			}
			catch (Exception)
			{
				clientid = "0000000";
			}
			LastConnectedBlue = SecureStorage.GetAsync("LastConnectedBlue").Result;
			autosave = SecureStorage.GetAsync("AutoSave").Result;
			keydistance = SecureStorage.GetAsync("KeyDistance").Result;
			currentvcudeviceid = SecureStorage.GetAsync("CurrentVCU").Result;
			if (keydistance == null)
			{
				keydistance = "0";
			}
			if (currentvcudeviceid == null)
			{
				currentvcudeviceid = "00000000";
			}
			if (clientid == null)
			{
				clientid = "0000000";
			}
			base.MainPage = new AdapterPage();
		}

		public static void CacuDiscover(uint discover)
		{
			Discover[0] = discover;
			if (rcv_serialNumberfoc.Length >= 20)
			{
				Discover[1] = (Discover[0] + 131836147) * 128559169 + 156926597 + rcv_serialNumberfoc[1];
				Discover[2] = (Discover[1] + 141652867) * 101528143 + 125504759 + rcv_serialNumberfoc[2];
				Discover[3] = (Discover[2] + 100905379) * 100658083 + 102098393 + 101889259 * (Discover[0] + 29302739) + rcv_serialNumberfoc[3];
				Discover[4] = (Discover[3] + 101196353) * 131836147 + 100905379 + rcv_serialNumberfoc[4];
				Discover[5] = (Discover[4] + 128559869) * 100994629 + 128558971 + rcv_serialNumberfoc[5];
				Discover[6] = (Discover[5] + 128564413) * 125657731 + 128559653 + rcv_serialNumberfoc[6];
				Discover[7] = (Discover[6] + 128565659) * 125024947 + 128562311 + rcv_serialNumberfoc[7];
				Discover[8] = (Discover[7] + 128567359) * 122959729 + 129178337 + rcv_serialNumberfoc[8];
				Discover[9] = (Discover[8] + 122949901) * 122955109 + 129738743 + rcv_serialNumberfoc[9];
				Discover[10] = (Discover[9] + 122953111) * 131835259 + 130499071 + 101889259 * (Discover[5] + 29302739) + rcv_serialNumberfoc[10];
				Discover[11] = (Discover[10] + 122959729) * 128564413 + 130798469 + rcv_serialNumberfoc[11];
				Discover[12] = (Discover[11] + 111348301) * 156032003 + 131009077 + rcv_serialNumberfoc[12];
				Discover[13] = (Discover[12] + 154181179) * 131835227 + 131393921 + rcv_serialNumberfoc[13];
				Discover[14] = (Discover[13] + 155627767) * 131833879 + 131608663 + rcv_serialNumberfoc[14];
				Discover[15] = (Discover[14] + 156032003) * 131832829 + 131833243 + rcv_serialNumberfoc[15];
				if (rcv_serialNumberfoc.Length >= 20)
				{
					Discover[16] = (Discover[15] + 157112171) * 123681031 + 141652129 + rcv_serialNumberfoc[16];
					Discover[17] = (Discover[16] + 128559199) * 101196353 + 142052723 + rcv_serialNumberfoc[17];
					Discover[18] = (Discover[17] + 129283549) * 130745599 + 142960283 + rcv_serialNumberfoc[18];
					Discover[19] = (Discover[18] + 130088243) * 130748117 + 143635109 + rcv_serialNumberfoc[19];
					Discover[20] = (Discover[19] + 130741439) * 122955571 + 144108401;
				}
			}
		}

		protected override void OnStart()
		{
		}

		protected override void OnSleep()
		{
		}

		protected override void OnResume()
		{
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			this.LoadFromXaml(typeof(App));
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	[XamlFilePath("CenterPage.xaml")]
	public class CenterPage : ContentPage
	{
		private const double PI = Math.PI;

		private const double a = 6378245.0;

		private const double ee = 0.006693421622965943;

		public double tlng;

		public double tlat;

		public double clng;

		public double clat;

		public double cplng;

		public double cplat;

		public double vculat;

		public double vculng;

		public double lat;

		public double lng;

		private bool getmap;

		public int resetcount = 100;

		public int displaytime = 100;

		public bool ch2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Image ModelImage;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelNmae;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Image SOCImage;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BattSOC;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BattSOCName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Image RestImage;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RestDistance;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RestDistanceName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelTypeName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelSNName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelType;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelSN;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelSOCName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelSOC;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button ResetButton;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.WebView webView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Image KeyonImage;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label KeyOnName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button KeyOn;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Image FDImage;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AntiThiefName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button AntiThief;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Image ZuotongImage;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ZuotongLockName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button Zuotong;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RatedVoltageName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RatedVoltageDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SpeedLimitName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SpeedLimitDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Switch SpeedLimit;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label OverSpeedAlarmName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label OverSpeedAlarmDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Switch OverSpeedAlarm;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AutoLockName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AutoLockDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid grid1;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VibAlarmName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VibAlarmDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid grid2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label WheelAlarmName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label WheelAlarmDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Switch WheelAlarm;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid grid3;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PhoneKeyName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PhoneKeyDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid grid4;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DistanceName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DistanceDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid grid5;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MessageName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MessageDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid grid6;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label UserManualName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label UserManualDsName;

		public bool outofchina(double lng, double lat)
		{
			if (!(lng < 72.004) && !(lng > 137.8347) && !(lat < 0.8293))
			{
				return lat > 55.8271;
			}
			return true;
		}

		public double translat(double lng, double lat)
		{
			return -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + 0.1 * lng * lat + 0.2 * Math.Sqrt(Math.Abs(lng)) + (20.0 * Math.Sin(6.0 * lng * Math.PI) + 20.0 * Math.Sin(2.0 * lng * Math.PI)) * 2.0 / 3.0 + (20.0 * Math.Sin(lat * Math.PI) + 40.0 * Math.Sin(lat / 3.0 * Math.PI)) * 2.0 / 3.0 + (160.0 * Math.Sin(lat / 12.0 * Math.PI) + 320.0 * Math.Sin(lat * Math.PI / 30.0)) * 2.0 / 3.0;
		}

		public double translng(double lng, double lat)
		{
			return 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + 0.1 * lng * lat + 0.1 * Math.Sqrt(Math.Abs(lng)) + (20.0 * Math.Sin(6.0 * lng * Math.PI) + 20.0 * Math.Sin(2.0 * lng * Math.PI)) * 2.0 / 3.0 + (20.0 * Math.Sin(lng * Math.PI) + 40.0 * Math.Sin(lng / 3.0 * Math.PI)) * 2.0 / 3.0 + (150.0 * Math.Sin(lng / 12.0 * Math.PI) + 300.0 * Math.Sin(lng / 30.0 * Math.PI)) * 2.0 / 3.0;
		}

		public void wgs84togcj02(double lng, double lat)
		{
			if (outofchina(lng, lat))
			{
				tlng = lng;
				tlat = lat;
				return;
			}
			double num = translat(lng - 105.0, lat - 35.0);
			double num2 = translng(lng - 105.0, lat - 35.0);
			double d = lat / 180.0 * Math.PI;
			double num3 = Math.Sin(d);
			num3 = 1.0 - 0.006693421622965943 * num3 * num3;
			double num4 = Math.Sqrt(num3);
			num = num * 180.0 / (6335552.717000426 / (num3 * num4) * Math.PI);
			num2 = num2 * 180.0 / (6378245.0 / num4 * Math.Cos(d) * Math.PI);
			tlat = lat + num;
			tlng = lng + num2;
		}

		protected override void OnAppearing()
		{
			base.OnAppearing();
			GetCurrentPhonePos();
			GetCurrentMap();
		}

		public CenterPage()
		{
			InitializeComponent();
			GetCurrentPhonePos();
			RestImage.Source = "restdistance.png";
			if (App.CN)
			{
				RatedVoltageName.Text = "∂Ó∂®µÁ—π";
				SpeedLimitName.Text = "œﬁÀŸ";
				OverSpeedAlarmName.Text = "≥¨ÀŸ±®æØ";
				AutoLockName.Text = "◊‘∂ØÀ¯≥µ";
				AutoLockDsName.Text = "◊‘∂ØÀ¯≥µµƒ—” ±5-30√Î";
				VibAlarmName.Text = "’∂Ø±®æØ";
				VibAlarmDsName.Text = "…Ë÷√’∂Ø±®æØø™πÿ:ø™";
				WheelAlarmName.Text = "¬÷∂Ø±®æØ";
				WheelAlarmDsName.Text = "¬÷∂Ø±®æØø™πÿ";
				PhoneKeyName.Text = " ÷ª˙‘ø≥◊";
				PhoneKeyDsName.Text = " ÷ª˙‘ø≥◊¿∂—¿¡¨Ω”æ‡¿Î∏–”¶£∫";
				DistanceName.Text = "–– ªº«¬º";
				DistanceDsName.Text = "∏˜∂Œ–– ªµƒ¿Ô≥Ãƒ‹∫ƒπÏº£";
				MessageName.Text = "œ˚œ¢Õ®÷™";
				MessageDsName.Text = "÷–øÿ∑¢ÀÕµƒœ˚œ¢∫Õ∑˛ŒÒ∆˜œ¬∑¢µƒÕ®÷™";
				UserManualName.Text = "”√ªß ÷≤·";
				UserManualDsName.Text = "‘∂«˝øÿ÷∆∆˜µƒ≤Œ ˝Àµ√˜";
				ResetButton.Text = "÷–øÿ…˝º∂";
			}
			else
			{
				RatedVoltageName.Text = "RatedVoltage";
				SpeedLimitName.Text = "SpeedLimit";
				OverSpeedAlarmName.Text = "OverSpeedAlarm";
				ModelNmae.Text = "My FarDriver's Control System: No VCU Connected";
				BattSOCName.Text = "Rest SOC";
				RestDistanceName.Text = "Rest Distance";
				ModelSOCName.Text = "VCU SOC";
				ModelTypeName.Text = "VCU Model";
				ModelSNName.Text = "VCU SN";
				AutoLockName.Text = "AutoLock";
				AutoLockDsName.Text = "AutoLock Delay 5-30s";
				VibAlarmName.Text = "Vibration Alarm";
				VibAlarmDsName.Text = "Vibration Alarm:On";
				WheelAlarmName.Text = "Wheel Motion Alarm";
				WheelAlarmDsName.Text = "Wheel motion alarm";
				PhoneKeyName.Text = "Phone Key";
				PhoneKeyDsName.Text = "Phone Key bluetooth sensor distance: 1";
				DistanceName.Text = "Driving Record";
				DistanceDsName.Text = "Driving stage tracking record";
				MessageName.Text = "Message";
				MessageDsName.Text = "Messages of VCU and Server";
				UserManualName.Text = "Usermanual";
				UserManualDsName.Text = "User manual of fardriver controller";
				ResetButton.Text = "VCU Update";
			}
			ResetButton.IsEnabled = false;
			Device.StartTimer(TimeSpan.FromMilliseconds(400.0), delegate
			{
				try
				{
					if (!getmap)
					{
						GetCurrentMap();
					}
					if (App.NewVcuMessage < 10)
					{
						App.NewVcuMessage++;
					}
					else if (App.NewVcuMessage == 10)
					{
						App.NewVcuMessage++;
						KeyonImage.IsVisible = true;
						KeyOn.IsVisible = true;
						FDImage.IsVisible = true;
						AntiThief.IsVisible = true;
						ZuotongImage.IsVisible = true;
						Zuotong.IsVisible = true;
					}
					if (resetcount < 100)
					{
						resetcount++;
					}
					else
					{
						ResetButton.IsEnabled = true;
					}
					GetCurrentLoc();
					if (App.CN)
					{
						base.Title = "÷–øÿ";
					}
					else
					{
						base.Title = "VCU";
					}
					if (App.CAT1_Loggined)
					{
						if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
						{
							grid3.BackgroundColor = Color.LightBlue;
							grid4.BackgroundColor = Color.LightBlue;
							grid5.BackgroundColor = Color.LightBlue;
							grid6.BackgroundColor = Color.LightBlue;
						}
						else if (App.isConnected)
						{
							grid3.BackgroundColor = Color.LightCyan;
							grid4.BackgroundColor = Color.LightCyan;
							grid5.BackgroundColor = Color.LightCyan;
							grid6.BackgroundColor = Color.LightCyan;
						}
						else
						{
							grid3.BackgroundColor = Color.LightGreen;
							grid4.BackgroundColor = Color.LightGreen;
							grid5.BackgroundColor = Color.LightGreen;
							grid6.BackgroundColor = Color.LightGreen;
						}
					}
					else
					{
						grid3.BackgroundColor = Color.LightGray;
						grid4.BackgroundColor = Color.LightGray;
						grid5.BackgroundColor = Color.LightGray;
						grid6.BackgroundColor = Color.LightGray;
					}
					if (App.ReceivedVCUFrame && App.scanResult != null && App.scanResult.IsVcu)
					{
						BattSOC.Text = App.scanResult.vcu.battsoc + "%";
						switch (App.scanResult.vcu.battsoc / 10)
						{
						case 0:
							SOCImage.Source = "bat0.ico";
							break;
						case 1:
							SOCImage.Source = "bat1.ico";
							break;
						case 2:
							SOCImage.Source = "bat2.ico";
							break;
						case 3:
							SOCImage.Source = "bat3.ico";
							break;
						case 4:
							SOCImage.Source = "bat4.ico";
							break;
						case 5:
							SOCImage.Source = "bat5.ico";
							break;
						case 6:
							SOCImage.Source = "bat6.ico";
							break;
						case 7:
							SOCImage.Source = "bat7.ico";
							break;
						case 8:
							SOCImage.Source = "bat8.ico";
							break;
						case 9:
							SOCImage.Source = "bat9.ico";
							break;
						default:
							SOCImage.Source = "batfull.ico";
							break;
						}
						RestDistance.Text = App.scanResult.vcu.restdistance + "Km";
						SpeedLimit.IsToggled = App.scanResult.vcu.speedlimit;
						OverSpeedAlarm.IsToggled = App.scanResult.vcu.overspeedalarm;
						WheelAlarm.IsToggled = App.scanResult.vcu.wheelalarm;
						if (App.CN)
						{
							if (App.scanResult.vcu.lockdelay > 0)
							{
								AutoLockDsName.Text = "◊‘∂ØÀ¯≥µµƒ—” ±" + App.scanResult.vcu.lockdelay + "√Î";
							}
							else
							{
								AutoLockDsName.Text = "◊‘∂ØÀ¯≥µµƒ—” ±: πÿ";
							}
							VibAlarmDsName.Text = "…Ë÷√’∂Ø±®æØ:" + App.scanResult.vcu.vibalarm;
							if (App.scanResult.vcu.wheelalarm)
							{
								WheelAlarmDsName.Text = "¬÷∂Ø±®æØ:ø™";
							}
							else
							{
								WheelAlarmDsName.Text = "¬÷∂Ø±®æØ:πÿ";
							}
							if (App.scanResult.vcu.overspeedalarm)
							{
								OverSpeedAlarmDsName.Text = "≥¨ÀŸ±®æØ:ø™";
							}
							else
							{
								OverSpeedAlarmDsName.Text = "≥¨ÀŸ±®æØ:πÿ";
							}
							if (App.scanResult.vcu.speedlimit)
							{
								SpeedLimitDsName.Text = "œﬁÀŸ:ø™";
							}
							else
							{
								SpeedLimitDsName.Text = "œﬁÀŸ:πÿ";
							}
							RatedVoltageDsName.Text = $"∂Ó∂®µÁ—π: {App.scanResult.vcu.ratedvoltage}V";
							if (App.scanResult.vcu.keydistance > 0)
							{
								PhoneKeyDsName.Text = " ÷ª˙‘ø≥◊¿∂—¿¡¨Ω”æ‡¿Î∏–”¶£∫" + App.scanResult.vcu.keydistance;
							}
							else
							{
								PhoneKeyDsName.Text = " ÷ª˙‘ø≥◊¿∂—¿¡¨Ω”æ‡¿Î∏–”¶£∫πÿ";
							}
						}
						else
						{
							if (App.scanResult.vcu.lockdelay > 0)
							{
								AutoLockDsName.Text = "AutoLock Delay " + App.scanResult.vcu.lockdelay + "s";
							}
							else
							{
								AutoLockDsName.Text = "AutoLock Delay: Off";
							}
							VibAlarmDsName.Text = "Vibration Alarm:" + App.scanResult.vcu.vibalarm;
							if (App.scanResult.vcu.wheelalarm)
							{
								WheelAlarmDsName.Text = "Wheel Motion Alarm: On";
							}
							else
							{
								WheelAlarmDsName.Text = "Wheel Motion Alarm: Off";
							}
							if (App.scanResult.vcu.overspeedalarm)
							{
								OverSpeedAlarmDsName.Text = "OverSpeedAlarm: On";
							}
							else
							{
								OverSpeedAlarmDsName.Text = "OverSpeedAlarm: Off";
							}
							if (App.scanResult.vcu.speedlimit)
							{
								SpeedLimitDsName.Text = "SpeedLimit: On";
							}
							else
							{
								SpeedLimitDsName.Text = "SpeedLimit: Off";
							}
							RatedVoltageDsName.Text = $"RatedVoltage: {App.scanResult.vcu.ratedvoltage}V";
							if (App.scanResult.vcu.keydistance > 0)
							{
								PhoneKeyDsName.Text = "Phone Key bluetooth sensor distance: " + App.scanResult.vcu.keydistance;
							}
							else
							{
								PhoneKeyDsName.Text = "Phone Key bluetooth sensor distance: Off";
							}
						}
						switch (App.scanResult.vcu.alarmstat)
						{
						case 1:
							ModelNmae.TextColor = Color.Red;
							if (App.CN)
							{
								ModelNmae.Text = "Œ“µƒ‘∂«˝øÿ÷∆œµÕ≥:" + App.scanResult.Name + " µÁ≥ÿ∂œø™";
							}
							else
							{
								ModelNmae.Text = "My FarDriver's VCU System: " + App.scanResult.Name + " Battery Disconnect";
							}
							break;
						case 2:
							displaytime = 0;
							ModelNmae.TextColor = Color.Red;
							if (App.CN)
							{
								ModelNmae.Text = "Œ“µƒ‘∂«˝øÿ÷∆œµÕ≥:" + App.scanResult.Name + " ’∂Ø";
							}
							else
							{
								ModelNmae.Text = "My FarDriver's VCU System: " + App.scanResult.Name + " Shaking";
							}
							break;
						case 3:
							displaytime = 0;
							ModelNmae.TextColor = Color.Red;
							if (App.CN)
							{
								ModelNmae.Text = "Œ“µƒ‘∂«˝øÿ÷∆œµÕ≥:" + App.scanResult.Name + " µ¯¬‰";
							}
							else
							{
								ModelNmae.Text = "My FarDriver's VCU System: " + App.scanResult.Name + " Fell";
							}
							break;
						case 4:
							ModelNmae.TextColor = Color.Red;
							if (App.CN)
							{
								ModelNmae.Text = "Œ“µƒ‘∂«˝øÿ÷∆œµÕ≥:" + App.scanResult.Name + " ÀØ√ﬂ";
							}
							else
							{
								ModelNmae.Text = "My FarDriver's VCU System: " + App.scanResult.Name + " Sleep";
							}
							break;
						default:
							if (displaytime < 75)
							{
								displaytime++;
							}
							else
							{
								if (App.CN)
								{
									ModelNmae.Text = "Œ“µƒ‘∂«˝øÿ÷∆œµÕ≥:" + App.scanResult.Name;
								}
								else
								{
									ModelNmae.Text = "My FarDriver's VCU System: " + App.scanResult.Name;
								}
								ModelNmae.TextColor = Color.Black;
							}
							break;
						}
						if (App.scanResult.timeout < 5000)
						{
							App.scanResult.timeout++;
						}
						else
						{
							ModelNmae.TextColor = Color.Red;
							if (App.CN)
							{
								ModelNmae.Text += "¿Îœﬂ";
							}
							else
							{
								ModelNmae.Text += "Offline";
							}
						}
						ModelType.Text = App.scanResult.vcu.ModelType;
						try
						{
							Convert.ToInt16(ModelType.Text.Substring(16, 4));
						}
						catch (Exception)
						{
						}
						_ = ModelType.Text.Length;
						_ = 20;
						ModelSN.Text = App.scanResult.SerialNumber;
						ModelSOC.Text = App.scanResult.vcu.vcusoc + "%";
						if (App.scanResult.vcu.remoteon == 1)
						{
							if (App.CN)
							{
								KeyOnName.Text = "πÿ±’…Ë±∏";
							}
							else
							{
								KeyOnName.Text = "Turn Off";
							}
							KeyonImage.Source = "poweron.ico";
						}
						else
						{
							if (App.CN)
							{
								KeyOnName.Text = "ø™∆Ù…Ë±∏";
							}
							else
							{
								KeyOnName.Text = "Turn On";
							}
							KeyonImage.Source = "poweroff.ico";
						}
						if (App.scanResult.vcu.anti_theft == 1)
						{
							if (App.CN)
							{
								AntiThiefName.Text = "ø™À¯";
							}
							else
							{
								AntiThiefName.Text = "Unlock";
							}
							FDImage.Source = "lock.ico";
						}
						else
						{
							if (App.CN)
							{
								AntiThiefName.Text = "À¯≥µ";
							}
							else
							{
								AntiThiefName.Text = "Lock";
							}
							FDImage.Source = "unlock.ico";
						}
						if (App.CN)
						{
							ZuotongLockName.Text = "¥Úø™◊¯Õ∞";
						}
						else
						{
							ZuotongLockName.Text = "Open Seat";
						}
						ZuotongImage.Source = "zuotonglock.ico";
					}
				}
				catch (Exception ex2)
				{
					UserDialogs.Instance.Alert("Center " + ex2.ToString());
				}
				return true;
			});
		}

		private void GetCurrentMap()
		{
			try
			{
				if (App.pos == null)
				{
					return;
				}
				double num = cplng - App.pos.Longitude;
				if (num < 0.0)
				{
					num = 0.0 - num;
				}
				double num2 = cplat - App.pos.Latitude;
				if (num2 < 0.0)
				{
					num2 = 0.0 - num2;
				}
				if (num2 < num)
				{
					num2 = num;
				}
				if (num2 < 1E-05 && (App.scanResult == null || App.scanResult.vcu == null || (clng == App.scanResult.vcu.lng && clat == App.scanResult.vcu.lat)))
				{
					return;
				}
				wgs84togcj02(App.pos.Longitude, App.pos.Latitude);
				App.userlng = tlng;
				App.userlat = tlat;
				cplng = App.pos.Longitude;
				cplat = App.pos.Latitude;
				if (App.scanResult != null && App.scanResult.IsVcu)
				{
					if (App.scanResult.vcu.lat != 0.0 && App.scanResult.vcu.lng != 0.0)
					{
						clng = App.scanResult.vcu.lng;
						clat = App.scanResult.vcu.lat;
						wgs84togcj02(App.scanResult.vcu.lng, App.scanResult.vcu.lat);
						App.vculng = tlng;
						App.vculat = tlat;
					}
					else
					{
						App.vculng = tlng + 0.0001;
						App.vculat = tlat + 0.0001;
					}
				}
				else
				{
					App.vculng = tlng + 0.0001;
					App.vculat = tlat + 0.0001;
				}
				HtmlWebViewSource htmlWebViewSource = new HtmlWebViewSource();
				htmlWebViewSource.Html = "<html>\n<head>\n<meta charset = \"utf-8\" >\n<meta http - equiv = \"X-UA-Compatible\" content = \"IE=edge\" >\n<meta name = \"viewport\" content = \"initial-scale=1.0, user-scalable=no, width=device-width\" >\n<title> AMap JSAPI Loader</title>\n    <style>\n        html, body, #container\n        {\n        height: 100%;\n        width: 100%;\n        margin: 0;\n        }\n    </style>\n</head>\n<body>\n<div id=\"container\" tabindex=\"0\"></div>\n<script type=\"text/javascript\" src=\"https://webapi.amap.com/maps?v=1.4.15&key=704bffe66e6cefd4502224883cce8817\"></script>\n<script  type=\"text/javascript\">\nvar map;\n    map = new AMap.Map(\"container\", {\n      resizeEnable: true,\n      center: [" + App.vculng + "," + App.vculat + "],\n      zoom: 17\n    });\n    var markvcu=new AMap.Marker({position:map.getCenter(),icon:'http://182.92.233.85:6868/image/MAPICO.ico'});\n    var markuser=new AMap.Marker({position:map.getCenter(),icon:'http://182.92.233.85:6868/image/MAN.ico',offset: new AMap.Pixel(0, 0)});\n    markvcu.setMap(map);\n    markuser.setMap(map);\n    function callJS(lng,lat,userlng,userlat){\n        map.panTo([lng,lat]);\n        markvcu.setPosition([lng,lat]);\n        markuser.setPosition([userlng,userlat]);\n    }\n</script>\n</body>\n</html>";
				webView.Source = htmlWebViewSource;
				getmap = true;
			}
			catch (Exception)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("«Î ⁄”ËAPPµƒGPS»®œﬁ");
				}
				else
				{
					UserDialogs.Instance.Alert("Pleae Open GPS»®œﬁ");
				}
			}
		}

		private void GetCurrentLoc()
		{
			try
			{
				if (App.pos == null)
				{
					return;
				}
				double num = cplng - App.pos.Longitude;
				if (num < 0.0)
				{
					num = 0.0 - num;
				}
				double num2 = cplat - App.pos.Latitude;
				if (num2 < 0.0)
				{
					num2 = 0.0 - num2;
				}
				if (num2 < num)
				{
					num2 = num;
				}
				if (num2 < 1E-05 && (App.scanResult == null || App.scanResult.vcu == null || (clng == App.scanResult.vcu.lng && clat == App.scanResult.vcu.lat)))
				{
					return;
				}
				wgs84togcj02(App.pos.Longitude, App.pos.Latitude);
				App.userlng = tlng;
				App.userlat = tlat;
				cplng = App.pos.Longitude;
				cplat = App.pos.Latitude;
				if (App.scanResult != null && App.scanResult.IsVcu)
				{
					if (App.scanResult.vcu.lat != 0.0 && App.scanResult.vcu.lng != 0.0)
					{
						clng = App.scanResult.vcu.lng;
						clat = App.scanResult.vcu.lat;
						wgs84togcj02(App.scanResult.vcu.lng, App.scanResult.vcu.lat);
						App.vculng = tlng;
						App.vculat = tlat;
					}
					else
					{
						App.vculng = tlng + 0.0001;
						App.vculat = tlat + 0.0001;
					}
				}
				else
				{
					App.vculng = tlng + 0.0001;
					App.vculat = tlat + 0.0001;
				}
				if (App.vculng != vculng || App.vculat != vculat || App.userlng != lng || App.userlat != lat)
				{
					vculat = App.vculat;
					vculng = App.vculng;
					lng = App.userlng;
					lat = App.userlat;
					webView.Eval("javascript:callJS(" + vculng + "," + vculat + "," + lng + "," + lat + ")");
				}
			}
			catch (Exception)
			{
			}
		}

		private async void GetCurrentPhonePos()
		{
			try
			{
				App.pos = await Geolocation.GetLocationAsync(new GeolocationRequest(GeolocationAccuracy.Best));
				if (App.pos != null)
				{
				}
			}
			catch (Exception)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("«Î ⁄”ËAPPµƒGPS»®œﬁ");
				}
				else
				{
					UserDialogs.Instance.Alert("Pleae Open GPS»®œﬁ");
				}
			}
		}

		private async void MapButton_Clicked(object sender, EventArgs e)
		{
			await base.Navigation.PushModalAsync(new MapPage());
		}

		private void KEYON_Clicked(object sender, EventArgs e)
		{
			if (NoBindMessageID())
			{
				return;
			}
			try
			{
				if (App.scanResult.vcu.remoteon == 0)
				{
					MessagingCenter.Send(this, "SendMqtt", "KEY1");
				}
				else
				{
					MessagingCenter.Send(this, "SendMqtt", "KEY0");
				}
				KeyonImage.IsVisible = false;
				KeyOn.IsVisible = false;
				App.NewVcuMessage = 0;
			}
			catch (Exception)
			{
			}
		}

		private void AntiTheft_Clicked(object sender, EventArgs e)
		{
			if (NoBindMessageID())
			{
				return;
			}
			try
			{
				if (App.scanResult.vcu.anti_theft == 0)
				{
					MessagingCenter.Send(this, "SendMqtt", "FD1");
				}
				else
				{
					MessagingCenter.Send(this, "SendMqtt", "FD0");
				}
				FDImage.IsVisible = false;
				AntiThief.IsVisible = false;
				App.NewVcuMessage = 0;
			}
			catch (Exception)
			{
			}
		}

		private bool NoBindMessageID()
		{
			if (App.currentvcudeviceid == "00000000")
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("ªπŒ¥ªÒ»°µΩ∑˛ŒÒ∆˜∞Û∂®–≈œ¢£¨«Î…‘∫Û‘Ÿ ‘");
				}
				else
				{
					UserDialogs.Instance.Alert("Can not get Server bound messsage, please try again later.");
				}
				return true;
			}
			return false;
		}

		private void Zuotong_Clicked(object sender, EventArgs e)
		{
			if (!NoBindMessageID())
			{
				MessagingCenter.Send(this, "SendMqtt", "ZUOTONG1");
				ZuotongImage.IsVisible = false;
				Zuotong.IsVisible = false;
				App.NewVcuMessage = 0;
			}
		}

		private async void AutoLock_Clicked(object sender, EventArgs e)
		{
			if (NoBindMessageID())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Auto Lock Time:(seconds)", "cancel", "5", "6", "7", "8", "9", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "Disable")) : (await DisplayActionSheet("◊‘∂ØÀ¯≥µ ±º‰:(√Î)", "»°œ˚", "5", "6", "7", "8", "9", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "πÿ±’")));
			if (!(text != "cancel") || !(text != "»°œ˚"))
			{
				return;
			}
			try
			{
				MessagingCenter.Send(this, "SendMqtt", "LOCK" + (int)Convert.ToInt16(text));
			}
			catch (Exception)
			{
				MessagingCenter.Send(this, "SendMqtt", "LOCK0");
			}
		}

		private async void VibuAlarm_Clicked(object sender, EventArgs e)
		{
			if (NoBindMessageID())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Vibration sensitivity", "cancel", "1", "2", "3", "4", "5", "Disable")) : (await DisplayActionSheet("’∂Ø∏–”¶¡È√Ù∂»", "»°œ˚", "1", "2", "3", "4", "5", "πÿ±’")));
			if (!(text != "cancel") || !(text != "»°œ˚"))
			{
				return;
			}
			try
			{
				MessagingCenter.Send(this, "SendMqtt", "VIBU" + (int)Convert.ToInt16(text));
			}
			catch (Exception)
			{
				MessagingCenter.Send(this, "SendMqtt", "VIBU0");
			}
		}

		private async void PhoneKey_Clicked(object sender, EventArgs e)
		{
			if (NoBindMessageID())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Phone key sensing distance", "cancel", "1", "2", "3", "4", "5", "Disable")) : (await DisplayActionSheet(" ÷ª˙‘ø≥◊∏–”¶æ‡¿Î", "»°œ˚", "1", "2", "3", "4", "5", "πÿ±’")));
			if (text != "cancel" && text != "»°œ˚")
			{
				int num = 0;
				try
				{
					num = Convert.ToInt16(text);
				}
				catch (Exception)
				{
				}
				MessagingCenter.Send(this, "SendMqtt", "PHONEKEY" + num);
			}
		}

		private void WheelAlarm_Clicked(object sender, EventArgs e)
		{
			if (!NoBindMessageID())
			{
				string text = "1";
				if (WheelAlarm.IsToggled)
				{
					text = "0";
				}
				App.NewVcuMessage = 0;
				MessagingCenter.Send(this, "SendMqtt", "WHEEL" + text);
			}
		}

		private async void UserManual_Clicked(object sender, EventArgs e)
		{
			string uRL = ((!App.Link0.Contains("http")) ? "http://182.92.233.85:6868/FarDriverUserManual.pdf" : App.Link0);
			await base.Navigation.PushModalAsync(new MyWebPage(uRL));
		}

		private async void Message_Clicked(object sender, EventArgs e)
		{
		}

		private async void Distance_Clicked(object sender, EventArgs e)
		{
			if (App.scanResult != null && App.scanResult.vcu != null)
			{
				await base.Navigation.PushModalAsync(new RecordPage());
			}
		}

		private async void ResetButton_Clicked(object sender, EventArgs e)
		{
			if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("VCU Reset and check update", null, "Reset", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("∂‘VCU∏¥ŒªºÏ≤È∏¸–¬", null, "∏¥Œª", "»°œ˚")))
			{
				MessagingCenter.Send(this, "SendMqtt", "RESET");
				ResetButton.IsEnabled = false;
				resetcount = 0;
			}
		}

		private void SpeedLimit_Clicked(object sender, EventArgs e)
		{
			if (!NoBindMessageID())
			{
				string text = "1";
				if (SpeedLimit.IsToggled)
				{
					text = "0";
				}
				App.NewVcuMessage = 0;
				MessagingCenter.Send(this, "SendMqtt", "SPDL" + text);
			}
		}

		private void OverSpeedAlarm_Clicked(object sender, EventArgs e)
		{
			if (!NoBindMessageID())
			{
				string text = "1";
				if (OverSpeedAlarm.IsToggled)
				{
					text = "0";
				}
				App.NewVcuMessage = 0;
				MessagingCenter.Send(this, "SendMqtt", "OSPD" + text);
			}
		}

		private async void RatedVoltage_Clicked(object sender, EventArgs e)
		{
			if (NoBindMessageID())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("RatedVoltage", "cancel", "36V", "48V", "60V", "72V")) : (await DisplayActionSheet("∂Ó∂®µÁ—π", "»°œ˚", "36V", "48V", "60V", "72V")));
			if (!(text != "cancel") || !(text != "»°œ˚"))
			{
				return;
			}
			try
			{
				text = text.Substring(0, 2);
				MessagingCenter.Send(this, "SendMqtt", "DVOL" + (int)Convert.ToInt16(text));
			}
			catch (Exception)
			{
			}
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			if (ResourceLoader.IsEnabled && ResourceLoader.CanProvideContentFor(new ResourceLoader.ResourceLoadingQuery
			{
				AssemblyName = typeof(CenterPage).GetTypeInfo().Assembly.GetName(),
				ResourcePath = "CenterPage.xaml",
				Instance = this
			}))
			{
				__InitComponentRuntime();
				return;
			}
			if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
			{
				__InitComponentRuntime();
				return;
			}
			Image image;
			VisualDiagnostics.RegisterSourceInfo(image = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 11, 10);
			Label label;
			VisualDiagnostics.RegisterSourceInfo(label = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 12, 10);
			ColumnDefinition columnDefinition;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 15, 18);
			ColumnDefinition columnDefinition2;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition2 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 16, 18);
			ColumnDefinition columnDefinition3;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition3 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 20, 22);
			ColumnDefinition columnDefinition4;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition4 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 21, 22);
			Image image2;
			VisualDiagnostics.RegisterSourceInfo(image2 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 23, 18);
			RowDefinition rowDefinition;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 26, 26);
			RowDefinition rowDefinition2;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition2 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 27, 26);
			Label label2;
			VisualDiagnostics.RegisterSourceInfo(label2 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 29, 22);
			Label label3;
			VisualDiagnostics.RegisterSourceInfo(label3 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 30, 22);
			Grid grid;
			VisualDiagnostics.RegisterSourceInfo(grid = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 24, 18);
			Grid grid2;
			VisualDiagnostics.RegisterSourceInfo(grid2 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 18, 14);
			ColumnDefinition columnDefinition5;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition5 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 35, 22);
			ColumnDefinition columnDefinition6;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition6 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 36, 22);
			Image image3;
			VisualDiagnostics.RegisterSourceInfo(image3 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 38, 18);
			RowDefinition rowDefinition3;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition3 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 41, 26);
			RowDefinition rowDefinition4;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition4 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 42, 26);
			Label label4;
			VisualDiagnostics.RegisterSourceInfo(label4 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 44, 22);
			Label label5;
			VisualDiagnostics.RegisterSourceInfo(label5 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 45, 22);
			Grid grid3;
			VisualDiagnostics.RegisterSourceInfo(grid3 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 39, 18);
			Grid grid4;
			VisualDiagnostics.RegisterSourceInfo(grid4 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 33, 14);
			Grid grid5;
			VisualDiagnostics.RegisterSourceInfo(grid5 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 13, 10);
			ColumnDefinition columnDefinition7;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition7 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 51, 18);
			ColumnDefinition columnDefinition8;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition8 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 52, 18);
			RowDefinition rowDefinition5;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition5 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 56, 22);
			RowDefinition rowDefinition6;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition6 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 57, 22);
			RowDefinition rowDefinition7;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition7 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 58, 22);
			ColumnDefinition columnDefinition9;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition9 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 61, 22);
			ColumnDefinition columnDefinition10;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition10 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 62, 22);
			Label label6;
			VisualDiagnostics.RegisterSourceInfo(label6 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 64, 18);
			Label label7;
			VisualDiagnostics.RegisterSourceInfo(label7 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 65, 18);
			Label label8;
			VisualDiagnostics.RegisterSourceInfo(label8 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 66, 18);
			Label label9;
			VisualDiagnostics.RegisterSourceInfo(label9 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 67, 18);
			Label label10;
			VisualDiagnostics.RegisterSourceInfo(label10 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 68, 20);
			Label label11;
			VisualDiagnostics.RegisterSourceInfo(label11 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 69, 20);
			Grid grid6;
			VisualDiagnostics.RegisterSourceInfo(grid6 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 54, 14);
			Xamarin.Forms.Button button;
			VisualDiagnostics.RegisterSourceInfo(button = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 71, 14);
			Grid grid7;
			VisualDiagnostics.RegisterSourceInfo(grid7 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 49, 10);
			RowDefinition rowDefinition8;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition8 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 76, 18);
			RowDefinition rowDefinition9;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition9 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 77, 18);
			Xamarin.Forms.WebView webView;
			VisualDiagnostics.RegisterSourceInfo(webView = new Xamarin.Forms.WebView(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 79, 14);
			Xamarin.Forms.Button button2;
			VisualDiagnostics.RegisterSourceInfo(button2 = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 80, 14);
			ColumnDefinition columnDefinition11;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition11 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 83, 22);
			ColumnDefinition columnDefinition12;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition12 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 84, 22);
			ColumnDefinition columnDefinition13;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition13 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 85, 22);
			ColumnDefinition columnDefinition14;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition14 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 86, 22);
			Image image4;
			VisualDiagnostics.RegisterSourceInfo(image4 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 89, 18);
			Label label12;
			VisualDiagnostics.RegisterSourceInfo(label12 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 90, 18);
			Grid grid8;
			VisualDiagnostics.RegisterSourceInfo(grid8 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 88, 18);
			Xamarin.Forms.Button button3;
			VisualDiagnostics.RegisterSourceInfo(button3 = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 92, 18);
			Image image5;
			VisualDiagnostics.RegisterSourceInfo(image5 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 95, 18);
			Label label13;
			VisualDiagnostics.RegisterSourceInfo(label13 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 96, 18);
			Grid grid9;
			VisualDiagnostics.RegisterSourceInfo(grid9 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 94, 18);
			Xamarin.Forms.Button button4;
			VisualDiagnostics.RegisterSourceInfo(button4 = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 98, 18);
			Image image6;
			VisualDiagnostics.RegisterSourceInfo(image6 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 101, 18);
			Label label14;
			VisualDiagnostics.RegisterSourceInfo(label14 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 102, 18);
			Grid grid10;
			VisualDiagnostics.RegisterSourceInfo(grid10 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 100, 18);
			Xamarin.Forms.Button button5;
			VisualDiagnostics.RegisterSourceInfo(button5 = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 104, 18);
			Grid grid11;
			VisualDiagnostics.RegisterSourceInfo(grid11 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 81, 14);
			Grid grid12;
			VisualDiagnostics.RegisterSourceInfo(grid12 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 74, 10);
			ColumnDefinition columnDefinition15;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition15 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 110, 18);
			ColumnDefinition columnDefinition16;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition16 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 111, 18);
			ColumnDefinition columnDefinition17;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition17 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 112, 18);
			Image image7;
			VisualDiagnostics.RegisterSourceInfo(image7 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 114, 14);
			RowDefinition rowDefinition10;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition10 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 117, 22);
			RowDefinition rowDefinition11;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition11 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 118, 22);
			Label label15;
			VisualDiagnostics.RegisterSourceInfo(label15 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 120, 18);
			Label label16;
			VisualDiagnostics.RegisterSourceInfo(label16 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 121, 18);
			Grid grid13;
			VisualDiagnostics.RegisterSourceInfo(grid13 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 115, 14);
			Xamarin.Forms.Button button6;
			VisualDiagnostics.RegisterSourceInfo(button6 = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 123, 13);
			Label label17;
			VisualDiagnostics.RegisterSourceInfo(label17 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 124, 14);
			Grid grid14;
			VisualDiagnostics.RegisterSourceInfo(grid14 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 108, 10);
			ColumnDefinition columnDefinition18;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition18 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 128, 18);
			ColumnDefinition columnDefinition19;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition19 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 129, 18);
			ColumnDefinition columnDefinition20;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition20 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 130, 18);
			ColumnDefinition columnDefinition21;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition21 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 131, 18);
			Image image8;
			VisualDiagnostics.RegisterSourceInfo(image8 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 133, 14);
			RowDefinition rowDefinition12;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition12 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 136, 22);
			RowDefinition rowDefinition13;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition13 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 137, 22);
			Label label18;
			VisualDiagnostics.RegisterSourceInfo(label18 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 139, 18);
			Label label19;
			VisualDiagnostics.RegisterSourceInfo(label19 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 140, 18);
			Grid grid15;
			VisualDiagnostics.RegisterSourceInfo(grid15 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 134, 14);
			Xamarin.Forms.Switch obj;
			VisualDiagnostics.RegisterSourceInfo(obj = new Xamarin.Forms.Switch(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 142, 14);
			Xamarin.Forms.Button button7;
			VisualDiagnostics.RegisterSourceInfo(button7 = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 143, 14);
			Grid grid16;
			VisualDiagnostics.RegisterSourceInfo(grid16 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 126, 10);
			ColumnDefinition columnDefinition22;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition22 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 147, 18);
			ColumnDefinition columnDefinition23;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition23 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 148, 18);
			ColumnDefinition columnDefinition24;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition24 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 149, 18);
			ColumnDefinition columnDefinition25;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition25 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 150, 18);
			Image image9;
			VisualDiagnostics.RegisterSourceInfo(image9 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 152, 14);
			RowDefinition rowDefinition14;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition14 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 155, 22);
			RowDefinition rowDefinition15;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition15 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 156, 22);
			Label label20;
			VisualDiagnostics.RegisterSourceInfo(label20 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 158, 18);
			Label label21;
			VisualDiagnostics.RegisterSourceInfo(label21 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 159, 18);
			Grid grid17;
			VisualDiagnostics.RegisterSourceInfo(grid17 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 153, 14);
			Xamarin.Forms.Switch obj2;
			VisualDiagnostics.RegisterSourceInfo(obj2 = new Xamarin.Forms.Switch(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 161, 14);
			Xamarin.Forms.Button button8;
			VisualDiagnostics.RegisterSourceInfo(button8 = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 162, 14);
			Grid grid18;
			VisualDiagnostics.RegisterSourceInfo(grid18 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 145, 10);
			ColumnDefinition columnDefinition26;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition26 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 166, 18);
			ColumnDefinition columnDefinition27;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition27 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 167, 18);
			ColumnDefinition columnDefinition28;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition28 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 168, 18);
			Image image10;
			VisualDiagnostics.RegisterSourceInfo(image10 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 170, 14);
			RowDefinition rowDefinition16;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition16 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 173, 22);
			RowDefinition rowDefinition17;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition17 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 174, 22);
			Label label22;
			VisualDiagnostics.RegisterSourceInfo(label22 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 176, 18);
			Label label23;
			VisualDiagnostics.RegisterSourceInfo(label23 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 177, 18);
			Grid grid19;
			VisualDiagnostics.RegisterSourceInfo(grid19 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 171, 14);
			Xamarin.Forms.Button button9;
			VisualDiagnostics.RegisterSourceInfo(button9 = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 179, 13);
			Label label24;
			VisualDiagnostics.RegisterSourceInfo(label24 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 180, 14);
			Grid grid20;
			VisualDiagnostics.RegisterSourceInfo(grid20 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 164, 10);
			ColumnDefinition columnDefinition29;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition29 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 184, 18);
			ColumnDefinition columnDefinition30;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition30 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 185, 18);
			ColumnDefinition columnDefinition31;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition31 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 186, 18);
			Image image11;
			VisualDiagnostics.RegisterSourceInfo(image11 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 188, 14);
			RowDefinition rowDefinition18;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition18 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 191, 22);
			RowDefinition rowDefinition19;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition19 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 192, 22);
			Label label25;
			VisualDiagnostics.RegisterSourceInfo(label25 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 194, 18);
			Label label26;
			VisualDiagnostics.RegisterSourceInfo(label26 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 195, 18);
			Grid grid21;
			VisualDiagnostics.RegisterSourceInfo(grid21 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 189, 14);
			Xamarin.Forms.Button button10;
			VisualDiagnostics.RegisterSourceInfo(button10 = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 197, 13);
			Label label27;
			VisualDiagnostics.RegisterSourceInfo(label27 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 198, 14);
			Grid grid22;
			VisualDiagnostics.RegisterSourceInfo(grid22 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 182, 10);
			ColumnDefinition columnDefinition32;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition32 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 202, 18);
			ColumnDefinition columnDefinition33;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition33 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 203, 18);
			ColumnDefinition columnDefinition34;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition34 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 204, 18);
			ColumnDefinition columnDefinition35;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition35 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 205, 18);
			Image image12;
			VisualDiagnostics.RegisterSourceInfo(image12 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 207, 14);
			RowDefinition rowDefinition20;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition20 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 210, 22);
			RowDefinition rowDefinition21;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition21 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 211, 22);
			Label label28;
			VisualDiagnostics.RegisterSourceInfo(label28 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 213, 18);
			Label label29;
			VisualDiagnostics.RegisterSourceInfo(label29 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 214, 18);
			Grid grid23;
			VisualDiagnostics.RegisterSourceInfo(grid23 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 208, 14);
			Xamarin.Forms.Switch obj3;
			VisualDiagnostics.RegisterSourceInfo(obj3 = new Xamarin.Forms.Switch(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 216, 14);
			Xamarin.Forms.Button button11;
			VisualDiagnostics.RegisterSourceInfo(button11 = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 217, 14);
			Grid grid24;
			VisualDiagnostics.RegisterSourceInfo(grid24 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 200, 10);
			ColumnDefinition columnDefinition36;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition36 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 221, 18);
			ColumnDefinition columnDefinition37;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition37 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 222, 18);
			ColumnDefinition columnDefinition38;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition38 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 223, 18);
			Image image13;
			VisualDiagnostics.RegisterSourceInfo(image13 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 225, 14);
			RowDefinition rowDefinition22;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition22 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 228, 22);
			RowDefinition rowDefinition23;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition23 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 229, 22);
			Label label30;
			VisualDiagnostics.RegisterSourceInfo(label30 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 231, 18);
			Label label31;
			VisualDiagnostics.RegisterSourceInfo(label31 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 232, 18);
			Grid grid25;
			VisualDiagnostics.RegisterSourceInfo(grid25 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 226, 14);
			Xamarin.Forms.Button button12;
			VisualDiagnostics.RegisterSourceInfo(button12 = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 234, 13);
			Label label32;
			VisualDiagnostics.RegisterSourceInfo(label32 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 235, 14);
			Grid grid26;
			VisualDiagnostics.RegisterSourceInfo(grid26 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 219, 10);
			ColumnDefinition columnDefinition39;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition39 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 239, 18);
			ColumnDefinition columnDefinition40;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition40 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 240, 18);
			ColumnDefinition columnDefinition41;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition41 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 241, 18);
			Image image14;
			VisualDiagnostics.RegisterSourceInfo(image14 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 243, 14);
			RowDefinition rowDefinition24;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition24 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 246, 22);
			RowDefinition rowDefinition25;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition25 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 247, 22);
			Label label33;
			VisualDiagnostics.RegisterSourceInfo(label33 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 249, 18);
			Label label34;
			VisualDiagnostics.RegisterSourceInfo(label34 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 250, 18);
			Grid grid27;
			VisualDiagnostics.RegisterSourceInfo(grid27 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 244, 14);
			Xamarin.Forms.Button button13;
			VisualDiagnostics.RegisterSourceInfo(button13 = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 252, 13);
			Label label35;
			VisualDiagnostics.RegisterSourceInfo(label35 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 253, 14);
			Grid grid28;
			VisualDiagnostics.RegisterSourceInfo(grid28 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 237, 10);
			ColumnDefinition columnDefinition42;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition42 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 257, 18);
			ColumnDefinition columnDefinition43;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition43 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 258, 18);
			ColumnDefinition columnDefinition44;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition44 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 259, 18);
			Image image15;
			VisualDiagnostics.RegisterSourceInfo(image15 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 261, 14);
			RowDefinition rowDefinition26;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition26 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 264, 22);
			RowDefinition rowDefinition27;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition27 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 265, 22);
			Label label36;
			VisualDiagnostics.RegisterSourceInfo(label36 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 267, 18);
			Label label37;
			VisualDiagnostics.RegisterSourceInfo(label37 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 268, 18);
			Grid grid29;
			VisualDiagnostics.RegisterSourceInfo(grid29 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 262, 14);
			Xamarin.Forms.Button button14;
			VisualDiagnostics.RegisterSourceInfo(button14 = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 270, 13);
			Label label38;
			VisualDiagnostics.RegisterSourceInfo(label38 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 271, 14);
			Grid grid30;
			VisualDiagnostics.RegisterSourceInfo(grid30 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 255, 10);
			ColumnDefinition columnDefinition45;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition45 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 275, 18);
			ColumnDefinition columnDefinition46;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition46 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 276, 18);
			ColumnDefinition columnDefinition47;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition47 = new ColumnDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 277, 18);
			Image image16;
			VisualDiagnostics.RegisterSourceInfo(image16 = new Image(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 279, 14);
			RowDefinition rowDefinition28;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition28 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 282, 22);
			RowDefinition rowDefinition29;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition29 = new RowDefinition(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 283, 22);
			Label label39;
			VisualDiagnostics.RegisterSourceInfo(label39 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 285, 18);
			Label label40;
			VisualDiagnostics.RegisterSourceInfo(label40 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 286, 18);
			Grid grid31;
			VisualDiagnostics.RegisterSourceInfo(grid31 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 280, 14);
			Xamarin.Forms.Button button15;
			VisualDiagnostics.RegisterSourceInfo(button15 = new Xamarin.Forms.Button(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 288, 13);
			Label label41;
			VisualDiagnostics.RegisterSourceInfo(label41 = new Label(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 289, 14);
			Grid grid32;
			VisualDiagnostics.RegisterSourceInfo(grid32 = new Grid(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 273, 10);
			StackLayout stackLayout;
			VisualDiagnostics.RegisterSourceInfo(stackLayout = new StackLayout(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 10, 6);
			Xamarin.Forms.ScrollView scrollView;
			VisualDiagnostics.RegisterSourceInfo(scrollView = new Xamarin.Forms.ScrollView(), new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 9, 6);
			CenterPage centerPage;
			VisualDiagnostics.RegisterSourceInfo(centerPage = this, new Uri("CenterPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 2, 2);
			NameScope nameScope = (NameScope)(NameScope.GetNameScope(centerPage) ?? new NameScope());
			NameScope.SetNameScope(centerPage, nameScope);
			((INameScope)nameScope).RegisterName("ModelImage", (object)image);
			if (image.StyleId == null)
			{
				image.StyleId = "ModelImage";
			}
			((INameScope)nameScope).RegisterName("ModelNmae", (object)label);
			if (label.StyleId == null)
			{
				label.StyleId = "ModelNmae";
			}
			((INameScope)nameScope).RegisterName("SOCImage", (object)image2);
			if (image2.StyleId == null)
			{
				image2.StyleId = "SOCImage";
			}
			((INameScope)nameScope).RegisterName("BattSOC", (object)label2);
			if (label2.StyleId == null)
			{
				label2.StyleId = "BattSOC";
			}
			((INameScope)nameScope).RegisterName("BattSOCName", (object)label3);
			if (label3.StyleId == null)
			{
				label3.StyleId = "BattSOCName";
			}
			((INameScope)nameScope).RegisterName("RestImage", (object)image3);
			if (image3.StyleId == null)
			{
				image3.StyleId = "RestImage";
			}
			((INameScope)nameScope).RegisterName("RestDistance", (object)label4);
			if (label4.StyleId == null)
			{
				label4.StyleId = "RestDistance";
			}
			((INameScope)nameScope).RegisterName("RestDistanceName", (object)label5);
			if (label5.StyleId == null)
			{
				label5.StyleId = "RestDistanceName";
			}
			((INameScope)nameScope).RegisterName("ModelTypeName", (object)label6);
			if (label6.StyleId == null)
			{
				label6.StyleId = "ModelTypeName";
			}
			((INameScope)nameScope).RegisterName("ModelSNName", (object)label7);
			if (label7.StyleId == null)
			{
				label7.StyleId = "ModelSNName";
			}
			((INameScope)nameScope).RegisterName("ModelType", (object)label8);
			if (label8.StyleId == null)
			{
				label8.StyleId = "ModelType";
			}
			((INameScope)nameScope).RegisterName("ModelSN", (object)label9);
			if (label9.StyleId == null)
			{
				label9.StyleId = "ModelSN";
			}
			((INameScope)nameScope).RegisterName("ModelSOCName", (object)label10);
			if (label10.StyleId == null)
			{
				label10.StyleId = "ModelSOCName";
			}
			((INameScope)nameScope).RegisterName("ModelSOC", (object)label11);
			if (label11.StyleId == null)
			{
				label11.StyleId = "ModelSOC";
			}
			((INameScope)nameScope).RegisterName("ResetButton", (object)button);
			if (button.StyleId == null)
			{
				button.StyleId = "ResetButton";
			}
			((INameScope)nameScope).RegisterName("webView", (object)webView);
			if (webView.StyleId == null)
			{
				webView.StyleId = "webView";
			}
			((INameScope)nameScope).RegisterName("KeyonImage", (object)image4);
			if (image4.StyleId == null)
			{
				image4.StyleId = "KeyonImage";
			}
			((INameScope)nameScope).RegisterName("KeyOnName", (object)label12);
			if (label12.StyleId == null)
			{
				label12.StyleId = "KeyOnName";
			}
			((INameScope)nameScope).RegisterName("KeyOn", (object)button3);
			if (button3.StyleId == null)
			{
				button3.StyleId = "KeyOn";
			}
			((INameScope)nameScope).RegisterName("FDImage", (object)image5);
			if (image5.StyleId == null)
			{
				image5.StyleId = "FDImage";
			}
			((INameScope)nameScope).RegisterName("AntiThiefName", (object)label13);
			if (label13.StyleId == null)
			{
				label13.StyleId = "AntiThiefName";
			}
			((INameScope)nameScope).RegisterName("AntiThief", (object)button4);
			if (button4.StyleId == null)
			{
				button4.StyleId = "AntiThief";
			}
			((INameScope)nameScope).RegisterName("ZuotongImage", (object)image6);
			if (image6.StyleId == null)
			{
				image6.StyleId = "ZuotongImage";
			}
			((INameScope)nameScope).RegisterName("ZuotongLockName", (object)label14);
			if (label14.StyleId == null)
			{
				label14.StyleId = "ZuotongLockName";
			}
			((INameScope)nameScope).RegisterName("Zuotong", (object)button5);
			if (button5.StyleId == null)
			{
				button5.StyleId = "Zuotong";
			}
			((INameScope)nameScope).RegisterName("RatedVoltageName", (object)label15);
			if (label15.StyleId == null)
			{
				label15.StyleId = "RatedVoltageName";
			}
			((INameScope)nameScope).RegisterName("RatedVoltageDsName", (object)label16);
			if (label16.StyleId == null)
			{
				label16.StyleId = "RatedVoltageDsName";
			}
			((INameScope)nameScope).RegisterName("SpeedLimitName", (object)label18);
			if (label18.StyleId == null)
			{
				label18.StyleId = "SpeedLimitName";
			}
			((INameScope)nameScope).RegisterName("SpeedLimitDsName", (object)label19);
			if (label19.StyleId == null)
			{
				label19.StyleId = "SpeedLimitDsName";
			}
			((INameScope)nameScope).RegisterName("SpeedLimit", (object)obj);
			if (obj.StyleId == null)
			{
				obj.StyleId = "SpeedLimit";
			}
			((INameScope)nameScope).RegisterName("OverSpeedAlarmName", (object)label20);
			if (label20.StyleId == null)
			{
				label20.StyleId = "OverSpeedAlarmName";
			}
			((INameScope)nameScope).RegisterName("OverSpeedAlarmDsName", (object)label21);
			if (label21.StyleId == null)
			{
				label21.StyleId = "OverSpeedAlarmDsName";
			}
			((INameScope)nameScope).RegisterName("OverSpeedAlarm", (object)obj2);
			if (obj2.StyleId == null)
			{
				obj2.StyleId = "OverSpeedAlarm";
			}
			((INameScope)nameScope).RegisterName("AutoLockName", (object)label22);
			if (label22.StyleId == null)
			{
				label22.StyleId = "AutoLockName";
			}
			((INameScope)nameScope).RegisterName("AutoLockDsName", (object)label23);
			if (label23.StyleId == null)
			{
				label23.StyleId = "AutoLockDsName";
			}
			((INameScope)nameScope).RegisterName("grid1", (object)grid22);
			if (grid22.StyleId == null)
			{
				grid22.StyleId = "grid1";
			}
			((INameScope)nameScope).RegisterName("VibAlarmName", (object)label25);
			if (label25.StyleId == null)
			{
				label25.StyleId = "VibAlarmName";
			}
			((INameScope)nameScope).RegisterName("VibAlarmDsName", (object)label26);
			if (label26.StyleId == null)
			{
				label26.StyleId = "VibAlarmDsName";
			}
			((INameScope)nameScope).RegisterName("grid2", (object)grid24);
			if (grid24.StyleId == null)
			{
				grid24.StyleId = "grid2";
			}
			((INameScope)nameScope).RegisterName("WheelAlarmName", (object)label28);
			if (label28.StyleId == null)
			{
				label28.StyleId = "WheelAlarmName";
			}
			((INameScope)nameScope).RegisterName("WheelAlarmDsName", (object)label29);
			if (label29.StyleId == null)
			{
				label29.StyleId = "WheelAlarmDsName";
			}
			((INameScope)nameScope).RegisterName("WheelAlarm", (object)obj3);
			if (obj3.StyleId == null)
			{
				obj3.StyleId = "WheelAlarm";
			}
			((INameScope)nameScope).RegisterName("grid3", (object)grid26);
			if (grid26.StyleId == null)
			{
				grid26.StyleId = "grid3";
			}
			((INameScope)nameScope).RegisterName("PhoneKeyName", (object)label30);
			if (label30.StyleId == null)
			{
				label30.StyleId = "PhoneKeyName";
			}
			((INameScope)nameScope).RegisterName("PhoneKeyDsName", (object)label31);
			if (label31.StyleId == null)
			{
				label31.StyleId = "PhoneKeyDsName";
			}
			((INameScope)nameScope).RegisterName("grid4", (object)grid28);
			if (grid28.StyleId == null)
			{
				grid28.StyleId = "grid4";
			}
			((INameScope)nameScope).RegisterName("DistanceName", (object)label33);
			if (label33.StyleId == null)
			{
				label33.StyleId = "DistanceName";
			}
			((INameScope)nameScope).RegisterName("DistanceDsName", (object)label34);
			if (label34.StyleId == null)
			{
				label34.StyleId = "DistanceDsName";
			}
			((INameScope)nameScope).RegisterName("grid5", (object)grid30);
			if (grid30.StyleId == null)
			{
				grid30.StyleId = "grid5";
			}
			((INameScope)nameScope).RegisterName("MessageName", (object)label36);
			if (label36.StyleId == null)
			{
				label36.StyleId = "MessageName";
			}
			((INameScope)nameScope).RegisterName("MessageDsName", (object)label37);
			if (label37.StyleId == null)
			{
				label37.StyleId = "MessageDsName";
			}
			((INameScope)nameScope).RegisterName("grid6", (object)grid32);
			if (grid32.StyleId == null)
			{
				grid32.StyleId = "grid6";
			}
			((INameScope)nameScope).RegisterName("UserManualName", (object)label39);
			if (label39.StyleId == null)
			{
				label39.StyleId = "UserManualName";
			}
			((INameScope)nameScope).RegisterName("UserManualDsName", (object)label40);
			if (label40.StyleId == null)
			{
				label40.StyleId = "UserManualDsName";
			}
			ModelImage = image;
			ModelNmae = label;
			SOCImage = image2;
			BattSOC = label2;
			BattSOCName = label3;
			RestImage = image3;
			RestDistance = label4;
			RestDistanceName = label5;
			ModelTypeName = label6;
			ModelSNName = label7;
			ModelType = label8;
			ModelSN = label9;
			ModelSOCName = label10;
			ModelSOC = label11;
			ResetButton = button;
			this.webView = webView;
			KeyonImage = image4;
			KeyOnName = label12;
			KeyOn = button3;
			FDImage = image5;
			AntiThiefName = label13;
			AntiThief = button4;
			ZuotongImage = image6;
			ZuotongLockName = label14;
			Zuotong = button5;
			RatedVoltageName = label15;
			RatedVoltageDsName = label16;
			SpeedLimitName = label18;
			SpeedLimitDsName = label19;
			SpeedLimit = obj;
			OverSpeedAlarmName = label20;
			OverSpeedAlarmDsName = label21;
			OverSpeedAlarm = obj2;
			AutoLockName = label22;
			AutoLockDsName = label23;
			grid1 = grid22;
			VibAlarmName = label25;
			VibAlarmDsName = label26;
			this.grid2 = grid24;
			WheelAlarmName = label28;
			WheelAlarmDsName = label29;
			WheelAlarm = obj3;
			this.grid3 = grid26;
			PhoneKeyName = label30;
			PhoneKeyDsName = label31;
			this.grid4 = grid28;
			DistanceName = label33;
			DistanceDsName = label34;
			this.grid5 = grid30;
			MessageName = label36;
			MessageDsName = label37;
			this.grid6 = grid32;
			UserManualName = label39;
			UserManualDsName = label40;
			centerPage.SetValue(Xamarin.Forms.Page.TitleProperty, "Center");
			image.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("http://182.92.233.85:6868/image/TB1.jpg"));
			image.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 150.0);
			stackLayout.Children.Add(image);
			label.SetValue(Label.TextProperty, "Œ“µƒ‘∂«˝øÿ÷∆œµÕ≥: ÷–øÿŒ¥¡¨Ω”");
			label.SetValue(Label.TextColorProperty, Color.Red);
			label.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
			Type typeFromHandle = typeof(IProvideValueTarget);
			object[] array = new object[0 + 4];
			array[0] = label;
			array[1] = stackLayout;
			array[2] = scrollView;
			array[3] = centerPage;
			object service;
			xamlServiceProvider.Add(typeFromHandle, service = new SimpleValueTargetProvider(array, Label.FontSizeProperty, nameScope));
			xamlServiceProvider.Add(typeof(IReferenceProvider), service);
			Type typeFromHandle2 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
			xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(12, 96)));
			label.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider));
			label.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			stackLayout.Children.Add(label);
			grid5.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid5.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("30*"));
			((DefinitionCollection<ColumnDefinition>)grid5.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
			columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid5.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
			grid2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid2.SetValue(Grid.ColumnProperty, 0);
			columnDefinition3.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition3);
			columnDefinition4.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition4);
			image2.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("bat0.ico"));
			image2.SetValue(Grid.ColumnProperty, 0);
			grid2.Children.Add(image2);
			grid.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid.SetValue(Grid.ColumnProperty, 1);
			rowDefinition.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition);
			rowDefinition2.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition2);
			label2.SetValue(Label.TextProperty, " 0%");
			label2.SetValue(Label.TextColorProperty, Color.Black);
			label2.SetValue(Grid.RowProperty, 0);
			BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
			Type typeFromHandle3 = typeof(IProvideValueTarget);
			object[] array2 = new object[0 + 7];
			array2[0] = label2;
			array2[1] = grid;
			array2[2] = grid2;
			array2[3] = grid5;
			array2[4] = stackLayout;
			array2[5] = scrollView;
			array2[6] = centerPage;
			object service2;
			xamlServiceProvider2.Add(typeFromHandle3, service2 = new SimpleValueTargetProvider(array2, Label.FontSizeProperty, nameScope));
			xamlServiceProvider2.Add(typeof(IReferenceProvider), service2);
			Type typeFromHandle4 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
			xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver2.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(29, 87)));
			label2.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider2));
			label2.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid.Children.Add(label2);
			label3.SetValue(Label.TextProperty, " £”‡µÁ¡ø");
			label3.SetValue(Label.TextColorProperty, Color.Black);
			label3.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
			Type typeFromHandle5 = typeof(IProvideValueTarget);
			object[] array3 = new object[0 + 7];
			array3[0] = label3;
			array3[1] = grid;
			array3[2] = grid2;
			array3[3] = grid5;
			array3[4] = stackLayout;
			array3[5] = scrollView;
			array3[6] = centerPage;
			object service3;
			xamlServiceProvider3.Add(typeFromHandle5, service3 = new SimpleValueTargetProvider(array3, Label.FontSizeProperty, nameScope));
			xamlServiceProvider3.Add(typeof(IReferenceProvider), service3);
			Type typeFromHandle6 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
			xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver3.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(30, 92)));
			label3.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider3));
			label3.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid.Children.Add(label3);
			grid2.Children.Add(grid);
			grid5.Children.Add(grid2);
			grid4.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid4.SetValue(Grid.ColumnProperty, 1);
			columnDefinition5.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20*"));
			((DefinitionCollection<ColumnDefinition>)grid4.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition5);
			columnDefinition6.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid4.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition6);
			image3.SetValue(Grid.ColumnProperty, 0);
			grid4.Children.Add(image3);
			grid3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid3.SetValue(Grid.ColumnProperty, 1);
			rowDefinition3.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid3.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition3);
			rowDefinition4.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid3.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition4);
			label4.SetValue(Label.TextProperty, "---Km");
			label4.SetValue(Label.TextColorProperty, Color.Black);
			label4.SetValue(Grid.RowProperty, 0);
			BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
			Type typeFromHandle7 = typeof(IProvideValueTarget);
			object[] array4 = new object[0 + 7];
			array4[0] = label4;
			array4[1] = grid3;
			array4[2] = grid4;
			array4[3] = grid5;
			array4[4] = stackLayout;
			array4[5] = scrollView;
			array4[6] = centerPage;
			object service4;
			xamlServiceProvider4.Add(typeFromHandle7, service4 = new SimpleValueTargetProvider(array4, Label.FontSizeProperty, nameScope));
			xamlServiceProvider4.Add(typeof(IReferenceProvider), service4);
			Type typeFromHandle8 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
			xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver4.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(44, 94)));
			label4.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider4));
			label4.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid3.Children.Add(label4);
			label5.SetValue(Label.TextProperty, " £”‡¿Ô≥Ã");
			label5.SetValue(Label.TextColorProperty, Color.Black);
			label5.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty5 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
			Type typeFromHandle9 = typeof(IProvideValueTarget);
			object[] array5 = new object[0 + 7];
			array5[0] = label5;
			array5[1] = grid3;
			array5[2] = grid4;
			array5[3] = grid5;
			array5[4] = stackLayout;
			array5[5] = scrollView;
			array5[6] = centerPage;
			object service5;
			xamlServiceProvider5.Add(typeFromHandle9, service5 = new SimpleValueTargetProvider(array5, Label.FontSizeProperty, nameScope));
			xamlServiceProvider5.Add(typeof(IReferenceProvider), service5);
			Type typeFromHandle10 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
			xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver5.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(45, 97)));
			label5.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider5));
			label5.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid3.Children.Add(label5);
			grid4.Children.Add(grid3);
			grid5.Children.Add(grid4);
			stackLayout.Children.Add(grid5);
			columnDefinition7.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("75*"));
			((DefinitionCollection<ColumnDefinition>)grid7.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition7);
			columnDefinition8.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25*"));
			((DefinitionCollection<ColumnDefinition>)grid7.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition8);
			grid6.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid6.SetValue(Grid.ColumnProperty, 0);
			rowDefinition5.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition5);
			rowDefinition6.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition6);
			rowDefinition7.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition7);
			columnDefinition9.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("30*"));
			((DefinitionCollection<ColumnDefinition>)grid6.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition9);
			columnDefinition10.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("70*"));
			((DefinitionCollection<ColumnDefinition>)grid6.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition10);
			label6.SetValue(Label.TextProperty, "÷–øÿ–Õ∫≈");
			label6.SetValue(Label.TextColorProperty, Color.Black);
			label6.SetValue(Grid.ColumnProperty, 0);
			label6.SetValue(Grid.RowProperty, 0);
			BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
			Type typeFromHandle11 = typeof(IProvideValueTarget);
			object[] array6 = new object[0 + 6];
			array6[0] = label6;
			array6[1] = grid6;
			array6[2] = grid7;
			array6[3] = stackLayout;
			array6[4] = scrollView;
			array6[5] = centerPage;
			object service6;
			xamlServiceProvider6.Add(typeFromHandle11, service6 = new SimpleValueTargetProvider(array6, Label.FontSizeProperty, nameScope));
			xamlServiceProvider6.Add(typeof(IReferenceProvider), service6);
			Type typeFromHandle12 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
			xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver6.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(64, 106)));
			label6.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider6));
			label6.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid6.Children.Add(label6);
			label7.SetValue(Label.TextProperty, "÷–øÿ±‡∫≈");
			label7.SetValue(Label.TextColorProperty, Color.Black);
			label7.SetValue(Grid.ColumnProperty, 0);
			label7.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty7 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
			Type typeFromHandle13 = typeof(IProvideValueTarget);
			object[] array7 = new object[0 + 6];
			array7[0] = label7;
			array7[1] = grid6;
			array7[2] = grid7;
			array7[3] = stackLayout;
			array7[4] = scrollView;
			array7[5] = centerPage;
			object service7;
			xamlServiceProvider7.Add(typeFromHandle13, service7 = new SimpleValueTargetProvider(array7, Label.FontSizeProperty, nameScope));
			xamlServiceProvider7.Add(typeof(IReferenceProvider), service7);
			Type typeFromHandle14 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
			xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver7.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(65, 105)));
			label7.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider7));
			label7.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid6.Children.Add(label7);
			label8.SetValue(Label.TextProperty, "---------------------");
			label8.SetValue(Label.TextColorProperty, Color.Blue);
			label8.SetValue(Grid.ColumnProperty, 1);
			label8.SetValue(Grid.RowProperty, 0);
			BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
			Type typeFromHandle15 = typeof(IProvideValueTarget);
			object[] array8 = new object[0 + 6];
			array8[0] = label8;
			array8[1] = grid6;
			array8[2] = grid7;
			array8[3] = stackLayout;
			array8[4] = scrollView;
			array8[5] = centerPage;
			object service8;
			xamlServiceProvider8.Add(typeFromHandle15, service8 = new SimpleValueTargetProvider(array8, Label.FontSizeProperty, nameScope));
			xamlServiceProvider8.Add(typeof(IReferenceProvider), service8);
			Type typeFromHandle16 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
			xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver8.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(66, 119)));
			label8.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider8));
			label8.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid6.Children.Add(label8);
			label9.SetValue(Label.TextProperty, "--------------------");
			label9.SetValue(Label.TextColorProperty, Color.Blue);
			label9.SetValue(Grid.ColumnProperty, 1);
			label9.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty9 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter9 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
			Type typeFromHandle17 = typeof(IProvideValueTarget);
			object[] array9 = new object[0 + 6];
			array9[0] = label9;
			array9[1] = grid6;
			array9[2] = grid7;
			array9[3] = stackLayout;
			array9[4] = scrollView;
			array9[5] = centerPage;
			object service9;
			xamlServiceProvider9.Add(typeFromHandle17, service9 = new SimpleValueTargetProvider(array9, Label.FontSizeProperty, nameScope));
			xamlServiceProvider9.Add(typeof(IReferenceProvider), service9);
			Type typeFromHandle18 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
			xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver9.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(67, 116)));
			label9.SetValue(fontSizeProperty9, ((IExtendedTypeConverter)fontSizeConverter9).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider9));
			label9.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid6.Children.Add(label9);
			label10.SetValue(Label.TextProperty, "÷–øÿµÁ¡ø");
			label10.SetValue(Label.TextColorProperty, Color.Black);
			label10.SetValue(Grid.ColumnProperty, 0);
			label10.SetValue(Grid.RowProperty, 2);
			BindableProperty fontSizeProperty10 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter10 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
			Type typeFromHandle19 = typeof(IProvideValueTarget);
			object[] array10 = new object[0 + 6];
			array10[0] = label10;
			array10[1] = grid6;
			array10[2] = grid7;
			array10[3] = stackLayout;
			array10[4] = scrollView;
			array10[5] = centerPage;
			object service10;
			xamlServiceProvider10.Add(typeFromHandle19, service10 = new SimpleValueTargetProvider(array10, Label.FontSizeProperty, nameScope));
			xamlServiceProvider10.Add(typeof(IReferenceProvider), service10);
			Type typeFromHandle20 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
			xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver10.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(68, 108)));
			label10.SetValue(fontSizeProperty10, ((IExtendedTypeConverter)fontSizeConverter10).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider10));
			label10.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid6.Children.Add(label10);
			label11.SetValue(Label.TextProperty, "--%");
			label11.SetValue(Label.TextColorProperty, Color.Black);
			label11.SetValue(Grid.ColumnProperty, 1);
			label11.SetValue(Grid.RowProperty, 2);
			BindableProperty fontSizeProperty11 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter11 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
			Type typeFromHandle21 = typeof(IProvideValueTarget);
			object[] array11 = new object[0 + 6];
			array11[0] = label11;
			array11[1] = grid6;
			array11[2] = grid7;
			array11[3] = stackLayout;
			array11[4] = scrollView;
			array11[5] = centerPage;
			object service11;
			xamlServiceProvider11.Add(typeFromHandle21, service11 = new SimpleValueTargetProvider(array11, Label.FontSizeProperty, nameScope));
			xamlServiceProvider11.Add(typeof(IReferenceProvider), service11);
			Type typeFromHandle22 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
			xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver11.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(69, 103)));
			label11.SetValue(fontSizeProperty11, ((IExtendedTypeConverter)fontSizeConverter11).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider11));
			label11.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid6.Children.Add(label11);
			grid7.Children.Add(grid6);
			button.SetValue(Xamarin.Forms.Button.TextProperty, "VCU Update");
			button.Clicked += centerPage.ResetButton_Clicked;
			button.SetValue(Grid.ColumnProperty, 1);
			button.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button);
			stackLayout.Children.Add(grid7);
			rowDefinition8.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("40"));
			((DefinitionCollection<RowDefinition>)grid12.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition8);
			rowDefinition9.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("200"));
			((DefinitionCollection<RowDefinition>)grid12.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition9);
			webView.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 900.0);
			webView.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 200.0);
			webView.SetValue(Grid.RowProperty, 1);
			grid12.Children.Add(webView);
			button2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button2.Clicked += centerPage.MapButton_Clicked;
			button2.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 200.0);
			button2.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 900.0);
			button2.SetValue(Grid.RowProperty, 1);
			button2.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid12.Children.Add(button2);
			grid11.SetValue(Grid.RowProperty, 0);
			columnDefinition11.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20*"));
			((DefinitionCollection<ColumnDefinition>)grid11.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition11);
			columnDefinition12.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20*"));
			((DefinitionCollection<ColumnDefinition>)grid11.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition12);
			columnDefinition13.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20*"));
			((DefinitionCollection<ColumnDefinition>)grid11.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition13);
			columnDefinition14.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20*"));
			((DefinitionCollection<ColumnDefinition>)grid11.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition14);
			grid8.SetValue(Grid.ColumnProperty, 0);
			grid8.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.WhiteSmoke);
			image4.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("poweroff.ico"));
			image4.SetValue(Grid.RowProperty, 0);
			grid8.Children.Add(image4);
			label12.SetValue(Label.TextProperty, "‘∂≥Ãø™À¯");
			label12.SetValue(Grid.RowProperty, 1);
			label12.SetValue(Label.TextColorProperty, Color.Blue);
			label12.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			BindableProperty fontSizeProperty12 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter12 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
			Type typeFromHandle23 = typeof(IProvideValueTarget);
			object[] array12 = new object[0 + 7];
			array12[0] = label12;
			array12[1] = grid8;
			array12[2] = grid11;
			array12[3] = grid12;
			array12[4] = stackLayout;
			array12[5] = scrollView;
			array12[6] = centerPage;
			object service12;
			xamlServiceProvider12.Add(typeFromHandle23, service12 = new SimpleValueTargetProvider(array12, Label.FontSizeProperty, nameScope));
			xamlServiceProvider12.Add(typeof(IReferenceProvider), service12);
			Type typeFromHandle24 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
			xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver12.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(90, 120)));
			label12.SetValue(fontSizeProperty12, ((IExtendedTypeConverter)fontSizeConverter12).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider12));
			grid8.Children.Add(label12);
			grid11.Children.Add(grid8);
			button3.SetValue(Grid.ColumnProperty, 0);
			button3.Clicked += centerPage.KEYON_Clicked;
			button3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid11.Children.Add(button3);
			grid9.SetValue(Grid.ColumnProperty, 1);
			grid9.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.WhiteSmoke);
			image5.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("unlock.ico"));
			image5.SetValue(Grid.RowProperty, 0);
			grid9.Children.Add(image5);
			label13.SetValue(Label.TextProperty, "…Ë∑¿");
			label13.SetValue(Grid.RowProperty, 1);
			label13.SetValue(Label.TextColorProperty, Color.Blue);
			label13.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			BindableProperty fontSizeProperty13 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter13 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
			Type typeFromHandle25 = typeof(IProvideValueTarget);
			object[] array13 = new object[0 + 7];
			array13[0] = label13;
			array13[1] = grid9;
			array13[2] = grid11;
			array13[3] = grid12;
			array13[4] = stackLayout;
			array13[5] = scrollView;
			array13[6] = centerPage;
			object service13;
			xamlServiceProvider13.Add(typeFromHandle25, service13 = new SimpleValueTargetProvider(array13, Label.FontSizeProperty, nameScope));
			xamlServiceProvider13.Add(typeof(IReferenceProvider), service13);
			Type typeFromHandle26 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
			xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver13.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(96, 120)));
			label13.SetValue(fontSizeProperty13, ((IExtendedTypeConverter)fontSizeConverter13).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider13));
			grid9.Children.Add(label13);
			grid11.Children.Add(grid9);
			button4.SetValue(Grid.ColumnProperty, 1);
			button4.Clicked += centerPage.AntiTheft_Clicked;
			button4.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid11.Children.Add(button4);
			grid10.SetValue(Grid.ColumnProperty, 2);
			grid10.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.WhiteSmoke);
			image6.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("zuotonglock.ico"));
			image6.SetValue(Grid.RowProperty, 0);
			grid10.Children.Add(image6);
			label14.SetValue(Label.TextProperty, "◊¯Õ∞ø™À¯");
			label14.SetValue(Grid.RowProperty, 1);
			label14.SetValue(Label.TextColorProperty, Color.Blue);
			label14.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			BindableProperty fontSizeProperty14 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter14 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
			Type typeFromHandle27 = typeof(IProvideValueTarget);
			object[] array14 = new object[0 + 7];
			array14[0] = label14;
			array14[1] = grid10;
			array14[2] = grid11;
			array14[3] = grid12;
			array14[4] = stackLayout;
			array14[5] = scrollView;
			array14[6] = centerPage;
			object service14;
			xamlServiceProvider14.Add(typeFromHandle27, service14 = new SimpleValueTargetProvider(array14, Label.FontSizeProperty, nameScope));
			xamlServiceProvider14.Add(typeof(IReferenceProvider), service14);
			Type typeFromHandle28 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
			xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver14.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(102, 126)));
			label14.SetValue(fontSizeProperty14, ((IExtendedTypeConverter)fontSizeConverter14).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider14));
			grid10.Children.Add(label14);
			grid11.Children.Add(grid10);
			button5.SetValue(Grid.ColumnProperty, 2);
			button5.Clicked += centerPage.Zuotong_Clicked;
			button5.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid11.Children.Add(button5);
			grid12.Children.Add(grid11);
			stackLayout.Children.Add(grid12);
			grid14.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition15.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid14.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition15);
			columnDefinition16.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid14.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition16);
			columnDefinition17.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid14.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition17);
			image7.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("icon_about.png"));
			image7.SetValue(Grid.ColumnProperty, 0);
			grid14.Children.Add(image7);
			grid13.SetValue(Grid.ColumnProperty, 1);
			rowDefinition10.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid13.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition10);
			rowDefinition11.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid13.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition11);
			label15.SetValue(Label.TextProperty, "∂Ó∂®µÁ—π");
			label15.SetValue(Grid.RowProperty, 0);
			label15.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty15 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter15 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider15 = new XamlServiceProvider();
			Type typeFromHandle29 = typeof(IProvideValueTarget);
			object[] array15 = new object[0 + 6];
			array15[0] = label15;
			array15[1] = grid13;
			array15[2] = grid14;
			array15[3] = stackLayout;
			array15[4] = scrollView;
			array15[5] = centerPage;
			object service15;
			xamlServiceProvider15.Add(typeFromHandle29, service15 = new SimpleValueTargetProvider(array15, Label.FontSizeProperty, nameScope));
			xamlServiceProvider15.Add(typeof(IReferenceProvider), service15);
			Type typeFromHandle30 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver15 = new XmlNamespaceResolver();
			xmlNamespaceResolver15.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver15.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver15.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider15.Add(typeFromHandle30, new XamlTypeResolver(xmlNamespaceResolver15, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider15.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(120, 98)));
			label15.SetValue(fontSizeProperty15, ((IExtendedTypeConverter)fontSizeConverter15).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider15));
			label15.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid13.Children.Add(label15);
			label16.SetValue(Label.TextProperty, "∂Ó∂®µÁ—π");
			label16.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty16 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter16 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider16 = new XamlServiceProvider();
			Type typeFromHandle31 = typeof(IProvideValueTarget);
			object[] array16 = new object[0 + 6];
			array16[0] = label16;
			array16[1] = grid13;
			array16[2] = grid14;
			array16[3] = stackLayout;
			array16[4] = scrollView;
			array16[5] = centerPage;
			object service16;
			xamlServiceProvider16.Add(typeFromHandle31, service16 = new SimpleValueTargetProvider(array16, Label.FontSizeProperty, nameScope));
			xamlServiceProvider16.Add(typeof(IReferenceProvider), service16);
			Type typeFromHandle32 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver16 = new XmlNamespaceResolver();
			xmlNamespaceResolver16.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver16.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver16.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider16.Add(typeFromHandle32, new XamlTypeResolver(xmlNamespaceResolver16, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider16.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(121, 77)));
			label16.SetValue(fontSizeProperty16, ((IExtendedTypeConverter)fontSizeConverter16).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider16));
			label16.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid13.Children.Add(label16);
			grid14.Children.Add(grid13);
			button6.SetValue(Grid.ColumnProperty, 1);
			button6.Clicked += centerPage.RatedVoltage_Clicked;
			button6.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid14.Children.Add(button6);
			label17.SetValue(Label.TextProperty, ">");
			BindableProperty fontSizeProperty17 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter17 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider17 = new XamlServiceProvider();
			Type typeFromHandle33 = typeof(IProvideValueTarget);
			object[] array17 = new object[0 + 5];
			array17[0] = label17;
			array17[1] = grid14;
			array17[2] = stackLayout;
			array17[3] = scrollView;
			array17[4] = centerPage;
			object service17;
			xamlServiceProvider17.Add(typeFromHandle33, service17 = new SimpleValueTargetProvider(array17, Label.FontSizeProperty, nameScope));
			xamlServiceProvider17.Add(typeof(IReferenceProvider), service17);
			Type typeFromHandle34 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver17 = new XmlNamespaceResolver();
			xmlNamespaceResolver17.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver17.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver17.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider17.Add(typeFromHandle34, new XamlTypeResolver(xmlNamespaceResolver17, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider17.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(124, 29)));
			label17.SetValue(fontSizeProperty17, ((IExtendedTypeConverter)fontSizeConverter17).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider17));
			label17.SetValue(Grid.ColumnProperty, 2);
			label17.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid14.Children.Add(label17);
			stackLayout.Children.Add(grid14);
			grid16.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition18.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid16.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition18);
			columnDefinition19.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("75*"));
			((DefinitionCollection<ColumnDefinition>)grid16.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition19);
			columnDefinition20.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid16.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition20);
			columnDefinition21.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid16.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition21);
			image8.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("icon_about.png"));
			image8.SetValue(Grid.ColumnProperty, 0);
			grid16.Children.Add(image8);
			grid15.SetValue(Grid.ColumnProperty, 1);
			rowDefinition12.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid15.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition12);
			rowDefinition13.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid15.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition13);
			label18.SetValue(Label.TextProperty, "œﬁÀŸ");
			label18.SetValue(Grid.RowProperty, 0);
			label18.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty18 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter18 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider18 = new XamlServiceProvider();
			Type typeFromHandle35 = typeof(IProvideValueTarget);
			object[] array18 = new object[0 + 6];
			array18[0] = label18;
			array18[1] = grid15;
			array18[2] = grid16;
			array18[3] = stackLayout;
			array18[4] = scrollView;
			array18[5] = centerPage;
			object service18;
			xamlServiceProvider18.Add(typeFromHandle35, service18 = new SimpleValueTargetProvider(array18, Label.FontSizeProperty, nameScope));
			xamlServiceProvider18.Add(typeof(IReferenceProvider), service18);
			Type typeFromHandle36 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver18 = new XmlNamespaceResolver();
			xmlNamespaceResolver18.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver18.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver18.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider18.Add(typeFromHandle36, new XamlTypeResolver(xmlNamespaceResolver18, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider18.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(139, 94)));
			label18.SetValue(fontSizeProperty18, ((IExtendedTypeConverter)fontSizeConverter18).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider18));
			label18.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid15.Children.Add(label18);
			label19.SetValue(Label.TextProperty, "œﬁÀŸø™πÿ◊¥Ã¨");
			label19.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty19 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter19 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider19 = new XamlServiceProvider();
			Type typeFromHandle37 = typeof(IProvideValueTarget);
			object[] array19 = new object[0 + 6];
			array19[0] = label19;
			array19[1] = grid15;
			array19[2] = grid16;
			array19[3] = stackLayout;
			array19[4] = scrollView;
			array19[5] = centerPage;
			object service19;
			xamlServiceProvider19.Add(typeFromHandle37, service19 = new SimpleValueTargetProvider(array19, Label.FontSizeProperty, nameScope));
			xamlServiceProvider19.Add(typeof(IReferenceProvider), service19);
			Type typeFromHandle38 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver19 = new XmlNamespaceResolver();
			xmlNamespaceResolver19.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver19.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver19.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider19.Add(typeFromHandle38, new XamlTypeResolver(xmlNamespaceResolver19, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider19.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(140, 78)));
			label19.SetValue(fontSizeProperty19, ((IExtendedTypeConverter)fontSizeConverter19).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider19));
			label19.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid15.Children.Add(label19);
			grid16.Children.Add(grid15);
			obj.SetValue(Grid.ColumnProperty, 2);
			obj.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(obj);
			button7.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button7.Clicked += centerPage.SpeedLimit_Clicked;
			button7.SetValue(Grid.ColumnProperty, 2);
			button7.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button7);
			stackLayout.Children.Add(grid16);
			grid18.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition22.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid18.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition22);
			columnDefinition23.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("75*"));
			((DefinitionCollection<ColumnDefinition>)grid18.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition23);
			columnDefinition24.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid18.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition24);
			columnDefinition25.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid18.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition25);
			image9.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("icon_about.png"));
			image9.SetValue(Grid.ColumnProperty, 0);
			grid18.Children.Add(image9);
			grid17.SetValue(Grid.ColumnProperty, 1);
			rowDefinition14.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid17.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition14);
			rowDefinition15.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid17.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition15);
			label20.SetValue(Label.TextProperty, "≥¨ÀŸ±®æØ");
			label20.SetValue(Grid.RowProperty, 0);
			label20.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty20 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter20 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider20 = new XamlServiceProvider();
			Type typeFromHandle39 = typeof(IProvideValueTarget);
			object[] array20 = new object[0 + 6];
			array20[0] = label20;
			array20[1] = grid17;
			array20[2] = grid18;
			array20[3] = stackLayout;
			array20[4] = scrollView;
			array20[5] = centerPage;
			object service20;
			xamlServiceProvider20.Add(typeFromHandle39, service20 = new SimpleValueTargetProvider(array20, Label.FontSizeProperty, nameScope));
			xamlServiceProvider20.Add(typeof(IReferenceProvider), service20);
			Type typeFromHandle40 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver20 = new XmlNamespaceResolver();
			xmlNamespaceResolver20.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver20.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver20.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider20.Add(typeFromHandle40, new XamlTypeResolver(xmlNamespaceResolver20, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider20.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(158, 100)));
			label20.SetValue(fontSizeProperty20, ((IExtendedTypeConverter)fontSizeConverter20).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider20));
			label20.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid17.Children.Add(label20);
			label21.SetValue(Label.TextProperty, "≥¨ÀŸ±®æØ◊¥Ã¨");
			label21.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty21 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter21 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider21 = new XamlServiceProvider();
			Type typeFromHandle41 = typeof(IProvideValueTarget);
			object[] array21 = new object[0 + 6];
			array21[0] = label21;
			array21[1] = grid17;
			array21[2] = grid18;
			array21[3] = stackLayout;
			array21[4] = scrollView;
			array21[5] = centerPage;
			object service21;
			xamlServiceProvider21.Add(typeFromHandle41, service21 = new SimpleValueTargetProvider(array21, Label.FontSizeProperty, nameScope));
			xamlServiceProvider21.Add(typeof(IReferenceProvider), service21);
			Type typeFromHandle42 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver21 = new XmlNamespaceResolver();
			xmlNamespaceResolver21.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver21.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver21.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider21.Add(typeFromHandle42, new XamlTypeResolver(xmlNamespaceResolver21, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider21.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(159, 82)));
			label21.SetValue(fontSizeProperty21, ((IExtendedTypeConverter)fontSizeConverter21).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider21));
			label21.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid17.Children.Add(label21);
			grid18.Children.Add(grid17);
			obj2.SetValue(Grid.ColumnProperty, 2);
			obj2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(obj2);
			button8.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button8.Clicked += centerPage.OverSpeedAlarm_Clicked;
			button8.SetValue(Grid.ColumnProperty, 2);
			button8.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button8);
			stackLayout.Children.Add(grid18);
			grid20.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition26.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid20.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition26);
			columnDefinition27.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid20.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition27);
			columnDefinition28.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid20.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition28);
			image10.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("icon_about.png"));
			image10.SetValue(Grid.ColumnProperty, 0);
			grid20.Children.Add(image10);
			grid19.SetValue(Grid.ColumnProperty, 1);
			rowDefinition16.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid19.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition16);
			rowDefinition17.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid19.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition17);
			label22.SetValue(Label.TextProperty, "◊‘∂ØÀ¯≥µ");
			label22.SetValue(Grid.RowProperty, 0);
			label22.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty22 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter22 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider22 = new XamlServiceProvider();
			Type typeFromHandle43 = typeof(IProvideValueTarget);
			object[] array22 = new object[0 + 6];
			array22[0] = label22;
			array22[1] = grid19;
			array22[2] = grid20;
			array22[3] = stackLayout;
			array22[4] = scrollView;
			array22[5] = centerPage;
			object service22;
			xamlServiceProvider22.Add(typeFromHandle43, service22 = new SimpleValueTargetProvider(array22, Label.FontSizeProperty, nameScope));
			xamlServiceProvider22.Add(typeof(IReferenceProvider), service22);
			Type typeFromHandle44 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver22 = new XmlNamespaceResolver();
			xmlNamespaceResolver22.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver22.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver22.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider22.Add(typeFromHandle44, new XamlTypeResolver(xmlNamespaceResolver22, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider22.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(176, 94)));
			label22.SetValue(fontSizeProperty22, ((IExtendedTypeConverter)fontSizeConverter22).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider22));
			label22.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid19.Children.Add(label22);
			label23.SetValue(Label.TextProperty, "…Ë÷√◊‘∂ØÀ¯≥µµƒ—” ±5-30√Î");
			label23.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty23 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter23 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider23 = new XamlServiceProvider();
			Type typeFromHandle45 = typeof(IProvideValueTarget);
			object[] array23 = new object[0 + 6];
			array23[0] = label23;
			array23[1] = grid19;
			array23[2] = grid20;
			array23[3] = stackLayout;
			array23[4] = scrollView;
			array23[5] = centerPage;
			object service23;
			xamlServiceProvider23.Add(typeFromHandle45, service23 = new SimpleValueTargetProvider(array23, Label.FontSizeProperty, nameScope));
			xamlServiceProvider23.Add(typeof(IReferenceProvider), service23);
			Type typeFromHandle46 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver23 = new XmlNamespaceResolver();
			xmlNamespaceResolver23.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver23.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver23.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider23.Add(typeFromHandle46, new XamlTypeResolver(xmlNamespaceResolver23, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider23.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(177, 83)));
			label23.SetValue(fontSizeProperty23, ((IExtendedTypeConverter)fontSizeConverter23).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider23));
			label23.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid19.Children.Add(label23);
			grid20.Children.Add(grid19);
			button9.SetValue(Grid.ColumnProperty, 1);
			button9.Clicked += centerPage.AutoLock_Clicked;
			button9.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid20.Children.Add(button9);
			label24.SetValue(Label.TextProperty, ">");
			BindableProperty fontSizeProperty24 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter24 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider24 = new XamlServiceProvider();
			Type typeFromHandle47 = typeof(IProvideValueTarget);
			object[] array24 = new object[0 + 5];
			array24[0] = label24;
			array24[1] = grid20;
			array24[2] = stackLayout;
			array24[3] = scrollView;
			array24[4] = centerPage;
			object service24;
			xamlServiceProvider24.Add(typeFromHandle47, service24 = new SimpleValueTargetProvider(array24, Label.FontSizeProperty, nameScope));
			xamlServiceProvider24.Add(typeof(IReferenceProvider), service24);
			Type typeFromHandle48 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver24 = new XmlNamespaceResolver();
			xmlNamespaceResolver24.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver24.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver24.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider24.Add(typeFromHandle48, new XamlTypeResolver(xmlNamespaceResolver24, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider24.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(180, 29)));
			label24.SetValue(fontSizeProperty24, ((IExtendedTypeConverter)fontSizeConverter24).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider24));
			label24.SetValue(Grid.ColumnProperty, 2);
			label24.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid20.Children.Add(label24);
			stackLayout.Children.Add(grid20);
			grid22.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition29.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid22.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition29);
			columnDefinition30.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid22.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition30);
			columnDefinition31.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid22.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition31);
			image11.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("icon_about.png"));
			image11.SetValue(Grid.ColumnProperty, 0);
			grid22.Children.Add(image11);
			grid21.SetValue(Grid.ColumnProperty, 1);
			rowDefinition18.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid21.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition18);
			rowDefinition19.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid21.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition19);
			label25.SetValue(Label.TextProperty, "’∂Ø±®æØ");
			label25.SetValue(Grid.RowProperty, 0);
			label25.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty25 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter25 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider25 = new XamlServiceProvider();
			Type typeFromHandle49 = typeof(IProvideValueTarget);
			object[] array25 = new object[0 + 6];
			array25[0] = label25;
			array25[1] = grid21;
			array25[2] = grid22;
			array25[3] = stackLayout;
			array25[4] = scrollView;
			array25[5] = centerPage;
			object service25;
			xamlServiceProvider25.Add(typeFromHandle49, service25 = new SimpleValueTargetProvider(array25, Label.FontSizeProperty, nameScope));
			xamlServiceProvider25.Add(typeof(IReferenceProvider), service25);
			Type typeFromHandle50 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver25 = new XmlNamespaceResolver();
			xmlNamespaceResolver25.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver25.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver25.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider25.Add(typeFromHandle50, new XamlTypeResolver(xmlNamespaceResolver25, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider25.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(194, 93)));
			label25.SetValue(fontSizeProperty25, ((IExtendedTypeConverter)fontSizeConverter25).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider25));
			label25.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid21.Children.Add(label25);
			label26.SetValue(Label.TextProperty, "…Ë÷√’∂Ø±®æØø™πÿ:ø™");
			label26.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty26 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter26 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider26 = new XamlServiceProvider();
			Type typeFromHandle51 = typeof(IProvideValueTarget);
			object[] array26 = new object[0 + 6];
			array26[0] = label26;
			array26[1] = grid21;
			array26[2] = grid22;
			array26[3] = stackLayout;
			array26[4] = scrollView;
			array26[5] = centerPage;
			object service26;
			xamlServiceProvider26.Add(typeFromHandle51, service26 = new SimpleValueTargetProvider(array26, Label.FontSizeProperty, nameScope));
			xamlServiceProvider26.Add(typeof(IReferenceProvider), service26);
			Type typeFromHandle52 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver26 = new XmlNamespaceResolver();
			xmlNamespaceResolver26.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver26.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver26.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider26.Add(typeFromHandle52, new XamlTypeResolver(xmlNamespaceResolver26, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider26.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(195, 79)));
			label26.SetValue(fontSizeProperty26, ((IExtendedTypeConverter)fontSizeConverter26).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider26));
			label26.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid21.Children.Add(label26);
			grid22.Children.Add(grid21);
			button10.SetValue(Grid.ColumnProperty, 1);
			button10.Clicked += centerPage.VibuAlarm_Clicked;
			button10.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid22.Children.Add(button10);
			label27.SetValue(Label.TextProperty, ">");
			BindableProperty fontSizeProperty27 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter27 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider27 = new XamlServiceProvider();
			Type typeFromHandle53 = typeof(IProvideValueTarget);
			object[] array27 = new object[0 + 5];
			array27[0] = label27;
			array27[1] = grid22;
			array27[2] = stackLayout;
			array27[3] = scrollView;
			array27[4] = centerPage;
			object service27;
			xamlServiceProvider27.Add(typeFromHandle53, service27 = new SimpleValueTargetProvider(array27, Label.FontSizeProperty, nameScope));
			xamlServiceProvider27.Add(typeof(IReferenceProvider), service27);
			Type typeFromHandle54 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver27 = new XmlNamespaceResolver();
			xmlNamespaceResolver27.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver27.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver27.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider27.Add(typeFromHandle54, new XamlTypeResolver(xmlNamespaceResolver27, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider27.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(198, 30)));
			label27.SetValue(fontSizeProperty27, ((IExtendedTypeConverter)fontSizeConverter27).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider27));
			label27.SetValue(Grid.ColumnProperty, 2);
			label27.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid22.Children.Add(label27);
			stackLayout.Children.Add(grid22);
			grid24.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition32.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid24.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition32);
			columnDefinition33.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("75*"));
			((DefinitionCollection<ColumnDefinition>)grid24.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition33);
			columnDefinition34.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid24.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition34);
			columnDefinition35.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid24.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition35);
			image12.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("icon_about.png"));
			image12.SetValue(Grid.ColumnProperty, 0);
			grid24.Children.Add(image12);
			grid23.SetValue(Grid.ColumnProperty, 1);
			rowDefinition20.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid23.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition20);
			rowDefinition21.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid23.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition21);
			label28.SetValue(Label.TextProperty, "¬÷∂Ø±®æØ");
			label28.SetValue(Grid.RowProperty, 0);
			label28.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty28 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter28 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider28 = new XamlServiceProvider();
			Type typeFromHandle55 = typeof(IProvideValueTarget);
			object[] array28 = new object[0 + 6];
			array28[0] = label28;
			array28[1] = grid23;
			array28[2] = grid24;
			array28[3] = stackLayout;
			array28[4] = scrollView;
			array28[5] = centerPage;
			object service28;
			xamlServiceProvider28.Add(typeFromHandle55, service28 = new SimpleValueTargetProvider(array28, Label.FontSizeProperty, nameScope));
			xamlServiceProvider28.Add(typeof(IReferenceProvider), service28);
			Type typeFromHandle56 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver28 = new XmlNamespaceResolver();
			xmlNamespaceResolver28.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver28.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver28.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider28.Add(typeFromHandle56, new XamlTypeResolver(xmlNamespaceResolver28, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider28.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(213, 96)));
			label28.SetValue(fontSizeProperty28, ((IExtendedTypeConverter)fontSizeConverter28).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider28));
			label28.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid23.Children.Add(label28);
			label29.SetValue(Label.TextProperty, "¬÷∂Ø±®æØø™πÿ◊¥Ã¨");
			label29.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty29 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter29 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider29 = new XamlServiceProvider();
			Type typeFromHandle57 = typeof(IProvideValueTarget);
			object[] array29 = new object[0 + 6];
			array29[0] = label29;
			array29[1] = grid23;
			array29[2] = grid24;
			array29[3] = stackLayout;
			array29[4] = scrollView;
			array29[5] = centerPage;
			object service29;
			xamlServiceProvider29.Add(typeFromHandle57, service29 = new SimpleValueTargetProvider(array29, Label.FontSizeProperty, nameScope));
			xamlServiceProvider29.Add(typeof(IReferenceProvider), service29);
			Type typeFromHandle58 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver29 = new XmlNamespaceResolver();
			xmlNamespaceResolver29.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver29.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver29.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider29.Add(typeFromHandle58, new XamlTypeResolver(xmlNamespaceResolver29, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider29.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(214, 80)));
			label29.SetValue(fontSizeProperty29, ((IExtendedTypeConverter)fontSizeConverter29).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider29));
			label29.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid23.Children.Add(label29);
			grid24.Children.Add(grid23);
			obj3.SetValue(Grid.ColumnProperty, 2);
			obj3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid24.Children.Add(obj3);
			button11.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button11.Clicked += centerPage.WheelAlarm_Clicked;
			button11.SetValue(Grid.ColumnProperty, 2);
			button11.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid24.Children.Add(button11);
			stackLayout.Children.Add(grid24);
			grid26.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			grid26.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.WhiteSmoke);
			columnDefinition36.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid26.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition36);
			columnDefinition37.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid26.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition37);
			columnDefinition38.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid26.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition38);
			image13.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("icon_about.png"));
			image13.SetValue(Grid.ColumnProperty, 0);
			grid26.Children.Add(image13);
			grid25.SetValue(Grid.ColumnProperty, 1);
			rowDefinition22.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid25.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition22);
			rowDefinition23.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid25.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition23);
			label30.SetValue(Label.TextProperty, " ÷ª˙‘ø≥◊");
			label30.SetValue(Label.TextColorProperty, Color.Black);
			label30.SetValue(Grid.RowProperty, 0);
			label30.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty30 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter30 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider30 = new XamlServiceProvider();
			Type typeFromHandle59 = typeof(IProvideValueTarget);
			object[] array30 = new object[0 + 6];
			array30[0] = label30;
			array30[1] = grid25;
			array30[2] = grid26;
			array30[3] = stackLayout;
			array30[4] = scrollView;
			array30[5] = centerPage;
			object service30;
			xamlServiceProvider30.Add(typeFromHandle59, service30 = new SimpleValueTargetProvider(array30, Label.FontSizeProperty, nameScope));
			xamlServiceProvider30.Add(typeof(IReferenceProvider), service30);
			Type typeFromHandle60 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver30 = new XmlNamespaceResolver();
			xmlNamespaceResolver30.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver30.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver30.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider30.Add(typeFromHandle60, new XamlTypeResolver(xmlNamespaceResolver30, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider30.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(231, 111)));
			label30.SetValue(fontSizeProperty30, ((IExtendedTypeConverter)fontSizeConverter30).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider30));
			label30.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid25.Children.Add(label30);
			label31.SetValue(Label.TextProperty, " ÷ª˙‘ø≥◊¿∂—¿¡¨Ω”");
			label31.SetValue(Label.TextColorProperty, Color.Black);
			label31.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty31 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter31 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider31 = new XamlServiceProvider();
			Type typeFromHandle61 = typeof(IProvideValueTarget);
			object[] array31 = new object[0 + 6];
			array31[0] = label31;
			array31[1] = grid25;
			array31[2] = grid26;
			array31[3] = stackLayout;
			array31[4] = scrollView;
			array31[5] = centerPage;
			object service31;
			xamlServiceProvider31.Add(typeFromHandle61, service31 = new SimpleValueTargetProvider(array31, Label.FontSizeProperty, nameScope));
			xamlServiceProvider31.Add(typeof(IReferenceProvider), service31);
			Type typeFromHandle62 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver31 = new XmlNamespaceResolver();
			xmlNamespaceResolver31.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver31.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver31.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider31.Add(typeFromHandle62, new XamlTypeResolver(xmlNamespaceResolver31, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider31.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(232, 95)));
			label31.SetValue(fontSizeProperty31, ((IExtendedTypeConverter)fontSizeConverter31).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider31));
			label31.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid25.Children.Add(label31);
			grid26.Children.Add(grid25);
			button12.SetValue(Grid.ColumnProperty, 1);
			button12.Clicked += centerPage.PhoneKey_Clicked;
			button12.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid26.Children.Add(button12);
			label32.SetValue(Label.TextProperty, ">");
			label32.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty32 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter32 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider32 = new XamlServiceProvider();
			Type typeFromHandle63 = typeof(IProvideValueTarget);
			object[] array32 = new object[0 + 5];
			array32[0] = label32;
			array32[1] = grid26;
			array32[2] = stackLayout;
			array32[3] = scrollView;
			array32[4] = centerPage;
			object service32;
			xamlServiceProvider32.Add(typeFromHandle63, service32 = new SimpleValueTargetProvider(array32, Label.FontSizeProperty, nameScope));
			xamlServiceProvider32.Add(typeof(IReferenceProvider), service32);
			Type typeFromHandle64 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver32 = new XmlNamespaceResolver();
			xmlNamespaceResolver32.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver32.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver32.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider32.Add(typeFromHandle64, new XamlTypeResolver(xmlNamespaceResolver32, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider32.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(235, 47)));
			label32.SetValue(fontSizeProperty32, ((IExtendedTypeConverter)fontSizeConverter32).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider32));
			label32.SetValue(Grid.ColumnProperty, 2);
			label32.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid26.Children.Add(label32);
			stackLayout.Children.Add(grid26);
			grid28.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			grid28.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.WhiteSmoke);
			columnDefinition39.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid28.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition39);
			columnDefinition40.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid28.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition40);
			columnDefinition41.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid28.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition41);
			image14.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("icon_about.png"));
			image14.SetValue(Grid.ColumnProperty, 0);
			grid28.Children.Add(image14);
			grid27.SetValue(Grid.ColumnProperty, 1);
			rowDefinition24.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid27.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition24);
			rowDefinition25.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid27.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition25);
			label33.SetValue(Label.TextProperty, "¿Ô≥Ãƒ‹∫ƒ");
			label33.SetValue(Label.TextColorProperty, Color.Black);
			label33.SetValue(Grid.RowProperty, 0);
			label33.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty33 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter33 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider33 = new XamlServiceProvider();
			Type typeFromHandle65 = typeof(IProvideValueTarget);
			object[] array33 = new object[0 + 6];
			array33[0] = label33;
			array33[1] = grid27;
			array33[2] = grid28;
			array33[3] = stackLayout;
			array33[4] = scrollView;
			array33[5] = centerPage;
			object service33;
			xamlServiceProvider33.Add(typeFromHandle65, service33 = new SimpleValueTargetProvider(array33, Label.FontSizeProperty, nameScope));
			xamlServiceProvider33.Add(typeof(IReferenceProvider), service33);
			Type typeFromHandle66 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver33 = new XmlNamespaceResolver();
			xmlNamespaceResolver33.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver33.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver33.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider33.Add(typeFromHandle66, new XamlTypeResolver(xmlNamespaceResolver33, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider33.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(249, 111)));
			label33.SetValue(fontSizeProperty33, ((IExtendedTypeConverter)fontSizeConverter33).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider33));
			label33.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid27.Children.Add(label33);
			label34.SetValue(Label.TextProperty, "∏˜∂Œ–– ªµƒ¿Ô≥Ã°¢ƒ‹∫ƒ°¢ÀŸ∂»°¢πÏº£º«¬º");
			label34.SetValue(Label.TextColorProperty, Color.Black);
			label34.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty34 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter34 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider34 = new XamlServiceProvider();
			Type typeFromHandle67 = typeof(IProvideValueTarget);
			object[] array34 = new object[0 + 6];
			array34[0] = label34;
			array34[1] = grid27;
			array34[2] = grid28;
			array34[3] = stackLayout;
			array34[4] = scrollView;
			array34[5] = centerPage;
			object service34;
			xamlServiceProvider34.Add(typeFromHandle67, service34 = new SimpleValueTargetProvider(array34, Label.FontSizeProperty, nameScope));
			xamlServiceProvider34.Add(typeof(IReferenceProvider), service34);
			Type typeFromHandle68 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver34 = new XmlNamespaceResolver();
			xmlNamespaceResolver34.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver34.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver34.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider34.Add(typeFromHandle68, new XamlTypeResolver(xmlNamespaceResolver34, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider34.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(250, 105)));
			label34.SetValue(fontSizeProperty34, ((IExtendedTypeConverter)fontSizeConverter34).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider34));
			label34.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid27.Children.Add(label34);
			grid28.Children.Add(grid27);
			button13.SetValue(Grid.ColumnProperty, 1);
			button13.Clicked += centerPage.Distance_Clicked;
			button13.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid28.Children.Add(button13);
			label35.SetValue(Label.TextProperty, ">");
			label35.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty35 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter35 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider35 = new XamlServiceProvider();
			Type typeFromHandle69 = typeof(IProvideValueTarget);
			object[] array35 = new object[0 + 5];
			array35[0] = label35;
			array35[1] = grid28;
			array35[2] = stackLayout;
			array35[3] = scrollView;
			array35[4] = centerPage;
			object service35;
			xamlServiceProvider35.Add(typeFromHandle69, service35 = new SimpleValueTargetProvider(array35, Label.FontSizeProperty, nameScope));
			xamlServiceProvider35.Add(typeof(IReferenceProvider), service35);
			Type typeFromHandle70 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver35 = new XmlNamespaceResolver();
			xmlNamespaceResolver35.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver35.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver35.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider35.Add(typeFromHandle70, new XamlTypeResolver(xmlNamespaceResolver35, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider35.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(253, 47)));
			label35.SetValue(fontSizeProperty35, ((IExtendedTypeConverter)fontSizeConverter35).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider35));
			label35.SetValue(Grid.ColumnProperty, 2);
			label35.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid28.Children.Add(label35);
			stackLayout.Children.Add(grid28);
			grid30.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			grid30.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.WhiteSmoke);
			columnDefinition42.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid30.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition42);
			columnDefinition43.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid30.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition43);
			columnDefinition44.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid30.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition44);
			image15.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("icon_about.png"));
			image15.SetValue(Grid.ColumnProperty, 0);
			grid30.Children.Add(image15);
			grid29.SetValue(Grid.ColumnProperty, 1);
			rowDefinition26.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid29.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition26);
			rowDefinition27.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid29.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition27);
			label36.SetValue(Label.TextProperty, "œ˚œ¢Õ®÷™");
			label36.SetValue(Label.TextColorProperty, Color.Black);
			label36.SetValue(Grid.RowProperty, 0);
			label36.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty36 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter36 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider36 = new XamlServiceProvider();
			Type typeFromHandle71 = typeof(IProvideValueTarget);
			object[] array36 = new object[0 + 6];
			array36[0] = label36;
			array36[1] = grid29;
			array36[2] = grid30;
			array36[3] = stackLayout;
			array36[4] = scrollView;
			array36[5] = centerPage;
			object service36;
			xamlServiceProvider36.Add(typeFromHandle71, service36 = new SimpleValueTargetProvider(array36, Label.FontSizeProperty, nameScope));
			xamlServiceProvider36.Add(typeof(IReferenceProvider), service36);
			Type typeFromHandle72 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver36 = new XmlNamespaceResolver();
			xmlNamespaceResolver36.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver36.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver36.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider36.Add(typeFromHandle72, new XamlTypeResolver(xmlNamespaceResolver36, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider36.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(267, 110)));
			label36.SetValue(fontSizeProperty36, ((IExtendedTypeConverter)fontSizeConverter36).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider36));
			label36.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid29.Children.Add(label36);
			label37.SetValue(Label.TextProperty, "÷–øÿ∑¢ÀÕµƒœ˚œ¢∫Õ∑˛ŒÒ∆˜œ¬∑¢µƒÕ®÷™");
			label37.SetValue(Label.TextColorProperty, Color.Black);
			label37.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty37 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter37 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider37 = new XamlServiceProvider();
			Type typeFromHandle73 = typeof(IProvideValueTarget);
			object[] array37 = new object[0 + 6];
			array37[0] = label37;
			array37[1] = grid29;
			array37[2] = grid30;
			array37[3] = stackLayout;
			array37[4] = scrollView;
			array37[5] = centerPage;
			object service37;
			xamlServiceProvider37.Add(typeFromHandle73, service37 = new SimpleValueTargetProvider(array37, Label.FontSizeProperty, nameScope));
			xamlServiceProvider37.Add(typeof(IReferenceProvider), service37);
			Type typeFromHandle74 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver37 = new XmlNamespaceResolver();
			xmlNamespaceResolver37.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver37.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver37.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider37.Add(typeFromHandle74, new XamlTypeResolver(xmlNamespaceResolver37, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider37.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(268, 102)));
			label37.SetValue(fontSizeProperty37, ((IExtendedTypeConverter)fontSizeConverter37).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider37));
			label37.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid29.Children.Add(label37);
			grid30.Children.Add(grid29);
			button14.SetValue(Grid.ColumnProperty, 1);
			button14.Clicked += centerPage.Message_Clicked;
			button14.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid30.Children.Add(button14);
			label38.SetValue(Label.TextProperty, ">");
			label38.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty38 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter38 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider38 = new XamlServiceProvider();
			Type typeFromHandle75 = typeof(IProvideValueTarget);
			object[] array38 = new object[0 + 5];
			array38[0] = label38;
			array38[1] = grid30;
			array38[2] = stackLayout;
			array38[3] = scrollView;
			array38[4] = centerPage;
			object service38;
			xamlServiceProvider38.Add(typeFromHandle75, service38 = new SimpleValueTargetProvider(array38, Label.FontSizeProperty, nameScope));
			xamlServiceProvider38.Add(typeof(IReferenceProvider), service38);
			Type typeFromHandle76 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver38 = new XmlNamespaceResolver();
			xmlNamespaceResolver38.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver38.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver38.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider38.Add(typeFromHandle76, new XamlTypeResolver(xmlNamespaceResolver38, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider38.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(271, 47)));
			label38.SetValue(fontSizeProperty38, ((IExtendedTypeConverter)fontSizeConverter38).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider38));
			label38.SetValue(Grid.ColumnProperty, 2);
			label38.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid30.Children.Add(label38);
			stackLayout.Children.Add(grid30);
			grid32.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			grid32.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.WhiteSmoke);
			columnDefinition45.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid32.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition45);
			columnDefinition46.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid32.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition46);
			columnDefinition47.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid32.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition47);
			image16.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("icon_about.png"));
			image16.SetValue(Grid.ColumnProperty, 0);
			grid32.Children.Add(image16);
			grid31.SetValue(Grid.ColumnProperty, 1);
			rowDefinition28.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid31.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition28);
			rowDefinition29.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid31.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition29);
			label39.SetValue(Label.TextProperty, "”√ªß ÷≤·");
			label39.SetValue(Label.TextColorProperty, Color.Black);
			label39.SetValue(Grid.RowProperty, 0);
			label39.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty39 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter39 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider39 = new XamlServiceProvider();
			Type typeFromHandle77 = typeof(IProvideValueTarget);
			object[] array39 = new object[0 + 6];
			array39[0] = label39;
			array39[1] = grid31;
			array39[2] = grid32;
			array39[3] = stackLayout;
			array39[4] = scrollView;
			array39[5] = centerPage;
			object service39;
			xamlServiceProvider39.Add(typeFromHandle77, service39 = new SimpleValueTargetProvider(array39, Label.FontSizeProperty, nameScope));
			xamlServiceProvider39.Add(typeof(IReferenceProvider), service39);
			Type typeFromHandle78 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver39 = new XmlNamespaceResolver();
			xmlNamespaceResolver39.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver39.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver39.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider39.Add(typeFromHandle78, new XamlTypeResolver(xmlNamespaceResolver39, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider39.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(285, 113)));
			label39.SetValue(fontSizeProperty39, ((IExtendedTypeConverter)fontSizeConverter39).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider39));
			label39.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid31.Children.Add(label39);
			label40.SetValue(Label.TextProperty, "‘∂«˝øÿ÷∆∆˜µƒ≤Œ ˝Àµ√˜");
			label40.SetValue(Label.TextColorProperty, Color.Black);
			label40.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty40 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter40 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider40 = new XamlServiceProvider();
			Type typeFromHandle79 = typeof(IProvideValueTarget);
			object[] array40 = new object[0 + 6];
			array40[0] = label40;
			array40[1] = grid31;
			array40[2] = grid32;
			array40[3] = stackLayout;
			array40[4] = scrollView;
			array40[5] = centerPage;
			object service40;
			xamlServiceProvider40.Add(typeFromHandle79, service40 = new SimpleValueTargetProvider(array40, Label.FontSizeProperty, nameScope));
			xamlServiceProvider40.Add(typeof(IReferenceProvider), service40);
			Type typeFromHandle80 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver40 = new XmlNamespaceResolver();
			xmlNamespaceResolver40.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver40.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver40.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider40.Add(typeFromHandle80, new XamlTypeResolver(xmlNamespaceResolver40, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider40.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(286, 99)));
			label40.SetValue(fontSizeProperty40, ((IExtendedTypeConverter)fontSizeConverter40).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider40));
			label40.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid31.Children.Add(label40);
			grid32.Children.Add(grid31);
			button15.SetValue(Grid.ColumnProperty, 1);
			button15.Clicked += centerPage.UserManual_Clicked;
			button15.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid32.Children.Add(button15);
			label41.SetValue(Label.TextProperty, ">");
			label41.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty41 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter41 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider41 = new XamlServiceProvider();
			Type typeFromHandle81 = typeof(IProvideValueTarget);
			object[] array41 = new object[0 + 5];
			array41[0] = label41;
			array41[1] = grid32;
			array41[2] = stackLayout;
			array41[3] = scrollView;
			array41[4] = centerPage;
			object service41;
			xamlServiceProvider41.Add(typeFromHandle81, service41 = new SimpleValueTargetProvider(array41, Label.FontSizeProperty, nameScope));
			xamlServiceProvider41.Add(typeof(IReferenceProvider), service41);
			Type typeFromHandle82 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver41 = new XmlNamespaceResolver();
			xmlNamespaceResolver41.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver41.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver41.Add("motornet6", "clr-namespace:MotorNet6");
			xamlServiceProvider41.Add(typeFromHandle82, new XamlTypeResolver(xmlNamespaceResolver41, typeof(CenterPage).GetTypeInfo().Assembly));
			xamlServiceProvider41.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(289, 47)));
			label41.SetValue(fontSizeProperty41, ((IExtendedTypeConverter)fontSizeConverter41).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider41));
			label41.SetValue(Grid.ColumnProperty, 2);
			label41.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid32.Children.Add(label41);
			stackLayout.Children.Add(grid32);
			scrollView.Content = stackLayout;
			centerPage.SetValue(ContentPage.ContentProperty, scrollView);
		}

		private void __InitComponentRuntime()
		{
			this.LoadFromXaml(typeof(CenterPage));
			ModelImage = this.FindByName<Image>("ModelImage");
			ModelNmae = this.FindByName<Label>("ModelNmae");
			SOCImage = this.FindByName<Image>("SOCImage");
			BattSOC = this.FindByName<Label>("BattSOC");
			BattSOCName = this.FindByName<Label>("BattSOCName");
			RestImage = this.FindByName<Image>("RestImage");
			RestDistance = this.FindByName<Label>("RestDistance");
			RestDistanceName = this.FindByName<Label>("RestDistanceName");
			ModelTypeName = this.FindByName<Label>("ModelTypeName");
			ModelSNName = this.FindByName<Label>("ModelSNName");
			ModelType = this.FindByName<Label>("ModelType");
			ModelSN = this.FindByName<Label>("ModelSN");
			ModelSOCName = this.FindByName<Label>("ModelSOCName");
			ModelSOC = this.FindByName<Label>("ModelSOC");
			ResetButton = this.FindByName<Xamarin.Forms.Button>("ResetButton");
			webView = this.FindByName<Xamarin.Forms.WebView>("webView");
			KeyonImage = this.FindByName<Image>("KeyonImage");
			KeyOnName = this.FindByName<Label>("KeyOnName");
			KeyOn = this.FindByName<Xamarin.Forms.Button>("KeyOn");
			FDImage = this.FindByName<Image>("FDImage");
			AntiThiefName = this.FindByName<Label>("AntiThiefName");
			AntiThief = this.FindByName<Xamarin.Forms.Button>("AntiThief");
			ZuotongImage = this.FindByName<Image>("ZuotongImage");
			ZuotongLockName = this.FindByName<Label>("ZuotongLockName");
			Zuotong = this.FindByName<Xamarin.Forms.Button>("Zuotong");
			RatedVoltageName = this.FindByName<Label>("RatedVoltageName");
			RatedVoltageDsName = this.FindByName<Label>("RatedVoltageDsName");
			SpeedLimitName = this.FindByName<Label>("SpeedLimitName");
			SpeedLimitDsName = this.FindByName<Label>("SpeedLimitDsName");
			SpeedLimit = this.FindByName<Xamarin.Forms.Switch>("SpeedLimit");
			OverSpeedAlarmName = this.FindByName<Label>("OverSpeedAlarmName");
			OverSpeedAlarmDsName = this.FindByName<Label>("OverSpeedAlarmDsName");
			OverSpeedAlarm = this.FindByName<Xamarin.Forms.Switch>("OverSpeedAlarm");
			AutoLockName = this.FindByName<Label>("AutoLockName");
			AutoLockDsName = this.FindByName<Label>("AutoLockDsName");
			grid1 = this.FindByName<Grid>("grid1");
			VibAlarmName = this.FindByName<Label>("VibAlarmName");
			VibAlarmDsName = this.FindByName<Label>("VibAlarmDsName");
			grid2 = this.FindByName<Grid>("grid2");
			WheelAlarmName = this.FindByName<Label>("WheelAlarmName");
			WheelAlarmDsName = this.FindByName<Label>("WheelAlarmDsName");
			WheelAlarm = this.FindByName<Xamarin.Forms.Switch>("WheelAlarm");
			grid3 = this.FindByName<Grid>("grid3");
			PhoneKeyName = this.FindByName<Label>("PhoneKeyName");
			PhoneKeyDsName = this.FindByName<Label>("PhoneKeyDsName");
			grid4 = this.FindByName<Grid>("grid4");
			DistanceName = this.FindByName<Label>("DistanceName");
			DistanceDsName = this.FindByName<Label>("DistanceDsName");
			grid5 = this.FindByName<Grid>("grid5");
			MessageName = this.FindByName<Label>("MessageName");
			MessageDsName = this.FindByName<Label>("MessageDsName");
			grid6 = this.FindByName<Grid>("grid6");
			UserManualName = this.FindByName<Label>("UserManualName");
			UserManualDsName = this.FindByName<Label>("UserManualDsName");
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	public class AddressComponent
	{
		public string city;

		public string direction;

		public string distance;

		public string district;

		public string province;

		public string street;

		public string street_number;
	}
	public class Location
	{
		public double lng;

		public double lat;
	}
	public class Result
	{
		public Location location;

		public string formatted_address;

		public string business;

		public AddressComponent addressComponent;

		public int cityCode;
	}
	public class CityAddress
	{
		public string status;

		public Result result;
	}
	public class DeviceMsg
	{
		public bool online;

		public string serialnumber;

		public string deviceid;

		public string clientid0;

		public string clientid1;

		public string clientid2;

		public string ModelName;

		public bool isvcu;

		public string VCUType;
	}
	public class BindDevice
	{
		public List<DeviceMsg> device;

		public string SN6;

		public int count;
	}
	public class VCUSMsg
	{
		public bool oldis;

		public string topmsg;

		public string message;
	}
	[XamlFilePath("ConnectPage.xaml")]
	public class ConnectPage : ContentPage
	{
		private IProgressDialog progress;

		private IProgressDialog progressforce;

		private int packcnt;

		private int func;

		private int subpacktotal;

		private bool hasprogress;

		private int dld_retry;

		private int dld_state;

		private int dld_overtime;

		private int dld_DelayTime;

		private int dld_Ack;

		private uint[] crc32;

		private uint crc;

		private uint crc_total;

		private uint crc_total0;

		private uint crc_total1;

		private string RemoteClient;

		private uint crcOK;

		private ScanResultModel scanResult;

		private IDevice bluedevice;

		private IAdapter adapter;

		private int m_RcvIndex;

		private byte[] m_Received;

		private string noticec;

		private string noticee;

		private string alarmstring;

		private string remoteclient = "";

		private ushort rcv_crc;

		private ICharacteristic chs;

		private Guid commUUID = new Guid(65516, 0, 4096, new byte[8] { 128, 0, 0, 128, 95, 155, 52, 251 });

		private Guid commHeadUUID = new Guid(65504, 0, 4096, new byte[8] { 128, 0, 0, 128, 95, 155, 52, 251 });

		private bool getloginstat;

		private DateTime dateTime;

		private string OldFileName = "";

		private bool sendLocation;

		private int noFramesTime;

		private bool upgrade;

		private bool isconnecting;

		private static string publicKey = "<RSAKeyValue><Modulus>57YLXkTQd6UgG9es7mzHXyXjzMoCU9EAgvPW839gtwDYmm3wNouzUghVZ7cMtyHkaT3A4qYYrKHFPCmu+M4lQnm+x7kWYsMrcACx9tEcmNssY2RTsF9LmYUUjZ5Og6xkK7Zpwd54uHo7/HVqy76W4ssPFko01f9dftsZcUdwIaU=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>";

		private double[,] chinapos = new double[37, 2]
		{
			{ 108.0, 17.0 },
			{ 115.0, 17.0 },
			{ 120.0, 20.0 },
			{ 122.5, 22.0 },
			{ 122.5, 25.0 },
			{ 125.0, 30.0 },
			{ 125.0, 35.0 },
			{ 124.0, 39.0 },
			{ 124.5, 40.0 },
			{ 132.0, 43.0 },
			{ 135.0, 48.0 },
			{ 131.0, 47.0 },
			{ 120.0, 52.0 },
			{ 115.0, 45.0 },
			{ 110.0, 42.5 },
			{ 105.0, 42.0 },
			{ 100.0, 42.5 },
			{ 97.0, 42.5 },
			{ 95.0, 44.0 },
			{ 92.0, 45.0 },
			{ 87.0, 49.0 },
			{ 85.0, 47.0 },
			{ 83.0, 47.0 },
			{ 82.0, 45.5 },
			{ 80.0, 45.0 },
			{ 80.0, 42.0 },
			{ 75.0, 37.0 },
			{ 78.0, 35.0 },
			{ 80.0, 31.0 },
			{ 85.0, 28.0 },
			{ 98.0, 28.0 },
			{ 98.0, 24.0 },
			{ 100.0, 22.0 },
			{ 105.0, 23.0 },
			{ 107.0, 22.5 },
			{ 108.0, 22.0 },
			{ 108.0, 16.99 }
		};

		private byte[] crctablelo = new byte[256]
		{
			0, 192, 193, 1, 195, 3, 2, 194, 198, 6,
			7, 199, 5, 197, 196, 4, 204, 12, 13, 205,
			15, 207, 206, 14, 10, 202, 203, 11, 201, 9,
			8, 200, 216, 24, 25, 217, 27, 219, 218, 26,
			30, 222, 223, 31, 221, 29, 28, 220, 20, 212,
			213, 21, 215, 23, 22, 214, 210, 18, 19, 211,
			17, 209, 208, 16, 240, 48, 49, 241, 51, 243,
			242, 50, 54, 246, 247, 55, 245, 53, 52, 244,
			60, 252, 253, 61, 255, 63, 62, 254, 250, 58,
			59, 251, 57, 249, 248, 56, 40, 232, 233, 41,
			235, 43, 42, 234, 238, 46, 47, 239, 45, 237,
			236, 44, 228, 36, 37, 229, 39, 231, 230, 38,
			34, 226, 227, 35, 225, 33, 32, 224, 160, 96,
			97, 161, 99, 163, 162, 98, 102, 166, 167, 103,
			165, 101, 100, 164, 108, 172, 173, 109, 175, 111,
			110, 174, 170, 106, 107, 171, 105, 169, 168, 104,
			120, 184, 185, 121, 187, 123, 122, 186, 190, 126,
			127, 191, 125, 189, 188, 124, 180, 116, 117, 181,
			119, 183, 182, 118, 114, 178, 179, 115, 177, 113,
			112, 176, 80, 144, 145, 81, 147, 83, 82, 146,
			150, 86, 87, 151, 85, 149, 148, 84, 156, 92,
			93, 157, 95, 159, 158, 94, 90, 154, 155, 91,
			153, 89, 88, 152, 136, 72, 73, 137, 75, 139,
			138, 74, 78, 142, 143, 79, 141, 77, 76, 140,
			68, 132, 133, 69, 135, 71, 70, 134, 130, 66,
			67, 131, 65, 129, 128, 64
		};

		private byte[] crctablehi = new byte[256]
		{
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 0, 193, 129, 64, 1, 192,
			128, 65, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 0, 193,
			129, 64, 1, 192, 128, 65, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 0, 193,
			129, 64, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 1, 192, 128, 65, 0, 193,
			129, 64, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 0, 193, 129, 64, 1, 192,
			128, 65, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 0, 193, 129, 64, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			1, 192, 128, 65, 0, 193, 129, 64, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 1, 192, 128, 65, 0, 193,
			129, 64, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64
		};

		private uint[] crc_filetable;

		private uint[] crc_table;

		private bool EnableRemoteModify;

		private Stream stream;

		private bool checkedlink;

		private bool CopyNewData;

		private int permi;

		private int ConnectTimeCount = 72000;

		private int bleconnect_imecount;

		private int ClickCount;

		private int NewCnt;

		private bool CanDisplayOwner;

		private int presscnt;

		private string ownername = "";

		private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();

		public List<VCUSMsg> vcuMsgs = new List<VCUSMsg>();

		private long timestamp;

		private string mqttclientid;

		private bool remotercvdata1ready;

		private bool remotercvdata2ready;

		private byte[] remotercvdata1 = new byte[512];

		private byte[] remotercvdata2 = new byte[512];

		private bool remotetxdata1ready;

		private bool remotetxdata2ready;

		private byte[] remotetxdata1 = new byte[512];

		private byte[] remotetxdata2 = new byte[512];

		private string spassword;

		private bool autolonginch;

		private int rcv1cnt;

		private string ser_se;

		private int rcv2cnt;

		private bool RemoteEnabled;

		private bool RemoteRequest;

		private bool backuplink;

		private bool EnableSwitch = true;

		private ClientWebSocket client = new ClientWebSocket();

		public IMqttClient mqttClient;

		public MqttClientOptions options;

		public MqttClientOptions optionsRegister;

		public BindDevice bindDevice = new BindDevice();

		private bool hasprogressforce;

		private int xscontrol;

		private bool stop;

		private byte[] bk = new byte[16]
		{
			17, 18, 170, 243, 243, 26, 68, 85, 3, 49,
			131, 174, 29, 31, 86, 156
		};

		private int logincount = 1;

		private int scantimecount;

		public int hallalarm;

		private byte[] tempBuff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid Grid11;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button Connection;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdPassword;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button LoginView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdRemote;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.ListView resultListView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FrameCount;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.ListView resultListView2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DownloadFileName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdUpgrade;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdFlashIn;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdSelect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdSelect2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdExport;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdImport;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdProduct;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdDetail;

		public ObservableCollection<ScanResultModel> DeviceResults { get; } = new ObservableCollection<ScanResultModel>();

		public ObservableCollection<ScanResultModel> DeviceResults2 { get; } = new ObservableCollection<ScanResultModel>();

		public string FileName { get; private set; }

		public bool IsScanning { get; private set; }

		public bool IsConnect { get; private set; }

		public long GetCurrentMilliseconds()
		{
			DateTime dateTime = new DateTime(1970, 1, 1);
			return (long)(DateTime.Now - dateTime).TotalMilliseconds;
		}

		public static string Encrypt(string toEncryptString)
		{
			try
			{
				byte[] bytes = new UnicodeEncoding().GetBytes(toEncryptString);
				RSACryptoServiceProvider rSACryptoServiceProvider = new RSACryptoServiceProvider();
				rSACryptoServiceProvider.FromXmlString(publicKey);
				return Convert.ToBase64String(RSAEncrypt(bytes, rSACryptoServiceProvider.ExportParameters(includePrivateParameters: false), DoOAEPPadding: false));
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
				return "";
			}
		}

		private static byte[] RSAEncrypt(byte[] DataToEncrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding)
		{
			try
			{
				RSACryptoServiceProvider rSACryptoServiceProvider = new RSACryptoServiceProvider();
				rSACryptoServiceProvider.ImportParameters(RSAKeyInfo);
				return rSACryptoServiceProvider.Encrypt(DataToEncrypt, DoOAEPPadding);
			}
			catch (CryptographicException ex)
			{
				Console.WriteLine(ex.Message);
				return null;
			}
		}

		private async void GetConfirm(string custom, string cusid)
		{
			if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Received " + custom + " Remote Help Request, please disconnect local BLE controller", null, "Accept", "cancel")) : (await UserDialogs.Instance.ConfirmAsync(" ’µΩ" + custom + "‘∂≥Ã–≠÷˙«Î«Û£¨»Ù“™–ﬁ∏ƒ‘∂≥Ã≤Œ ˝«Î∂œø™±æµÿ¿∂—¿øÿ÷∆∆˜", null, "Ω” ‹", "»°œ˚")))
			{
				MqttPub(App.clientid + "0" + cusid + "/remote/ack", "OK");
				RemoteClient = cusid;
			}
			else
			{
				MqttPub(App.clientid + "0" + cusid + "/remote/ack", "Cancel");
			}
		}

		private async void GetConfirmModify()
		{
			if (App.CN)
			{
				EnableRemoteModify = await UserDialogs.Instance.ConfirmAsync("‘∂≥Ã–≠÷˙’˝‘⁄–ﬁ∏ƒƒ„µƒøÿ÷∆∆˜≤Œ ˝£¨ «∑Ò‘ –Ì?", null, "‘ –Ì", "»°œ˚");
			}
			else
			{
				EnableRemoteModify = await UserDialogs.Instance.ConfirmAsync("Remote Helper is modifying your controller parameters, is it allowed?", null, "Allow", "cancel");
			}
			if (EnableRemoteModify)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("º«µ√∆Ô–– ±∂œø™‘∂≥Ã–≠÷˙");
				}
				else
				{
					UserDialogs.Instance.Alert("Remember to disconnect remote help while driving.");
				}
			}
		}

		public void InitMqttClient()
		{
			MqttFactory mqttFactory = new MqttFactory();
			mqttClient = mqttFactory.CreateMqttClient();
			mqttClient.ConnectedAsync += OnConnected;
			mqttClient.DisconnectedAsync += OnDisConnected;
			mqttClient.ApplicationMessageReceivedAsync += OnMqttReceived;
		}

		private async void CmdRemote_Clicked(object sender, EventArgs e)
		{
			if (!App.CAT1_Loggined)
			{
				LoginAlert();
				return;
			}
			RemoteRequest = false;
			if (App.SendRemote)
			{
				RemoteEnabled = false;
				App.SendRemote = false;
				EnableRemoteModify = false;
				CmdRemote.BackgroundColor = Color.Gray;
				if (App.CN)
				{
					CmdRemote.Text = "‘∂≥Ã–≠÷˙";
				}
				else
				{
					CmdRemote.Text = "Remote Help";
				}
				return;
			}
			string text = ((!App.CN) ? (await DisplayPromptAsync("RemoteHelp", "Send Local Data to Helper", "Ok", "Cancel", "Input Remoter PhoneNumber or Email", 30, null, remoteclient)) : (await DisplayPromptAsync("‘∂≥Ã–≠÷˙", "Ω´±æµÿøÿ÷∆∆˜ ˝æ› µ ±∑¢ÀÕ∏¯”√ªß", "»∑∂®", "»°œ˚", " ‰»Î∂‘∑ΩµƒµÁª∞∫≈¬ÎªÚ’ﬂ” œ‰", 30, null, remoteclient)));
			if (text == null || text.Length < 5)
			{
				return;
			}
			if (text.Trim() == App.username)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("≤ªƒ‹ ‰»Î◊‘º∫µƒ”√ªß√˚");
				}
				else
				{
					UserDialogs.Instance.Alert("You can not input your own user name");
				}
				return;
			}
			remoteclient = text;
			string payload = Encrypt(text);
			MqttPub(App.clientid + "00000000/bind/GetRemoteClient", payload);
			App.SendRemote = true;
			if (App.CN)
			{
				CmdRemote.Text = "µ»¥˝”¶¥";
			}
			else
			{
				CmdRemote.Text = "Waiting Answer";
			}
			CmdRemote.BackgroundColor = Color.LightSkyBlue;
		}

		private Task OnConnected(MqttClientConnectedEventArgs arg)
		{
			if (App.loginstat == 8)
			{
				App.loginstat = 3;
			}
			else
			{
				App.loginstat = 5;
			}
			App.CAT1_Connected = true;
			return Task.CompletedTask;
		}

		private Task OnDisConnected(MqttClientDisconnectedEventArgs arg)
		{
			App.CAT1_Connected = false;
			return Task.CompletedTask;
		}

		private void BindSend()
		{
			if (App.PassOk >= 2)
			{
				if (App.NewVersion)
				{
					App.Confirm_password = "3414";
				}
				else
				{
					App.Confirm_password = "3414";
				}
				App.sendconfirm = 4;
			}
		}

		private void BindSend2()
		{
			App.Confirm_password = "0000";
			App.sendconfirm = 4;
		}

		private void ManageAuth()
		{
			if (CanDisplayOwner)
			{
				if (stop == App.Stop && xscontrol == App.m_xscontrol && presscnt < 20)
				{
					return;
				}
				stop = App.Stop;
				xscontrol = App.m_xscontrol;
				if (App.rotation > 0)
				{
					presscnt = 0;
				}
				if (presscnt < 20)
				{
					presscnt++;
					return;
				}
				if (ownername.Contains("@"))
				{
					if (App.CN)
					{
						progressforce = UserDialogs.Instance.Progress("ª˙÷˜Email£∫" + ownername + "\r\n«ø÷∆Ω‚∞Ûµπº∆ ±" + ConnectTimeCount + "\r\n≤Â∞ŒªÙ∂˚ƒ‹Àı∂Ãµπº∆ ±", onCancelProgessForce, "»°œ˚", show: true, MaskType.Black);
					}
					else
					{
						progressforce = UserDialogs.Instance.Progress("Owner Email£∫" + ownername + "\r\n Force unbound countdown" + ConnectTimeCount + "\r\nPlug and unplug Hall can shorten the timer", onCancelProgessForce, "Cancel", show: true, MaskType.Black);
					}
				}
				else if (App.CN)
				{
					progressforce = UserDialogs.Instance.Progress("ª˙÷˜µÁª∞£∫" + ownername + "\r\n«ø÷∆Ω‚∞Ûµπº∆ ±" + ConnectTimeCount + "\r\n≤Â∞ŒªÙ∂˚ƒ‹Àı∂Ãµπº∆ ±", onCancelProgessForce, "»°œ˚", show: true, MaskType.Black);
				}
				else
				{
					progressforce = UserDialogs.Instance.Progress("Owner Phone£∫" + ownername + "\r\n Force unbound countdown" + ConnectTimeCount + "\r\nPlug and unplug Hall can shorten the timer", onCancelProgessForce, "Cancel", show: true, MaskType.Black);
				}
				hasprogressforce = true;
				presscnt = 0;
				CanDisplayOwner = false;
			}
			else
			{
				if (!hasprogressforce)
				{
					return;
				}
				if (ConnectTimeCount > 0)
				{
					if (App.fdalarm)
					{
						ConnectTimeCount = 72000;
					}
					progressforce.PercentComplete = (72000 - ConnectTimeCount) / 720;
					if (ownername.Contains("@"))
					{
						if (App.CN)
						{
							progressforce.Title = "ª˙÷˜Email£∫" + ownername + "\r\n«ø÷∆Ω‚∞Ûµπº∆ ±\r\n" + ConnectTimeCount + "\r\n≤Â∞ŒªÙ∂˚ƒ‹Àı∂Ãµπº∆ ±";
						}
						else
						{
							progressforce.Title = "Owner Email£∫" + ownername + "\r\n Force unbound countdown\r\n" + ConnectTimeCount + "\r\nPlug and unplug Hall can shorten the timer";
						}
					}
					else if (App.CN)
					{
						progressforce.Title = "ª˙÷˜µÁª∞£∫" + ownername + "\r\n«ø÷∆Ω‚∞Ûµπº∆ ±\r\n" + ConnectTimeCount + "\r\n≤Â∞ŒªÙ∂˚ƒ‹Àı∂Ãµπº∆ ±";
					}
					else
					{
						progressforce.Title = "Owner Phone£∫" + ownername + "\r\n Force unbound countdown\r\n" + ConnectTimeCount + "\r\nPlug and unplug Hall can shorten the timer";
					}
				}
				else
				{
					if (App.NewVersion || App.OldPassed)
					{
						string payload = Encrypt(App.rcv_serialNumber + "_ts_" + timestamp);
						MqttPub(App.clientid + "99999995/bind", payload);
					}
					else if (App.CN)
					{
						UserDialogs.Instance.Alert("æ…∞Ê±æøÿ÷∆∆˜≤ª÷ß≥÷«ø÷∆Ω‚∞Û");
					}
					else
					{
						UserDialogs.Instance.Alert("Old version Controllers do not support forced unbinding");
					}
					onCancelProgessForce();
				}
			}
		}

		private void SaveSK()
		{
			try
			{
				string text = $"{App.scanResult.vcu.keydistance}";
				if (App.keydistance != text)
				{
					App.keydistance = text;
					SecureStorage.SetAsync("KeyDistance", App.keydistance);
				}
			}
			catch (Exception ex)
			{
				UserDialogs.Instance.Alert("SaveSK " + ex.ToString());
			}
		}

		private Task OnMqttReceived(MqttApplicationMessageReceivedEventArgs arg)
		{
			try
			{
				if (arg.ApplicationMessage.Topic.Contains("/bind"))
				{
					if (arg.ApplicationMessage.Topic.Contains("/message"))
					{
						try
						{
							arg.ApplicationMessage.Topic.Substring(7, 8);
							string text = Encoding.UTF8.GetString(arg.ApplicationMessage.PayloadSegment.Array);
							string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "BindDevices.bdx");
							byte[] array = new byte[arg.ApplicationMessage.PayloadSegment.Array.Length];
							int num = 0;
							for (int i = 0; i < array.Length; i++)
							{
								array[i] = (byte)(arg.ApplicationMessage.PayloadSegment.Array[i] ^ bk[num]);
								num = ((num < 15) ? (num + 1) : 0);
							}
							File.WriteAllBytes(path, array);
							string[] msg = text.Split(new char[1] { ',' });
							if (msg.Length >= 19)
							{
								bindDevice.SN6 = msg[0];
								MainThread.BeginInvokeOnMainThread(delegate
								{
									bindDevice.device.Clear();
									DeviceMsg deviceMsg = new DeviceMsg();
									if (msg[1] == "1")
									{
										deviceMsg.online = true;
									}
									else
									{
										deviceMsg.online = false;
									}
									deviceMsg.serialnumber = msg[2];
									deviceMsg.deviceid = msg[3];
									deviceMsg.clientid0 = msg[4];
									deviceMsg.clientid1 = msg[5];
									deviceMsg.clientid2 = msg[6];
									deviceMsg.isvcu = false;
									deviceMsg.VCUType = "";
									bindDevice.device.Add(deviceMsg);
									deviceMsg = new DeviceMsg();
									if (msg[7] == "1")
									{
										deviceMsg.online = true;
									}
									else
									{
										deviceMsg.online = false;
									}
									deviceMsg.serialnumber = msg[8];
									deviceMsg.deviceid = msg[9];
									deviceMsg.clientid0 = msg[10];
									deviceMsg.clientid1 = msg[11];
									deviceMsg.clientid2 = msg[12];
									deviceMsg.isvcu = false;
									deviceMsg.VCUType = "";
									bindDevice.device.Add(deviceMsg);
									deviceMsg = new DeviceMsg();
									if (msg[13] == "1")
									{
										deviceMsg.online = true;
									}
									else
									{
										deviceMsg.online = false;
									}
									deviceMsg.serialnumber = msg[14];
									deviceMsg.deviceid = msg[15];
									deviceMsg.clientid0 = msg[16];
									deviceMsg.clientid1 = msg[17];
									deviceMsg.clientid2 = msg[18];
									deviceMsg.isvcu = false;
									deviceMsg.VCUType = "";
									bindDevice.device.Add(deviceMsg);
									bindDevice.count = 0;
									vcuMsgs.Clear();
									VCUSMsg item = new VCUSMsg
									{
										oldis = false,
										message = "",
										topmsg = ""
									};
									vcuMsgs.Add(item);
									item = new VCUSMsg
									{
										oldis = false,
										message = "",
										topmsg = ""
									};
									vcuMsgs.Add(item);
									item = new VCUSMsg
									{
										oldis = false,
										message = "",
										topmsg = ""
									};
									vcuMsgs.Add(item);
									DeviceResults2.Clear();
									ScanResultModel scanResultModel = new ScanResultModel();
									scanResultModel.SetIndex(1);
									scanResultModel.SetVCU(isvcu: false);
									scanResultModel.SetType("");
									scanResultModel.IsBleOrRemoteConnected = false;
									scanResultModel.SettBle("", 0);
									scanResultModel.vcu = new VCUData();
									scanResultModel.vcu.Init();
									DeviceResults2.Add(scanResultModel);
									scanResultModel = new ScanResultModel();
									scanResultModel.SetIndex(2);
									scanResultModel.SetVCU(isvcu: false);
									scanResultModel.SetType("");
									scanResultModel.IsBleOrRemoteConnected = false;
									scanResultModel.SettBle("", 0);
									scanResultModel.vcu = new VCUData();
									scanResultModel.vcu.Init();
									DeviceResults2.Add(scanResultModel);
									scanResultModel = new ScanResultModel();
									scanResultModel.SetIndex(3);
									scanResultModel.SetVCU(isvcu: false);
									scanResultModel.SetType("");
									scanResultModel.IsBleOrRemoteConnected = false;
									scanResultModel.SettBle("", 0);
									scanResultModel.vcu = new VCUData();
									scanResultModel.vcu.Init();
									DeviceResults2.Add(scanResultModel);
									int num4 = 23;
									int num5 = 4;
									while (num4 < msg.Length)
									{
										if (msg[num4].Length == 8)
										{
											deviceMsg = new DeviceMsg
											{
												online = false,
												serialnumber = "",
												deviceid = msg[num4++]
											};
											if (num4 < msg.Length)
											{
												deviceMsg.serialnumber = msg[num4++];
											}
											deviceMsg.clientid0 = "";
											deviceMsg.clientid1 = "";
											deviceMsg.clientid2 = "";
											deviceMsg.isvcu = false;
											deviceMsg.VCUType = "";
											bindDevice.device.Add(deviceMsg);
											scanResultModel = new ScanResultModel();
											scanResultModel.SetIndex(num5++);
											scanResultModel.SetVCU(isvcu: false);
											scanResultModel.SetType("");
											scanResultModel.IsBleOrRemoteConnected = false;
											scanResultModel.SettBle("", 0);
											scanResultModel.vcu = new VCUData();
											scanResultModel.vcu.Init();
											DeviceResults2.Add(scanResultModel);
											item = new VCUSMsg
											{
												oldis = false,
												message = "",
												topmsg = ""
											};
											vcuMsgs.Add(item);
										}
										else
										{
											num4 += 2;
										}
									}
									int num6 = -1;
									for (int j = 0; j < bindDevice.device.Count && j < DeviceResults2.Count; j++)
									{
										if (bindDevice.device[j].serialnumber.Length == 20)
										{
											DeviceResults2[j].SetSN(bindDevice.device[j].serialnumber);
											DeviceResults2[j].SetName("VCU#" + (j + 1));
											try
											{
												int num7 = Convert.ToInt32(bindDevice.device[j].deviceid);
												if (num7 < 10000000 && num7 > 0)
												{
													DeviceResults2[j].SetVCU(isvcu: true);
													if (App.currentvcudeviceid == "00000000")
													{
														if (num6 < 0)
														{
															App.scanResult = DeviceResults2[j];
															num6 = j;
														}
													}
													else if (App.currentvcudeviceid == bindDevice.device[j].deviceid)
													{
														App.scanResult = DeviceResults2[j];
														num6 = j;
													}
												}
											}
											catch (Exception)
											{
											}
										}
										DeviceResults2[j].OnPropertyChanged("SerialNumber");
										DeviceResults2[j].OnPropertyChanged("IsVCU");
									}
									if (num6 < 0)
									{
										App.ReceivedVCUFrame = false;
										if (App.currentvcudeviceid != "00000000")
										{
											SecureStorage.SetAsync("CurrentVCU", "00000000");
										}
									}
									else
									{
										App.ReceivedVCUFrame = true;
										if (App.currentvcudeviceid == "00000000")
										{
											App.currentvcudeviceid = bindDevice.device[num6].deviceid;
											SecureStorage.SetAsync("CurrentVCU", App.currentvcudeviceid);
										}
									}
									if (msg.Length >= 23)
									{
										if (msg[19].Length > 16)
										{
											App.Link0 = msg[19];
										}
										if (msg[20].Length > 16)
										{
											App.Link1 = msg[20];
										}
										if (msg[21].Length > 16)
										{
											App.Link2 = msg[21];
										}
										if (msg[22].Length > 16)
										{
											App.Link3 = msg[22];
										}
									}
								});
							}
						}
						catch (Exception ex)
						{
							UserDialogs.Instance.AlertAsync("bind/message" + ex.Message);
						}
						return Task.CompletedTask;
					}
					if (arg.ApplicationMessage.Topic.Contains("/ShareID"))
					{
						string s2 = Encoding.UTF8.GetString(arg.ApplicationMessage.PayloadSegment.Array);
						MainThread.BeginInvokeOnMainThread(async delegate
						{
							if (s2.Contains("Yes"))
							{
								if (App.CN)
								{
									await UserDialogs.Instance.AlertAsync(" ⁄»®≥…π¶");
								}
								else
								{
									await UserDialogs.Instance.AlertAsync("Authority Success");
								}
							}
						});
						return Task.CompletedTask;
					}
					if (arg.ApplicationMessage.Topic.Contains("/Notify"))
					{
						string text2 = Encoding.UTF8.GetString(arg.ApplicationMessage.PayloadSegment.Array);
						string[] notice = text2.Split(new char[1] { '#' });
						string ver = notice[3].Substring(notice[2].LastIndexOf('/') + 5, 3);
						MainThread.BeginInvokeOnMainThread(async delegate
						{
							if (App.CN)
							{
								if (notice[0].Contains("–¬APP…˝º∂"))
								{
									if (App.ios)
									{
										notice[0] = "–¬App…˝º∂£∫«Î¥”App Store…˝º∂◊Ó–¬∞Ê±æ" + ver;
										await UserDialogs.Instance.AlertAsync(notice[0]);
									}
									else
									{
										bool flag = await UserDialogs.Instance.ConfirmAsync(notice[0] + " " + notice[2], null, "œ¬‘ÿ", "»°œ˚");
										upgrade = flag;
										if (upgrade)
										{
											await Browser.OpenAsync(notice[2], BrowserLaunchMode.SystemPreferred);
											await UserDialogs.Instance.AlertAsync("¥Úø™Œƒº˛‰Ø¿¿∆˜£¨—°‘Ò∏’∏’œ¬‘ÿµƒappΩ¯––∞≤◊∞");
										}
									}
								}
								else
								{
									await DisplayPromptAsync("Õ®÷™", notice[0], "»∑»œ", "»°œ˚", null, 50, null, notice[2]);
								}
							}
							else if (notice[1].Contains("New App upgrade"))
							{
								if (App.ios)
								{
									notice[1] = "New App Upgrade£∫Please upgrade the new version " + ver + " from App Store";
									await UserDialogs.Instance.AlertAsync(notice[1]);
								}
								else
								{
									bool flag = await UserDialogs.Instance.ConfirmAsync(notice[1] + " " + notice[3], null, "Download", "Cancel");
									upgrade = flag;
									if (upgrade)
									{
										await Browser.OpenAsync(notice[3], BrowserLaunchMode.SystemPreferred);
										await UserDialogs.Instance.AlertAsync("Open File Explorer, select your downloaded app and install");
									}
								}
							}
							else
							{
								await DisplayPromptAsync("Notice", notice[1], "OK", "Cancel", null, 50, null, notice[3]);
							}
						});
						return Task.CompletedTask;
					}
					if (arg.ApplicationMessage.Topic.Contains("/filelist"))
					{
						string text3 = Encoding.UTF8.GetString(arg.ApplicationMessage.PayloadSegment.Array);
						App.RemoteFileNames.Clear();
						string[] array2 = text3.Split(new char[1] { '/' });
						foreach (string text4 in array2)
						{
							if (text4.Length > 0)
							{
								App.RemoteFileNames.Add(text4);
							}
						}
						return Task.CompletedTask;
					}
					if (arg.ApplicationMessage.Topic.Contains("/GetRemoteClient"))
					{
						App.remoteid = Encoding.UTF8.GetString(arg.ApplicationMessage.PayloadSegment.Array);
						if (App.remoteid == "0000000")
						{
							MainThread.BeginInvokeOnMainThread(delegate
							{
								if (App.CN)
								{
									CmdRemote.Text = "Œﬁ–≠÷˙‘⁄œﬂ";
								}
								else
								{
									CmdRemote.Text = "No Help Online";
								}
								CmdRemote.BackgroundColor = Color.DarkKhaki;
							});
							return Task.CompletedTask;
						}
						if (App.remoteid.Length == 7)
						{
							MainThread.BeginInvokeOnMainThread(delegate
							{
								if (App.sendid == 4)
								{
									App.sendid = 5;
								}
								else
								{
									if (App.CN)
									{
										CmdRemote.Text = "’˝‘⁄«Î«Û‘∂≥Ã–≠÷˙";
									}
									else
									{
										CmdRemote.Text = "Asking for Remote Help";
									}
									CmdRemote.BackgroundColor = Color.Red;
								}
							});
						}
						return Task.CompletedTask;
					}
					if (arg.ApplicationMessage.Topic.Contains("/download"))
					{
						if (arg.ApplicationMessage.Topic.Contains(App.fileName.Substring(App.fileName.LastIndexOf('/') + 1)))
						{
							File.WriteAllBytes(App.fileName, arg.ApplicationMessage.PayloadSegment.Array);
							if (App.CN)
							{
								UserDialogs.Instance.Alert(" ’µΩ‘∂≥ÃŒƒº˛,±£¥Ê”⁄±æµÿ");
							}
							else
							{
								UserDialogs.Instance.Alert("Received Remote File Save in Local.");
							}
							Readfile();
						}
						if (App.UpdateNum == 2)
						{
							App.UpdateNum = 3;
						}
						return Task.CompletedTask;
					}
					string s3 = arg.ApplicationMessage.Topic.Substring(7, 8);
					if (s3 == "99999998")
					{
						s3 = Encoding.UTF8.GetString(arg.ApplicationMessage.PayloadSegment.Array);
						MainThread.BeginInvokeOnMainThread(delegate
						{
							if (App.CN)
							{
								DisplayPromptAsync("…Ë±∏–≈œ¢", s3, "»∑»œ", "»°œ˚", null, 2000, null, s3);
							}
							else
							{
								DisplayPromptAsync("DeviceMessage", s3, "OK", "CANCEL", null, 2000, null, s3);
							}
						});
						return Task.CompletedTask;
					}
					s3 = Encoding.UTF8.GetString(arg.ApplicationMessage.PayloadSegment.Array);
					if (App.clientid != s3.Substring(0, 7))
					{
						App.clientid = s3.Substring(0, 7);
						try
						{
							Convert.ToInt32(App.clientid);
						}
						catch (Exception)
						{
							App.clientid = "0000000";
						}
						SecureStorage.SetAsync("clientid", App.clientid);
					}
					string text5 = s3.Substring(7, 8);
					bindDevice.count = 150;
					if (text5 == "00000000")
					{
						if (arg.ApplicationMessage.Topic.Contains("/debind"))
						{
							if (App.CN)
							{
								UserDialogs.Instance.Alert("Ω‚≥˝¡ÀŒﬁ–ßµƒ∞Û∂®");
							}
							else
							{
								UserDialogs.Instance.Alert("Unbound invlaid Binding.");
							}
							return Task.CompletedTask;
						}
						if (App.CN)
						{
							UserDialogs.Instance.Alert("∏√øÿ÷∆∆˜“—æ≠∞Û∂®¡À3∏ˆ”√ªß");
						}
						else
						{
							UserDialogs.Instance.Alert("This controller bound 3 users.");
						}
						return Task.CompletedTask;
					}
					if (text5 == "FF000000")
					{
						MainThread.BeginInvokeOnMainThread(delegate
						{
							ownername = s3.Substring(23);
							if (ownername.Contains("@"))
							{
								if (App.CN)
								{
									DisplayPromptAsync("Œ¥ ⁄»®", "∞Û∂®Œ¥ ⁄»®,øΩ±¥œ¬√Ê–≈œ¢∏¯ª˙÷˜:ƒÛ…≤≥µªÚ∏ƒ±‰µµŒªªÚ≤Â∞ŒªÙ∂˚20¥Œœ‘ æª˙÷˜Email", "»∑»œ", "»°œ˚", null, 50, null, s3.Substring(15, 8) + "," + App.rcv_serialNumber);
								}
								else
								{
									DisplayPromptAsync("No Authorize", "Bound is not Authorized,Copy bellow message to the Owner:Press brake or change gear or plug and unplung Hall 20 times to display owner email", "OK", "CANCEL", null, 50, null, s3.Substring(15, 8) + "," + App.rcv_serialNumber);
								}
							}
							else if (App.CN)
							{
								DisplayPromptAsync("Œ¥ ⁄»®", "∞Û∂®Œ¥ ⁄»®,øΩ±¥œ¬√Ê–≈œ¢∏¯ª˙÷˜:ƒÛ…≤≥µªÚ∏ƒ±‰µµŒªªÚ≤Â∞ŒªÙ∂˚20¥Œœ‘ æª˙÷˜µÁª∞", "»∑»œ", "»°œ˚", null, 50, null, s3.Substring(15, 8) + "," + App.rcv_serialNumber);
							}
							else
							{
								DisplayPromptAsync("No Authorize", "Bound is not Authorized,Copy bellow message to the Owner:Pinch brake or change gear or plug and unplung Hall 20 times to display owner phone", "OK", "CANCEL", null, 50, null, s3.Substring(15, 8) + "," + App.rcv_serialNumber);
							}
							presscnt = 0;
							CanDisplayOwner = true;
						});
						return Task.CompletedTask;
					}
					if (arg.ApplicationMessage.Topic.Contains("/debind"))
					{
						if (text5 == "99999999" || text5 == "99999995")
						{
							if (App.CN)
							{
								UserDialogs.Instance.Alert("«ø÷∆Ω‚≥˝¡À…Ë±∏∞Û∂®µƒ”√ªß£∫" + s3.Substring(15));
							}
							else
							{
								UserDialogs.Instance.Alert("Force unbound the device user:" + s3.Substring(15));
							}
						}
						else if (App.CN)
						{
							UserDialogs.Instance.Alert("Ω‚≥˝∞Û∂® " + text5);
						}
						else
						{
							UserDialogs.Instance.Alert("Unbound device " + text5);
						}
						for (int num3 = 0; num3 < bindDevice.device.Count && num3 < DeviceResults2.Count; num3++)
						{
							try
							{
								if (bindDevice.device[num3].deviceid == text5)
								{
									if (App.PassOk == 1 && App.rcv_serialNumber == bindDevice.device[num3].serialnumber)
									{
										BindSend2();
									}
									bindDevice.device[num3].deviceid = "";
									DeviceResults2[num3].SetSN("");
									DeviceResults2[num3].SetVCU(isvcu: false);
									App.ReceivedVCUFrame = false;
								}
								DeviceResults2[num3].OnPropertyChanged("SerialNumber");
								DeviceResults2[num3].OnPropertyChanged("IsVCU");
							}
							catch (Exception)
							{
							}
						}
					}
					else
					{
						SecureStorage.SetAsync("clientid", App.clientid);
						SendRs232Data(19, 7, 1, 95);
						Thread.Sleep(10);
						BindSend();
						if (App.CN)
						{
							UserDialogs.Instance.Alert("∞Û∂®…Ë±∏: " + text5);
						}
						else
						{
							UserDialogs.Instance.Alert("Bound device: " + text5);
						}
						if (App.NewVersion && App.HardVer == 'H' && App.SoftVer0 < '6')
						{
							if (App.CN)
							{
								UserDialogs.Instance.Alert("∞Ê±æÃ´æ…£¨µ„…˝º∂ ˝æ›Œƒº˛£¨—°‘Ò…˝º∂µΩ◊Ó–¬πÃº˛:H97£¨H98µ»");
							}
							else
							{
								UserDialogs.Instance.Alert("Old version, press Upgrade Data File and upgrade with a new version like H97,H98 etc.");
							}
						}
					}
				}
				else if (arg.ApplicationMessage.Topic.Contains("/remote/cmd"))
				{
					string s4 = arg.ApplicationMessage.Topic.Substring(0, 7);
					MainThread.BeginInvokeOnMainThread(delegate
					{
						GetConfirm(Encoding.UTF8.GetString(arg.ApplicationMessage.PayloadSegment.Array), s4);
					});
				}
				else if (arg.ApplicationMessage.Topic.Contains(App.remoteid + "0" + App.clientid + "/remote/ack"))
				{
					if (Encoding.UTF8.GetString(arg.ApplicationMessage.PayloadSegment.Array) == "OK")
					{
						if (App.sendid == 6)
						{
							App.remoteack = 1;
							App.sendid = 0;
						}
						else
						{
							RemoteEnabled = true;
							MainThread.BeginInvokeOnMainThread(delegate
							{
								if (App.CN)
								{
									CmdRemote.Text = "‘∂≥Ã–≠÷˙“—¡¨Ω”";
								}
								else
								{
									CmdRemote.Text = "RemoteHelp Connected";
								}
								CmdRemote.BackgroundColor = Color.DarkOrange;
							});
						}
					}
					else
					{
						RemoteEnabled = false;
						MainThread.BeginInvokeOnMainThread(delegate
						{
							if (App.CN)
							{
								UserDialogs.Instance.Alert("∂‘∑Ω»°œ˚¡À¡¨Ω”");
							}
							else
							{
								UserDialogs.Instance.Alert("Remote cancelled connection");
							}
							CmdRemote.BackgroundColor = Color.Gray;
							if (App.CN)
							{
								CmdRemote.Text = "‘∂≥Ã–≠÷˙";
							}
							else
							{
								CmdRemote.Text = "Remote Help";
							}
						});
						App.SendRemote = false;
					}
				}
				else if (arg.ApplicationMessage.Topic.Contains("/poll/record"))
				{
					if (arg.ApplicationMessage.Topic.Contains("listss"))
					{
						string text6 = Encoding.UTF8.GetString(arg.ApplicationMessage.PayloadSegment.Array);
						if (text6 == "End")
						{
							text6 = arg.ApplicationMessage.Topic.Substring(7, 8) + arg.ApplicationMessage.Topic.Substring(arg.ApplicationMessage.Topic.IndexOf("listss/") + 7) + "01000000.txt";
							File.WriteAllBytes(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), text6), arg.ApplicationMessage.PayloadSegment.Array);
						}
						else
						{
							MessagingCenter.Send(this, "RecvMqttlistss", text6);
						}
					}
					else if (!arg.ApplicationMessage.Topic.Contains("listmm"))
					{
						string path2 = arg.ApplicationMessage.Topic.Substring(7, 8) + arg.ApplicationMessage.Topic.Substring(arg.ApplicationMessage.Topic.IndexOf("reply/") + 6);
						string text7 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), path2);
						if (arg.ApplicationMessage.PayloadSegment.Array.Length > 10)
						{
							File.WriteAllBytes(text7, arg.ApplicationMessage.PayloadSegment.Array);
							MessagingCenter.Send(this, "RecvMqttfile", text7);
						}
					}
				}
				else if (arg.ApplicationMessage.Topic.Contains("/remote"))
				{
					if (!App.isConnected)
					{
						App.RcvRemoteCount = 400;
						if (!remotercvdata1ready)
						{
							Array.Copy(arg.ApplicationMessage.PayloadSegment.Array, remotercvdata1, 512);
							remotercvdata1ready = true;
						}
						else if (!remotercvdata2ready)
						{
							Array.Copy(arg.ApplicationMessage.PayloadSegment.Array, remotercvdata2, 512);
							remotercvdata2ready = true;
						}
					}
					else if (RemoteEnabled)
					{
						if (chs == null)
						{
							return Task.CompletedTask;
						}
						if (App.PassOk == 0)
						{
							return Task.CompletedTask;
						}
						if (App.BindingStat < 0 && App.PassOk == 1)
						{
							MainThread.BeginInvokeOnMainThread(delegate
							{
								if (App.CN)
								{
									UserDialogs.Instance.Alert("∂‘∑Ω ‘Õº–ﬁ∏ƒøÿ÷∆∆˜≤Œ ˝£¨«Î∞Û∂®øÿ÷∆∆˜∫Û‘Ÿ–ﬁ∏ƒ");
								}
								else
								{
									UserDialogs.Instance.Alert("Remote try to modify paras,please bind the controller");
								}
							});
							return Task.CompletedTask;
						}
						if (!EnableRemoteModify)
						{
							MainThread.BeginInvokeOnMainThread(delegate
							{
								GetConfirmModify();
							});
							if (!EnableRemoteModify)
							{
								return Task.CompletedTask;
							}
						}
						try
						{
							chs.WriteAsync(arg.ApplicationMessage.PayloadSegment.Array);
						}
						catch (Exception)
						{
						}
					}
				}
				else if (arg.ApplicationMessage.Topic.Contains("S/report"))
				{
					string[] array3 = Encoding.UTF8.GetString(arg.ApplicationMessage.PayloadSegment.Array).Split(new char[1] { ',' });
					if (array3.Length < 12)
					{
						return Task.CompletedTask;
					}
					if (App.clientid != arg.ApplicationMessage.Topic.Substring(0, 7))
					{
						return Task.CompletedTask;
					}
					if (App.scanResult == null)
					{
						return Task.CompletedTask;
					}
					if (App.scanResult.SerialNumber.Length < 20)
					{
						return Task.CompletedTask;
					}
					if (App.scanResult.SerialNumber.Substring(13, 7) != arg.ApplicationMessage.Topic.Substring(8, 7))
					{
						return Task.CompletedTask;
					}
					App.scanResult.vcu.SN = array3[0];
					App.scanResult.TopMsg = array3[0];
					App.scanResult.vcu.ModelType = array3[1];
					App.scanResult.vcu.lat = Convert.ToDouble(array3[2]);
					App.scanResult.vcu.lng = Convert.ToDouble(array3[3]);
					App.scanResult.vcu.height = (float)Convert.ToDouble(array3[4]);
					App.scanResult.vcu.battsoc = Convert.ToInt16(array3[5]);
					App.scanResult.vcu.vcusoc = Convert.ToInt16(array3[6]);
					App.scanResult.vcu.restdistance = (float)Convert.ToDouble(array3[7]);
					App.scanResult.vcu.phoneKey = Convert.ToInt16(array3[8]);
					App.scanResult.vcu.remoteon = Convert.ToInt16(array3[9]);
					App.scanResult.vcu.anti_theft = Convert.ToInt16(array3[10]);
					App.scanResult.vcu.alarmstat = Convert.ToInt32(array3[11]);
					App.NewVcuMessage = 10;
					if (array3.Length < 16)
					{
						return Task.CompletedTask;
					}
					App.scanResult.vcu.lockdelay = Convert.ToInt16(array3[12]);
					App.scanResult.vcu.vibalarm = Convert.ToInt16(array3[13]);
					App.scanResult.vcu.wheelalarm = Convert.ToInt16(array3[14]) == 1;
					App.scanResult.vcu.keydistance = Convert.ToInt32(array3[15]);
					SaveSK();
					if (array3.Length < 19)
					{
						return Task.CompletedTask;
					}
					App.scanResult.vcu.ratedvoltage = Convert.ToInt16(array3[16]);
					App.scanResult.vcu.speedlimit = Convert.ToInt16(array3[17]) == 1;
					App.scanResult.vcu.overspeedalarm = Convert.ToInt16(array3[18]) == 1;
					App.scanResult.SetTime(0);
				}
				else if (arg.ApplicationMessage.Topic.Contains("L/report"))
				{
					string[] array4 = Encoding.UTF8.GetString(arg.ApplicationMessage.PayloadSegment.Array).Split(new char[1] { ',' });
					if (array4.Length < 6)
					{
						return Task.CompletedTask;
					}
					if (App.clientid != arg.ApplicationMessage.Topic.Substring(0, 7))
					{
						return Task.CompletedTask;
					}
					if (App.scanResult == null)
					{
						return Task.CompletedTask;
					}
					if (App.scanResult.SerialNumber.Length < 20)
					{
						return Task.CompletedTask;
					}
					if (App.scanResult.SerialNumber.Substring(13, 7) != arg.ApplicationMessage.Topic.Substring(8, 7))
					{
						return Task.CompletedTask;
					}
					App.scanResult.vcu.lat = Convert.ToDouble(array4[3]);
					App.scanResult.vcu.lng = Convert.ToDouble(array4[4]);
					App.scanResult.vcu.height = (float)Convert.ToDouble(array4[5]);
				}
			}
			catch (Exception ex5)
			{
				UserDialogs.Instance.AlertAsync("MqttRecv" + arg.ApplicationMessage.Topic + ex5.Message);
			}
			return Task.CompletedTask;
		}

		public async void ConnectMqttServer(int type, string vcode)
		{
			try
			{
				mqttclientid = App.username + "_ts_" + timestamp;
				spassword = App.password + "_ts_" + timestamp;
				_ = App.password + "_ts_" + timestamp;
				string password = Encrypt(type switch
				{
					0 => spassword + "_fu_R", 
					1 => spassword + "_fu_V" + App.verify, 
					4 => spassword + "_fu_P", 
					_ => spassword + "_fu_L" + App.ver, 
				});
				if (backuplink)
				{
					options = new MqttClientOptionsBuilder().WithClientId(mqttclientid).WithTcpServer(App.backupaddr, 1884).WithProtocolVersion(MqttProtocolVersion.V311)
						.WithCredentials(App.username, password)
						.WithKeepAlivePeriod(TimeSpan.FromSeconds(60.0))
						.WithTimeout(TimeSpan.FromSeconds(30.0))
						.WithoutPacketFragmentation()
						.WithCleanSession()
						.Build();
				}
				else
				{
					options = new MqttClientOptionsBuilder().WithClientId(mqttclientid).WithTcpServer(App.monitoraddr, 1883).WithProtocolVersion(MqttProtocolVersion.V311)
						.WithCredentials(App.username, password)
						.WithKeepAlivePeriod(TimeSpan.FromSeconds(60.0))
						.WithTimeout(TimeSpan.FromSeconds(30.0))
						.WithoutPacketFragmentation()
						.WithCleanSession()
						.Build();
				}
				await mqttClient.ConnectAsync(options, CancellationToken.None);
			}
			catch (Exception)
			{
				Console.WriteLine($"Failed to Connect Mqtt Server,{type},{vcode}");
			}
		}

		public async void MqttSub(string topic)
		{
			if (!mqttClient.IsConnected)
			{
				return;
			}
			try
			{
				await mqttClient.SubscribeAsync(new MqttTopicFilterBuilder().WithTopic(topic).Build());
			}
			catch (Exception)
			{
				Console.WriteLine("Failed to Sub Mqtt.");
			}
		}

		public async void MqttPub(string topic, string payload)
		{
			if (!mqttClient.IsConnected)
			{
				return;
			}
			try
			{
				await mqttClient.PublishStringAsync(topic, payload);
			}
			catch (Exception)
			{
			}
		}

		public async void MqttPub(string topic, byte[] payload)
		{
			if (!mqttClient.IsConnected)
			{
				return;
			}
			try
			{
				await mqttClient.PublishBinaryAsync(topic, payload);
			}
			catch (Exception)
			{
			}
		}

		private async void ScanForDevices()
		{
			_ = 1;
			try
			{
				App.hasSelected = false;
				foreach (IDevice connectedDevice in adapter.ConnectedDevices)
				{
					try
					{
						await connectedDevice.UpdateRssiAsync();
					}
					catch (Exception)
					{
						Console.WriteLine("Failed to update RSSI for " + connectedDevice.Name);
					}
					AddOrUpdateDevice(connectedDevice);
				}
				ScanFilterOptions scanFilterOptions = new ScanFilterOptions();
				await adapter.StartScanningForDevicesAsync(scanFilterOptions, null, allowDuplicatesKey: false, _cancellationTokenSource.Token);
			}
			catch (Exception)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("¿∂—¿»®œﬁŒ Ã‚£¨«Î‘⁄”¶”√»®œﬁ¿Ô…Ë÷√¿∂—¿µƒ∑¢œ÷∫Õ≈‰∂‘»®œﬁ£°");
				}
				else
				{
					UserDialogs.Instance.Alert("Bluetooth Permissions Problem, Please set the discover and pair permissions.");
				}
			}
		}

		private void OnDeviceDiscovered(object sender, DeviceEventArgs args)
		{
			AddOrUpdateDevice(args.Device);
		}

		private async void CheckRSSI()
		{
			try
			{
				App.hasSelected = false;
				foreach (IDevice connectedDevice in adapter.ConnectedDevices)
				{
					try
					{
						await connectedDevice.UpdateRssiAsync();
					}
					catch (Exception)
					{
					}
					UpdateDevice(connectedDevice);
				}
			}
			catch (Exception)
			{
			}
		}

		private void UpdateDevice(IDevice devicef)
		{
			ScanResultModel scanResultModel = DeviceResults.FirstOrDefault((ScanResultModel d) => d.Device != null && d.Device.Id == devicef.Id);
			if (devicef.Name != null && DeviceResults.Count > 0 && devicef.Name.Contains("YUANQU0") && scanResultModel != null)
			{
				scanResultModel.TrySet(devicef, scanResultModel.Index);
				scanResultModel.OnPropertyChanged("Rssi");
				App.rssi = scanResultModel.Rssi;
			}
		}

		private void AddOrUpdateDevice(IDevice devicef)
		{
			ScanResultModel scanResultModel = DeviceResults.FirstOrDefault((ScanResultModel d) => d.Device != null && d.Device.Id == devicef.Id);
			if (devicef.Name != null && ((DeviceResults.Count > 0 && (devicef.Name.ToUpper().Contains("YUANQU") || devicef.Name.ToUpper().Contains("CONTROL") || devicef.Name.ToUpper().Contains("BMS"))) || DeviceResults.Count == 0))
			{
				if (scanResultModel != null)
				{
					scanResultModel.TrySet(devicef, scanResultModel.Index);
					scanResultModel.OnPropertyChanged("Rssi");
				}
				else
				{
					scanResultModel = new ScanResultModel();
					scanResultModel.TrySet(devicef, DeviceResults.Count + 1);
					DeviceResults.Add(scanResultModel);
				}
				ConnectBlue();
			}
		}

		private async void ConnectBlue()
		{
			try
			{
				foreach (ScanResultModel dev in DeviceResults)
				{
					if (!(dev.Name == App.LastConnectedBlue) || chs != null)
					{
						continue;
					}
					try
					{
						if (dev.Name.Contains("YUANQU0") && dev.Rssi <= -90)
						{
							return;
						}
						await adapter.ConnectToDeviceAsync(dev.Device);
						if (dev.Device.State == DeviceState.Connected)
						{
							isconnecting = false;
							dev.IsConnected = dev.Device.State == DeviceState.Connected;
							dev.OnPropertyChanged("IsConnected");
							App.isConnected = true;
							App.NotBindStat = 1;
							bluedevice = dev.Device;
							bleconnect_imecount = 0;
							Device.BeginInvokeOnMainThread(delegate
							{
								SetConnectStat();
							});
							OnDeviceStateChanged();
						}
					}
					catch (Exception)
					{
					}
				}
			}
			catch (Exception)
			{
			}
		}

		private void OnDeviceConnectionLost(object sender, DeviceErrorEventArgs e)
		{
			isconnecting = false;
			App.isConnected = false;
			App.isConnectedLost = true;
			try
			{
				if (App.CN)
				{
					Connection.Text = "¡¨Ω”";
				}
				else
				{
					Connection.Text = "Connect";
				}
				IsScanning = true;
				foreach (ScanResultModel deviceResult in DeviceResults)
				{
					if (deviceResult.Device != null && deviceResult.Uuid == bluedevice.Id)
					{
						DeviceResults.Remove(deviceResult);
						bluedevice = null;
						chs = null;
						App.NewData = 0u;
						App.HasParaFile = 0;
						bleconnect_imecount = 0;
						App.PassOk = 0;
						break;
					}
				}
				scantimecount = 0;
				DeviceResults.Clear();
			}
			catch (Exception ex)
			{
				Console.WriteLine("1 " + ex);
			}
		}

		private void OnDeviceDisconnected(object sender, DeviceEventArgs e)
		{
			bool isConnected = false;
			try
			{
				foreach (ScanResultModel deviceResult in DeviceResults)
				{
					if (deviceResult.Device != null)
					{
						deviceResult.IsConnected = deviceResult.Device.State == DeviceState.Connected;
						deviceResult.OnPropertyChanged("IsConnected");
						if (deviceResult.IsConnected)
						{
							isConnected = true;
						}
						else
						{
							App.NewData = 0u;
							App.HasParaFile = 0;
						}
						App.PassOk = 0;
					}
				}
				App.isConnected = isConnected;
			}
			catch (Exception ex)
			{
				Console.WriteLine("1 " + ex);
			}
		}

		private void OnDeviceConnected(object sender, DeviceEventArgs e)
		{
		}

		private async void SetPermission()
		{
			if (await CrossPermissions.Current.CheckPermissionStatusAsync<LocationWhenInUsePermission>() != Plugin.Permissions.Abstractions.PermissionStatus.Granted)
			{
				if (await CrossPermissions.Current.RequestPermissionAsync<LocationWhenInUsePermission>() == Plugin.Permissions.Abstractions.PermissionStatus.Granted)
				{
					permi = 1;
				}
			}
			else
			{
				permi = 1;
			}
			if (await CrossPermissions.Current.CheckPermissionStatusAsync<StoragePermission>() != Plugin.Permissions.Abstractions.PermissionStatus.Granted)
			{
				await CrossPermissions.Current.RequestPermissionAsync<StoragePermission>();
			}
		}

		protected override void OnAppearing()
		{
			base.OnAppearing();
			App.loginstat = 0;
			SetPermission();
			Connection.TextColor = Color.White;
			IsScanning = false;
			if (App.CN)
			{
				CmdName.Text = "…®√Ë";
			}
			else
			{
				CmdName.Text = "Scan";
			}
			if (App.CN)
			{
				FileName = "…˝º∂Œƒº˛£∫" + App.fileName;
			}
			else
			{
				FileName = "Update File:" + App.fileName;
			}
			if (App.fileName != null && (App.fileName.Contains(".bin") || App.fileName.Contains(".hex") || App.fileName.Contains(".heb")))
			{
				if (App.CN)
				{
					DownloadFileName.Text = "Œƒº˛√˚£∫";
				}
				else
				{
					DownloadFileName.Text = "FileName:";
				}
				DownloadFileName.Text += App.fileName;
			}
		}

		private void CmdName_Clicked(object sender, EventArgs e)
		{
			if (IsScanning)
			{
				IsScanning = false;
				if (App.CN)
				{
					CmdName.Text = "…®√Ë";
				}
				else
				{
					CmdName.Text = "Scan";
				}
				return;
			}
			IsScanning = true;
			if (App.CN)
			{
				CmdName.Text = "Õ£÷π";
			}
			else
			{
				CmdName.Text = "Stop";
			}
			DeviceResults.Clear();
			ScanForDevices();
		}

		private bool IsPointOnLine(double px0, double py0, double px1, double py1, double px2, double py2)
		{
			bool result = false;
			double num = (px1 - px0) * (py2 - py0) - (px2 - px0) * (py1 - py0);
			if (((num >= 0.0) ? num : (0.0 - num)) < 1E-06 && (px0 - px1) * (px0 - px2) <= 0.0 && (py0 - py1) * (py0 - py2) <= 0.0)
			{
				result = true;
			}
			return result;
		}

		private bool IsIntersect(double px1, double py1, double px2, double py2, double px3, double py3, double px4, double py4)
		{
			bool result = false;
			double num = (px2 - px1) * (py4 - py3) - (py2 - py1) * (px4 - px3);
			if (num != 0.0)
			{
				double num2 = ((py1 - py3) * (px4 - px3) - (px1 - px3) * (py4 - py3)) / num;
				double num3 = ((py1 - py3) * (px2 - px1) - (px1 - px3) * (py2 - py1)) / num;
				if (num2 >= 0.0 && num2 <= 1.0 && num3 >= 0.0 && num3 <= 1.0)
				{
					result = true;
				}
			}
			return result;
		}

		private double fabs(double x)
		{
			if (x < 0.0)
			{
				x = 0.0 - x;
			}
			return x;
		}

		private bool IsInChina()
		{
			bool result = false;
			int num = 0;
			double num2 = 200.0;
			for (int i = 0; i < 37; i++)
			{
				if (num2 > chinapos[i, 0])
				{
					num2 = chinapos[i, 0];
				}
			}
			double longitude = App.pos.Longitude;
			double latitude = App.pos.Latitude;
			double num3 = longitude;
			double num4 = latitude;
			double num5 = num2 - 10.0;
			double num6 = latitude;
			for (int j = 0; j < 36; j++)
			{
				double num7 = chinapos[j, 0];
				double num8 = chinapos[j, 1];
				double num9 = chinapos[j + 1, 0];
				double num10 = chinapos[j + 1, 1];
				if (IsPointOnLine(longitude, latitude, num7, num8, num9, num10))
				{
					return true;
				}
				if (fabs(num10 - num8) < 1E-06)
				{
					continue;
				}
				if (IsPointOnLine(num7, num8, num3, num4, num5, num6))
				{
					if (num8 > num10)
					{
						num++;
					}
				}
				else if (IsPointOnLine(num9, num10, num3, num4, num5, num6))
				{
					if (num10 > num8)
					{
						num++;
					}
				}
				else if (IsIntersect(num7, num8, num9, num10, num3, num4, num5, num6))
				{
					num++;
				}
			}
			if (num % 2 == 1)
			{
				result = true;
			}
			return result;
		}

		private async void GetLoc()
		{
			try
			{
				App.pos = await Geolocation.GetLocationAsync(new GeolocationRequest(GeolocationAccuracy.Medium));
				if (App.pos != null)
				{
					if (IsInChina())
					{
						App.localAgent = "China";
					}
					else
					{
						App.localAgent = "Other";
					}
				}
				else
				{
					App.localAgent = "None";
				}
			}
			catch (Exception)
			{
				App.pos = null;
				App.localAgent = "None";
			}
		}

		public async void Readfile()
		{
			if (!App.fileName.Contains(".heb"))
			{
				return;
			}
			Stream stream = File.OpenRead(App.fileName);
			if (stream.Length == 696)
			{
				await stream.ReadAsync(App.wflash, 0, 312);
				await stream.ReadAsync(App.cflash, 0, 384);
				App.HasParaFile = 1;
				Device.BeginInvokeOnMainThread(delegate
				{
					CmdUpgrade.IsEnabled = true;
				});
			}
			else if (App.CN)
			{
				UserDialogs.Instance.Alert("≤Œ ˝Œƒº˛≤ª∂‘");
			}
			else
			{
				UserDialogs.Instance.Alert("Error Para File");
			}
		}

		private void keyonoff(int on, int off)
		{
			if (App.rssi > on)
			{
				if (App.scanResult.vcu.remoteon == 0)
				{
					SendRs232Data(19, 7, 20, 95);
				}
			}
			else if (App.rssi <= off && App.scanResult.vcu.remoteon == 1)
			{
				SendRs232Data(19, 7, 21, 95);
			}
		}

		private void OpenKey()
		{
			if (App.scanResult != null && chs != null && App.LastConnectedBlue.Contains("YUANQU0"))
			{
				switch (App.keydistance[0])
				{
				case '1':
					keyonoff(-66, -82);
					break;
				case '2':
					keyonoff(-69, -85);
					break;
				case '3':
					keyonoff(-72, -88);
					break;
				case '4':
					keyonoff(-75, -91);
					break;
				case '5':
					keyonoff(-78, -94);
					break;
				}
			}
		}

		private void ManageBind(string s2)
		{
			string[] array = s2.Split(new char[1] { ',' });
			if (array.Length < 19)
			{
				return;
			}
			bindDevice.SN6 = array[0];
			bindDevice.device.Clear();
			DeviceMsg deviceMsg = new DeviceMsg();
			if (array[1] == "1")
			{
				deviceMsg.online = true;
			}
			else
			{
				deviceMsg.online = false;
			}
			deviceMsg.serialnumber = array[2];
			deviceMsg.deviceid = array[3];
			deviceMsg.clientid0 = array[4];
			deviceMsg.clientid1 = array[5];
			deviceMsg.clientid2 = array[6];
			deviceMsg.isvcu = false;
			deviceMsg.VCUType = "";
			bindDevice.device.Add(deviceMsg);
			deviceMsg = new DeviceMsg();
			if (array[7] == "1")
			{
				deviceMsg.online = true;
			}
			else
			{
				deviceMsg.online = false;
			}
			deviceMsg.serialnumber = array[8];
			deviceMsg.deviceid = array[9];
			deviceMsg.clientid0 = array[10];
			deviceMsg.clientid1 = array[11];
			deviceMsg.clientid2 = array[12];
			deviceMsg.isvcu = false;
			deviceMsg.VCUType = "";
			bindDevice.device.Add(deviceMsg);
			deviceMsg = new DeviceMsg();
			if (array[13] == "1")
			{
				deviceMsg.online = true;
			}
			else
			{
				deviceMsg.online = false;
			}
			deviceMsg.serialnumber = array[14];
			deviceMsg.deviceid = array[15];
			deviceMsg.clientid0 = array[16];
			deviceMsg.clientid1 = array[17];
			deviceMsg.clientid2 = array[18];
			deviceMsg.isvcu = false;
			deviceMsg.VCUType = "";
			bindDevice.device.Add(deviceMsg);
			bindDevice.count = 0;
			vcuMsgs.Clear();
			VCUSMsg vCUSMsg = new VCUSMsg();
			vCUSMsg.oldis = false;
			vCUSMsg.message = "";
			vCUSMsg.topmsg = "";
			vcuMsgs.Add(vCUSMsg);
			vCUSMsg = new VCUSMsg();
			vCUSMsg.oldis = false;
			vCUSMsg.message = "";
			vCUSMsg.topmsg = "";
			vcuMsgs.Add(vCUSMsg);
			vCUSMsg = new VCUSMsg();
			vCUSMsg.oldis = false;
			vCUSMsg.message = "";
			vCUSMsg.topmsg = "";
			vcuMsgs.Add(vCUSMsg);
			DeviceResults2.Clear();
			ScanResultModel scanResultModel = new ScanResultModel();
			scanResultModel.SetIndex(1);
			scanResultModel.SetVCU(isvcu: false);
			scanResultModel.SetType("");
			scanResultModel.IsBleOrRemoteConnected = false;
			scanResultModel.SettBle("", 0);
			scanResultModel.vcu = new VCUData();
			scanResultModel.vcu.Init();
			DeviceResults2.Add(scanResultModel);
			scanResultModel = new ScanResultModel();
			scanResultModel.SetIndex(2);
			scanResultModel.SetVCU(isvcu: false);
			scanResultModel.SetType("");
			scanResultModel.IsBleOrRemoteConnected = false;
			scanResultModel.SettBle("", 0);
			scanResultModel.vcu = new VCUData();
			scanResultModel.vcu.Init();
			DeviceResults2.Add(scanResultModel);
			scanResultModel = new ScanResultModel();
			scanResultModel.SetIndex(3);
			scanResultModel.SetVCU(isvcu: false);
			scanResultModel.SetType("");
			scanResultModel.IsBleOrRemoteConnected = false;
			scanResultModel.SettBle("", 0);
			scanResultModel.vcu = new VCUData();
			scanResultModel.vcu.Init();
			DeviceResults2.Add(scanResultModel);
			int num = 23;
			int num2 = 4;
			while (num < array.Length)
			{
				if (array[num].Length == 8)
				{
					deviceMsg = new DeviceMsg();
					deviceMsg.online = false;
					deviceMsg.serialnumber = "";
					deviceMsg.deviceid = array[num++];
					if (num < array.Length)
					{
						deviceMsg.serialnumber = array[num++];
					}
					deviceMsg.clientid0 = "";
					deviceMsg.clientid1 = "";
					deviceMsg.clientid2 = "";
					deviceMsg.isvcu = false;
					deviceMsg.VCUType = "";
					bindDevice.device.Add(deviceMsg);
					scanResultModel = new ScanResultModel();
					scanResultModel.SetIndex(num2++);
					scanResultModel.SetVCU(isvcu: false);
					scanResultModel.SetType("");
					scanResultModel.IsBleOrRemoteConnected = false;
					scanResultModel.SettBle("", 0);
					scanResultModel.vcu = new VCUData();
					scanResultModel.vcu.Init();
					DeviceResults2.Add(scanResultModel);
					vCUSMsg = new VCUSMsg();
					vCUSMsg.oldis = false;
					vCUSMsg.message = "";
					vCUSMsg.topmsg = "";
					vcuMsgs.Add(vCUSMsg);
				}
				else
				{
					num += 2;
				}
			}
			int num3 = -1;
			for (int i = 0; i < bindDevice.device.Count && i < DeviceResults2.Count; i++)
			{
				if (bindDevice.device[i].serialnumber.Length == 20)
				{
					DeviceResults2[i].SetSN(bindDevice.device[i].serialnumber);
					DeviceResults2[i].SetName("VCU#" + (i + 1));
					try
					{
						int num4 = Convert.ToInt32(bindDevice.device[i].deviceid);
						if (num4 < 10000000 && num4 > 0)
						{
							DeviceResults2[i].SetVCU(isvcu: true);
							if (App.currentvcudeviceid == bindDevice.device[i].deviceid)
							{
								App.scanResult = DeviceResults2[i];
								num3 = i;
							}
						}
					}
					catch (Exception)
					{
					}
				}
				DeviceResults2[i].OnPropertyChanged("SerialNumber");
				DeviceResults2[i].OnPropertyChanged("IsVCU");
			}
			if (num3 < 0)
			{
				App.ReceivedVCUFrame = false;
			}
			else
			{
				App.ReceivedVCUFrame = true;
			}
			if (array.Length >= 23)
			{
				if (array[19].Length > 16)
				{
					App.Link0 = array[19];
				}
				if (array[20].Length > 16)
				{
					App.Link1 = array[20];
				}
				if (array[21].Length > 16)
				{
					App.Link2 = array[21];
				}
				if (array[22].Length > 16)
				{
					App.Link3 = array[22];
				}
			}
		}

		public ConnectPage()
		{
			InitializeComponent();
			VersionTracking.Track();
			App.ver = VersionTracking.CurrentVersion.Replace(".", "");
			On<iOS>().SetUseSafeArea(value: true);
			isconnecting = false;
			packcnt = 0;
			subpacktotal = 0;
			dld_overtime = 0;
			dld_DelayTime = 0;
			dld_Ack = 0;
			hasprogress = false;
			crc32 = new uint[256];
			crc_filetable = new uint[128];
			crc_table = new uint[128];
			initcrc();
			int logcnt = 0;
			m_RcvIndex = 0;
			rcv_crc = 0;
			m_Received = new byte[16];
			bindDevice.device = new List<DeviceMsg>();
			bindDevice.count = 150;
			resultListView.ItemsSource = DeviceResults;
			resultListView2.ItemsSource = DeviceResults2;
			adapter = CrossBluetoothLE.Current.Adapter;
			adapter.DeviceConnected += OnDeviceConnected;
			adapter.DeviceDiscovered += OnDeviceDiscovered;
			adapter.DeviceDisconnected += OnDeviceDisconnected;
			adapter.DeviceConnectionLost += OnDeviceConnectionLost;
			Connection.IsEnabled = false;
			noFramesTime = 100;
			CopyNewData = false;
			byte[] wflahss = new byte[318];
			byte[] cflahss = new byte[390];
			int logtimecnt = 0;
			int send1cnt = 0;
			int send2cnt = 0;
			int Unbound = 0;
			if (App.CN)
			{
				CmdImport.Text = "µº»Î";
				CmdRemote.Text = "‘∂≥Ã –≠÷˙";
				CmdProduct.Text = "”√ªßµ«¬º";
				CmdPassword.Text = "øÿ÷∆∆˜µ«¬º";
			}
			else
			{
				CmdRemote.Text = "Remote Help";
				CmdImport.Text = "import";
				CmdProduct.Text = "UserLogin";
				CmdPassword.Text = "Controller Login";
			}
			if (App.CN)
			{
				CmdDetail.Text = "∏¸∂‡";
			}
			else
			{
				CmdDetail.Text = "More";
			}
			if (App.CN)
			{
				CmdUpgrade.Text = "…˝º∂";
				CmdFlashIn.Text = "À¢ª˙";
				CmdSelect.Text = "…˝º∂ ˝æ›Œƒº˛";
				CmdSelect2.Text = " ⁄»®";
				CmdExport.Text = "µº≥ˆ";
			}
			else
			{
				CmdUpgrade.Text = "Update";
				CmdFlashIn.Text = "Flash";
				CmdExport.Text = "Export";
				CmdSelect.Text = "Upgrade Data File";
				CmdSelect2.Text = "Authorize";
			}
			byte[] sendbt = new byte[16];
			bindDevice.count = 150;
			if (!App.CN)
			{
				Connection.Text = "Connect";
			}
			string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "BindDevices.bdx");
			if (File.Exists(path))
			{
				byte[] array = File.ReadAllBytes(path);
				int num = 0;
				for (int i = 0; i < array.Length; i++)
				{
					array[i] ^= bk[num];
					num = ((num < 15) ? (num + 1) : 0);
				}
				App.bindstr = Encoding.UTF8.GetString(array);
				if (App.bindstr.Length > 0)
				{
					string bindstr = App.bindstr;
					App.bindstr = "";
					ManageBind(bindstr);
				}
			}
			timestamp = GetCurrentMilliseconds();
			InitMqttClient();
			int graphtime = 0;
			int sendtimes = 0;
			MessagingCenter.Subscribe(this, "WriteParaMeter", async delegate(ParaPage sender, byte[] arg)
			{
				try
				{
					if (!App.isConnected)
					{
						if (App.CAT1_Loggined && App.RcvRemoteCount > 0)
						{
							string topic = App.clientid + "0" + RemoteClient + "/remote";
							MqttPub(topic, arg);
						}
					}
					else if (chs != null)
					{
						App.maintainPackCnt = 0;
						await chs.WriteAsync(arg);
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Toast("Para∑¢ÀÕ≤Œ ˝ ß∞‹WriteParameter- " + ex.ToString());
				}
			});
			MessagingCenter.Subscribe(this, "WriteParaMeter", async delegate(ProControlPage sender, byte[] arg)
			{
				try
				{
					if (!App.isConnected)
					{
						if (App.CAT1_Loggined && App.RcvRemoteCount > 0)
						{
							string topic = App.clientid + "0" + RemoteClient + "/remote";
							MqttPub(topic, arg);
						}
					}
					else if (chs != null)
					{
						App.maintainPackCnt = 0;
						await chs.WriteAsync(arg);
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Toast("procontrol∑¢ÀÕ≤Œ ˝ ß∞‹WriteParameter- " + ex.ToString());
				}
			});
			MessagingCenter.Subscribe(this, "WriteParaMeter", async delegate(ProBmsPage sender, byte[] arg)
			{
				try
				{
					if (!App.isConnected)
					{
						if (App.CAT1_Loggined && App.RcvRemoteCount > 0)
						{
							string topic = App.clientid + "0" + RemoteClient + "/remote";
							MqttPub(topic, arg);
						}
					}
					else if (chs != null)
					{
						App.maintainPackCnt = 0;
						await chs.WriteAsync(arg);
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Toast("probms∑¢ÀÕ≤Œ ˝ ß∞‹WriteParameter- " + ex.ToString());
				}
			});
			MessagingCenter.Subscribe(this, "WriteParaMeter", async delegate(StatPage sender, byte[] arg)
			{
				try
				{
					if (!App.isConnected)
					{
						if (App.CAT1_Loggined && App.RcvRemoteCount > 0)
						{
							string topic = App.clientid + "0" + RemoteClient + "/remote";
							MqttPub(topic, arg);
						}
					}
					else if (chs != null)
					{
						App.maintainPackCnt = 0;
						await chs.WriteAsync(arg);
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Toast("statp∑¢ÀÕ≤Œ ˝ ß∞‹WriteParameter- " + ex.ToString());
				}
			});
			MessagingCenter.Subscribe(this, "SendMqtt", delegate(CenterPage sender, string arg)
			{
				try
				{
					if (App.CAT1_Loggined)
					{
						string topic = App.clientid + App.currentvcudeviceid + "/control";
						MqttPub(topic, arg);
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Toast("center∑¢ÀÕ≤Œ ˝ ß∞‹WriteParameter- " + ex.ToString());
				}
			});
			MessagingCenter.Subscribe(this, "SendMqttlistss", delegate(MonthRecordPage sender, string arg)
			{
				try
				{
					if (App.CAT1_Loggined)
					{
						string topic = App.clientid + App.currentvcudeviceid + "/poll/record/listss";
						MqttPub(topic, arg);
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Toast("SendMqttlistss- " + ex);
				}
			});
			MessagingCenter.Subscribe(this, "SendMqttrecord", delegate(MonthRecordPage sender, string arg)
			{
				try
				{
					if (App.CAT1_Loggined)
					{
						string topic = App.clientid + App.currentvcudeviceid + "/poll/record";
						MqttPub(topic, arg);
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Toast("SendMqttrecord- " + ex.ToString());
				}
			});
			MessagingCenter.Subscribe(this, "WriteParaMeter", async delegate(GraphPage sender, byte[] arg)
			{
				try
				{
					if (!App.isConnected && App.CAT1_Loggined && App.RcvRemoteCount > 0)
					{
						string topic = App.clientid + "0" + RemoteClient + "/remote";
						MqttPub(topic, arg);
					}
					if (chs != null)
					{
						App.maintainPackCnt = 0;
						await chs.WriteAsync(arg);
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Toast("grapht∑¢ÀÕ≤Œ ˝ ß∞‹WriteParameter- " + ex.ToString());
				}
			});
			MessagingCenter.Subscribe(this, "WriteParaMeter", async delegate(CurvePage sender, byte[] arg)
			{
				try
				{
					if (!App.isConnected && App.CAT1_Loggined && App.RcvRemoteCount > 0)
					{
						string topic = App.clientid + "0" + RemoteClient + "/remote";
						MqttPub(topic, arg);
					}
					if (chs != null)
					{
						App.maintainPackCnt = 0;
						await chs.WriteAsync(arg);
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Toast("curve∑¢ÀÕ≤Œ ˝ ß∞‹WriteParameter- " + ex.ToString());
				}
			});
			Device.StartTimer(TimeSpan.FromMilliseconds(25.0), delegate
			{
				try
				{
					if (App.NotBindStat == 99)
					{
						App.NotBindStat = 90;
						LoginView_Clicked(null, null);
					}
					if (App.UpdateNum == 1)
					{
						App.UpdateNum = 2;
						string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
						string source = App.ModelName.Substring(0, 8);
						source = ((!Enumerable.Contains(source, '_')) ? (App.ModelName.Substring(0, 13) + ".hex") : (App.ModelName.Substring(0, 12) + ".hex"));
						App.fileName = $"{folderPath}/{source}";
						App.Downloaded = 2;
					}
					else if (App.UpdateNum == 8)
					{
						App.UpdateNum = 9;
						func = 0;
						FlashHex();
					}
					ManageAuth();
					if (App.CAT1_Loggined)
					{
						switch (App.sendid)
						{
						case 1:
							if (App.remoteid.Length == 7)
							{
								if (App.graphrcvd)
								{
									App.graphrcvd = false;
									sendtimes = 0;
									graphtime = 0;
									string topic2;
									int num2;
									if (App.sendgraph.Length > App.sendoffset + 8000)
									{
										topic2 = App.clientid + "0" + App.remoteid + "/tlkchtgra" + App.sendoffset;
										num2 = 8000;
									}
									else
									{
										topic2 = App.clientid + "0" + App.remoteid + "/tlkchtgra";
										num2 = App.sendgraph.Length - App.sendoffset;
										App.sendid = 0;
									}
									byte[] array2 = new byte[num2];
									Array.Copy(App.sendgraph, App.sendoffset, array2, 0, num2);
									if (App.sendgraph.Length > App.sendoffset + 8000)
									{
										App.sendoffset += 8000;
									}
									else
									{
										App.sendoffset = 0;
									}
									MqttPub(topic2, array2);
								}
								else if (graphtime < 50)
								{
									graphtime++;
								}
								else
								{
									graphtime = 0;
									if (sendtimes < 3)
									{
										sendtimes++;
										string topic3;
										int num3;
										if (App.sendgraph.Length > App.sendoffset + 8000)
										{
											topic3 = App.clientid + "0" + App.remoteid + "/tlkchtgra" + App.sendoffset;
											num3 = 8000;
										}
										else
										{
											topic3 = App.clientid + "0" + App.remoteid + "/tlkchtgra";
											num3 = App.sendgraph.Length - App.sendoffset;
										}
										byte[] array3 = new byte[num3];
										Array.Copy(App.sendgraph, App.sendoffset, array3, 0, num3);
										if (App.sendgraph.Length > App.sendoffset + 8000)
										{
											App.sendoffset += 8000;
										}
										else
										{
											App.sendoffset = 0;
										}
										MqttPub(topic3, array3);
									}
									else
									{
										App.sendid = 0;
									}
								}
							}
							else
							{
								App.sendid = 0;
							}
							break;
						case 2:
							if (App.remoteid.Length == 7)
							{
								string topic = App.clientid + "0" + App.remoteid + "/tlkcht";
								MqttPub(topic, App.sendmsg);
							}
							App.sendid = 0;
							break;
						case 3:
						{
							string payload = Encrypt(App.sendmsg);
							MqttPub(App.clientid + "00000000/bind/GetRemoteClient", payload);
							App.sendid = 4;
							break;
						}
						case 5:
							App.sendid = 0;
							break;
						}
					}
					if (App.RcvRemoteCount > 0)
					{
						App.RcvRemoteCount--;
					}
					App.CAT1_Loggined = App.CAT1_Connected && App.isLogged == "OK";
					if (App.RcvRemoteCount > 0)
					{
						CmdFlashIn.BackgroundColor = Color.Orange;
						CmdSelect.BackgroundColor = Color.Orange;
						CmdSelect2.BackgroundColor = Color.Orange;
						CmdProduct.BackgroundColor = Color.Orange;
						CmdImport.BackgroundColor = Color.Orange;
						CmdUpgrade.BackgroundColor = Color.Orange;
						if (App.CN)
						{
							CmdSelect2.Text = "ÕÀ≥ˆ‘∂≥Ã";
						}
						else
						{
							CmdSelect2.Text = "QuitRemote";
						}
					}
					else
					{
						if (App.CN)
						{
							CmdSelect2.Text = " ⁄»®";
						}
						else
						{
							CmdSelect2.Text = "Authorize";
						}
						if (App.CAT1_Loggined)
						{
							if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
							{
								CmdFlashIn.BackgroundColor = Color.LightBlue;
								CmdSelect.BackgroundColor = Color.LightBlue;
								CmdSelect2.BackgroundColor = Color.LightBlue;
								CmdProduct.BackgroundColor = Color.LightBlue;
								CmdImport.BackgroundColor = Color.LightBlue;
								CmdUpgrade.BackgroundColor = Color.LightBlue;
							}
							else if (App.isConnected)
							{
								CmdFlashIn.BackgroundColor = Color.LightCyan;
								CmdSelect.BackgroundColor = Color.LightCyan;
								CmdSelect2.BackgroundColor = Color.LightCyan;
								CmdProduct.BackgroundColor = Color.LightCyan;
								CmdImport.BackgroundColor = Color.LightCyan;
								CmdUpgrade.BackgroundColor = Color.LightCyan;
							}
							else
							{
								CmdFlashIn.BackgroundColor = Color.LightGreen;
								CmdSelect.BackgroundColor = Color.LightGreen;
								CmdSelect2.BackgroundColor = Color.LightGreen;
								CmdProduct.BackgroundColor = Color.LightGreen;
								CmdImport.BackgroundColor = Color.LightGreen;
								CmdUpgrade.BackgroundColor = Color.LightGreen;
							}
						}
						else
						{
							CmdFlashIn.BackgroundColor = Color.LightGray;
							CmdSelect.BackgroundColor = Color.LightGray;
							CmdSelect2.BackgroundColor = Color.LightGray;
							CmdProduct.BackgroundColor = Color.LightGray;
							CmdImport.BackgroundColor = Color.LightGray;
							CmdUpgrade.BackgroundColor = Color.LightGray;
						}
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Alert("Connect1 " + ex.ToString());
				}
				try
				{
					if (bindDevice.count == 150 && App.CAT1_Loggined)
					{
						if (App.NewSerialnumber != App.rcv_serialNumber)
						{
							App.NewSerialnumber = App.rcv_serialNumber;
						}
						string payload2 = Encrypt(App.rcv_serialNumber + "_ts_" + timestamp);
						string topic4 = App.clientid + "00000000/bind/message";
						MqttPub(topic4, payload2);
						bindDevice.count--;
					}
					else if (bindDevice.count > 1)
					{
						bindDevice.count--;
					}
					else if (bindDevice.count == 1)
					{
						bindDevice.count = 150;
					}
					else if (App.NewSerialnumber != App.rcv_serialNumber)
					{
						App.NewSerialnumber = App.rcv_serialNumber;
						bindDevice.count = 150;
						sendLocation = false;
					}
					ScanResultModel scanResultModel = DeviceResults.FirstOrDefault((ScanResultModel d) => d.IsConnected);
					if (scanResultModel != null)
					{
						if (scanResultModel.ModelName != App.ModelName || scanResultModel.SerialNumber != App.rcv_serialNumber)
						{
							if (App.LastConnectedBlue != scanResultModel.Name)
							{
								App.LastConnectedBlue = scanResultModel.Name;
								SecureStorage.SetAsync("LastConnectedBlue", App.LastConnectedBlue);
							}
							int num4 = App.LastConnectedBlue.IndexOf("YUANQU");
							if (num4 >= 0)
							{
								try
								{
									if (App.LastConnectedBlue[6] >= '0' && App.LastConnectedBlue[6] <= '9')
									{
										App.rcv_serialNumber = "VCUFarDriverA" + Convert.ToInt32(App.LastConnectedBlue.Substring(6, 7)).ToString("0000000");
										App.ReceivedVCUFrame = true;
									}
									else
									{
										App.ReceivedVCUFrame = false;
									}
								}
								catch (Exception)
								{
									App.ReceivedVCUFrame = false;
								}
							}
							else
							{
								App.ReceivedVCUFrame = false;
							}
							scanResultModel.SetType(App.ModelName);
							scanResultModel.OnPropertyChanged("ModelName");
						}
						if (ConnectTimeCount > 0)
						{
							ConnectTimeCount--;
							if (hallalarm != App.hallalarm)
							{
								ConnectTimeCount -= 20000;
							}
						}
						if (hallalarm != App.hallalarm)
						{
							presscnt++;
							hallalarm = App.hallalarm;
						}
					}
					else if (scantimecount < 100)
					{
						scantimecount++;
					}
					else
					{
						scantimecount = 0;
						ScanForDevices();
					}
					if (App.SendRemote && App.remoteid.Length == 7 && App.clientid.Length == 7)
					{
						if (RemoteEnabled)
						{
							if (remotetxdata1ready)
							{
								string topic5 = App.clientid + "0" + App.remoteid + "/remote";
								MqttPub(topic5, remotetxdata1);
								remotetxdata1ready = false;
							}
							else if (remotetxdata2ready)
							{
								string topic6 = App.clientid + "0" + App.remoteid + "/remote";
								MqttPub(topic6, remotetxdata2);
								remotetxdata2ready = false;
							}
						}
						else if (!RemoteRequest)
						{
							string topic7 = App.clientid + "0" + App.remoteid + "/remote/cmd";
							MqttPub(topic7, App.username);
							RemoteRequest = true;
						}
					}
					if (remotercvdata1ready)
					{
						if (send1cnt < 512)
						{
							Array.Copy(remotercvdata1, send1cnt, sendbt, 0, 16);
							MessagingCenter.Send(this, "ReadParaMeter", sendbt);
							send1cnt += 16;
						}
						if (send1cnt == 512)
						{
							remotercvdata1ready = false;
							send1cnt = 0;
						}
					}
					else if (remotercvdata2ready)
					{
						if (send2cnt < 512)
						{
							Array.Copy(remotercvdata2, send2cnt, sendbt, 0, 16);
							MessagingCenter.Send(this, "ReadParaMeter", sendbt);
							send2cnt += 16;
						}
						if (send2cnt == 512)
						{
							remotercvdata2ready = false;
							send2cnt = 0;
						}
					}
					for (int num5 = 0; num5 < DeviceResults2.Count && num5 < bindDevice.device.Count && num5 < vcuMsgs.Count; num5++)
					{
						if (App.rcv_serialNumber == bindDevice.device[num5].serialnumber && App.ModelName != DeviceResults2[num5].ModelName)
						{
							DeviceResults2[num5].SetType(App.ModelName);
							DeviceResults2[num5].OnPropertyChanged("ModelName");
						}
						try
						{
							if (App.isConnected && App.rcv_serialNumber == bindDevice.device[num5].serialnumber)
							{
								DeviceResults2[num5].IsBleOrRemoteConnected = true;
							}
							else if (bindDevice.device[num5].online)
							{
								int num6 = Convert.ToInt32(bindDevice.device[num5].deviceid);
								if (num6 > 0 && num6 < 10000000)
								{
									DeviceResults2[num5].IsBleOrRemoteConnected = true;
								}
								else
								{
									DeviceResults2[num5].IsBleOrRemoteConnected = false;
								}
							}
							else
							{
								DeviceResults2[num5].IsBleOrRemoteConnected = false;
							}
						}
						catch (Exception)
						{
							DeviceResults2[num5].IsBleOrRemoteConnected = false;
						}
						if (vcuMsgs[num5].oldis != DeviceResults2[num5].IsBleOrRemoteConnected)
						{
							vcuMsgs[num5].oldis = DeviceResults2[num5].IsBleOrRemoteConnected;
							DeviceResults2[num5].OnPropertyChanged("IsBleOrRemoteConnected");
						}
						if (vcuMsgs[num5].topmsg != DeviceResults2[num5].TopMsg)
						{
							vcuMsgs[num5].topmsg = DeviceResults2[num5].TopMsg;
							DeviceResults2[num5].OnPropertyChanged("TopMsg");
						}
						if (vcuMsgs[num5].message != DeviceResults2[num5].Message)
						{
							vcuMsgs[num5].message = DeviceResults2[num5].Message;
							DeviceResults2[num5].OnPropertyChanged("Message");
						}
					}
					switch (App.Downloaded)
					{
					case 1:
						Readfile();
						break;
					case 2:
						MqttPub("000000000000000/bind/download", App.fileName.Substring(App.fileName.LastIndexOf('/') + 1));
						App.Downloaded = 3;
						break;
					}
					switch (App.loginstat)
					{
					case 0:
						logtimecnt = 0;
						if (App.username == null || App.password == null || App.isLogged != "OK")
						{
							if (App.NeedLogin)
							{
								base.Navigation.ShowPopup(new LoginPage2());
							}
							App.loginstat = 9;
						}
						else
						{
							App.loginstat = 4;
						}
						break;
					case 1:
						App.password = App.randompass;
						ConnectMqttServer(0, "");
						App.loginstat = 9;
						break;
					case 2:
						ConnectMqttServer(1, App.verify);
						App.loginstat = 8;
						logtimecnt = 0;
						getloginstat = true;
						break;
					case 20:
						ConnectMqttServer(4, "");
						App.loginstat = 8;
						logtimecnt = 0;
						getloginstat = true;
						break;
					case 3:
						App.isLogged = "OK";
						SecureStorage.SetAsync("isLogged", App.isLogged);
						SecureStorage.SetAsync("username", App.username);
						SecureStorage.SetAsync("password", App.password);
						App.loginstat = 5;
						break;
					case 4:
						ConnectMqttServer(2, "");
						App.loginstat = 5;
						logtimecnt = 0;
						break;
					case 5:
						if (!App.CAT1_Connected)
						{
							if (logtimecnt < 50)
							{
								logtimecnt++;
							}
							else
							{
								logtimecnt = 0;
								logcnt++;
								if (logcnt > 3)
								{
									App.loginstat = 9;
								}
								else
								{
									App.loginstat = 4;
								}
							}
						}
						else
						{
							App.loginstat = 6;
						}
						break;
					default:
						if (App.CAT1_Connected)
						{
							logtimecnt = 0;
							logcnt = 0;
						}
						else if (logtimecnt < 200)
						{
							logtimecnt++;
						}
						else
						{
							logtimecnt = 0;
							logcnt++;
							if (logcnt > 3)
							{
								App.loginstat = 9;
							}
							else
							{
								App.loginstat = 4;
							}
						}
						break;
					}
					if (App.CN)
					{
						FrameCount.Text = bleconnect_imecount.ToString() + App.PassOk + App.CompPhoneOk + "∞Û∂®¡–±Ì£∫" + App.clientid + "   Ω” ’÷°∫≈£∫" + App.rcvFrames + " " + noticec;
					}
					else
					{
						FrameCount.Text = bleconnect_imecount + "Bound:" + App.clientid + "   Received Frames:" + App.rcvFrames + " " + noticec;
					}
					if (CopyNewData)
					{
						if (NewCnt == 0)
						{
							App.cflash.CopyTo(cflahss, 4);
							WriteAddr(cflahss, 0, 384);
							NewCnt = 1;
						}
						else if (NewCnt >= 40)
						{
							App.wflash.CopyTo(wflahss, 4);
							WriteAddr(wflahss, 1, 312);
							CopyNewData = false;
						}
						else
						{
							NewCnt++;
						}
					}
					if (App.CN)
					{
						base.Title = "Õ®–≈";
					}
					else
					{
						base.Title = "Comm";
					}
					if (App.pos == null && permi == 1)
					{
						GetLoc();
					}
				}
				catch (Exception ex4)
				{
					UserDialogs.Instance.Alert("Connect2 " + ex4.ToString());
				}
				try
				{
					if (App.PassOk == 3 || App.ownertype >= 2)
					{
						if (App.CN)
						{
							CmdPassword.Text = "–ﬁ∏ƒ√‹¬Î";
						}
						else
						{
							CmdPassword.Text = "ChangePassword";
						}
					}
					else if (App.CN)
					{
						CmdPassword.Text = "øÿ÷∆∆˜µ«¬º";
					}
					else
					{
						CmdPassword.Text = "ControllerLogin";
					}
					if (App.CAT1_Loggined)
					{
						if (App.HasParaFile == 2)
						{
							CmdExport.BackgroundColor = Color.LightGoldenrodYellow;
							CmdSelect.BackgroundColor = Color.LightGray;
							CmdSelect2.BackgroundColor = Color.LightGray;
							if (App.CN)
							{
								CmdImport.Text = "µº»Î";
							}
							else
							{
								CmdImport.Text = "import";
							}
						}
						else if (App.HasParaFile == 1)
						{
							CmdExport.BackgroundColor = Color.LightGray;
							CmdSelect.BackgroundColor = Color.LightGoldenrodYellow;
							CmdSelect2.BackgroundColor = Color.LightGoldenrodYellow;
							if (App.CN)
							{
								CmdImport.Text = "µº»Î";
							}
							else
							{
								CmdImport.Text = "import";
							}
						}
						if (App.pos == null)
						{
							CmdProduct.Text = App.localAgent;
						}
						else if (App.CN)
						{
							CmdProduct.Text = "Ω‚≥˝∞Û∂®";
						}
						else
						{
							CmdProduct.Text = "Unbound";
						}
					}
					else if (logcnt > 1 && (App.username == null || App.password == null || App.isLogged != "OK"))
					{
						if (App.CN)
						{
							CmdProduct.Text = "”√ªßµ«¬º";
						}
						else
						{
							CmdProduct.Text = "UserLogin";
						}
						if (backuplink)
						{
							CmdProduct.Text += "B";
						}
					}
					if (App.isConnectedLost)
					{
						App.isConnectedLost = false;
						App.NewData = 0u;
						App.OldPassed = false;
					}
					if (App.NewData == uint.MaxValue)
					{
						CmdExport.IsVisible = true;
					}
					else
					{
						CmdExport.IsVisible = false;
					}
					if (noFramesTime < 100)
					{
						noFramesTime++;
					}
					if (chs == null)
					{
						LoginView.IsVisible = false;
						CmdRemote.IsVisible = false;
						CmdPassword.IsVisible = false;
						return true;
					}
					if (noFramesTime < 100)
					{
						LoginView.TextColor = Color.White;
						int num7 = -1;
						try
						{
							for (int num8 = 0; num8 < bindDevice.device.Count; num8++)
							{
								if (bindDevice.device[num8].serialnumber == App.rcv_serialNumber)
								{
									num7 = num8 + 1;
									break;
								}
							}
							if (num7 < 0)
							{
								if (App.rcv_serialNumber.Substring(0, 4) == bindDevice.SN6.Substring(0, 4))
								{
									num7 = 0;
								}
							}
							else if (!sendLocation && bindDevice.count == 0 && bindDevice.device[num7 - 1].deviceid[0] == '1')
							{
								sendLocation = true;
								string payload3 = $"{App.ModelName},{App.pos.Latitude},{App.pos.Longitude},{App.SOC},{App.RestDistance}";
								MqttPub(App.clientid + bindDevice.device[num7 - 1].deviceid + "S/report", payload3);
							}
						}
						catch (Exception)
						{
						}
						App.BindingStat = num7;
						if (App.BindingStat >= 0 || App.PassOk == 3)
						{
							if (App.BindingStat >= 0)
							{
								Unbound = 0;
							}
							LoginView.IsVisible = true;
							CmdRemote.IsVisible = true;
							LoginView.IsEnabled = true;
							CmdPassword.IsVisible = true;
							if (App.PassOk == 1 || App.PassOk == 3)
							{
								if (!hasprogress)
								{
									OpenKey();
								}
								if (App.PassOk == 3)
								{
									LoginView.Text = "";
								}
								else if (App.BindingStat == 0)
								{
									if (App.CN)
									{
										LoginView.Text = "Œﬁ–Ë∞Û∂®:";
									}
									else
									{
										LoginView.Text = "No Need Bound:";
									}
								}
								else if (App.CN)
								{
									LoginView.Text = "“—∞Û∂®:";
								}
								else
								{
									LoginView.Text = "Bound:";
								}
								if (App.EnModify == 0)
								{
									if (App.CN)
									{
										LoginView.Text += "øÿ÷∆∆˜±ªÀ¿À¯";
									}
									else
									{
										LoginView.Text += "Controller is Locked";
									}
								}
								else if (App.EnModify == 1)
								{
									if (App.CN)
									{
										LoginView.Text += "øÿ÷∆∆˜±ªø⁄¡Ó±£ª§£¨ ‰»Î≥§√‹¬Î";
									}
									else
									{
										LoginView.Text += "Controller is protected by password";
									}
								}
								if (App.PassOk == 3)
								{
									if (App.CN)
									{
										LoginView.Text += "√‹¬ÎÕ®π˝: øÿ÷∆∆˜“—¡¨Ω”";
									}
									else
									{
										LoginView.Text += "Password OK:Connected";
									}
									if (App.CompPhoneOk)
									{
										App.ownertype = 3;
									}
									else
									{
										App.ownertype = 0;
									}
								}
								else if (num7 == 0)
								{
									if (App.CN)
									{
										Xamarin.Forms.Button loginView = LoginView;
										loginView.Text = loginView.Text + App.clientid + "π§≥ß”√ªß: øÿ÷∆∆˜“—¡¨Ω”";
									}
									else
									{
										LoginView.Text += "Manufacture:Connected";
									}
									App.ownertype = 3;
								}
								else if (bindDevice.device[num7 - 1].clientid0 == App.clientid || num7 > 3)
								{
									if (App.CN)
									{
										LoginView.Text = "ª˙÷˜: øÿ÷∆∆˜“—¡¨Ω”";
									}
									else
									{
										LoginView.Text = "Owner: Connected";
									}
									App.ownertype = 2;
									Unbound = 1;
								}
								else
								{
									if (App.CN)
									{
										LoginView.Text = "¥”ª˙: øÿ÷∆∆˜“—¡¨Ω”≤¢∞Û∂®";
									}
									else
									{
										LoginView.Text = "Slave: Connected and bound";
									}
									App.ownertype = 1;
								}
								if (App.NewData != uint.MaxValue && App.NewVersion)
								{
									if (App.NoDataCount < 150)
									{
										App.NoDataCount++;
									}
									else
									{
										App.NoDataCount = 0;
										App.sendconfirm = 19;
									}
								}
							}
							else
							{
								App.ownertype = 0;
								if (!hasprogress)
								{
									if (!autolonginch)
									{
										autolonginch = true;
									}
									else
									{
										autolonginch = false;
										byte[] data = new byte[8] { 0, 0, 0, 0, 52, 20, 0, 0 };
										WriteAddr(data, 171, 2);
										Thread.Sleep(10);
									}
									SendRs232Data(19, 7, 1, 95);
									Thread.Sleep(10);
									OpenKey();
								}
								LoginView.Text = App.PassOk.ToString();
								if (App.CN)
								{
									LoginView.Text += " øÿ÷∆∆˜“—¡¨Ω”£¨◊‘∂Øµ«¬º÷–°£°£°£";
								}
								else
								{
									LoginView.Text += " Connected, Auto Login...";
								}
							}
							CheckRSSI();
						}
						else
						{
							Unbound = 0;
							LoginView.Text = App.PassOk.ToString();
							if (App.ReceivedVCUFrame)
							{
								if (App.CN)
								{
									LoginView.Text += "÷–øÿ¿∂—¿“—¡¨Ω”£¨µ»¥˝∞Û∂®...";
								}
								else
								{
									LoginView.Text += "VCU Connected, Wait Bound...";
								}
								App.hasserialnumber = 2;
								App.ownertype = 0;
							}
							else
							{
								App.ownertype = 0;
								if (App.CompPhoneOk)
								{
									if (App.CN)
									{
										LoginView.Text += " øÿ÷∆∆˜¡¨Ω”÷–£¨µ»¥˝∞Û∂®";
									}
									else
									{
										LoginView.Text += " Connected, Wait Bound...";
									}
								}
								else if (App.CN)
								{
									LoginView.Text += " øÿ÷∆∆˜¡¨Ω”÷–£¨«Îµ«¬º";
								}
								else
								{
									LoginView.Text += " Connected, Please Login...";
								}
							}
							LoginView.IsVisible = true;
							CmdRemote.IsVisible = true;
							LoginView.IsEnabled = true;
							CmdPassword.IsVisible = true;
						}
						bleconnect_imecount = 0;
					}
					else
					{
						ConnectTimeCount = 72000;
						if (App.isConnected)
						{
							if (App.CN)
							{
								LoginView.Text = "¿∂—¿“—¡¨Ω”°£øÿ÷∆∆˜¡¨Ω”÷–°£°£°£";
							}
							else
							{
								LoginView.Text = "BLE connected,Controller connecting...";
							}
							LoginView.IsVisible = true;
							CmdRemote.IsVisible = true;
							CmdPassword.IsVisible = true;
							LoginView.TextColor = Color.Black;
							LoginView.IsEnabled = false;
							bleconnect_imecount++;
						}
						else
						{
							bleconnect_imecount = 0;
							LoginView.IsVisible = false;
							CmdRemote.IsVisible = false;
							CmdPassword.IsVisible = false;
						}
					}
				}
				catch (Exception ex6)
				{
					UserDialogs.Instance.Alert("Connect3 " + ex6.ToString());
				}
				try
				{
					if (hasprogress)
					{
						DownloadFunction();
					}
					else
					{
						switch (App.sendconfirm)
						{
						case 2:
							if (App.NewVersion)
							{
								byte[] data2 = new byte[8]
								{
									0,
									0,
									0,
									0,
									(byte)((App.Old_password[0] - 48) * 16 + (App.Old_password[1] - 48)),
									(byte)((App.Old_password[2] - 48) * 16 + (App.Old_password[3] - 48)),
									0,
									0
								};
								WriteAddr(data2, 171, 2);
								App.sendconfirm = 4;
							}
							else
							{
								SendRs232Data(19, 12, (byte)App.Old_password[0], (byte)App.Old_password[1]);
								Thread.Sleep(10);
								SendRs232Data(19, 13, (byte)App.Old_password[2], (byte)App.Old_password[3]);
								App.sendconfirm++;
							}
							break;
						case 3:
							App.sendconfirm++;
							break;
						case 4:
							if (App.Confirm_password == null)
							{
								if (App.NewVersion)
								{
									byte[] data4 = new byte[8] { 0, 0, 0, 0, 0, 0, 0, 0 };
									WriteAddr(data4, 172, 2);
								}
								else
								{
									SendRs232Data(19, 10, 0, 0);
									Thread.Sleep(10);
									SendRs232Data(19, 11, 0, 0);
								}
							}
							else if (App.NewVersion)
							{
								byte[] data5 = new byte[8]
								{
									0,
									0,
									0,
									0,
									(byte)((App.Confirm_password[0] - 48) * 16 + (App.Confirm_password[1] - 48)),
									(byte)((App.Confirm_password[2] - 48) * 16 + (App.Confirm_password[3] - 48)),
									0,
									0
								};
								WriteAddr(data5, 172, 2);
							}
							else
							{
								SendRs232Data(19, 10, (byte)App.Confirm_password[0], (byte)App.Confirm_password[1]);
								Thread.Sleep(10);
								SendRs232Data(19, 11, (byte)App.Confirm_password[2], (byte)App.Confirm_password[3]);
							}
							App.sendconfirm++;
							bleconnect_imecount++;
							break;
						case 5:
							dateTime = DateTime.Now;
							if (App.NewVersion)
							{
								byte[] array6 = new byte[12];
								byte[] array7 = new byte[8];
								array6[4] = (byte)(dateTime.Year - 2000);
								array6[5] = (byte)dateTime.Month;
								array6[6] = (byte)dateTime.Day;
								array6[7] = (byte)dateTime.Hour;
								array6[8] = (byte)dateTime.Minute;
								array6[9] = (byte)dateTime.Second;
								WriteAddr(array6, 34, 6);
								Thread.Sleep(10);
								array7[4] = 136;
								array7[5] = 4;
								WriteAddr(array7, 160, 2);
								Thread.Sleep(10);
								SendRs232Data(21, (byte)(dateTime.Hour + 1), (byte)(dateTime.Minute + 1), (byte)(dateTime.Second + 1));
								Thread.Sleep(10);
								SendRs232Data(20, (byte)(dateTime.Year - 2000), (byte)dateTime.Month, (byte)dateTime.Day);
								Thread.Sleep(10);
								SendRs232Data(5, 1, 95, 95);
								bleconnect_imecount++;
							}
							else
							{
								SendRs232Data(21, (byte)(dateTime.Hour + 1), (byte)(dateTime.Minute + 1), (byte)(dateTime.Second + 1));
								Thread.Sleep(10);
								SendRs232Data(20, (byte)(dateTime.Year - 2000), (byte)dateTime.Month, (byte)dateTime.Day);
								Thread.Sleep(10);
								SendRs232Data(5, 1, 95, 95);
							}
							App.sendconfirm = 0;
							break;
						case 8:
						{
							byte[] array4 = new byte[20];
							for (int num9 = 0; num9 < App.Confirm_PhoneNumber.Length; num9++)
							{
								array4[4 + num9] = (byte)App.Confirm_PhoneNumber[num9];
							}
							for (int num9 = App.Confirm_PhoneNumber.Length; num9 < 14; num9++)
							{
								array4[4 + num9] = 0;
							}
							WriteAddr(array4, 174, 14);
							App.sendconfirm = 0;
							App.sendconfirm = 0;
							break;
						}
						case 9:
							SendRs232Data(19, 22, (byte)App.Confirm_PhoneNumber[4], (byte)App.Confirm_PhoneNumber[5]);
							Thread.Sleep(10);
							SendRs232Data(19, 23, (byte)App.Confirm_PhoneNumber[6], (byte)App.Confirm_PhoneNumber[7]);
							App.sendconfirm++;
							break;
						case 10:
							SendRs232Data(19, 24, (byte)App.Confirm_PhoneNumber[8], (byte)App.Confirm_PhoneNumber[9]);
							Thread.Sleep(10);
							if (App.Confirm_PhoneNumber.Length == 11)
							{
								SendRs232Data(19, 25, (byte)App.Confirm_PhoneNumber[10], 0);
							}
							else
							{
								SendRs232Data(19, 25, (byte)App.Confirm_PhoneNumber[10], (byte)App.Confirm_PhoneNumber[11]);
							}
							App.sendconfirm++;
							break;
						case 11:
							if (App.Confirm_PhoneNumber.Length == 11)
							{
								SendRs232Data(19, 26, 0, 0);
							}
							else
							{
								SendRs232Data(19, 26, (byte)App.Confirm_PhoneNumber[12], 0);
							}
							App.sendconfirm = 4;
							break;
						case 12:
						{
							byte[] array5 = new byte[20];
							for (int num10 = 0; num10 < App.Confirm_PhoneNumber.Length; num10++)
							{
								array5[4 + num10] = (byte)App.Confirm_PhoneNumber[num10];
							}
							for (int num10 = App.Confirm_PhoneNumber.Length; num10 < 14; num10++)
							{
								array5[4 + num10] = 0;
							}
							WriteAddr(array5, 173, 14);
							App.sendconfirm = 0;
							App.sendconfirm = 0;
							break;
						}
						case 13:
							SendRs232Data(19, 32, (byte)App.Confirm_PhoneNumber[4], (byte)App.Confirm_PhoneNumber[5]);
							Thread.Sleep(10);
							SendRs232Data(19, 33, (byte)App.Confirm_PhoneNumber[6], (byte)App.Confirm_PhoneNumber[7]);
							App.sendconfirm++;
							break;
						case 14:
							SendRs232Data(19, 34, (byte)App.Confirm_PhoneNumber[8], (byte)App.Confirm_PhoneNumber[9]);
							Thread.Sleep(10);
							if (App.Confirm_PhoneNumber.Length == 11)
							{
								SendRs232Data(19, 35, (byte)App.Confirm_PhoneNumber[10], 0);
							}
							else
							{
								SendRs232Data(19, 35, (byte)App.Confirm_PhoneNumber[10], (byte)App.Confirm_PhoneNumber[11]);
							}
							App.sendconfirm++;
							break;
						case 15:
							if (App.Confirm_PhoneNumber.Length == 11)
							{
								SendRs232Data(19, 36, 0, 0);
							}
							else
							{
								SendRs232Data(19, 36, (byte)App.Confirm_PhoneNumber[12], 0);
							}
							App.sendconfirm = 4;
							break;
						case 6:
							App.HasPassOk = 1;
							if (App.NewVersion)
							{
								byte[] data3 = new byte[8]
								{
									0,
									0,
									0,
									0,
									(byte)((App.Confirm_password[0] - 48) * 16 + (App.Confirm_password[1] - 48)),
									(byte)((App.Confirm_password[2] - 48) * 16 + (App.Confirm_password[3] - 48)),
									0,
									0
								};
								WriteAddr(data3, 171, 2);
								App.sendconfirm = 0;
							}
							else
							{
								SendRs232Data(19, 12, (byte)App.Confirm_password[0], (byte)App.Confirm_password[1]);
								App.sendconfirm++;
							}
							break;
						case 7:
							SendRs232Data(19, 13, (byte)App.Confirm_password[2], (byte)App.Confirm_password[3]);
							App.sendconfirm = 0;
							break;
						case 19:
							SendRs232Data(19, 7, 10, 56);
							App.sendconfirm = 0;
							break;
						default:
							if (LoginView.IsEnabled)
							{
								if (App.maintainPackCnt > 20)
								{
									if (App.PassOk == 0)
									{
										if (App.HasPassOk < 5 && App.HasPassOk >= 2)
										{
											App.HasPassOk++;
											App.sendconfirm = 6;
										}
										SendRs232Data(19, 7, 95, 95);
									}
									else
									{
										if (App.HasPassOk == 1)
										{
											App.HasPassOk = 2;
										}
										SendRs232Data(19, 7, 9, 111);
									}
									App.maintainPackCnt = 0;
								}
								else
								{
									if (App.maintainPackCnt == 10 && !App.NewVersion && !App.OldPassed)
									{
										SendRs232Data(23, 241, 19, 81);
										App.CacuDiscover(401675089u);
									}
									App.maintainPackCnt++;
								}
								if (logincount < 1)
								{
									uint id = Convert.ToUInt32(App.clientid);
									SendRs232DataPass(id);
									logincount++;
								}
							}
							else if (App.maintainPackCnt > 20)
							{
								SendRs232Data(19, 7, 95, 95);
								App.maintainPackCnt = 0;
							}
							else
							{
								App.maintainPackCnt++;
							}
							break;
						}
					}
				}
				catch (Exception ex7)
				{
					UserDialogs.Instance.Alert("Connect " + ex7.ToString());
				}
				return true;
			});
		}

		private async void TapGestureRecognizer_Tapped(object sender, EventArgs e)
		{
			try
			{
				string s = (sender as Label).Text;
				App.scanResult = DeviceResults2.FirstOrDefault((ScanResultModel d) => d.SerialNumber == s);
				if (App.scanResult == null)
				{
					return;
				}
				if (App.scanResult.IsVcu)
				{
					string text = "0" + App.scanResult.SerialNumber.Substring(13);
					if (text != App.currentvcudeviceid)
					{
						App.currentvcudeviceid = text;
						SaveSK();
						await SecureStorage.SetAsync("CurrentVCU", App.currentvcudeviceid);
					}
				}
				App.rcv_serialNumber = App.scanResult.SerialNumber;
			}
			catch (Exception)
			{
			}
		}

		private bool CheckChar(string str)
		{
			for (int i = 0; i < str.Length; i++)
			{
				if (Encoding.Default.GetBytes(str.Substring(i, 1)).Length > 1)
				{
					return false;
				}
			}
			return true;
		}

		private async void TapGestureRecognizer2_Tapped(object sender, EventArgs e)
		{
			_ = 1;
			try
			{
				string vcuName = (sender as Label).Text;
				ScanResultModel scanResultModel = DeviceResults2.FirstOrDefault((ScanResultModel d) => d.TopMsg == vcuName);
				if (scanResultModel != null)
				{
					if ((scanResultModel.IsVcu && bindDevice.device[scanResultModel.Index - 1].clientid0 == App.clientid) || scanResultModel.Index > 3)
					{
						string name = ((!App.CN) ? "VCU Name" : "÷–øÿ√˚◊÷");
						PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
						{
							InputType = InputType.Name,
							OkText = "OK",
							MaxLength = 17,
							Placeholder = vcuName.Substring(0, 17),
							CancelText = "Cancel",
							Title = name
						});
						if (promptResult.Ok)
						{
							name = promptResult.Text;
							name.Trim();
						}
						name = name.PadRight(17, ' ');
						if (!CheckChar(name))
						{
							if (App.CN)
							{
								UserDialogs.Instance.Alert("«Î π”√ π”√ ˝◊÷∫Õ”¢Œƒ◊÷ƒ∏");
							}
							else
							{
								UserDialogs.Instance.Alert("Please User ASCII symbol");
							}
							return;
						}
						string title = ((!App.CN) ? "Days Remaining" : " £”‡ÃÏ ˝");
						promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
						{
							InputType = InputType.Name,
							OkText = "OK",
							MaxLength = 3,
							Placeholder = vcuName.Substring(17, 3),
							CancelText = "Cancel",
							Title = title
						});
						if (promptResult.Ok)
						{
							title = promptResult.Text;
							title.Trim();
							title = title.PadLeft(3);
						}
						else
						{
							title = "   ";
						}
						string payload = "NAME" + name + title;
						if (App.CAT1_Loggined && !string.IsNullOrWhiteSpace(name) && title.Length == 3)
						{
							string topic = App.clientid + App.currentvcudeviceid + "/control";
							MqttPub(topic, payload);
						}
					}
					else if (scanResultModel.IsVcu)
					{
						UserDialogs.Instance.Alert("id0:" + bindDevice.device[scanResultModel.Index - 1].clientid0.ToString() + "id1:" + App.clientid.ToString());
					}
					else
					{
						UserDialogs.Instance.Alert("not vcu");
					}
				}
				else
				{
					UserDialogs.Instance.Alert("vcuName:" + vcuName);
				}
			}
			catch (Exception)
			{
			}
		}

		private async void SendRs232Data(byte mcmd, byte scmd, byte va1, byte va2)
		{
			if (chs == null)
			{
				return;
			}
			byte[] array = new byte[8];
			array[0] = 170;
			array[1] = mcmd;
			array[2] = (byte)(~array[1]);
			array[3] = scmd;
			array[4] = va1;
			array[5] = va2;
			array[6] = (byte)(array[0] + array[1] + array[2] + array[3] + array[4] + array[5]);
			array[7] = (byte)(~array[6]);
			App.maintainPackCnt = 0;
			try
			{
				await chs.WriteAsync(array);
			}
			catch (Exception)
			{
			}
		}

		private async void SendRs232DataPass(uint id)
		{
			if (chs == null)
			{
				return;
			}
			string text = "D'1qF83x";
			uint num = id * 55571701 + 55571699;
			uint num2 = ((uint)text[3] << 24) + ((uint)text[2] << 16) + ((uint)text[1] << 8) + text[0];
			uint num3 = ((uint)text[7] << 24) + ((uint)text[6] << 16) + ((uint)text[5] << 8) + text[4];
			uint num4 = num2 ^ num;
			uint num5 = num3 ^ num;
			byte[] array = new byte[8]
			{
				(byte)num4,
				(byte)(num4 >> 8),
				(byte)(num4 >> 16),
				(byte)(num4 >> 24),
				(byte)num5,
				(byte)(num5 >> 8),
				(byte)(num5 >> 16),
				(byte)(num5 >> 24)
			};
			byte[] array2 = new byte[16]
			{
				170,
				127,
				(byte)id,
				(byte)(id >> 8),
				(byte)(id >> 16),
				(byte)(id >> 24),
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0
			};
			for (int i = 0; i < 8; i++)
			{
				array2[6 + i] = array[i];
			}
			int num6 = 0;
			for (int j = 0; j < 14; j++)
			{
				num6 += array2[j];
			}
			array2[14] = (byte)num6;
			array2[15] = (byte)(num6 >> 8);
			App.maintainPackCnt = 0;
			try
			{
				await chs.WriteAsync(array2);
			}
			catch (Exception)
			{
			}
		}

		private async void OnUpgradeClicked(object sender, EventArgs e)
		{
			if (!App.isConnected)
			{
				if (App.CN)
				{
					await UserDialogs.Instance.AlertAsync("«Îœ»…®√Ë≤¢¡¨Ω”¿∂—¿£°");
				}
				else
				{
					await UserDialogs.Instance.AlertAsync("Please scan and connect Bluetooth");
				}
				return;
			}
			if (bleconnect_imecount < 200)
			{
				if (App.PassOk == 0)
				{
					if (App.HardVer != 'H' || App.SoftVer0 >= '6')
					{
						BindA();
						return;
					}
				}
				else if (App.PassOk == 1)
				{
					if (App.BindingStat < 0)
					{
						BindA();
						return;
					}
				}
				else if (App.PassOk == 2 && App.ownertype <= 0)
				{
					BindA();
					return;
				}
			}
			if (!((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Update Controller,Confirm program version is the same as in the controller", null, "Update", "cancel")) : (await UserDialogs.Instance.ConfirmAsync("øÿ÷∆∆˜…˝º∂£¨◊¢“‚±Í«©…œµƒ–Õ∫≈∫Õ—°‘Òµƒ≥Ã–Ú“™“ª÷¬", null, "…˝º∂", "»°œ˚"))))
			{
				return;
			}
			func = 0;
			string text = FlashHex();
			if (text != "")
			{
				await UserDialogs.Instance.AlertAsync(text);
				if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Select a File to Upgrade?", null, "select", "cancel")) : (await UserDialogs.Instance.ConfirmAsync(" «∑Ò—°‘Ò“ª∏ˆŒƒº˛¿¥…˝º∂", null, "—°‘Ò", "»°œ˚")))
				{
					App.Downloaded = 0;
					MqttPub("000000000000000/bind/filelist", App.clientid);
					await base.Navigation.PushModalAsync(new FilePage());
				}
			}
		}

		private async void OnFlashClicked(object sender, EventArgs e)
		{
			if (!App.isConnected)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("«Îœ»…®√Ë≤¢¡¨Ω”¿∂—¿£°");
				}
				else
				{
					UserDialogs.Instance.Alert("Please scan and connect Bluetooth");
				}
			}
			else if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
			{
				BindA();
			}
			else if (App.NewVersion)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("–¬∞Ê±æøÿ÷∆∆˜£¨«Î—°‘Ò…˝º∂£¨ªÚ’ﬂµº»Îheb≤Œ ˝");
				}
				else
				{
					UserDialogs.Instance.Alert("The Controller is New Version, Please Select Update or import HEB file");
				}
			}
			else
			{
				if (!((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("User Flash", null, "Flash", "cancel")) : (await UserDialogs.Instance.ConfirmAsync("”√ªßÀ¢ª˙", null, "À¢ª˙", "»°œ˚"))))
				{
					return;
				}
				func = 1;
				string text = FlashHex();
				if (text != "")
				{
					await UserDialogs.Instance.AlertAsync(text);
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Select a File to Upgrade?", null, "select", "cancel")) : (await UserDialogs.Instance.ConfirmAsync(" «∑Ò—°‘Ò“ª∏ˆŒƒº˛¿¥…˝º∂", null, "—°‘Ò", "»°œ˚")))
					{
						App.Downloaded = 0;
						MqttPub("000000000000000/bind/filelist", App.clientid);
						await base.Navigation.PushModalAsync(new FilePage());
					}
				}
			}
		}

		private async void ModifyPassword()
		{
			string text = ((!App.CN) ? (await DisplayPromptAsync("Modify Controller Password", "Please input New Password ", "OK", "Cancel", "", 13)) : (await DisplayPromptAsync("–ﬁ∏ƒøÿ÷∆∆˜√‹¬Î", "«Î ‰»Î–¬√‹¬Î", "»∑»œ", "»°œ˚", "", 13)));
			if (text == null)
			{
				return;
			}
			App.OldPhoneNumber = text;
			text = ((!App.CN) ? (await DisplayPromptAsync("Modify Controller Password", "Please Input New Password Again", "OK", "Cancel", "", 13)) : (await DisplayPromptAsync("–ﬁ∏ƒøÿ÷∆∆˜√‹¬Î", "«Î‘Ÿ¥Œ ‰»Î–¬√‹¬Î", "»∑»œ", "»°œ˚", "", 13)));
			if (text == null)
			{
				return;
			}
			App.Confirm_PhoneNumber = text;
			if (App.Confirm_PhoneNumber == App.OldPhoneNumber)
			{
				if (App.Confirm_PhoneNumber.Length > 0 && App.Confirm_PhoneNumber.Length < 6)
				{
					if (App.CN)
					{
						UserDialogs.Instance.Alert("√‹¬Î≥§∂»6°´13£¨ø…«Âø’");
					}
					else
					{
						UserDialogs.Instance.Alert("Passwords Length should be 6°´13, or empty.");
					}
					return;
				}
				char c = '°„';
				App.Confirm_PhoneNumber = (char)(c + text.Length) + App.Confirm_PhoneNumber;
				App.sendconfirm = 8;
				if (App.CN)
				{
					UserDialogs.Instance.Alert(App.Confirm_PhoneNumber.ToString() + "√‹¬Î“—–ﬁ∏ƒ£¨«Îµ„±£¥Ê");
				}
				else
				{
					UserDialogs.Instance.Alert(App.Confirm_PhoneNumber.ToString() + "Password modified£¨Please click Save");
				}
			}
			else if (App.CN)
			{
				UserDialogs.Instance.Alert("¡Ω¥Œ ‰»Î√‹¬Î≤ª“ª÷¬.");
			}
			else
			{
				UserDialogs.Instance.Alert("Two passwords are diffrent.");
			}
		}

		private async void LoginPassword()
		{
			string text = ((!App.CN) ? (await DisplayPromptAsync("Use Password Login Controller", "Please input Password ", "OK", "Cancel", "", 13)) : (await DisplayPromptAsync("”√√‹¬Îµ«¬ºøÿ÷∆∆˜", "«Î ‰»Î√‹¬Î", "»∑»œ", "»°œ˚", "", 13)));
			if (text == null)
			{
				return;
			}
			if (text.Length < 6)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("√‹¬Î≥§∂»6°´13");
				}
				else
				{
					UserDialogs.Instance.Alert("Passwords Length should be 6°´13.");
				}
			}
			else
			{
				char c = '°„';
				App.Confirm_PhoneNumber = (char)(c + text.Length) + text;
				App.sendconfirm = 12;
			}
		}

		private async void OnProFlashClicked(object sender, EventArgs e)
		{
			if (!App.CAT1_Loggined)
			{
				if (App.loginstat >= 9)
				{
					base.Navigation.ShowPopup(new LoginPage2());
				}
				else if (App.isLogged == "OK")
				{
					if (App.CN)
					{
						UserDialogs.Instance.Alert("≥¢ ‘◊‘∂Øµ«¬º...");
					}
					else
					{
						UserDialogs.Instance.Alert("Try Login...");
					}
				}
				else
				{
					base.Navigation.ShowPopup(new LoginPage2());
				}
				return;
			}
			if (App.clientid == null)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("Client Id is null");
				}
				return;
			}
			try
			{
				if (App.clientid == "0000000")
				{
					UserDialogs.Instance.Alert("Client Id is 0000000");
					return;
				}
				int index = -1;
				for (int i = 0; i < bindDevice.device.Count; i++)
				{
					if (App.scanResult.SerialNumber == bindDevice.device[i].serialnumber)
					{
						index = i;
						break;
					}
				}
				if (index >= 0)
				{
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Unbound " + bindDevice.device[index].serialnumber, null, "unbound", "cancel")) : (await UserDialogs.Instance.ConfirmAsync("Ω‚≥˝∞Û∂® " + bindDevice.device[index].serialnumber, null, "Ω‚≥˝", "»°œ˚")))
					{
						string payload = Encrypt(bindDevice.device[index].serialnumber + "_ts_" + timestamp);
						MqttPub(App.clientid + bindDevice.device[index].deviceid + "/bind", payload);
					}
				}
				else if (App.CN)
				{
					UserDialogs.Instance.Alert("Ω‚≥˝–Ú¡–∫≈Œﬁ–ß,«Î‘⁄∞Û∂®¡–±Ì÷–—°‘Ò“™Ω‚≥˝µƒ…Ë±∏");
				}
				else
				{
					UserDialogs.Instance.Alert("Unbound invalid serialnumber, please choose a device from bindlist.");
				}
			}
			catch (Exception)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("«Î—°‘Ò“ª∏ˆ∞Û∂®µƒ…Ë±∏");
				}
				else
				{
					UserDialogs.Instance.Alert("Please select a bound device.");
				}
			}
		}

		private async void OnDetailClicked(object sender, EventArgs e)
		{
			if (App.clientid == null)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("Client Id is null");
				}
			}
			else if (App.clientid == "0000000")
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("«Îœ»∞Û∂®øÿ÷∆∆˜£¨≤≈ƒ‹ π”√∏¸∂‡π¶ƒ‹");
				}
				else
				{
					UserDialogs.Instance.Alert("Please bound controller to user more function");
				}
			}
		}

		private void WriteSysCmd(byte cmd)
		{
			if (chs != null)
			{
				WriteAddr(new byte[8] { 0, 0, 0, 0, 136, cmd, 0, 0 }, 160, 2);
			}
		}

		private async void WriteAddr(byte[] data, byte addr, ushort len)
		{
			if (chs == null)
			{
				return;
			}
			data[0] = 170;
			len += 4;
			switch (len)
			{
			case 388:
				data[1] = byte.MaxValue;
				break;
			case 316:
				data[1] = 254;
				break;
			default:
				data[1] = (byte)(192 + len);
				break;
			}
			data[2] = addr;
			data[3] = addr;
			byte b = 60;
			byte b2 = 127;
			ushort j;
			for (j = 0; j < len; j++)
			{
				int num = b ^ data[j];
				b = (byte)(b2 ^ crctablehi[num]);
				b2 = crctablelo[num];
			}
			data[j] = b;
			data[j + 1] = b2;
			App.maintainPackCnt = 0;
			try
			{
				switch (len)
				{
				case 388:
				{
					j = 0;
					for (int subpackcnt = 0; subpackcnt < 19; subpackcnt++)
					{
						byte[] array3 = new byte[20];
						for (int l = 0; l < 20; l++)
						{
							array3[l] = data[j];
							j++;
						}
						await chs.WriteAsync(array3);
						Thread.Sleep(10);
					}
					byte[] array4 = new byte[10];
					for (int m = 0; m < 10; m++)
					{
						array4[m] = data[j];
						j++;
					}
					await chs.WriteAsync(array4);
					break;
				}
				case 316:
				{
					j = 0;
					for (int subpackcnt = 0; subpackcnt < 15; subpackcnt++)
					{
						byte[] array = new byte[20];
						for (int i = 0; i < 20; i++)
						{
							array[i] = data[j];
							j++;
						}
						await chs.WriteAsync(array);
						Thread.Sleep(10);
					}
					byte[] array2 = new byte[18];
					for (int k = 0; k < 18; k++)
					{
						array2[k] = data[j];
						j++;
					}
					await chs.WriteAsync(array2);
					break;
				}
				default:
					await chs.WriteAsync(data);
					break;
				}
			}
			catch (Exception ex)
			{
				UserDialogs.Instance.Toast("∑¢ÀÕ≤Œ ˝ ß∞‹-WriteAddr " + ex);
			}
		}

		private string FlashHex()
		{
			int num = 0;
			char[] array = new char[1];
			char[] array2 = new char[4];
			int num2 = 0;
			char[] array3 = new char[6];
			int num3 = 0;
			int num4 = 0;
			char[] array4 = new char[4];
			char[] array5 = new char[256];
			char[] array6 = new char[4];
			char[] array7 = new char[4];
			tempBuff = new byte[262144];
			bool flag = File.Exists(App.fileName);
			Stream stream = null;
			BinaryReader binaryReader = null;
			if (!flag)
			{
				if (this.stream == null)
				{
					if (App.CN)
					{
						return "Œ¥’“µΩœ¬‘ÿ≥Ã–ÚŒƒº˛";
					}
					return "Unable to locate the file";
				}
				if (this.stream.CanRead)
				{
					flag = true;
					stream = this.stream;
					binaryReader = new BinaryReader(this.stream);
				}
			}
			else
			{
				stream = File.Open(App.fileName, FileMode.Open, FileAccess.Read);
				binaryReader = new BinaryReader(stream);
			}
			if (flag)
			{
				try
				{
					if (stream.Length < 10000)
					{
						binaryReader.Close();
						stream.Close();
						if (App.CN)
						{
							return "Œƒº˛∏Ò Ω≤ª∂‘";
						}
						return "Error File.";
					}
					int num5 = App.fileName.LastIndexOf('/');
					if (num5 < 0)
					{
						num5 = -1;
					}
					string text = App.fileName.Substring(num5 + 1);
					while (text[0] < 'A' || text[0] > 'Z')
					{
						text = text.Substring(1);
						if (text.Length < 4)
						{
							break;
						}
					}
					if ((text[0] < 'H' || text[0] > 'Z' || text[1] < '0' || text[1] > '9') && (text[0] < 'A' || text[0] > 'Z' || text[1] < 'A' || text[1] > 'Z' || text[2] < '0' || text[2] > '9' || text[3] < '0' || text[3] > '9') && (text[0] != 'Y' || text[1] != 'C' || text[2] != 'K' || text[3] < '0' || text[3] > '9') && (text[0] != 'B' || text[1] != 'M' || text[2] != 'S' || text[3] < '0' || text[3] > '9'))
					{
						binaryReader.Close();
						stream.Close();
						if (App.CN)
						{
							return "Œƒº˛√˚≤ª∂‘";
						}
						return "Error File Name.";
					}
					_ = new char[1024];
					for (num = 4096; num < 262100; num++)
					{
						tempBuff[num] = byte.MaxValue;
					}
					int num6 = 0;
					if (App.fileName.Contains(".bin"))
					{
						num4 = (int)stream.Length;
						tempBuff = binaryReader.ReadBytes(num4);
						if (num4 > 65536)
						{
							if (num4 > 131072)
							{
								App.date = 32303u;
								num = 253952;
							}
							else
							{
								App.date = 32071u;
								num = 126976;
							}
							crc_total0 = 0u;
							crc_total1 = 100u;
							for (int i = 4; i < 125; i++)
							{
								crc_filetable[i] = tempBuff[num];
								num++;
								crc_filetable[i] += (uint)(tempBuff[num] << 8);
								num++;
								crc_filetable[i] += (uint)(tempBuff[num] << 16);
								num++;
								crc_filetable[i] += (uint)(tempBuff[num] << 24);
								num++;
							}
						}
						else
						{
							if (App.fileName.Contains("BMS"))
							{
								num = 60410;
								App.date = 32101u;
							}
							else
							{
								num = 64506;
								App.date = 32103u;
							}
							crc_total = tempBuff[num];
							num++;
							crc_total += (uint)(tempBuff[num] << 8);
							num++;
							crc_total += (uint)(tempBuff[num] << 16);
							num++;
							crc_total += (uint)(tempBuff[num] << 24);
							num++;
						}
						crcOK = 0u;
					}
					else
					{
						int num7;
						do
						{
							binaryReader.Read(array, 0, 1);
							if (array[0] != ':')
							{
								binaryReader.Close();
								stream.Close();
								if (App.CN)
								{
									return "Œƒº˛∏Ò Ω≤ª∂‘";
								}
								return "Error File.";
							}
							binaryReader.Read(array2, 0, 2);
							array2[2] = '\0';
							num2 = hexstr_to_uint32(array2);
							byte b = (byte)num2;
							binaryReader.Read(array3, 0, 4);
							array3[4] = '\0';
							num3 = hexstr_to_uint32(array3);
							b += (byte)(num3 & 0xFF);
							b += (byte)((num3 >> 8) & 0xFF);
							binaryReader.Read(array4, 0, 2);
							array4[2] = '\0';
							num7 = hexstr_to_uint32(array4);
							b += (byte)num7;
							binaryReader.Read(array5, 0, num2 * 2);
							array5[num2 * 2] = '\0';
							if (num7 == 4 && num2 == 2)
							{
								num6 = hexstr_to_uint32(array5);
								num6 &= 0xF;
							}
							num3 += num6 << 16;
							array6[2] = '\0';
							for (int j = 0; j < num2; j++)
							{
								array6[0] = array5[j * 2];
								array6[1] = array5[j * 2 + 1];
								int num8 = hexstr_to_uint32(array6);
								if (num7 == 0)
								{
									tempBuff[num3] = (byte)num8;
								}
								b += (byte)num8;
								num3++;
								if (num7 == 0)
								{
									num4 = num3;
								}
							}
							binaryReader.Read(array7, 0, 2);
							array7[2] = '\0';
							byte num9 = (byte)hexstr_to_uint32(array7);
							b = (byte)(256 - b);
							if (num9 != b)
							{
								binaryReader.Close();
								stream.Close();
								if (App.CN)
								{
									return "Œƒº˛¥ÌŒÛ";
								}
								return "Error File.";
							}
							binaryReader.Read(array7, 0, 2);
							array7[2] = '\0';
							if (array7[0] != '\r' && array7[1] != '\n')
							{
								binaryReader.Close();
								stream.Close();
								if (App.CN)
								{
									return "Œƒº˛¥ÌŒÛ";
								}
								return "Error File.";
							}
						}
						while (num7 != 1 && num2 != 0);
						uint num10 = uint.MaxValue;
						crc_total0 = 0u;
						crc_total1 = 0u;
						if (num4 > 65536)
						{
							App.date = 32303u;
							num = 8192;
							for (int k = 4; k < 124; k++)
							{
								num10 = uint.MaxValue;
								for (int l = 0; l < 2048; l++)
								{
									num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
									num++;
								}
								crc_filetable[k] = ~num10;
							}
							num10 = uint.MaxValue;
							for (int m = 4; m < 124; m++)
							{
								tempBuff[num] = (byte)crc_filetable[m];
								num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
								num++;
								tempBuff[num] = (byte)(crc_filetable[m] >> 8);
								num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
								num++;
								tempBuff[num] = (byte)(crc_filetable[m] >> 16);
								num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
								num++;
								tempBuff[num] = (byte)(crc_filetable[m] >> 24);
								num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
								num++;
							}
							num10 = ~num10;
							crc_filetable[124] = num10;
							crc_total = num10;
							tempBuff[num] = (byte)crc_total;
							num++;
							tempBuff[num] = (byte)(crc_total >> 8);
							num++;
							tempBuff[num] = (byte)(crc_total >> 16);
							num++;
							tempBuff[num] = (byte)(crc_total >> 24);
							num++;
							crc_total0 = 0u;
							crc_total1 = 100u;
							crcOK = 0u;
						}
						else if (tempBuff[4096] == byte.MaxValue && tempBuff[4097] == byte.MaxValue && tempBuff[4098] == byte.MaxValue && tempBuff[4099] == byte.MaxValue)
						{
							App.date = 120u;
							for (num = 8192; num < 31738; num++)
							{
								num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
							}
							num10 = ~num10;
							crc_total = num10;
							crcOK = 0u;
							if (App.CN)
							{
								alarmstring = "»ÙΩ¯∂»Ãı≤ª◊ﬂ£¨»∑»œΩ”ø⁄∞Ê±æ «150“‘…œ°£";
							}
							else
							{
								alarmstring = "Confirm the interface version is greater than 150.";
							}
						}
						else if (num4 <= 32768)
						{
							App.date = tempBuff[31300];
							App.date += (uint)(tempBuff[31301] * 256);
							if (App.date == 121)
							{
								for (num = 4096; num < 31738; num++)
								{
									num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
								}
								if (App.CN)
								{
									alarmstring = "»ÙΩ¯∂»Ãı≤ª◊ﬂ£¨»∑»œΩ”ø⁄∞Ê±æ‘⁄132-149÷Æº‰°£";
								}
								else
								{
									alarmstring = "If the progress does not to go ,confirm that the interface version is between 132-149.";
								}
							}
							else
							{
								for (num = 4096; num < 64506; num++)
								{
									num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
								}
								if (App.CN)
								{
									alarmstring = "»ÙΩ¯∂»Ãı≤ª◊ﬂ£¨»∑»œΩ”ø⁄∞Ê±æ‘⁄µÕ”⁄131°£";
								}
								else
								{
									alarmstring = "If the progress does not to go ,confirm that the interface version is small than 131.";
								}
							}
							num10 = ~num10;
							crc_total = num10;
							crcOK = 0u;
						}
						else
						{
							for (num = 4096; num < 64498; num++)
							{
								switch (num)
								{
								case 64068:
									App.date = tempBuff[num];
									break;
								case 64069:
									App.date += (uint)(tempBuff[num] * 256);
									break;
								}
								if (num == 59392)
								{
									crc_total0 = ~num10;
								}
								if (num == 64000)
								{
									crc_total1 = ~num10;
								}
								num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
							}
							tempBuff[num] = (byte)crc_total0;
							num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
							num++;
							tempBuff[num] = (byte)(crc_total0 >> 8);
							num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
							num++;
							tempBuff[num] = (byte)(crc_total0 >> 16);
							num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
							num++;
							tempBuff[num] = (byte)(crc_total0 >> 24);
							num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
							num++;
							tempBuff[num] = (byte)crc_total1;
							num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
							num++;
							tempBuff[num] = (byte)(crc_total1 >> 8);
							num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
							num++;
							tempBuff[num] = (byte)(crc_total1 >> 16);
							num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
							num++;
							tempBuff[num] = (byte)(crc_total1 >> 24);
							num10 = crc32[(num10 & 0xFF) ^ tempBuff[num]] ^ (num10 >> 8);
							num++;
							num10 = ~num10;
							crc_total = num10;
							if (crc_total0 == App.crc_infoc0)
							{
								if (crc_total1 == App.crc_infoc1)
								{
									crcOK = 2u;
								}
								else
								{
									crcOK = 1u;
								}
							}
							else
							{
								crcOK = 0u;
							}
						}
					}
					binaryReader.Close();
					stream.Close();
					packcnt = 0;
					subpacktotal = 0;
					if (App.NewVersion && num4 > 32768 && noFramesTime < 100 && App.date != 32071)
					{
						if (App.date != 789 && App.date != 32303)
						{
							if (App.CN)
							{
								return "¥À∞Ê±æ≤ª‘ –ÌªÿÕÀ";
							}
							return "This Version can not be update with old one";
						}
						if (!App.fileName.Contains("BN485") && tempBuff[251904] != 0 && tempBuff[251905] != 1)
						{
							if (App.CN)
							{
								return "±æ…˝º∂Œƒº˛∑«∑®";
							}
							return "This update file is illegal";
						}
					}
					dld_state = 200;
					if (App.CN)
					{
						if (func == 0)
						{
							progress = UserDialogs.Instance.Progress("…˝º∂Ω¯∂»", onCancelProgess, "»°œ˚", show: true, MaskType.Black);
						}
						else if (func == 1)
						{
							progress = UserDialogs.Instance.Progress("À¢ª˙Ω¯∂»", onCancelProgess, "»°œ˚", show: true, MaskType.Black);
						}
						else
						{
							progress = UserDialogs.Instance.Progress("…˙≤˙Ω¯∂»", onCancelProgess, "»°œ˚", show: true, MaskType.Black);
						}
					}
					else if (func == 0)
					{
						progress = UserDialogs.Instance.Progress("Update Process", onCancelProgess, "Cancel", show: true, MaskType.Black);
					}
					else if (func == 1)
					{
						progress = UserDialogs.Instance.Progress("Flash Process", onCancelProgess, "Cancel", show: true, MaskType.Black);
					}
					else
					{
						progress = UserDialogs.Instance.Progress("Product Process", onCancelProgess, "Cancel", show: true, MaskType.Black);
					}
					hasprogress = true;
				}
				catch (Exception)
				{
					if (App.CN)
					{
						return "Œƒº˛≤ªƒ‹¥Úø™£¨√ª—°÷–Œƒº˛£øªÚ’ﬂ√ª…Ë÷√¥Ê¥¢»®œﬁ£ø";
					}
					return "Unable open file,No file selected? or file storage permission not set?";
				}
				return "";
			}
			if (App.CN)
			{
				return "Œ¥’“µΩœ¬‘ÿ≥Ã–ÚŒƒº˛";
			}
			return "Unable to locate the file";
		}

		private void onCancelProgess()
		{
			hasprogress = false;
			progress.Dispose();
		}

		private void onCancelProgessForce()
		{
			ConnectTimeCount = 72000;
			hasprogressforce = false;
			progressforce.Dispose();
		}

		private void DownloadFunction()
		{
			switch (dld_state)
			{
			case 0:
				if (App.fileName.Contains("BN485"))
				{
					SendDetectPacket485();
				}
				else if (App.fileName.Contains("BMS"))
				{
					SendDetectPacketBMS();
				}
				else
				{
					SendDetectPacket();
				}
				dld_overtime = 0;
				dld_retry = 0;
				if (App.CN)
				{
					progress.Title = "ºÏ≤‚øÿ÷∆∆˜";
				}
				else
				{
					progress.Title = "Detect...";
				}
				if (crcOK == 1)
				{
					packcnt = 54;
					subpacktotal = 54;
				}
				else if (crcOK == 2)
				{
					packcnt = 58;
					subpacktotal = 58;
				}
				else
				{
					packcnt = 0;
					subpacktotal = 0;
				}
				if (dld_DelayTime < 30)
				{
					dld_DelayTime++;
					break;
				}
				dld_DelayTime = 0;
				dld_state = 200;
				break;
			case 1:
				if (App.CN)
				{
					progress.Title = "∑¢ÀÕ ˝æ›∞¸" + packcnt;
				}
				else
				{
					progress.Title = "Send Packet" + packcnt;
				}
				SendDataPacket();
				dld_state = 2;
				subpacktotal++;
				dld_DelayTime = 0;
				break;
			case 2:
				if (App.CN)
				{
					progress.Title = "µ»¥˝”¶¥";
				}
				else
				{
					progress.Title = "Wait Ack";
				}
				if (dld_Ack == 1)
				{
					packcnt++;
					if (App.date == 32303 || App.date == 32071)
					{
						if (packcnt >= 121)
						{
							dld_state = 3;
						}
						else
						{
							dld_state = 1;
						}
					}
					else if (App.date == 120)
					{
						if (packcnt >= 23)
						{
							dld_state = 3;
						}
						else
						{
							dld_state = 1;
						}
					}
					else if (App.date == 121)
					{
						if (packcnt >= 27)
						{
							dld_state = 3;
						}
						else
						{
							dld_state = 1;
						}
					}
					else if (App.date == 32101)
					{
						if (packcnt >= 55)
						{
							dld_state = 3;
						}
						else
						{
							dld_state = 1;
						}
					}
					else if (packcnt >= 59)
					{
						dld_state = 3;
					}
					else
					{
						dld_state = 1;
					}
					dld_overtime = 0;
					dld_retry = 0;
					dld_Ack = 0;
				}
				else if (dld_Ack == -1)
				{
					dld_Ack = 0;
					dld_retry++;
					if (dld_retry > 3)
					{
						dld_state = 4;
					}
					else
					{
						dld_state = 1;
					}
					dld_overtime = 0;
				}
				dld_overtime++;
				if (dld_overtime > 150)
				{
					dld_state = 200;
					dld_overtime = 0;
				}
				break;
			case 3:
				if (App.CN)
				{
					progress.Title = "…˝º∂ÕÍ≥…";
				}
				else
				{
					progress.Title = "Update Successs";
				}
				dld_state = 255;
				onCancelProgess();
				break;
			case 4:
				if (App.CN)
				{
					progress.Title = "…˝º∂ ß∞‹";
				}
				else
				{
					progress.Title = "Update Fail";
				}
				dld_state = 255;
				break;
			case 200:
				if (App.fileName.Contains("BN485"))
				{
					if (App.date == 120)
					{
						SendRs232Data(4, 192, 38, 38);
					}
					else
					{
						SendRs232Data(4, 191, 38, 38);
					}
				}
				else if (App.fileName.Contains("BMS"))
				{
					SendRs232Data(4, 1, 38, 38);
				}
				else
				{
					if (App.fileName.Contains("ISOLATE_"))
					{
						WriteSysCmd(15);
					}
					else if (App.fileName.Contains("CG56_"))
					{
						WriteSysCmd(16);
					}
					else
					{
						WriteSysCmd(5);
					}
					Thread.Sleep(10);
					SendRs232Data(4, 1, 38, 38);
				}
				dld_state++;
				break;
			case 201:
				dld_state = 0;
				break;
			case 254:
				if (App.CN)
				{
					progress.Title = "”¶¥≥¨ ±";
				}
				else
				{
					progress.Title = "Ack TimeOut";
				}
				dld_state = 255;
				break;
			}
			if (App.date == 120)
			{
				progress.PercentComplete = subpacktotal * 100 / 23;
			}
			else if (App.date == 32101)
			{
				progress.PercentComplete = subpacktotal * 100 / 55;
			}
			else if (App.date == 121)
			{
				progress.PercentComplete = subpacktotal * 100 / 27;
			}
			else if (App.date == 32303 || App.date == 32071)
			{
				progress.PercentComplete = subpacktotal * 100 / 121;
			}
			else
			{
				progress.PercentComplete = subpacktotal * 100 / 59;
			}
		}

		private async void SendDataPacket()
		{
			int num = packcnt + 4;
			byte[] SendRs;
			if (App.date == 32303)
			{
				if (crc_table[num] == crc_filetable[num] && (num != 124 || (num == 124 && func == 0)))
				{
					byte[] array = new byte[8] { 90, 187, 0, 0, 0, 0, 0, 0 };
					if (crc_table[num + 1] == crc_filetable[num + 1])
					{
						packcnt = num - 3;
						array[2] = (byte)(num + 1);
						subpacktotal++;
					}
					else
					{
						array[2] = (byte)num;
					}
					array[3] = 114;
					array[4] = 115;
					array[5] = 116;
					array[6] = 117;
					array[7] = 118;
					App.maintainPackCnt = 0;
					try
					{
						await chs.WriteAsync(array);
						Thread.Sleep(10);
						return;
					}
					catch (Exception ex)
					{
						UserDialogs.Instance.Toast("∑¢ÀÕ ˝æ› ß∞‹- " + ex);
						return;
					}
				}
				SendRs = new byte[2055];
				SendRs[0] = 90;
				SendRs[1] = 165;
				SendRs[2] = (byte)num;
				crc = uint.MaxValue;
				crc = crc32[(crc & 0xFF) ^ SendRs[2]] ^ (crc >> 8);
				if (num == 124)
				{
					for (int i = 0; i < 484; i++)
					{
						SendRs[i + 3] = tempBuff[num * 2048 + i];
						crc = crc32[(crc & 0xFF) ^ SendRs[i + 3]] ^ (crc >> 8);
					}
					if (func == 3)
					{
						SendRs[487] = 238;
					}
					else if (func == 2)
					{
						SendRs[487] = 221;
					}
					else if (func == 1)
					{
						SendRs[487] = byte.MaxValue;
					}
					else
					{
						SendRs[487] = 170;
					}
					crc = crc32[(crc & 0xFF) ^ SendRs[487]] ^ (crc >> 8);
					SendRs[488] = 85;
					crc = crc32[(crc & 0xFF) ^ SendRs[488]] ^ (crc >> 8);
					for (int j = 486; j < 2048; j++)
					{
						SendRs[j + 3] = byte.MaxValue;
						crc = crc32[(crc & 0xFF) ^ SendRs[j + 3]] ^ (crc >> 8);
					}
				}
				else
				{
					for (int k = 0; k < 2048; k++)
					{
						SendRs[k + 3] = tempBuff[num * 2048 + k];
						crc = crc32[(crc & 0xFF) ^ SendRs[k + 3]] ^ (crc >> 8);
					}
				}
				crc = ~crc;
				SendRs[2051] = (byte)crc;
				SendRs[2052] = (byte)(crc >> 8);
				SendRs[2053] = (byte)(crc >> 16);
				SendRs[2054] = (byte)(crc >> 24);
				App.maintainPackCnt = 0;
				try
				{
					if (SendRs.Length != 2055)
					{
						Console.WriteLine("error update length");
					}
					int subpackcnt;
					for (subpackcnt = 0; subpackcnt < 102; subpackcnt++)
					{
						byte[] array2 = new byte[20];
						for (int l = 0; l < 20; l++)
						{
							array2[l] = SendRs[l + subpackcnt * 20];
						}
						await chs.WriteAsync(array2);
						Thread.Sleep(10);
					}
					byte[] array3 = new byte[15];
					for (int m = 0; m < 15; m++)
					{
						array3[m] = SendRs[m + subpackcnt * 20];
					}
					await chs.WriteAsync(array3);
					Thread.Sleep(10);
				}
				catch (Exception)
				{
				}
				return;
			}
			if (App.date == 32071)
			{
				if (crc_table[num] == crc_filetable[num] && (num != 124 || (num == 124 && func == 0)))
				{
					byte[] array4 = new byte[8] { 90, 187, 0, 0, 0, 0, 0, 0 };
					if (crc_table[num + 1] == crc_filetable[num + 1])
					{
						packcnt = num - 3;
						array4[2] = (byte)(num + 1);
						subpacktotal++;
					}
					else
					{
						array4[2] = (byte)num;
					}
					array4[3] = 114;
					array4[4] = 115;
					array4[5] = 116;
					array4[6] = 117;
					array4[7] = 118;
					App.maintainPackCnt = 0;
					try
					{
						await chs.WriteAsync(array4);
						Thread.Sleep(10);
						return;
					}
					catch (Exception ex3)
					{
						UserDialogs.Instance.Toast("∑¢ÀÕ ˝æ› ß∞‹- " + ex3);
						return;
					}
				}
				SendRs = new byte[1031];
				SendRs[0] = 90;
				SendRs[1] = 165;
				SendRs[2] = (byte)num;
				crc = uint.MaxValue;
				crc = crc32[(crc & 0xFF) ^ SendRs[2]] ^ (crc >> 8);
				if (num == 124)
				{
					for (int n = 0; n < 484; n++)
					{
						SendRs[n + 3] = tempBuff[num * 1024 + n];
						crc = crc32[(crc & 0xFF) ^ SendRs[n + 3]] ^ (crc >> 8);
					}
					if (func == 3)
					{
						SendRs[487] = 238;
					}
					else if (func == 2)
					{
						SendRs[487] = 221;
					}
					else if (func == 1)
					{
						SendRs[487] = byte.MaxValue;
					}
					else
					{
						SendRs[487] = 170;
					}
					crc = crc32[(crc & 0xFF) ^ SendRs[487]] ^ (crc >> 8);
					SendRs[488] = 85;
					crc = crc32[(crc & 0xFF) ^ SendRs[488]] ^ (crc >> 8);
					for (int num2 = 486; num2 < 1024; num2++)
					{
						SendRs[num2 + 3] = byte.MaxValue;
						crc = crc32[(crc & 0xFF) ^ SendRs[num2 + 3]] ^ (crc >> 8);
					}
				}
				else
				{
					for (int num3 = 0; num3 < 1024; num3++)
					{
						SendRs[num3 + 3] = tempBuff[num * 1024 + num3];
						crc = crc32[(crc & 0xFF) ^ SendRs[num3 + 3]] ^ (crc >> 8);
					}
				}
				crc = ~crc;
				SendRs[1027] = (byte)crc;
				SendRs[1028] = (byte)(crc >> 8);
				SendRs[1029] = (byte)(crc >> 16);
				SendRs[1030] = (byte)(crc >> 24);
				App.maintainPackCnt = 0;
				try
				{
					if (SendRs.Length != 1031)
					{
						Console.WriteLine("error update length");
					}
					int subpackcnt;
					for (subpackcnt = 0; subpackcnt < 51; subpackcnt++)
					{
						byte[] array5 = new byte[20];
						for (int num4 = 0; num4 < 20; num4++)
						{
							array5[num4] = SendRs[num4 + subpackcnt * 20];
						}
						await chs.WriteAsync(array5);
						Thread.Sleep(10);
					}
					byte[] array6 = new byte[11];
					for (int num5 = 0; num5 < 11; num5++)
					{
						array6[num5] = SendRs[num5 + subpackcnt * 20];
					}
					await chs.WriteAsync(array6);
					Thread.Sleep(10);
				}
				catch (Exception)
				{
				}
				return;
			}
			SendRs = new byte[1031];
			SendRs[0] = 90;
			SendRs[1] = 165;
			if (App.date == 120)
			{
				num += 4;
				SendRs[2] = (byte)num;
				crc = uint.MaxValue;
				crc = crc32[(crc & 0xFF) ^ SendRs[2]] ^ (crc >> 8);
				if (num >= 30)
				{
					for (int num6 = 0; num6 < 1018; num6++)
					{
						SendRs[num6 + 3] = tempBuff[num * 1024 + num6];
						crc = crc32[(crc & 0xFF) ^ SendRs[num6 + 3]] ^ (crc >> 8);
					}
					SendRs[1021] = (byte)crc_total;
					crc = crc32[(crc & 0xFF) ^ SendRs[1021]] ^ (crc >> 8);
					SendRs[1022] = (byte)(crc_total >> 8);
					crc = crc32[(crc & 0xFF) ^ SendRs[1022]] ^ (crc >> 8);
					SendRs[1023] = (byte)(crc_total >> 16);
					crc = crc32[(crc & 0xFF) ^ SendRs[1023]] ^ (crc >> 8);
					SendRs[1024] = (byte)(crc_total >> 24);
					crc = crc32[(crc & 0xFF) ^ SendRs[1024]] ^ (crc >> 8);
					if (func == 2)
					{
						SendRs[1025] = 221;
					}
					else if (func == 1)
					{
						SendRs[1025] = byte.MaxValue;
					}
					else
					{
						SendRs[1025] = 170;
					}
					crc = crc32[(crc & 0xFF) ^ SendRs[1025]] ^ (crc >> 8);
					SendRs[1026] = 85;
					crc = crc32[(crc & 0xFF) ^ SendRs[1026]] ^ (crc >> 8);
				}
				else
				{
					for (int num7 = 0; num7 < 1024; num7++)
					{
						SendRs[num7 + 3] = tempBuff[num * 1024 + num7];
						crc = crc32[(crc & 0xFF) ^ SendRs[num7 + 3]] ^ (crc >> 8);
					}
				}
			}
			else if (App.date == 121)
			{
				SendRs[2] = (byte)num;
				crc = uint.MaxValue;
				crc = crc32[(crc & 0xFF) ^ SendRs[2]] ^ (crc >> 8);
				if (num >= 30)
				{
					for (int num8 = 0; num8 < 1018; num8++)
					{
						SendRs[num8 + 3] = tempBuff[num * 1024 + num8];
						crc = crc32[(crc & 0xFF) ^ SendRs[num8 + 3]] ^ (crc >> 8);
					}
					SendRs[1021] = (byte)crc_total;
					crc = crc32[(crc & 0xFF) ^ SendRs[1021]] ^ (crc >> 8);
					SendRs[1022] = (byte)(crc_total >> 8);
					crc = crc32[(crc & 0xFF) ^ SendRs[1022]] ^ (crc >> 8);
					SendRs[1023] = (byte)(crc_total >> 16);
					crc = crc32[(crc & 0xFF) ^ SendRs[1023]] ^ (crc >> 8);
					SendRs[1024] = (byte)(crc_total >> 24);
					crc = crc32[(crc & 0xFF) ^ SendRs[1024]] ^ (crc >> 8);
					if (func == 2)
					{
						SendRs[1025] = 221;
					}
					else if (func == 1)
					{
						SendRs[1025] = byte.MaxValue;
					}
					else
					{
						SendRs[1025] = 170;
					}
					crc = crc32[(crc & 0xFF) ^ SendRs[1025]] ^ (crc >> 8);
					SendRs[1026] = 85;
					crc = crc32[(crc & 0xFF) ^ SendRs[1026]] ^ (crc >> 8);
				}
				else
				{
					for (int num9 = 0; num9 < 1024; num9++)
					{
						SendRs[num9 + 3] = tempBuff[num * 1024 + num9];
						crc = crc32[(crc & 0xFF) ^ SendRs[num9 + 3]] ^ (crc >> 8);
					}
				}
			}
			else if (App.date == 32101)
			{
				SendRs[2] = (byte)num;
				crc = uint.MaxValue;
				crc = crc32[(crc & 0xFF) ^ SendRs[2]] ^ (crc >> 8);
				if (num >= 58)
				{
					for (int num10 = 0; num10 < 1018; num10++)
					{
						SendRs[num10 + 3] = tempBuff[num * 1024 + num10];
						crc = crc32[(crc & 0xFF) ^ SendRs[num10 + 3]] ^ (crc >> 8);
					}
					SendRs[1021] = (byte)crc_total;
					crc = crc32[(crc & 0xFF) ^ SendRs[1021]] ^ (crc >> 8);
					SendRs[1022] = (byte)(crc_total >> 8);
					crc = crc32[(crc & 0xFF) ^ SendRs[1022]] ^ (crc >> 8);
					SendRs[1023] = (byte)(crc_total >> 16);
					crc = crc32[(crc & 0xFF) ^ SendRs[1023]] ^ (crc >> 8);
					SendRs[1024] = (byte)(crc_total >> 24);
					crc = crc32[(crc & 0xFF) ^ SendRs[1024]] ^ (crc >> 8);
					if (func == 2)
					{
						SendRs[1025] = 221;
					}
					else if (func == 1)
					{
						SendRs[1025] = byte.MaxValue;
					}
					else
					{
						SendRs[1025] = 170;
					}
					crc = crc32[(crc & 0xFF) ^ SendRs[1025]] ^ (crc >> 8);
					SendRs[1026] = 85;
					crc = crc32[(crc & 0xFF) ^ SendRs[1026]] ^ (crc >> 8);
				}
				else
				{
					for (int num11 = 0; num11 < 1024; num11++)
					{
						SendRs[num11 + 3] = tempBuff[num * 1024 + num11];
						crc = crc32[(crc & 0xFF) ^ SendRs[num11 + 3]] ^ (crc >> 8);
					}
				}
			}
			else
			{
				SendRs[2] = (byte)num;
				crc = uint.MaxValue;
				crc = crc32[(crc & 0xFF) ^ SendRs[2]] ^ (crc >> 8);
				if (num >= 62)
				{
					for (int num12 = 0; num12 < 1018; num12++)
					{
						SendRs[num12 + 3] = tempBuff[num * 1024 + num12];
						crc = crc32[(crc & 0xFF) ^ SendRs[num12 + 3]] ^ (crc >> 8);
					}
					SendRs[1021] = (byte)crc_total;
					crc = crc32[(crc & 0xFF) ^ SendRs[1021]] ^ (crc >> 8);
					SendRs[1022] = (byte)(crc_total >> 8);
					crc = crc32[(crc & 0xFF) ^ SendRs[1022]] ^ (crc >> 8);
					SendRs[1023] = (byte)(crc_total >> 16);
					crc = crc32[(crc & 0xFF) ^ SendRs[1023]] ^ (crc >> 8);
					SendRs[1024] = (byte)(crc_total >> 24);
					crc = crc32[(crc & 0xFF) ^ SendRs[1024]] ^ (crc >> 8);
					if (func == 2)
					{
						SendRs[1025] = 221;
					}
					else if (func == 1)
					{
						SendRs[1025] = byte.MaxValue;
					}
					else
					{
						SendRs[1025] = 170;
					}
					crc = crc32[(crc & 0xFF) ^ SendRs[1025]] ^ (crc >> 8);
					SendRs[1026] = 85;
					crc = crc32[(crc & 0xFF) ^ SendRs[1026]] ^ (crc >> 8);
				}
				else
				{
					for (int num13 = 0; num13 < 1024; num13++)
					{
						SendRs[num13 + 3] = tempBuff[num * 1024 + num13];
						crc = crc32[(crc & 0xFF) ^ SendRs[num13 + 3]] ^ (crc >> 8);
					}
				}
			}
			crc = ~crc;
			SendRs[1027] = (byte)crc;
			SendRs[1028] = (byte)(crc >> 8);
			SendRs[1029] = (byte)(crc >> 16);
			SendRs[1030] = (byte)(crc >> 24);
			App.maintainPackCnt = 0;
			try
			{
				if (SendRs.Length != 1031)
				{
					Console.WriteLine("error update length");
				}
				int subpackcnt;
				for (subpackcnt = 0; subpackcnt < 51; subpackcnt++)
				{
					byte[] array7 = new byte[20];
					for (int num14 = 0; num14 < 20; num14++)
					{
						array7[num14] = SendRs[num14 + subpackcnt * 20];
					}
					await chs.WriteAsync(array7);
					Thread.Sleep(10);
				}
				byte[] array8 = new byte[11];
				for (int num15 = 0; num15 < 11; num15++)
				{
					array8[num15] = SendRs[num15 + subpackcnt * 20];
				}
				await chs.WriteAsync(array8);
				Thread.Sleep(10);
			}
			catch (Exception)
			{
			}
		}

		private async void SendDetectPacket()
		{
			if (chs == null)
			{
				return;
			}
			byte[] array = new byte[8] { 85, 170, 0, 0, 0, 0, 0, 0 };
			if (App.date == 32303)
			{
				array[2] = 51;
				array[3] = 48;
				array[4] = 51;
				array[5] = 60;
				array[6] = 253;
				array[7] = 254;
			}
			else if (App.date == 32071)
			{
				array[2] = 48;
				array[3] = 55;
				array[4] = 49;
				array[5] = 60;
				array[6] = 253;
				array[7] = 254;
			}
			else if (App.date == 32103)
			{
				array[2] = 17;
				array[3] = 18;
				array[4] = 19;
				array[5] = 0;
				array[6] = 253;
				array[7] = 254;
			}
			else if (App.date == 14200)
			{
				array[2] = 101;
				array[3] = 139;
				array[4] = 207;
				array[5] = 49;
				array[6] = 72;
				array[7] = 243;
			}
			else
			{
				if (App.date == 277)
				{
					array[2] = 49;
					array[3] = 50;
					array[4] = 51;
				}
				else
				{
					array[2] = 1;
					array[3] = 2;
					array[4] = 3;
				}
				array[5] = 0;
				array[6] = 253;
				array[7] = 254;
			}
			App.maintainPackCnt = 0;
			try
			{
				await chs.WriteAsync(array);
			}
			catch (Exception)
			{
			}
		}

		private async void SendDetectPacket485()
		{
			if (chs == null)
			{
				return;
			}
			byte[] array = new byte[8] { 85, 170, 0, 0, 0, 0, 0, 0 };
			if (App.date == 120)
			{
				array[2] = 10;
				array[3] = 11;
				array[4] = 12;
			}
			else
			{
				array[2] = 4;
				array[3] = 5;
				array[4] = 6;
			}
			if (App.date == 121)
			{
				array[5] = 50;
			}
			else
			{
				array[5] = 0;
			}
			array[6] = 253;
			array[7] = 254;
			App.maintainPackCnt = 0;
			try
			{
				await chs.WriteAsync(array);
			}
			catch (Exception)
			{
			}
		}

		private async void SendDetectPacketBMS()
		{
			if (chs == null)
			{
				return;
			}
			byte[] array = new byte[8] { 85, 170, 0, 0, 0, 0, 0, 0 };
			if (App.date == 32101)
			{
				array[2] = 23;
				array[3] = 24;
				array[4] = 25;
			}
			else
			{
				array[2] = 7;
				array[3] = 8;
				array[4] = 9;
			}
			array[5] = 0;
			array[6] = 253;
			array[7] = 254;
			App.maintainPackCnt = 0;
			try
			{
				await chs.WriteAsync(array);
			}
			catch (Exception)
			{
			}
		}

		private async void SendErrorPacket()
		{
			if (chs == null)
			{
				return;
			}
			for (int subpackcnt = 0; subpackcnt < 102; subpackcnt++)
			{
				byte[] array = new byte[20];
				for (int i = 0; i < 20; i++)
				{
					array[i] = 127;
				}
				await chs.WriteAsync(array);
				Thread.Sleep(10);
			}
			App.maintainPackCnt = 0;
		}

		private void initcrc()
		{
			for (uint num = 0u; num < 256; num++)
			{
				uint num2 = num;
				for (uint num3 = 0u; num3 < 8; num3++)
				{
					num2 = (((num2 & 1) == 0) ? (num2 >> 1) : ((num2 >> 1) ^ 0xEDB88320u));
				}
				crc32[num] = num2;
			}
		}

		public int hexstr_to_uint32(char[] str)
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			if (str == null)
			{
				return 0;
			}
			for (num2 = 0; str[num2] != 0; num2++)
			{
			}
			int num4 = num2;
			if (num4 > 10)
			{
				return 0;
			}
			if (str[1] == 'x' || str[1] == 'X')
			{
				int num5 = num4 - 2;
				for (num2 = 2; num2 < num4; num2++)
				{
					if (str[num2] >= '0' && str[num2] <= '9')
					{
						num3 = str[num2] - 48;
					}
					if (str[num2] >= 'A' && str[num2] <= 'F')
					{
						num3 = str[num2] - 65 + 10;
					}
					if (str[num2] >= 'a' && str[num2] <= 'f')
					{
						num3 = str[num2] - 97 + 10;
					}
					num5--;
					num += num3 << num5 * 4;
				}
			}
			else
			{
				int num5 = num4;
				for (num2 = 0; num2 < num4; num2++)
				{
					if (str[num2] >= '0' && str[num2] <= '9')
					{
						num3 = str[num2] - 48;
					}
					if (str[num2] >= 'A' && str[num2] <= 'F')
					{
						num3 = str[num2] - 65 + 10;
					}
					if (str[num2] >= 'a' && str[num2] <= 'f')
					{
						num3 = str[num2] - 97 + 10;
					}
					num5--;
					num += num3 << num5 * 4;
				}
			}
			return num;
		}

		private async void OnExportClicked(object sender, EventArgs e)
		{
			if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
			{
				BindA();
				return;
			}
			App.recordtime = DateTime.Now.ToString("yyyyMMdd_HH:mm:ss");
			string filename = App.ModelName + "_" + App.recordtime + ".heb";
			string text = ((!App.CN) ? (await DisplayPromptAsync("Export parameters from controller", "Export filename:", "Export", "Cancel", filename, 50)) : (await DisplayPromptAsync("µº≥ˆøÿ÷∆∆˜µƒ ˝æ›µΩ ÷ª˙", "µº≥ˆµƒŒƒº˛√˚£∫", "µº≥ˆ", "»°œ˚", filename, 50)));
			if (text != null)
			{
				if (App.NewVersion)
				{
					if (App.NewData == uint.MaxValue)
					{
						int num = 0;
						for (int i = 0; i < 156; i++)
						{
							App.wflash[num] = (byte)App.gflash[i];
							num++;
							App.wflash[num] = (byte)(App.gflash[i] >> 8);
							num++;
						}
						num = 0;
						for (int j = 0; j < 192; j++)
						{
							App.cflash[num] = (byte)App.gcflash[j];
							num++;
							App.cflash[num] = (byte)(App.gcflash[j] >> 8);
							num++;
						}
						if (text != "")
						{
							filename = ((!text.ToUpper().Contains(".HEB")) ? (text + ".heb") : text);
						}
						string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), filename);
						byte[] array = new byte[696];
						App.wflash.CopyTo(array, 0);
						App.cflash.CopyTo(array, 312);
						File.WriteAllBytes(path, array);
						if (App.CN)
						{
							await UserDialogs.Instance.AlertAsync(" ˝æ›“—µº≥ˆµΩŒƒº˛ " + filename);
						}
						else
						{
							await UserDialogs.Instance.AlertAsync("Data is exported to " + filename);
						}
					}
				}
				else if (App.CN)
				{
					await UserDialogs.Instance.AlertAsync("æ…∞Ê±æøÿ÷∆∆˜≤ª÷ß≥÷£°");
				}
				else
				{
					await UserDialogs.Instance.AlertAsync("Old Controller is not supported£°");
				}
			}
			else if (ClickCount < 3)
			{
				ClickCount++;
			}
			else
			{
				SendRs232Data(4, 171, 31, 31);
				App.rs485index = 0;
				App.rs485len = 0;
				for (int k = 0; k < 7200; k++)
				{
					App.rs485data[k] = 0;
				}
				if (!App.CN)
				{
					await UserDialogs.Instance.AlertAsync("Begin to Get Data,Return to Curve Page");
				}
				else
				{
					await UserDialogs.Instance.AlertAsync("ø™ ºªÒ»° ˝æ›,∑µªÿµΩ«˙œﬂ“≥√Ê");
				}
				ClickCount = 0;
				App.GetDataCmd = true;
			}
		}

		private async void BindA()
		{
			if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Controller is not bound or login, Please bind or login the controller.", null, "Bind", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("øÿ÷∆∆˜Œ¥∞Û∂®µ«¬º£¨«Îœ»∞Û∂®µ«¬ºøÿ÷∆∆˜°£", null, "∞Û∂®", "»°œ˚")))
			{
				App.NotBindStat = 99;
			}
		}

		private async void OnImportClicked(object sender, EventArgs e)
		{
			if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
			{
				BindA();
				return;
			}
			if (!App.NewVersion)
			{
				if (!App.CN)
				{
					await UserDialogs.Instance.AlertAsync("Old Controller is not supported£°");
				}
				else
				{
					await UserDialogs.Instance.AlertAsync("æ…∞Ê±æøÿ÷∆∆˜≤ª÷ß≥÷µº»Î£°");
				}
			}
			if (App.HasParaFile == 0)
			{
				if (!((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("No Para file, Need to select a file?", null, "select", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("Œ¥—°‘Ò≤Œ ˝Œƒº˛£¨“™—°‘Ò≤Œ ˝Œƒº˛¬£ø", null, "—°‘Ò", "»°œ˚"))))
				{
					return;
				}
				App.Downloaded = 0;
				MqttPub("000000000000000/bind/filelist", App.clientid);
				await base.Navigation.PushModalAsync(new FilePage());
				if (App.HasParaFile == 0)
				{
					return;
				}
			}
			if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Write Paras to Controller", null, "Write", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("µº»Î≤Œ ˝µΩøÿ÷∆∆˜", null, "µº»Î", "»°œ˚")))
			{
				CopyNewData = true;
				NewCnt = 0;
			}
		}

		private void SetConnectStat()
		{
			App.hasSelected = true;
			if (bluedevice == null)
			{
				return;
			}
			if (App.CN)
			{
				if (bluedevice.State == DeviceState.Connected)
				{
					Connection.Text = "∂œø™¡¨Ω”";
					Connection.IsEnabled = true;
				}
				else if (App.isConnected)
				{
					Connection.IsEnabled = false;
					Connection.Text = "¡¨Ω”";
				}
				else
				{
					Connection.IsEnabled = true;
					Connection.Text = "¡¨Ω”";
				}
			}
			else if (bluedevice.State == DeviceState.Connected)
			{
				Connection.Text = "DisConnect";
				Connection.IsEnabled = true;
			}
			else if (App.isConnected)
			{
				Connection.IsEnabled = false;
				Connection.Text = "Connect";
			}
			else
			{
				Connection.IsEnabled = true;
				Connection.Text = "Connect";
			}
		}

		private void ListView_ItemSelected(object sender, SelectedItemChangedEventArgs e)
		{
			scanResult = (ScanResultModel)e.SelectedItem;
			bluedevice = scanResult.Device;
			SetConnectStat();
		}

		private void ListView2_ItemSelected(object sender, SelectedItemChangedEventArgs e)
		{
			try
			{
				App.scanResult = (ScanResultModel)e.SelectedItem;
				if (App.scanResult.IsVcu)
				{
					App.currentvcudeviceid = "0" + App.scanResult.SerialNumber.Substring(13);
					SaveSK();
					SecureStorage.SetAsync("CurrentVCU", App.currentvcudeviceid);
				}
			}
			catch (Exception)
			{
			}
		}

		private async void disconnectblue()
		{
			try
			{
				await adapter.DisconnectDeviceAsync(bluedevice);
				isconnecting = false;
				App.NotBindStat = 0;
				App.isConnected = false;
				App.isConnectedLost = true;
				if (App.CN)
				{
					Connection.Text = "¡¨Ω”";
				}
				else
				{
					Connection.Text = "Connect";
				}
				IsScanning = true;
				foreach (ScanResultModel deviceResult in DeviceResults)
				{
					if (deviceResult.Device != null && deviceResult.Uuid == bluedevice.Id)
					{
						DeviceResults.Remove(deviceResult);
						bluedevice = null;
						chs = null;
						App.NewData = 0u;
						App.HasParaFile = 0;
						break;
					}
				}
			}
			catch (Exception)
			{
			}
		}

		private async void OnDeviceStateChanged()
		{
			_ = 2;
			try
			{
				IReadOnlyList<IService> readOnlyList = await bluedevice.GetServicesAsync();
				if (readOnlyList == null)
				{
					return;
				}
				IService service = null;
				foreach (IService item in readOnlyList)
				{
					byte[] array = item.Id.ToByteArray();
					if (array[1] == byte.MaxValue && array[0] == 224)
					{
						service = item;
					}
				}
				if (service == null)
				{
					return;
				}
				foreach (ICharacteristic item2 in await service.GetCharacteristicsAsync())
				{
					byte[] array2 = item2.Id.ToByteArray();
					if (array2[1] == byte.MaxValue && array2[0] == 236)
					{
						chs = item2;
					}
				}
				if (chs == null)
				{
					return;
				}
				ConnectTimeCount = 72000;
				chs.ValueUpdated += delegate(object o, CharacteristicUpdatedEventArgs args)
				{
					byte[] value2 = args.Characteristic.Value;
					if (value2.Length == 10 && value2[0] == 65 && value2[1] == 84 && value2[2] == 43 && value2[3] == 86 && value2[4] == 69 && value2[5] == 82 && value2[6] == 83 && value2[7] == 73 && value2[8] == 79 && value2[9] == 78)
					{
						disconnectblue();
						scantimecount = 0;
					}
					SetReadValue(value2);
				};
				await chs.StartUpdatesAsync();
			}
			catch (Exception value)
			{
				Console.WriteLine(value);
			}
		}

		private void SetReadValue(byte[] Value)
		{
			if (Value == null)
			{
				return;
			}
			for (int i = 0; i < Value.Length; i++)
			{
				if (m_RcvIndex == 0)
				{
					if (Value[i] == 170)
					{
						m_Received[0] = Value[i];
						m_RcvIndex = 1;
					}
					continue;
				}
				if (m_RcvIndex == 1)
				{
					m_Received[m_RcvIndex] = Value[i];
					m_RcvIndex = 2;
					continue;
				}
				if ((m_Received[1] & 0x80) == 128)
				{
					m_Received[m_RcvIndex] = Value[i];
					if (m_RcvIndex < 15)
					{
						m_RcvIndex++;
						continue;
					}
					m_RcvIndex = 0;
					byte b = 60;
					byte b2 = 127;
					for (int j = 0; j < 14; j++)
					{
						int num = b ^ m_Received[j];
						b = (byte)(b2 ^ crctablehi[num]);
						b2 = crctablelo[num];
					}
					if (m_Received[14] != b || m_Received[15] != b2)
					{
						continue;
					}
					int num2 = m_Received[1] & 0x7F;
					App.NewVersion = true;
					noFramesTime = 0;
					if (num2 > 55 && num2 <= 87)
					{
						App.rcvFrames++;
						int num3 = num2 - 56;
						App.NewData |= (uint)(1 << num3);
						int num4 = num3 * 6;
						App.gcflash[num4++] = (ushort)(m_Received[3] * 256 + m_Received[2]);
						App.gcflash[num4++] = (ushort)(m_Received[5] * 256 + m_Received[4]);
						App.gcflash[num4++] = (ushort)(m_Received[7] * 256 + m_Received[6]);
						App.gcflash[num4++] = (ushort)(m_Received[9] * 256 + m_Received[8]);
						App.gcflash[num4++] = (ushort)(m_Received[11] * 256 + m_Received[10]);
						App.gcflash[num4++] = (ushort)(m_Received[13] * 256 + m_Received[12]);
						if (App.NewData == uint.MaxValue)
						{
							App.HasParaFile = 2;
						}
					}
					else
					{
						byte[] b3 = new byte[16];
						lock (m_Received)
						{
							Array.Copy(m_Received, b3, 16);
						}
						Device.BeginInvokeOnMainThread(delegate
						{
							MessagingCenter.Send(this, "ReadParaMeter", b3);
						});
					}
					if (!RemoteEnabled)
					{
						continue;
					}
					if (!remotetxdata1ready)
					{
						if (rcv1cnt < 512)
						{
							Array.Copy(m_Received, 0, remotetxdata1, rcv1cnt, 16);
							rcv1cnt += 16;
						}
						if (rcv1cnt == 512)
						{
							rcv1cnt = 0;
							remotetxdata1ready = true;
						}
					}
					else if (!remotetxdata2ready)
					{
						if (rcv2cnt < 512)
						{
							Array.Copy(m_Received, 0, remotetxdata2, rcv2cnt, 16);
							rcv2cnt += 16;
						}
						if (rcv2cnt == 512)
						{
							rcv2cnt = 0;
							remotetxdata2ready = true;
						}
					}
					continue;
				}
				m_Received[m_RcvIndex] = Value[i];
				if (m_RcvIndex > 3 && m_Received[m_RcvIndex] == 1 && m_Received[m_RcvIndex - 1] == 1 && m_Received[m_RcvIndex - 2] == 31 && m_Received[m_RcvIndex - 3] == 170 && dld_state == 0)
				{
					dld_state = 1;
				}
				if (m_RcvIndex < 15)
				{
					m_RcvIndex++;
					continue;
				}
				rcv_crc = 0;
				for (int num5 = 0; num5 < 14; num5++)
				{
					rcv_crc += m_Received[num5];
				}
				if (m_Received[14] == rcv_crc >> 8 && m_Received[15] == (rcv_crc & 0xFF))
				{
					noFramesTime = 0;
					if (m_Received[0] == 170 && m_Received[1] == 31 && m_Received[2] == m_Received[3])
					{
						switch (m_Received[2])
						{
						case 1:
							if (dld_state == 0)
							{
								dld_state = 1;
							}
							crc_table[4] = m_Received[4];
							crc_table[4] += (uint)(m_Received[5] << 8);
							crc_table[4] += (uint)(m_Received[6] << 16);
							crc_table[4] += (uint)(m_Received[7] << 24);
							crc_table[5] = m_Received[8];
							crc_table[5] += (uint)(m_Received[9] << 8);
							crc_table[5] += (uint)(m_Received[10] << 16);
							crc_table[5] += (uint)(m_Received[11] << 24);
							break;
						case 2:
							dld_Ack = -1;
							break;
						case 3:
							dld_Ack = 1;
							break;
						case 4:
							dld_Ack = -1;
							break;
						default:
							if (m_Received[2] < 126)
							{
								crc_table[m_Received[2]] = m_Received[4];
								crc_table[m_Received[2]] += (uint)(m_Received[5] << 8);
								crc_table[m_Received[2]] += (uint)(m_Received[6] << 16);
								crc_table[m_Received[2]] += (uint)(m_Received[7] << 24);
								crc_table[m_Received[2] + 1] = m_Received[8];
								crc_table[m_Received[2] + 1] += (uint)(m_Received[9] << 8);
								crc_table[m_Received[2] + 1] += (uint)(m_Received[10] << 16);
								crc_table[m_Received[2] + 1] += (uint)(m_Received[11] << 24);
								if (m_Received[2] == 124)
								{
									dld_Ack = 1;
								}
								else if (m_Received[2] == 125)
								{
									dld_Ack = 1;
								}
								else if (m_Received[2] == 126)
								{
									dld_Ack = 0;
								}
								else
								{
									dld_Ack = 1;
								}
							}
							break;
						case 0:
							break;
						}
					}
					else if (m_Received[0] == 170 && (m_Received[1] & 0xFC) == 124)
					{
						switch (m_Received[1])
						{
						case 124:
							App.ReceivedVCUFrame = true;
							App.rcv_serialNumber = "VCUFarDriverA" + ((m_Received[5] << 24) + (m_Received[4] << 16) + (m_Received[3] << 8) + m_Received[2]).ToString("0000000");
							logincount = 0;
							break;
						}
					}
					else
					{
						App.NewVersion = false;
					}
					byte[] b4 = new byte[16];
					lock (m_Received)
					{
						Array.Copy(m_Received, b4, 16);
					}
					Device.BeginInvokeOnMainThread(delegate
					{
						MessagingCenter.Send(this, "ReadParaMeter", b4);
					});
					if (RemoteEnabled)
					{
						if (!remotetxdata1ready)
						{
							if (rcv1cnt < 512)
							{
								Array.Copy(m_Received, 0, remotetxdata1, rcv1cnt, 16);
								rcv1cnt += 16;
							}
							if (rcv1cnt == 512)
							{
								rcv1cnt = 0;
								remotetxdata1ready = true;
							}
						}
						else if (!remotetxdata2ready)
						{
							if (rcv2cnt < 512)
							{
								Array.Copy(m_Received, 0, remotetxdata2, rcv2cnt, 16);
								rcv2cnt += 16;
							}
							if (rcv2cnt == 512)
							{
								rcv2cnt = 0;
								remotetxdata2ready = true;
							}
						}
					}
				}
				m_RcvIndex = 0;
			}
		}

		private async void Connection_Clicked(object sender, EventArgs e)
		{
			_ = 2;
			try
			{
				if (bluedevice == null)
				{
					Connection.IsEnabled = false;
					return;
				}
				if (bluedevice.Name.ToUpper().Contains("YUANQU") || bluedevice.Name.ToUpper().Contains("CONTROL") || bluedevice.Name.ToUpper().Contains("BMS"))
				{
					if (bluedevice.State == DeviceState.Connected)
					{
						try
						{
							await adapter.DisconnectDeviceAsync(bluedevice);
							App.LastConnectedBlue = "";
							isconnecting = false;
							App.isConnected = false;
							if (App.CN)
							{
								Connection.Text = "¡¨Ω”";
							}
							else
							{
								Connection.Text = "Connect";
							}
							IsScanning = true;
							foreach (ScanResultModel deviceResult in DeviceResults)
							{
								if (deviceResult.Device != null && deviceResult.Uuid == bluedevice.Id)
								{
									DeviceResults.Remove(deviceResult);
									break;
								}
							}
							return;
						}
						catch (Exception)
						{
							if (App.CN)
							{
								UserDialogs.Instance.Alert("∂œø™¡¨Ω”≥¨ ±");
							}
							else
							{
								UserDialogs.Instance.Alert("DisConnect Timeout");
							}
							return;
						}
					}
					if (isconnecting)
					{
						try
						{
							await adapter.DisconnectDeviceAsync(bluedevice);
							isconnecting = false;
							App.isConnected = false;
							if (App.CN)
							{
								Connection.Text = "¡¨Ω”";
							}
							else
							{
								Connection.Text = "Connect";
							}
							return;
						}
						catch (Exception)
						{
							if (App.CN)
							{
								UserDialogs.Instance.Alert("»°œ˚¡¨Ω”≥¨ ±");
							}
							else
							{
								UserDialogs.Instance.Alert("CancelConnect Timeout");
							}
							return;
						}
					}
					if (App.CN)
					{
						Connection.Text = "»°œ˚¡¨Ω”";
					}
					else
					{
						Connection.Text = "CancelConnect";
					}
					isconnecting = true;
					try
					{
						await adapter.ConnectToDeviceAsync(bluedevice);
						if (bluedevice.State != DeviceState.Connected)
						{
							return;
						}
						isconnecting = false;
						Device.BeginInvokeOnMainThread(delegate
						{
							foreach (ScanResultModel deviceResult2 in DeviceResults)
							{
								if (deviceResult2.Device != null)
								{
									deviceResult2.IsConnected = deviceResult2.Device.State == DeviceState.Connected;
									deviceResult2.OnPropertyChanged("IsConnected");
								}
							}
						});
						App.isConnected = true;
						App.NotBindStat = 1;
						bleconnect_imecount = 0;
						OnDeviceStateChanged();
						if (App.CN)
						{
							Connection.Text = "∂œø™¡¨Ω”";
						}
						else
						{
							Connection.Text = "DisConnect";
						}
						scanResult.IsConnected = true;
						return;
					}
					catch (Exception)
					{
						if (App.CN)
						{
							UserDialogs.Instance.Alert("¡¨Ω”≥¨ ±");
						}
						else
						{
							UserDialogs.Instance.Alert("Connect Timeout");
						}
						return;
					}
				}
				if (App.CN)
				{
					UserDialogs.Instance.Alert("≤ª «‘∂«˝µƒ¿∂—¿");
				}
				else
				{
					UserDialogs.Instance.Alert("It is not Fardriver's Bluetooth");
				}
			}
			catch (Exception)
			{
				UserDialogs.Instance.Alert("ble err");
			}
		}

		private async void FileButton_Clicked(object sender, EventArgs e)
		{
			App.Downloaded = 0;
			if (App.CAT1_Loggined)
			{
				MqttPub("000000000000000/bind/filelist", App.clientid);
			}
			await base.Navigation.PushModalAsync(new FilePage());
		}

		private async void FileButton2_Clicked(object sender, EventArgs e)
		{
			if (App.RcvRemoteCount > 0)
			{
				if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will quit remote help", null, "Quit", "cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ÕÀ≥ˆ‘∂≥Ã–≠÷˙", null, "ÕÀ≥ˆ", "»°œ˚")))
				{
					MqttPub(App.clientid + "0" + RemoteClient + "/remote/ack", "Cancel");
				}
				return;
			}
			string text = ((!App.CN) ? (await DisplayPromptAsync("Authorize", "Authorize for Device Share.", "OK", "CANCEL", "Paste User Request Data", 50)) : (await DisplayPromptAsync(" ⁄»®", " ⁄»®œ¬√Ê–Ú¡–∫≈‘ –Ì∆‰À˚”√ªß∞Û∂®", " ⁄»®", "»°œ˚", "’≥Ã˘øÕªß…Í«Î ˝æ›", 50)));
			if (text != null)
			{
				string[] array = text.Split(new char[1] { ',' });
				if (array[0].Length == 8 && App.clientid.Length == 7 && array[1].Length == 20)
				{
					text = array[1] + "_ts_" + timestamp;
					string payload = Encrypt(text);
					string topic = App.clientid + array[0] + "/bind/ShareID";
					MqttPub(topic, payload);
				}
				else if (App.CN)
				{
					UserDialogs.Instance.Alert("«ÎºÏ≤È ˝æ›∏Ò Ω∫Õ≥§∂»:…Ë±∏∫≈,…Ë±∏–Ú¡–∫≈");
				}
				else
				{
					UserDialogs.Instance.Alert("Please check data format & length: deviceID,SerialNumber");
				}
			}
		}

		private void WriteSection(string password)
		{
			string arg = App.rcv_serialNumber + password;
			bool flag = false;
			string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "motornetrecord.txt");
			if (File.Exists(path))
			{
				string[] array = File.ReadAllLines(path);
				File.Delete(path);
				string[] array2 = array;
				foreach (string text in array2)
				{
					if (text.Contains(App.rcv_serialNumber))
					{
						flag = true;
						File.AppendAllLines(path, new string[1] { $"{arg}" }, Encoding.UTF8);
					}
					else
					{
						File.AppendAllLines(path, new string[1] { $"{text}" }, Encoding.UTF8);
					}
				}
			}
			if (!flag)
			{
				File.AppendAllLines(path, new string[1] { $"{arg}" }, Encoding.UTF8);
			}
		}

		private void LoginAlert()
		{
			if (App.CN)
			{
				UserDialogs.Instance.Alert("«Îœ»µ«¬º");
			}
			else
			{
				UserDialogs.Instance.Alert("Please Login");
			}
		}

		private void CmdPassword_Clicked(object sender, EventArgs e)
		{
			if (App.PassOk == 3 || App.ownertype >= 2)
			{
				ModifyPassword();
			}
			else
			{
				LoginPassword();
			}
		}

		private async void LoginView_Clicked(object sender, EventArgs e)
		{
			if (App.rcv_serialNumber.Length != 20)
			{
				UserDialogs.Instance.Alert("Illegel SN Length");
				return;
			}
			if (!App.CAT1_Loggined)
			{
				LoginAlert();
				return;
			}
			string payload = Encrypt(App.rcv_serialNumber + "_ts_" + timestamp);
			if (App.BindingStat > 0)
			{
				if (!((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Unbound Controller SN:" + App.rcv_serialNumber, null, "Unbound", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("Ω‚≥˝∞Û∂®øÿ÷∆∆˜ ±‡∫≈£∫" + App.rcv_serialNumber, null, "Ω‚≥˝∞Û∂®", "»°œ˚"))))
				{
					return;
				}
				if (App.clientid == null)
				{
					UserDialogs.Instance.Alert("Client Id is null");
					return;
				}
				if (App.clientid == "0000000")
				{
					UserDialogs.Instance.Alert("Client Id is 0000000");
					return;
				}
				bindDevice.count = 150;
				for (int i = 0; i < bindDevice.device.Count; i++)
				{
					if (App.rcv_serialNumber == bindDevice.device[i].serialnumber)
					{
						MqttPub(App.clientid + bindDevice.device[i].deviceid + "/bind", payload);
						break;
					}
				}
			}
			else
			{
				if (App.hasserialnumber != 2)
				{
					return;
				}
				int num = 0;
				for (int j = 0; j < bindDevice.device.Count; j++)
				{
					if (bindDevice.device[j].serialnumber.Length == 20)
					{
						num++;
					}
				}
				if (num >= 3 && bindDevice.SN6.Length < 4)
				{
					if (App.CN)
					{
						UserDialogs.Instance.Alert("ƒ˙“—æ≠∞Û∂®¡À3∏ˆøÿ÷∆∆˜£¨«ÎΩ‚≥˝∞Û∂®∫Û‘Ÿ≥¢ ‘∞Û∂®" + bindDevice.device[0].deviceid + "," + bindDevice.device[1].deviceid + "," + bindDevice.device[2].deviceid);
					}
					else
					{
						UserDialogs.Instance.Alert("You bound 3 controllers, please unbound a controller and try again.");
					}
				}
				else if (num >= 500)
				{
					if (App.CN)
					{
						UserDialogs.Instance.Alert("ƒ˙“—æ≠∞Û∂®¡À500∏ˆøÿ÷∆∆˜£¨«ÎΩ‚≥˝∞Û∂®∫Û‘Ÿ≥¢ ‘∞Û∂®" + bindDevice.device[0].deviceid + "," + bindDevice.device[1].deviceid + "," + bindDevice.device[2].deviceid);
					}
					else
					{
						UserDialogs.Instance.Alert("You bound 1000 controllers, please unbound a controller and try again.");
					}
				}
				else if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Bound Controller SN:" + App.rcv_serialNumber, null, "Bound", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("∞Û∂®øÿ÷∆∆˜ ±‡∫≈£∫" + App.rcv_serialNumber, null, "∞Û∂®", "»°œ˚")))
				{
					bindDevice.count = 150;
					App.NewSerialnumber = App.rcv_serialNumber;
					MqttPub("000000000000000/bind", payload);
				}
			}
		}

		private void OnBindListScrolled(object sender, ScrolledEventArgs e)
		{
			Grid11.RowDefinitions[1].Height = new GridLength(12.0, GridUnitType.Star);
			Grid11.RowDefinitions[2].Height = new GridLength(60.0, GridUnitType.Star);
		}

		private void OnBlueListScrolled(object sender, ScrolledEventArgs e)
		{
			Grid11.RowDefinitions[1].Height = new GridLength(44.0, GridUnitType.Star);
			Grid11.RowDefinitions[2].Height = new GridLength(28.0, GridUnitType.Star);
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			this.LoadFromXaml(typeof(ConnectPage));
			Grid11 = this.FindByName<Grid>("Grid11");
			CmdName = this.FindByName<Xamarin.Forms.Button>("CmdName");
			Connection = this.FindByName<Xamarin.Forms.Button>("Connection");
			CmdPassword = this.FindByName<Xamarin.Forms.Button>("CmdPassword");
			LoginView = this.FindByName<Xamarin.Forms.Button>("LoginView");
			CmdRemote = this.FindByName<Xamarin.Forms.Button>("CmdRemote");
			resultListView = this.FindByName<Xamarin.Forms.ListView>("resultListView");
			FrameCount = this.FindByName<Label>("FrameCount");
			resultListView2 = this.FindByName<Xamarin.Forms.ListView>("resultListView2");
			DownloadFileName = this.FindByName<Label>("DownloadFileName");
			CmdUpgrade = this.FindByName<Xamarin.Forms.Button>("CmdUpgrade");
			CmdFlashIn = this.FindByName<Xamarin.Forms.Button>("CmdFlashIn");
			CmdSelect = this.FindByName<Xamarin.Forms.Button>("CmdSelect");
			CmdSelect2 = this.FindByName<Xamarin.Forms.Button>("CmdSelect2");
			CmdExport = this.FindByName<Xamarin.Forms.Button>("CmdExport");
			CmdImport = this.FindByName<Xamarin.Forms.Button>("CmdImport");
			CmdProduct = this.FindByName<Xamarin.Forms.Button>("CmdProduct");
			CmdDetail = this.FindByName<Xamarin.Forms.Button>("CmdDetail");
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	[XamlFilePath("CurvePage.xaml")]
	public class CurvePage : ContentPage
	{
		private SKPaint blackTextPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Gray,
			StrokeWidth = 1f,
			TextSize = 10f,
			IsAntialias = true
		};

		private SKPaint grayFillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Gray
		};

		private SKPaint gray2FillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			StrokeWidth = 0.5f,
			Color = SKColors.Gray
		};

		private SKPaint yellowCFillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			StrokeWidth = 0.5f,
			Color = SKColors.Gold
		};

		private SKPaint greenCFillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			StrokeWidth = 0.5f,
			Color = SKColors.Green
		};

		private SKPaint blueCFillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			StrokeWidth = 0.5f,
			Color = SKColors.DeepSkyBlue
		};

		private SKPaint darkblueCFillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			StrokeWidth = 0.5f,
			Color = SKColors.DarkSlateBlue
		};

		private SKPaint blackCFillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			StrokeWidth = 0.5f,
			Color = SKColors.DarkSalmon
		};

		private SKPaint redCFillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			StrokeWidth = 0.5f,
			Color = SKColors.Red
		};

		private SKPaint purpleCFillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			StrokeWidth = 0.5f,
			Color = SKColors.Purple
		};

		private SKPaint cyanCFillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			StrokeWidth = 0.5f,
			Color = SKColors.Cyan
		};

		private SKPaint whiteStrokePaint = new SKPaint
		{
			Style = SKPaintStyle.Stroke,
			Color = SKColors.White,
			StrokeWidth = 2f,
			StrokeCap = SKStrokeCap.Round,
			IsAntialias = true
		};

		private SKPaint whiteTextPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.White,
			StrokeWidth = 1f,
			TextSize = 16f,
			StrokeCap = SKStrokeCap.Round,
			IsAntialias = true
		};

		private SKPaint yellowTextPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Gold,
			StrokeWidth = 1f,
			TextSize = 20f,
			StrokeCap = SKStrokeCap.Round,
			IsAntialias = true
		};

		private SKPaint backgroundFillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill
		};

		private SKPaint redTextPaint2 = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Red,
			StrokeWidth = 0.5f,
			TextSize = 8f
		};

		private SKPaint blackTextPaint2 = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.DarkSalmon,
			StrokeWidth = 0.5f,
			TextSize = 8f
		};

		private SKPaint cyanTextPaint2 = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Cyan,
			StrokeWidth = 0.5f,
			TextSize = 8f
		};

		private SKPaint purpleTextPaint2 = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Purple,
			StrokeWidth = 0.5f,
			TextSize = 8f
		};

		private SKPaint blueTextPaint2 = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.DeepSkyBlue,
			StrokeWidth = 0.5f,
			TextSize = 8f
		};

		private SKPaint greenTextPaint2 = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Green,
			StrokeWidth = 0.5f,
			TextSize = 8f
		};

		private SKPaint yellowTextPaint2 = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Gold,
			StrokeWidth = 0.5f,
			TextSize = 8f
		};

		private int[] FlashReadAddr = new int[55]
		{
			226, 232, 238, 0, 6, 12, 18, 226, 232, 238,
			24, 30, 36, 42, 226, 232, 238, 48, 93, 99,
			105, 226, 232, 238, 124, 130, 136, 142, 226, 232,
			238, 148, 154, 160, 166, 226, 232, 238, 172, 178,
			184, 190, 226, 232, 238, 196, 202, 208, 226, 232,
			238, 214, 220, 244, 250
		};

		private int display;

		private byte[] crctablelo = new byte[256]
		{
			0, 192, 193, 1, 195, 3, 2, 194, 198, 6,
			7, 199, 5, 197, 196, 4, 204, 12, 13, 205,
			15, 207, 206, 14, 10, 202, 203, 11, 201, 9,
			8, 200, 216, 24, 25, 217, 27, 219, 218, 26,
			30, 222, 223, 31, 221, 29, 28, 220, 20, 212,
			213, 21, 215, 23, 22, 214, 210, 18, 19, 211,
			17, 209, 208, 16, 240, 48, 49, 241, 51, 243,
			242, 50, 54, 246, 247, 55, 245, 53, 52, 244,
			60, 252, 253, 61, 255, 63, 62, 254, 250, 58,
			59, 251, 57, 249, 248, 56, 40, 232, 233, 41,
			235, 43, 42, 234, 238, 46, 47, 239, 45, 237,
			236, 44, 228, 36, 37, 229, 39, 231, 230, 38,
			34, 226, 227, 35, 225, 33, 32, 224, 160, 96,
			97, 161, 99, 163, 162, 98, 102, 166, 167, 103,
			165, 101, 100, 164, 108, 172, 173, 109, 175, 111,
			110, 174, 170, 106, 107, 171, 105, 169, 168, 104,
			120, 184, 185, 121, 187, 123, 122, 186, 190, 126,
			127, 191, 125, 189, 188, 124, 180, 116, 117, 181,
			119, 183, 182, 118, 114, 178, 179, 115, 177, 113,
			112, 176, 80, 144, 145, 81, 147, 83, 82, 146,
			150, 86, 87, 151, 85, 149, 148, 84, 156, 92,
			93, 157, 95, 159, 158, 94, 90, 154, 155, 91,
			153, 89, 88, 152, 136, 72, 73, 137, 75, 139,
			138, 74, 78, 142, 143, 79, 141, 77, 76, 140,
			68, 132, 133, 69, 135, 71, 70, 134, 130, 66,
			67, 131, 65, 129, 128, 64
		};

		private byte[] crctablehi = new byte[256]
		{
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 0, 193, 129, 64, 1, 192,
			128, 65, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 0, 193,
			129, 64, 1, 192, 128, 65, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 0, 193,
			129, 64, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 1, 192, 128, 65, 0, 193,
			129, 64, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 0, 193, 129, 64, 1, 192,
			128, 65, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 0, 193, 129, 64, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			1, 192, 128, 65, 0, 193, 129, 64, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 1, 192, 128, 65, 0, 193,
			129, 64, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64
		};

		private int function_state;

		private int motor_running_state;

		private int motor_stop_state;

		private int Global_state1;

		private int Global_state2;

		private int Global_state3;

		private int Global_state4;

		private float voltage;

		private float linecurr;

		private int[] paracnt;

		private int ianum;

		private int xoffset;

		private double timeprd;

		private int rcv_CurveTime;

		private uint RcvDiscover20;

		private uint RcvDiscover19;

		private uint RcvDiscover18;

		private string[] cnountstring = new string[18]
		{
			"MOE", "LINE", "OVER", "SUDDEN", "ANGLE", "AB15", "ABZ", "ABP", "VOL", "AZB",
			"PAB", "PZ", "TST0", "TST1", "TST2", "TST3", "TST4", "TST5"
		};

		private string[] cnountstring2 = new string[18]
		{
			"ProdMaxVol", "ISMax", "ProdMaxLine", "LINECURR", "ProdMaxPhase", "ISG", "ModifyYear", "ModifyMonth", "ModifyDay", "P_Position",
			"B_Position", "", "Line Zero", "PhaseA Zero", "PhaseC Zero", " ", "EXESingle", "EXETotal"
		};

		private int[] iabuf;

		private int[] ibbuf;

		private int[] icbuf;

		private int[] idbuf;

		private int[] iebuf;

		private int[] ifbuf;

		private float xdiv;

		private int[] errcnt;

		private int m2;

		private int m3;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView curveView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RotationSpeed;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModulationRatio;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Voltage;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LineCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PhaseACurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PhaseCCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FrameCount;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid CurveSlider;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdCount;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdStat;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdDynamic;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdCurve;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdGather;

		public CurvePage()
		{
			InitializeComponent();
			display = 2;
			xdiv = 500f;
			xoffset = 0;
			function_state = 65535;
			motor_running_state = 65535;
			motor_stop_state = 65535;
			Global_state1 = 65535;
			Global_state2 = 65535;
			Global_state3 = 65535;
			Global_state4 = 65535;
			ianum = 512;
			iabuf = new int[2561];
			ibbuf = new int[2561];
			icbuf = new int[2561];
			idbuf = new int[2561];
			iebuf = new int[2561];
			ifbuf = new int[2561];
			for (int i = 0; i < 2561; i++)
			{
				iabuf[i] = 0;
				ibbuf[i] = 0;
				icbuf[i] = 0;
				idbuf[i] = i >> 3;
				iebuf[i] = i >> 2;
				ifbuf[i] = 0;
			}
			timeprd = 1.0;
			Device.StartTimer(TimeSpan.FromMilliseconds(400.0), delegate
			{
				try
				{
					if (App.CN)
					{
						FrameCount.Text = "Ω” ’÷°∫≈£∫" + App.rcvFrames;
					}
					else
					{
						FrameCount.Text = "Received Frames:" + App.rcvFrames;
					}
					curveView.InvalidateSurface();
					if (App.RcvRemoteCount > 0)
					{
						CmdCount.BackgroundColor = Color.Orange;
						CmdStat.BackgroundColor = Color.Orange;
						CmdDynamic.BackgroundColor = Color.Orange;
						CmdCurve.BackgroundColor = Color.Orange;
					}
					else if (App.CAT1_Loggined)
					{
						if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
						{
							CmdCount.BackgroundColor = Color.LightBlue;
							CmdStat.BackgroundColor = Color.LightBlue;
							CmdDynamic.BackgroundColor = Color.LightBlue;
							CmdCurve.BackgroundColor = Color.LightBlue;
						}
						else if (App.isConnected)
						{
							CmdCount.BackgroundColor = Color.LightCyan;
							CmdStat.BackgroundColor = Color.LightCyan;
							CmdDynamic.BackgroundColor = Color.LightCyan;
							CmdCurve.BackgroundColor = Color.LightCyan;
						}
						else
						{
							CmdCount.BackgroundColor = Color.LightGreen;
							CmdStat.BackgroundColor = Color.LightGreen;
							CmdDynamic.BackgroundColor = Color.LightGreen;
							CmdCurve.BackgroundColor = Color.LightGreen;
						}
					}
					else
					{
						CmdCount.BackgroundColor = Color.LightGray;
						CmdStat.BackgroundColor = Color.LightGray;
						CmdDynamic.BackgroundColor = Color.LightGray;
						CmdCurve.BackgroundColor = Color.LightGray;
					}
					if (App.CN)
					{
						base.Title = "«˙œﬂ";
					}
					else
					{
						base.Title = "Curve";
					}
					if (App.CN)
					{
						CmdCount.Text = "Õ≥º∆Õº";
						CmdStat.Text = "◊¥Ã¨Õº";
						CmdDynamic.Text = "∂ØÃ¨Õº";
						CmdCurve.Text = "«˙œﬂÕº";
						CmdGather.Text = "≤…ºØ";
					}
					else
					{
						CmdCount.Text = "Count";
						CmdStat.Text = "Status";
						CmdDynamic.Text = "Dynamic";
						CmdCurve.Text = "Curve";
						CmdGather.Text = "Gather";
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Alert("Curve " + ex.ToString());
				}
				return true;
			});
			errcnt = new int[18];
			paracnt = new int[18];
			int RatedVol = 720;
			int Voltage2Coeff = 256;
			MessagingCenter.Subscribe(this, "ReadParaMeter", delegate(ConnectPage sender, byte[] arg)
			{
				try
				{
					if (arg[0] == 170)
					{
						if ((arg[1] & 0xC0) == 128)
						{
							int num = arg[1] & 0x7F;
							if (num < 55)
							{
								switch (FlashReadAddr[num])
								{
								case 226:
									if (App.CN)
									{
										RotationSpeed.Text = $"µ±«∞◊™ÀŸ£∫{arg[9] * 256 + arg[8]}RPM";
										ModulationRatio.Text = ((float)(int)arg[6] / 128f).ToString("µ˜÷∆±»£∫0.00");
									}
									else
									{
										RotationSpeed.Text = $"CurrentSpeed:{arg[9] * 256 + arg[8]}RPM";
										ModulationRatio.Text = ((float)(int)arg[6] / 128f).ToString("Modulate Ratio:0.00");
									}
									break;
								case 232:
									voltage = (float)(arg[3] * 256 + arg[2]) / 10f;
									linecurr = (short)(arg[7] * 256 + arg[6]);
									linecurr /= 4f;
									_ = (float)(arg[4] * 256 + arg[5]) * 3.3f * 1.5f / 4096f;
									if (App.CN)
									{
										Voltage.Text = voltage.ToString("ƒ∏œﬂµÁ—π£∫0.0V");
										LineCurr.Text = linecurr.ToString("ƒ∏œﬂµÁ¡˜£∫0.0A");
									}
									else
									{
										Voltage.Text = voltage.ToString("Batt Voltage:0.0V");
										LineCurr.Text = linecurr.ToString("Batt Current:0.0A");
									}
									break;
								case 238:
								{
									int num2 = arg[6] * 65536 + arg[7] * 256 + arg[8];
									double num3 = 1.953125 * Math.Sqrt(num2);
									num2 = arg[9] * 65536 + arg[10] * 256 + arg[11];
									double num4 = 1.953125 * Math.Sqrt(num2);
									if (App.CN)
									{
										PhaseACurr.Text = num3.ToString("Aœ‡µÁ¡˜£∫0.0A");
										PhaseCCurr.Text = num4.ToString("Cœ‡µÁ¡˜£∫0.0A");
									}
									else
									{
										PhaseACurr.Text = num3.ToString("Phase A Current:0.0A");
										PhaseCCurr.Text = num4.ToString("Phase C Current:0.0A");
									}
									break;
								}
								case 220:
								{
									for (int k = 0; k < 6; k++)
									{
										errcnt[k + 12] = arg[2 * k + 3] * 256 + arg[2 * k + 2];
									}
									App.channel = 1 + ((arg[12] & 0x80) >> 7);
									break;
								}
								case 93:
								{
									for (int j = 0; j < 12; j++)
									{
										errcnt[j] = arg[2 + j];
									}
									break;
								}
								case 99:
									paracnt[0] = (arg[11] * 256 + arg[10]) / 10;
									paracnt[1] = arg[13] * 256 + arg[12];
									paracnt[2] = (arg[3] * 256 + arg[2]) / 4;
									paracnt[4] = (arg[5] * 256 + arg[4]) / 4;
									paracnt[5] = arg[7];
									break;
								case 184:
									paracnt[3] = arg[13] & 0xF;
									break;
								case 244:
									paracnt[6] = arg[7] + 2000;
									paracnt[7] = arg[8];
									paracnt[8] = arg[9];
									paracnt[17] = arg[11] * 256 + arg[10];
									paracnt[16] = arg[13] * 256 + arg[12];
									break;
								case 0:
									Voltage2Coeff = (short)(256 * arg[5] + arg[4]);
									break;
								case 6:
									rcv_CurveTime = arg[11] * 256 + arg[10];
									break;
								case 18:
									RatedVol = (short)(256 * arg[13] + arg[12]);
									break;
								}
							}
							else if (num == 55)
							{
								short num5 = (short)(256 * arg[3] + arg[2]);
								iabuf[ianum] = num5;
								num5 = (short)(256 * arg[5] + arg[4]);
								ibbuf[ianum] = num5;
								num5 = (short)(256 * arg[7] + arg[6]);
								icbuf[ianum] = num5;
								num5 = (short)(256 * arg[9] + arg[8]);
								idbuf[ianum] = num5;
								num5 = (short)(256 * arg[11] + arg[10]);
								iebuf[ianum] = num5;
								ifbuf[ianum] = 256 * arg[13] + arg[12];
								if (ianum < 2560)
								{
									ianum++;
								}
							}
						}
						else
						{
							switch (arg[1])
							{
							case 0:
								if (App.CN)
								{
									RotationSpeed.Text = $"µ±«∞◊™ÀŸ£∫{arg[6] * 256 + arg[7]}RPM";
								}
								else
								{
									RotationSpeed.Text = $"CurrentSpeed:{arg[6] * 256 + arg[7]}RPM";
								}
								break;
							case 1:
								voltage = (float)(arg[2] * 256 + arg[3]) / 10f;
								linecurr = (short)(arg[4] * 256 + arg[5]);
								linecurr /= 4f;
								if (App.CN)
								{
									ModulationRatio.Text = ((float)(int)arg[6] / 128f).ToString("µ˜÷∆±»£∫0.00");
									Voltage.Text = voltage.ToString("ƒ∏œﬂµÁ—π£∫0.0V");
									LineCurr.Text = linecurr.ToString("ƒ∏œﬂµÁ¡˜£∫0.0A");
								}
								else
								{
									ModulationRatio.Text = ((float)(int)arg[6] / 128f).ToString("Modulate Ratio:0.00");
									Voltage.Text = voltage.ToString("Batt Voltage:0.0V");
									LineCurr.Text = linecurr.ToString("Batt Current:0.0A");
								}
								break;
							case 2:
							{
								int num7 = arg[2] * 65536 + arg[3] * 256 + arg[4];
								double num8 = 1.953125 * Math.Sqrt(num7);
								num7 = arg[9] * 65536 + arg[10] * 256 + arg[11];
								double num9 = 1.953125 * Math.Sqrt(num7);
								if (App.CN)
								{
									PhaseACurr.Text = num8.ToString("Aœ‡µÁ¡˜£∫0.0A");
									PhaseCCurr.Text = num9.ToString("Cœ‡µÁ¡˜£∫0.0A");
								}
								else
								{
									PhaseACurr.Text = num8.ToString("Phase A Current:0.0A");
									PhaseCCurr.Text = num9.ToString("Phase C Current:0.0A");
								}
								break;
							}
							case 5:
							{
								short num6 = (short)(256 * arg[2] + arg[3]);
								iabuf[ianum] = num6;
								num6 = (short)(256 * arg[4] + arg[5]);
								ibbuf[ianum] = num6;
								num6 = (short)(256 * arg[6] + arg[7]);
								icbuf[ianum] = num6;
								num6 = (short)(256 * arg[8] + arg[9]);
								idbuf[ianum] = num6;
								num6 = (short)(256 * arg[10] + arg[11]);
								iebuf[ianum] = num6;
								ifbuf[ianum] = 256 * arg[12] + arg[13];
								if (ianum < 512)
								{
									ianum++;
								}
								break;
							}
							case 9:
								paracnt[16] = arg[2];
								break;
							case 12:
								paracnt[17] = arg[11] * 256 + arg[12];
								break;
							case 16:
							{
								for (int m = 0; m < 12; m++)
								{
									errcnt[m] = arg[2 + m];
								}
								break;
							}
							case 17:
							{
								for (int n = 0; n < 6; n++)
								{
									errcnt[n + 12] = arg[2 * n + 2] * 256 + arg[2 * n + 3];
								}
								RcvDiscover20 = (uint)(errcnt[12] * 65536 + errcnt[13]);
								RcvDiscover19 = (uint)(errcnt[14] * 65536 + errcnt[15]);
								RcvDiscover18 = (uint)(errcnt[16] * 65536 + errcnt[17]);
								if (App.Discover[20] == RcvDiscover20 && App.Discover[19] == RcvDiscover19 && App.Discover[18] == RcvDiscover18)
								{
									App.OldPassed = true;
								}
								break;
							}
							case 19:
								paracnt[0] = (arg[10] * 256 + arg[11]) / 10;
								paracnt[1] = arg[12] * 256 + arg[13];
								break;
							case 21:
								paracnt[2] = (arg[2] * 256 + arg[3]) / 4;
								paracnt[3] = arg[6] * 256 + arg[7];
								paracnt[4] = (arg[4] * 256 + arg[5]) / 4;
								paracnt[5] = arg[8] * 256 + arg[9];
								paracnt[6] = arg[10] * 256 + arg[11];
								paracnt[7] = arg[12];
								paracnt[8] = arg[13];
								break;
							case 23:
								rcv_CurveTime = arg[10] * 256 + arg[11];
								break;
							case 127:
								App.rs485index = arg[2] * 256 + arg[3];
								if (App.rs485index <= 7190)
								{
									for (int l = 0; l < 10; l++)
									{
										App.rs485data[App.rs485index + l] = arg[4 + l];
									}
								}
								break;
							}
						}
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Alert("CurveS " + ex.ToString());
				}
			});
		}

		private async void DisplayData()
		{
			string text = "";
			for (int i = App.rs485start; i < App.rs485start + 800; i++)
			{
				text += $"{App.rs485data[i]:X2} ";
			}
			await DisplayPromptAsync("Ω” ’:" + App.rs485index, "∂Œ:" + App.rs485start, "OK", "Cancel", null, -1, null, text);
			App.rs485start += 800;
			if (App.rs485start > 6400)
			{
				App.rs485start = 0;
			}
		}

		private void OnButtonCountClicked(object sender, EventArgs e)
		{
			display = 0;
			curveView.IsVisible = true;
			CurveSlider.IsVisible = false;
			if (App.GetDataCmd)
			{
				DisplayData();
			}
		}

		private void OnButtonCurveClicked(object sender, EventArgs e)
		{
			display = 2;
			curveView.IsVisible = true;
			CurveSlider.IsVisible = true;
		}

		private void OnButtonDynamicClicked(object sender, EventArgs e)
		{
			display = 2;
			curveView.IsVisible = true;
			CurveSlider.IsVisible = true;
		}

		private async void OnButtonProductClicked(object sender, EventArgs e)
		{
			await base.Navigation.PushModalAsync(new StatPage());
		}

		private async void BindA()
		{
			if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Controller is not bound or login, Please bind or login the controller.", null, "Bind", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("øÿ÷∆∆˜Œ¥∞Û∂®µ«¬º£¨«Îœ»∞Û∂®µ«¬ºøÿ÷∆∆˜°£", null, "∞Û∂®", "»°œ˚")))
			{
				App.NotBindStat = 99;
			}
		}

		private bool NotBindingStat()
		{
			if (App.RcvRemoteCount > 0 && !App.isConnected)
			{
				return false;
			}
			if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
			{
				BindA();
				return true;
			}
			return false;
		}

		private void OnButtonGatherClicked(object sender, EventArgs e)
		{
			if (!NotBindingStat())
			{
				ianum = 0;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8] { 0, 0, 0, 0, 136, 6, 0, 0 }, 160, 2);
				}
				else
				{
					SendRs232Data(7, 0, 0, 1);
				}
				display = 2;
				CurveSlider.IsVisible = true;
				curveView.IsVisible = true;
			}
		}

		private void WriteAddr(byte[] data, byte addr, byte len)
		{
			data[0] = 170;
			len += 4;
			data[1] = (byte)(192 + len);
			data[2] = addr;
			data[3] = addr;
			byte b = 60;
			byte b2 = 127;
			byte b3;
			for (b3 = 0; b3 < len; b3++)
			{
				int num = b ^ data[b3];
				b = (byte)(b2 ^ crctablehi[num]);
				b2 = crctablelo[num];
			}
			data[b3] = b;
			data[b3 + 1] = b2;
			MessagingCenter.Send(this, "WriteParaMeter", data);
		}

		private void SendRs232Data(byte mcmd, byte scmd, byte va1, byte va2)
		{
			byte[] array = new byte[8];
			array[0] = 170;
			array[1] = mcmd;
			array[2] = (byte)(~array[1]);
			array[3] = scmd;
			array[4] = va1;
			array[5] = va2;
			array[6] = (byte)(array[0] + array[1] + array[2] + array[3] + array[4] + array[5]);
			array[7] = (byte)(~array[6]);
			MessagingCenter.Send(this, "WriteParaMeter", array);
		}

		private void OnSlider2ValueChanged(object sender, ValueChangedEventArgs e)
		{
			try
			{
				if (App.NewVersion)
				{
					xoffset = (int)e.NewValue * 250;
				}
				else
				{
					xoffset = (int)e.NewValue * 50;
				}
			}
			catch (Exception)
			{
			}
		}

		private void OnSlider1ValueChanged(object sender, ValueChangedEventArgs e)
		{
			try
			{
				if (App.NewVersion)
				{
					xdiv = (float)e.NewValue * 250f;
				}
				else
				{
					xdiv = (float)e.NewValue * 50f;
				}
			}
			catch (Exception)
			{
			}
		}

		private void CurveView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			_ = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			SKTypeface typeface = SKTypeface.FromFamilyName("ÀŒÃÂ");
			blackTextPaint.Typeface = typeface;
			canvas.Clear();
			int width = e.Info.Width;
			int height = e.Info.Height;
			canvas.Translate(width / 2, height / 2);
			canvas.Scale((float)width / 205f);
			switch (display)
			{
			case 0:
			{
				for (int i = 0; i < 18; i++)
				{
					int num = -90 + i * 11;
					canvas.DrawLine(-95f, num + 2, 95f, num + 2, grayFillPaint);
					canvas.DrawText(cnountstring[i], -90f, num, blackTextPaint);
					if (App.GetDataCmd && i < 12)
					{
						m2 = i / 2 + 12;
						if (App.NewVersion)
						{
							if (i % 2 == 0)
							{
								m3 = errcnt[m2] & 0xFF;
							}
							else
							{
								m3 = errcnt[m2] >> 8;
							}
						}
						else if (i % 2 == 0)
						{
							m3 = errcnt[m2] >> 8;
						}
						else
						{
							m3 = errcnt[m2] & 0xFF;
						}
						canvas.DrawText($"{m3:X2}", -45f, num, blackTextPaint);
					}
					else
					{
						canvas.DrawText(errcnt[i].ToString(), -45f, num, blackTextPaint);
					}
				}
				for (int j = 0; j < 18; j++)
				{
					int num2 = -90 + j * 11;
					canvas.DrawText(cnountstring2[j], -10f, num2, blackTextPaint);
					canvas.DrawText(paracnt[j].ToString(), 60f, num2, blackTextPaint);
				}
				canvas.DrawLine(-95f, -100f, 95f, -100f, grayFillPaint);
				canvas.DrawLine(-15f, -100f, -15f, 100f, grayFillPaint);
				canvas.DrawLine(-95f, -100f, -95f, 100f, grayFillPaint);
				canvas.DrawLine(95f, -100f, 95f, 100f, grayFillPaint);
				canvas.DrawLine(-50f, -100f, -50f, 100f, grayFillPaint);
				canvas.DrawLine(55f, -100f, 55f, 100f, grayFillPaint);
				return;
			}
			case 1:
			case 3:
				return;
			}
			canvas.DrawText("Throttle/51", -100f, -101f, purpleTextPaint2);
			canvas.DrawText("Vol/5V", -50f, -101f, blackTextPaint2);
			canvas.DrawText("Mod/0.2", 0f, -101f, greenTextPaint2);
			canvas.DrawText("Weak", 50f, -101f, cyanTextPaint2);
			canvas.DrawText("Angle/5", -100f, 107f, yellowTextPaint2);
			canvas.DrawText("Curr/50A", -50f, 107f, blueTextPaint2);
			canvas.DrawText("Speed/1000", 0f, 107f, redTextPaint2);
			timeprd = (float)((rcv_CurveTime + 1) * 2) * xdiv / 10000f;
			string text = timeprd.ToString("0.0s/Div");
			canvas.DrawText(text, 50f, 107f, redTextPaint2);
			for (int k = -100; k <= 100; k += 20)
			{
				if (k == 0)
				{
					canvas.DrawLine(k, -100f, k, 100f, gray2FillPaint);
				}
				else
				{
					canvas.DrawLine(k, -100f, k, 100f, grayFillPaint);
				}
			}
			for (int l = -100; l <= 100; l += 20)
			{
				if (l == 0)
				{
					canvas.DrawLine(-100f, l, 100f, l, gray2FillPaint);
				}
				else
				{
					canvas.DrawLine(-100f, l, 100f, l, grayFillPaint);
				}
			}
			if (App.NewVersion)
			{
				float num3 = -100f;
				float num4 = num3;
				float num5 = (float)(-(iabuf[xoffset] >> 1) * 100) / 256f;
				float num6 = num5;
				for (int m = 1; m < 2560 && m + xoffset <= 2560; m++)
				{
					num3 = num4;
					num5 = num6;
					num4 = -100f + (float)(m * 200) / xdiv;
					num6 = (float)(-(iabuf[m + xoffset] >> 1) * 100) / 256f;
					canvas.DrawLine(num3, num5, num4, num6, purpleCFillPaint);
				}
				num3 = -100f;
				num4 = num3;
				num5 = 100 - ibbuf[xoffset] * 100 / 5000;
				num6 = num5;
				for (int n = 1; n < 2560 && n + xoffset <= 2560; n++)
				{
					num3 = num4;
					num5 = num6;
					num4 = -100f + (float)(n * 200) / xdiv;
					num6 = 100 - ibbuf[n + xoffset] * 100 / 5000;
					canvas.DrawLine(num3, num5, num4, num6, redCFillPaint);
				}
				num3 = -100f;
				num4 = num3;
				num5 = 100f - (float)(icbuf[xoffset] * 100) / 1000f;
				num6 = num5;
				for (int num7 = 1; num7 < 2560 && num7 + xoffset <= 2560; num7++)
				{
					num3 = num4;
					num5 = num6;
					num4 = -100f + (float)(num7 * 200) / xdiv;
					num6 = 100f - (float)(icbuf[num7 + xoffset] * 100) / 1000f;
					canvas.DrawLine(num3, num5, num4, num6, blueCFillPaint);
				}
				num3 = -100f;
				num4 = num3;
				num5 = (float)(-idbuf[xoffset] * 100) / 250f;
				num6 = num5;
				for (int num8 = 1; num8 < 2560 && num8 + xoffset <= 2560; num8++)
				{
					num3 = num4;
					num5 = num6;
					num4 = -100f + (float)(num8 * 200) / xdiv;
					num6 = (float)(-idbuf[num8 + xoffset] * 100) / 250f;
					canvas.DrawLine(num3, num5, num4, num6, blackCFillPaint);
				}
				num3 = -100f;
				num4 = num3;
				num5 = 100 - iebuf[xoffset] * 100 / 500;
				num6 = num5;
				for (int num9 = 1; num9 < 2560 && num9 + xoffset <= 2560; num9++)
				{
					num3 = num4;
					num5 = num6;
					num4 = -100f + (float)(num9 * 200) / xdiv;
					num6 = 100 - iebuf[num9 + xoffset] * 100 / 500;
					canvas.DrawLine(num3, num5, num4, num6, yellowCFillPaint);
				}
				num3 = -100f;
				num4 = num3;
				num5 = ifbuf[xoffset] & 0xFF;
				num5 = (0f - num5) * 100f / 128f;
				num6 = num5;
				for (int num10 = 1; num10 < 2560 && num10 + xoffset <= 2560; num10++)
				{
					num3 = num4;
					num5 = num6;
					num4 = -100f + (float)(num10 * 200) / xdiv;
					num6 = ifbuf[num10 + xoffset] & 0xFF;
					num6 = (0f - num6) * 100f / 128f;
					canvas.DrawLine(num3, num5, num4, num6, greenCFillPaint);
				}
				num3 = -100f;
				num4 = num3;
				num5 = ifbuf[xoffset] >> 8;
				num5 = (0f - num5) * 100f / 256f;
				num6 = num5;
				for (int num11 = 1; num11 < 2560 && num11 + xoffset <= 2560; num11++)
				{
					num3 = num4;
					num5 = num6;
					num4 = -100f + (float)(num11 * 200) / xdiv;
					num6 = ifbuf[num11 + xoffset] >> 8;
					num6 = (0f - num6) * 100f / 256f;
					canvas.DrawLine(num3, num5, num4, num6, darkblueCFillPaint);
				}
				num3 = -100f;
				num4 = num3;
				num5 = -(iabuf[xoffset] & 1) * 100 / 5;
				num6 = num5;
				for (int num12 = 1; num12 < 2560 && num12 + xoffset <= 2560; num12++)
				{
					num3 = num4;
					num5 = num6;
					num4 = -100f + (float)(num12 * 200) / xdiv;
					num6 = -(iabuf[num12 + xoffset] & 1) * 100 / 5;
					canvas.DrawLine(num3, num5, num4, num6, cyanCFillPaint);
				}
			}
			else
			{
				float num13 = -100f;
				float num14 = num13;
				float num15 = (float)(-(iabuf[xoffset] >> 1) * 100) / 256f;
				float num16 = num15;
				for (int num17 = 1; num17 < 512 && num17 + xoffset <= 511; num17++)
				{
					num13 = num14;
					num15 = num16;
					num14 = -100f + (float)(num17 * 200) / xdiv;
					num16 = (float)(-(iabuf[num17 + xoffset] >> 1) * 100) / 256f;
					canvas.DrawLine(num13, num15, num14, num16, purpleCFillPaint);
				}
				num13 = -100f;
				num14 = num13;
				num15 = 100 - ibbuf[xoffset] * 100 / 5000;
				num16 = num15;
				for (int num18 = 1; num18 < 512 && num18 + xoffset <= 511; num18++)
				{
					num13 = num14;
					num15 = num16;
					num14 = -100f + (float)(num18 * 200) / xdiv;
					num16 = 100 - ibbuf[num18 + xoffset] * 100 / 5000;
					canvas.DrawLine(num13, num15, num14, num16, redCFillPaint);
				}
				num13 = -100f;
				num14 = num13;
				num15 = 100f - (float)(icbuf[xoffset] * 100) / 1000f;
				num16 = num15;
				for (int num19 = 1; num19 < 512 && num19 + xoffset <= 511; num19++)
				{
					num13 = num14;
					num15 = num16;
					num14 = -100f + (float)(num19 * 200) / xdiv;
					num16 = 100f - (float)(icbuf[num19 + xoffset] * 100) / 1000f;
					canvas.DrawLine(num13, num15, num14, num16, blueCFillPaint);
				}
				num13 = -100f;
				num14 = num13;
				num15 = (float)(-idbuf[xoffset] * 100) / 250f;
				num16 = num15;
				for (int num20 = 1; num20 < 512 && num20 + xoffset <= 511; num20++)
				{
					num13 = num14;
					num15 = num16;
					num14 = -100f + (float)(num20 * 200) / xdiv;
					num16 = (float)(-idbuf[num20 + xoffset] * 100) / 250f;
					canvas.DrawLine(num13, num15, num14, num16, blackCFillPaint);
				}
				num13 = -100f;
				num14 = num13;
				num15 = 100 - iebuf[xoffset] * 100 / 500;
				num16 = num15;
				for (int num21 = 1; num21 < 512 && num21 + xoffset <= 511; num21++)
				{
					num13 = num14;
					num15 = num16;
					num14 = -100f + (float)(num21 * 200) / xdiv;
					num16 = 100 - iebuf[num21 + xoffset] * 100 / 500;
					canvas.DrawLine(num13, num15, num14, num16, yellowCFillPaint);
				}
				num13 = -100f;
				num14 = num13;
				num15 = ifbuf[xoffset] & 0xFF;
				num15 = (0f - num15) * 100f / 128f;
				num16 = num15;
				for (int num22 = 1; num22 < 512 && num22 + xoffset <= 511; num22++)
				{
					num13 = num14;
					num15 = num16;
					num14 = -100f + (float)(num22 * 200) / xdiv;
					num16 = ifbuf[num22 + xoffset] & 0xFF;
					num16 = (0f - num16) * 100f / 128f;
					canvas.DrawLine(num13, num15, num14, num16, greenCFillPaint);
				}
				num13 = -100f;
				num14 = num13;
				num15 = ifbuf[xoffset] >> 8;
				num15 = (0f - num15) * 100f / 256f;
				num16 = num15;
				for (int num23 = 1; num23 < 512 && num23 + xoffset <= 511; num23++)
				{
					num13 = num14;
					num15 = num16;
					num14 = -100f + (float)(num23 * 200) / xdiv;
					num16 = ifbuf[num23 + xoffset] >> 8;
					num16 = (0f - num16) * 100f / 256f;
					canvas.DrawLine(num13, num15, num14, num16, darkblueCFillPaint);
				}
				num13 = -100f;
				num14 = num13;
				num15 = -(iabuf[xoffset] & 1) * 100 / 5;
				num16 = num15;
				for (int num24 = 1; num24 < 512 && num24 + xoffset <= 511; num24++)
				{
					num13 = num14;
					num15 = num16;
					num14 = -100f + (float)(num24 * 200) / xdiv;
					num16 = -(iabuf[num24 + xoffset] & 1) * 100 / 5;
					canvas.DrawLine(num13, num15, num14, num16, cyanCFillPaint);
				}
			}
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			if (ResourceLoader.IsEnabled && ResourceLoader.CanProvideContentFor(new ResourceLoader.ResourceLoadingQuery
			{
				AssemblyName = typeof(CurvePage).GetTypeInfo().Assembly.GetName(),
				ResourcePath = "CurvePage.xaml",
				Instance = this
			}))
			{
				__InitComponentRuntime();
				return;
			}
			if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
			{
				__InitComponentRuntime();
				return;
			}
			RowDefinition rowDefinition;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition = new RowDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 10, 18);
			RowDefinition rowDefinition2;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition2 = new RowDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 11, 18);
			RowDefinition rowDefinition3;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition3 = new RowDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 12, 18);
			RowDefinition rowDefinition4;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition4 = new RowDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 13, 18);
			SKCanvasView sKCanvasView;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView = new SKCanvasView(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 16, 18);
			Grid grid;
			VisualDiagnostics.RegisterSourceInfo(grid = new Grid(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 15, 14);
			RowDefinition rowDefinition5;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition5 = new RowDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 22, 22);
			RowDefinition rowDefinition6;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition6 = new RowDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 23, 22);
			RowDefinition rowDefinition7;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition7 = new RowDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 24, 22);
			RowDefinition rowDefinition8;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition8 = new RowDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 25, 22);
			ColumnDefinition columnDefinition;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition = new ColumnDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 28, 22);
			ColumnDefinition columnDefinition2;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition2 = new ColumnDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 29, 22);
			Label label;
			VisualDiagnostics.RegisterSourceInfo(label = new Label(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 31, 18);
			Label label2;
			VisualDiagnostics.RegisterSourceInfo(label2 = new Label(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 32, 18);
			Label label3;
			VisualDiagnostics.RegisterSourceInfo(label3 = new Label(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 33, 18);
			Label label4;
			VisualDiagnostics.RegisterSourceInfo(label4 = new Label(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 34, 18);
			Label label5;
			VisualDiagnostics.RegisterSourceInfo(label5 = new Label(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 35, 18);
			Label label6;
			VisualDiagnostics.RegisterSourceInfo(label6 = new Label(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 36, 18);
			Label label7;
			VisualDiagnostics.RegisterSourceInfo(label7 = new Label(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 37, 18);
			Grid grid2;
			VisualDiagnostics.RegisterSourceInfo(grid2 = new Grid(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 20, 14);
			ColumnDefinition columnDefinition3;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition3 = new ColumnDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 41, 22);
			ColumnDefinition columnDefinition4;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition4 = new ColumnDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 42, 22);
			Xamarin.Forms.Slider slider;
			VisualDiagnostics.RegisterSourceInfo(slider = new Xamarin.Forms.Slider(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 44, 18);
			Xamarin.Forms.Slider slider2;
			VisualDiagnostics.RegisterSourceInfo(slider2 = new Xamarin.Forms.Slider(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 45, 18);
			Grid grid3;
			VisualDiagnostics.RegisterSourceInfo(grid3 = new Grid(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 39, 14);
			ColumnDefinition columnDefinition5;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition5 = new ColumnDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 49, 22);
			ColumnDefinition columnDefinition6;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition6 = new ColumnDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 50, 22);
			ColumnDefinition columnDefinition7;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition7 = new ColumnDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 51, 22);
			ColumnDefinition columnDefinition8;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition8 = new ColumnDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 52, 22);
			ColumnDefinition columnDefinition9;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition9 = new ColumnDefinition(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 53, 22);
			Xamarin.Forms.Button button;
			VisualDiagnostics.RegisterSourceInfo(button = new Xamarin.Forms.Button(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 55, 18);
			Xamarin.Forms.Button button2;
			VisualDiagnostics.RegisterSourceInfo(button2 = new Xamarin.Forms.Button(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 59, 18);
			Xamarin.Forms.Button button3;
			VisualDiagnostics.RegisterSourceInfo(button3 = new Xamarin.Forms.Button(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 63, 18);
			Xamarin.Forms.Button button4;
			VisualDiagnostics.RegisterSourceInfo(button4 = new Xamarin.Forms.Button(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 67, 18);
			Xamarin.Forms.Button button5;
			VisualDiagnostics.RegisterSourceInfo(button5 = new Xamarin.Forms.Button(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 71, 18);
			Grid grid4;
			VisualDiagnostics.RegisterSourceInfo(grid4 = new Grid(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 47, 14);
			Grid grid5;
			VisualDiagnostics.RegisterSourceInfo(grid5 = new Grid(), new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 8, 10);
			CurvePage curvePage;
			VisualDiagnostics.RegisterSourceInfo(curvePage = this, new Uri("CurvePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 2, 2);
			NameScope nameScope = (NameScope)(NameScope.GetNameScope(curvePage) ?? new NameScope());
			NameScope.SetNameScope(curvePage, nameScope);
			((INameScope)nameScope).RegisterName("curveView", (object)sKCanvasView);
			if (sKCanvasView.StyleId == null)
			{
				sKCanvasView.StyleId = "curveView";
			}
			((INameScope)nameScope).RegisterName("RotationSpeed", (object)label);
			if (label.StyleId == null)
			{
				label.StyleId = "RotationSpeed";
			}
			((INameScope)nameScope).RegisterName("ModulationRatio", (object)label2);
			if (label2.StyleId == null)
			{
				label2.StyleId = "ModulationRatio";
			}
			((INameScope)nameScope).RegisterName("Voltage", (object)label3);
			if (label3.StyleId == null)
			{
				label3.StyleId = "Voltage";
			}
			((INameScope)nameScope).RegisterName("LineCurr", (object)label4);
			if (label4.StyleId == null)
			{
				label4.StyleId = "LineCurr";
			}
			((INameScope)nameScope).RegisterName("PhaseACurr", (object)label5);
			if (label5.StyleId == null)
			{
				label5.StyleId = "PhaseACurr";
			}
			((INameScope)nameScope).RegisterName("PhaseCCurr", (object)label6);
			if (label6.StyleId == null)
			{
				label6.StyleId = "PhaseCCurr";
			}
			((INameScope)nameScope).RegisterName("FrameCount", (object)label7);
			if (label7.StyleId == null)
			{
				label7.StyleId = "FrameCount";
			}
			((INameScope)nameScope).RegisterName("CurveSlider", (object)grid3);
			if (grid3.StyleId == null)
			{
				grid3.StyleId = "CurveSlider";
			}
			((INameScope)nameScope).RegisterName("CmdCount", (object)button);
			if (button.StyleId == null)
			{
				button.StyleId = "CmdCount";
			}
			((INameScope)nameScope).RegisterName("CmdStat", (object)button2);
			if (button2.StyleId == null)
			{
				button2.StyleId = "CmdStat";
			}
			((INameScope)nameScope).RegisterName("CmdDynamic", (object)button3);
			if (button3.StyleId == null)
			{
				button3.StyleId = "CmdDynamic";
			}
			((INameScope)nameScope).RegisterName("CmdCurve", (object)button4);
			if (button4.StyleId == null)
			{
				button4.StyleId = "CmdCurve";
			}
			((INameScope)nameScope).RegisterName("CmdGather", (object)button5);
			if (button5.StyleId == null)
			{
				button5.StyleId = "CmdGather";
			}
			curveView = sKCanvasView;
			RotationSpeed = label;
			ModulationRatio = label2;
			Voltage = label3;
			LineCurr = label4;
			PhaseACurr = label5;
			PhaseCCurr = label6;
			FrameCount = label7;
			CurveSlider = grid3;
			CmdCount = button;
			CmdStat = button2;
			CmdDynamic = button3;
			CmdCurve = button4;
			CmdGather = button5;
			curvePage.SetValue(Xamarin.Forms.Page.TitleProperty, "Curve");
			rowDefinition.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("74*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition);
			rowDefinition2.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("12*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition2);
			rowDefinition3.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("8*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition3);
			rowDefinition4.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("8*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition4);
			grid.SetValue(Grid.RowProperty, 0);
			grid.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			sKCanvasView.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 120.0);
			sKCanvasView.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 100.0);
			sKCanvasView.SetValue(Grid.RowProperty, 0);
			sKCanvasView.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView.PaintSurface += curvePage.CurveView_PaintSurface;
			grid.Children.Add(sKCanvasView);
			grid5.Children.Add(grid);
			grid2.SetValue(Grid.RowProperty, 1);
			grid2.SetValue(Grid.ColumnProperty, 0);
			rowDefinition5.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid2.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition5);
			rowDefinition6.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid2.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition6);
			rowDefinition7.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid2.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition7);
			rowDefinition8.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid2.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition8);
			columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
			columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
			label.SetValue(Label.TextProperty, "12000RPM");
			label.SetValue(Grid.RowProperty, 0);
			label.SetValue(Grid.ColumnProperty, 0);
			label.SetValue(Label.TextColorProperty, Color.DeepSkyBlue);
			BindableProperty fontSizeProperty = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
			Type typeFromHandle = typeof(IProvideValueTarget);
			object[] array = new object[0 + 4];
			array[0] = label;
			array[1] = grid2;
			array[2] = grid5;
			array[3] = curvePage;
			object service;
			xamlServiceProvider.Add(typeFromHandle, service = new SimpleValueTargetProvider(array, Label.FontSizeProperty, nameScope));
			xamlServiceProvider.Add(typeof(IReferenceProvider), service);
			Type typeFromHandle2 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
			xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(CurvePage).GetTypeInfo().Assembly));
			xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(31, 116)));
			label.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("Micro", (IServiceProvider)xamlServiceProvider));
			label.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid2.Children.Add(label);
			label2.SetValue(Label.TextProperty, "0.65");
			label2.SetValue(Grid.RowProperty, 0);
			label2.SetValue(Grid.ColumnProperty, 1);
			label2.SetValue(Label.TextColorProperty, Color.DeepSkyBlue);
			BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
			Type typeFromHandle3 = typeof(IProvideValueTarget);
			object[] array2 = new object[0 + 4];
			array2[0] = label2;
			array2[1] = grid2;
			array2[2] = grid5;
			array2[3] = curvePage;
			object service2;
			xamlServiceProvider2.Add(typeFromHandle3, service2 = new SimpleValueTargetProvider(array2, Label.FontSizeProperty, nameScope));
			xamlServiceProvider2.Add(typeof(IReferenceProvider), service2);
			Type typeFromHandle4 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
			xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver2.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(CurvePage).GetTypeInfo().Assembly));
			xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(32, 114)));
			label2.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("Micro", (IServiceProvider)xamlServiceProvider2));
			label2.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid2.Children.Add(label2);
			label3.SetValue(Label.TextProperty, "108.8V");
			label3.SetValue(Grid.RowProperty, 1);
			label3.SetValue(Grid.ColumnProperty, 0);
			label3.SetValue(Label.TextColorProperty, Color.DeepSkyBlue);
			BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
			Type typeFromHandle5 = typeof(IProvideValueTarget);
			object[] array3 = new object[0 + 4];
			array3[0] = label3;
			array3[1] = grid2;
			array3[2] = grid5;
			array3[3] = curvePage;
			object service3;
			xamlServiceProvider3.Add(typeFromHandle5, service3 = new SimpleValueTargetProvider(array3, Label.FontSizeProperty, nameScope));
			xamlServiceProvider3.Add(typeof(IReferenceProvider), service3);
			Type typeFromHandle6 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
			xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver3.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(CurvePage).GetTypeInfo().Assembly));
			xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(33, 108)));
			label3.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("Micro", (IServiceProvider)xamlServiceProvider3));
			label3.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid2.Children.Add(label3);
			label4.SetValue(Label.TextProperty, "384.4A");
			label4.SetValue(Grid.RowProperty, 1);
			label4.SetValue(Grid.ColumnProperty, 1);
			label4.SetValue(Label.TextColorProperty, Color.DeepSkyBlue);
			BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
			Type typeFromHandle7 = typeof(IProvideValueTarget);
			object[] array4 = new object[0 + 4];
			array4[0] = label4;
			array4[1] = grid2;
			array4[2] = grid5;
			array4[3] = curvePage;
			object service4;
			xamlServiceProvider4.Add(typeFromHandle7, service4 = new SimpleValueTargetProvider(array4, Label.FontSizeProperty, nameScope));
			xamlServiceProvider4.Add(typeof(IReferenceProvider), service4);
			Type typeFromHandle8 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
			xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver4.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(CurvePage).GetTypeInfo().Assembly));
			xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(34, 109)));
			label4.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("Micro", (IServiceProvider)xamlServiceProvider4));
			label4.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid2.Children.Add(label4);
			label5.SetValue(Label.TextProperty, "1345.5A");
			label5.SetValue(Grid.RowProperty, 2);
			label5.SetValue(Grid.ColumnProperty, 0);
			label5.SetValue(Label.TextColorProperty, Color.DeepSkyBlue);
			BindableProperty fontSizeProperty5 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
			Type typeFromHandle9 = typeof(IProvideValueTarget);
			object[] array5 = new object[0 + 4];
			array5[0] = label5;
			array5[1] = grid2;
			array5[2] = grid5;
			array5[3] = curvePage;
			object service5;
			xamlServiceProvider5.Add(typeFromHandle9, service5 = new SimpleValueTargetProvider(array5, Label.FontSizeProperty, nameScope));
			xamlServiceProvider5.Add(typeof(IReferenceProvider), service5);
			Type typeFromHandle10 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
			xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver5.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(CurvePage).GetTypeInfo().Assembly));
			xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(35, 112)));
			label5.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("Micro", (IServiceProvider)xamlServiceProvider5));
			label5.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid2.Children.Add(label5);
			label6.SetValue(Label.TextProperty, "1453.3A");
			label6.SetValue(Grid.RowProperty, 2);
			label6.SetValue(Grid.ColumnProperty, 1);
			label6.SetValue(Label.TextColorProperty, Color.DeepSkyBlue);
			BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
			Type typeFromHandle11 = typeof(IProvideValueTarget);
			object[] array6 = new object[0 + 4];
			array6[0] = label6;
			array6[1] = grid2;
			array6[2] = grid5;
			array6[3] = curvePage;
			object service6;
			xamlServiceProvider6.Add(typeFromHandle11, service6 = new SimpleValueTargetProvider(array6, Label.FontSizeProperty, nameScope));
			xamlServiceProvider6.Add(typeof(IReferenceProvider), service6);
			Type typeFromHandle12 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
			xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver6.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(CurvePage).GetTypeInfo().Assembly));
			xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(36, 112)));
			label6.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("Micro", (IServiceProvider)xamlServiceProvider6));
			label6.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label6.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid2.Children.Add(label6);
			label7.SetValue(Grid.RowProperty, 3);
			label7.SetValue(Grid.ColumnProperty, 0);
			BindableProperty fontSizeProperty7 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
			Type typeFromHandle13 = typeof(IProvideValueTarget);
			object[] array7 = new object[0 + 4];
			array7[0] = label7;
			array7[1] = grid2;
			array7[2] = grid5;
			array7[3] = curvePage;
			object service7;
			xamlServiceProvider7.Add(typeFromHandle13, service7 = new SimpleValueTargetProvider(array7, Label.FontSizeProperty, nameScope));
			xamlServiceProvider7.Add(typeof(IReferenceProvider), service7);
			Type typeFromHandle14 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
			xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver7.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(CurvePage).GetTypeInfo().Assembly));
			xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(37, 74)));
			label7.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider7));
			label7.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label7.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid2.Children.Add(label7);
			grid5.Children.Add(grid2);
			grid3.SetValue(Grid.RowProperty, 2);
			grid3.SetValue(Grid.ColumnProperty, 0);
			grid3.SetValue(Grid.ColumnSpacingProperty, 2.0);
			grid3.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition3.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition3);
			columnDefinition4.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition4);
			slider.SetValue(Xamarin.Forms.Slider.MinimumTrackColorProperty, Color.DeepSkyBlue);
			slider.SetValue(Xamarin.Forms.Slider.MaximumTrackColorProperty, Color.Red);
			slider.SetValue(Xamarin.Forms.Slider.ThumbColorProperty, Color.Green);
			slider.SetValue(Xamarin.Forms.Slider.ValueProperty, 5.0);
			slider.SetValue(Xamarin.Forms.Slider.MaximumProperty, 10.0);
			slider.SetValue(Xamarin.Forms.Slider.MinimumProperty, 1.0);
			slider.SetValue(Grid.RowProperty, 0);
			slider.SetValue(Grid.ColumnProperty, 0);
			slider.ValueChanged += curvePage.OnSlider1ValueChanged;
			grid3.Children.Add(slider);
			slider2.SetValue(Xamarin.Forms.Slider.MinimumTrackColorProperty, Color.DeepSkyBlue);
			slider2.SetValue(Xamarin.Forms.Slider.MaximumTrackColorProperty, Color.Red);
			slider2.SetValue(Xamarin.Forms.Slider.ThumbColorProperty, Color.DarkOrange);
			slider2.SetValue(Xamarin.Forms.Slider.ValueProperty, 0.0);
			slider2.SetValue(Xamarin.Forms.Slider.MaximumProperty, 9.0);
			slider2.SetValue(Xamarin.Forms.Slider.MinimumProperty, 0.0);
			slider2.SetValue(Grid.RowProperty, 0);
			slider2.SetValue(Grid.ColumnProperty, 1);
			slider2.ValueChanged += curvePage.OnSlider2ValueChanged;
			grid3.Children.Add(slider2);
			grid5.Children.Add(grid3);
			grid4.SetValue(Grid.RowProperty, 3);
			grid4.SetValue(Grid.ColumnProperty, 0);
			grid4.SetValue(Grid.ColumnSpacingProperty, 2.0);
			grid4.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition5.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("24*"));
			((DefinitionCollection<ColumnDefinition>)grid4.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition5);
			columnDefinition6.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("24*"));
			((DefinitionCollection<ColumnDefinition>)grid4.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition6);
			columnDefinition7.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("28*"));
			((DefinitionCollection<ColumnDefinition>)grid4.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition7);
			columnDefinition8.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("24*"));
			((DefinitionCollection<ColumnDefinition>)grid4.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition8);
			columnDefinition9.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25*"));
			((DefinitionCollection<ColumnDefinition>)grid4.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition9);
			button.SetValue(Xamarin.Forms.Button.TextProperty, "Õ≥º∆Õº");
			button.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty8 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
			Type typeFromHandle15 = typeof(IProvideValueTarget);
			object[] array8 = new object[0 + 4];
			array8[0] = button;
			array8[1] = grid4;
			array8[2] = grid5;
			array8[3] = curvePage;
			object service8;
			xamlServiceProvider8.Add(typeFromHandle15, service8 = new SimpleValueTargetProvider(array8, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider8.Add(typeof(IReferenceProvider), service8);
			Type typeFromHandle16 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
			xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver8.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(CurvePage).GetTypeInfo().Assembly));
			xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(56, 33)));
			button.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider8));
			button.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button.SetValue(Grid.RowProperty, 0);
			button.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button.SetValue(Grid.ColumnProperty, 0);
			button.Clicked += curvePage.OnButtonCountClicked;
			grid4.Children.Add(button);
			button2.SetValue(Xamarin.Forms.Button.TextProperty, "◊¥Ã¨Õº");
			button2.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty9 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter9 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
			Type typeFromHandle17 = typeof(IProvideValueTarget);
			object[] array9 = new object[0 + 4];
			array9[0] = button2;
			array9[1] = grid4;
			array9[2] = grid5;
			array9[3] = curvePage;
			object service9;
			xamlServiceProvider9.Add(typeFromHandle17, service9 = new SimpleValueTargetProvider(array9, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider9.Add(typeof(IReferenceProvider), service9);
			Type typeFromHandle18 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
			xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver9.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(CurvePage).GetTypeInfo().Assembly));
			xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(60, 33)));
			button2.SetValue(fontSizeProperty9, ((IExtendedTypeConverter)fontSizeConverter9).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider9));
			button2.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button2.SetValue(Grid.RowProperty, 0);
			button2.SetValue(Grid.ColumnProperty, 1);
			button2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button2.Clicked += curvePage.OnButtonProductClicked;
			grid4.Children.Add(button2);
			button3.SetValue(Xamarin.Forms.Button.TextProperty, "∂ØÃ¨Õº");
			button3.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty10 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter10 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
			Type typeFromHandle19 = typeof(IProvideValueTarget);
			object[] array10 = new object[0 + 4];
			array10[0] = button3;
			array10[1] = grid4;
			array10[2] = grid5;
			array10[3] = curvePage;
			object service10;
			xamlServiceProvider10.Add(typeFromHandle19, service10 = new SimpleValueTargetProvider(array10, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider10.Add(typeof(IReferenceProvider), service10);
			Type typeFromHandle20 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
			xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver10.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(CurvePage).GetTypeInfo().Assembly));
			xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(64, 33)));
			button3.SetValue(fontSizeProperty10, ((IExtendedTypeConverter)fontSizeConverter10).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider10));
			button3.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button3.SetValue(Grid.RowProperty, 0);
			button3.SetValue(Grid.ColumnProperty, 2);
			button3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button3.Clicked += curvePage.OnButtonDynamicClicked;
			grid4.Children.Add(button3);
			button4.SetValue(Xamarin.Forms.Button.TextProperty, "«˙œﬂÕº");
			button4.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty11 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter11 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
			Type typeFromHandle21 = typeof(IProvideValueTarget);
			object[] array11 = new object[0 + 4];
			array11[0] = button4;
			array11[1] = grid4;
			array11[2] = grid5;
			array11[3] = curvePage;
			object service11;
			xamlServiceProvider11.Add(typeFromHandle21, service11 = new SimpleValueTargetProvider(array11, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider11.Add(typeof(IReferenceProvider), service11);
			Type typeFromHandle22 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
			xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver11.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(CurvePage).GetTypeInfo().Assembly));
			xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(68, 34)));
			button4.SetValue(fontSizeProperty11, ((IExtendedTypeConverter)fontSizeConverter11).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider11));
			button4.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button4.SetValue(Grid.RowProperty, 0);
			button4.SetValue(Grid.ColumnProperty, 3);
			button4.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button4.Clicked += curvePage.OnButtonCurveClicked;
			grid4.Children.Add(button4);
			button5.SetValue(Xamarin.Forms.Button.TextProperty, "≤…ºØ");
			button5.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty12 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter12 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
			Type typeFromHandle23 = typeof(IProvideValueTarget);
			object[] array12 = new object[0 + 4];
			array12[0] = button5;
			array12[1] = grid4;
			array12[2] = grid5;
			array12[3] = curvePage;
			object service12;
			xamlServiceProvider12.Add(typeFromHandle23, service12 = new SimpleValueTargetProvider(array12, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider12.Add(typeof(IReferenceProvider), service12);
			Type typeFromHandle24 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
			xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver12.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(CurvePage).GetTypeInfo().Assembly));
			xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(72, 34)));
			button5.SetValue(fontSizeProperty12, ((IExtendedTypeConverter)fontSizeConverter12).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider12));
			button5.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button5.SetValue(Grid.RowProperty, 0);
			button5.SetValue(Grid.ColumnProperty, 4);
			button5.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightSkyBlue);
			button5.Clicked += curvePage.OnButtonGatherClicked;
			grid4.Children.Add(button5);
			grid5.Children.Add(grid4);
			curvePage.SetValue(ContentPage.ContentProperty, grid5);
		}

		private void __InitComponentRuntime()
		{
			this.LoadFromXaml(typeof(CurvePage));
			curveView = this.FindByName<SKCanvasView>("curveView");
			RotationSpeed = this.FindByName<Label>("RotationSpeed");
			ModulationRatio = this.FindByName<Label>("ModulationRatio");
			Voltage = this.FindByName<Label>("Voltage");
			LineCurr = this.FindByName<Label>("LineCurr");
			PhaseACurr = this.FindByName<Label>("PhaseACurr");
			PhaseCCurr = this.FindByName<Label>("PhaseCCurr");
			FrameCount = this.FindByName<Label>("FrameCount");
			CurveSlider = this.FindByName<Grid>("CurveSlider");
			CmdCount = this.FindByName<Xamarin.Forms.Button>("CmdCount");
			CmdStat = this.FindByName<Xamarin.Forms.Button>("CmdStat");
			CmdDynamic = this.FindByName<Xamarin.Forms.Button>("CmdDynamic");
			CmdCurve = this.FindByName<Xamarin.Forms.Button>("CmdCurve");
			CmdGather = this.FindByName<Xamarin.Forms.Button>("CmdGather");
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	[XamlFilePath("FilePage.xaml")]
	public class FilePage : ContentPage
	{
		public class DownloadFile
		{
			public string SingleName { get; set; }

			public string FullName { get; set; }
		}

		[CompilerGenerated]
		private sealed class <InitializeComponent>_anonXamlCDataTemplate_0
		{
			internal object[] parentValues;

			internal FilePage root;

			internal object LoadDataTemplate()
			{
				BindingExtension bindingExtension;
				VisualDiagnostics.RegisterSourceInfo(bindingExtension = new BindingExtension(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 22, 32);
				Label label;
				VisualDiagnostics.RegisterSourceInfo(label = new Label(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 22, 26);
				Xamarin.Forms.ViewCell viewCell;
				VisualDiagnostics.RegisterSourceInfo(viewCell = new Xamarin.Forms.ViewCell(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 21, 22);
				NameScope nameScope = new NameScope();
				NameScope.SetNameScope(viewCell, nameScope);
				bindingExtension.Path = "SingleName";
				BindingBase binding = ((IMarkupExtension<BindingBase>)bindingExtension).ProvideValue((IServiceProvider)null);
				label.SetBinding(Label.TextProperty, binding);
				BindableProperty fontSizeProperty = Label.FontSizeProperty;
				FontSizeConverter fontSizeConverter = new FontSizeConverter();
				XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
				Type typeFromHandle = typeof(IProvideValueTarget);
				int length;
				object[] array = new object[(length = parentValues.Length) + 2];
				Array.Copy(parentValues, 0, array, 2, length);
				array[0] = label;
				array[1] = viewCell;
				object service;
				xamlServiceProvider.Add(typeFromHandle, service = new SimpleValueTargetProvider(array, Label.FontSizeProperty, nameScope));
				xamlServiceProvider.Add(typeof(IReferenceProvider), service);
				Type typeFromHandle2 = typeof(IXamlTypeResolver);
				XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
				xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
				xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
				xmlNamespaceResolver.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
				xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(<InitializeComponent>_anonXamlCDataTemplate_0).GetTypeInfo().Assembly));
				xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(22, 60)));
				label.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider));
				label.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
				viewCell.View = label;
				return viewCell;
			}
		}

		private bool RemoteFile;

		private DownloadFile selectedFile;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.ListView FileListView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdList;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdFlush;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdRemove;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdDelete;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdAutoSave;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdShare;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdReturn;

		public ObservableCollection<DownloadFile> Files { get; set; }

		public void ReadFtpFileName()
		{
			try
			{
				Files.Clear();
				string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
				foreach (string remoteFileName in App.RemoteFileNames)
				{
					string fullName = $"{folderPath}/{remoteFileName}";
					DownloadFile downloadFile = new DownloadFile();
					downloadFile.FullName = fullName;
					downloadFile.SingleName = remoteFileName;
					Files.Add(downloadFile);
				}
			}
			catch (Exception)
			{
			}
		}

		public void ReadLocalFileName()
		{
			try
			{
				string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
				Files.Clear();
				string[] files = Directory.GetFiles(folderPath, "*.*");
				foreach (string text in files)
				{
					DownloadFile downloadFile = new DownloadFile();
					downloadFile.FullName = text;
					string text2 = text;
					int num = 0;
					num = text2.LastIndexOf('/');
					if (num >= 0)
					{
						text2 = text2.Substring(num + 1);
					}
					downloadFile.SingleName = text2;
					Files.Add(downloadFile);
				}
			}
			catch (Exception)
			{
			}
		}

		public FilePage()
		{
			selectedFile = null;
			InitializeComponent();
			Files = new ObservableCollection<DownloadFile>();
			FileListView.ItemsSource = Files;
			ReadLocalFileName();
			if (App.CN)
			{
				CmdRemove.Text = "ªÒ»°‘∆Œƒº˛";
				CmdDelete.Text = "“∆≥˝Œƒº˛";
				CmdReturn.Text = "∂¡»°≤¢∑µªÿ";
				CmdShare.Text = "∑÷œÌ";
				CmdFlush.Text = "…∏—°Ω”ø⁄Œƒº˛";
				CmdList.Text = "…∏—°÷˜≥Ã–ÚŒƒº˛";
				if (App.autosave != "0")
				{
					CmdAutoSave.Text = "◊‘∂Ø±£¥Êø™";
				}
				else
				{
					CmdAutoSave.Text = "◊‘∂Ø±£¥Êπÿ";
				}
			}
			else
			{
				CmdRemove.Text = "LocalFiles";
				CmdDelete.Text = "DeleteFile";
				CmdReturn.Text = "Read & Return";
				CmdShare.Text = "Share";
				CmdFlush.Text = "Filter Interface Files";
				CmdList.Text = "Filter Main Files";
				if (App.autosave != "0")
				{
					CmdAutoSave.Text = "AutoSave On";
				}
				else
				{
					CmdAutoSave.Text = "AutoSave Off";
				}
			}
		}

		private void ListView_ItemSelected(object sender, SelectedItemChangedEventArgs e)
		{
			App.fileName = ((DownloadFile)e.SelectedItem).FullName;
			selectedFile = (DownloadFile)e.SelectedItem;
			App.loadfile = false;
		}

		private async void DelButton_Clicked(object sender, EventArgs e)
		{
			if (selectedFile != null)
			{
				if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Delect This File£ø", null, "Delete", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("»∑»œ…æ≥˝Œƒº˛£ø", null, "»∑»œ…æ≥˝", "≤ª…æ≥˝")))
				{
					Files.Remove(selectedFile);
					File.Delete(selectedFile.FullName);
					selectedFile = null;
					App.fileName = null;
				}
			}
			else if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("You didn't select any file, do you want delect all Files£ø", null, "Delete All", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("ƒ˙√ª”–—°‘Ò»Œ∫ŒŒƒº˛£¨»∑»œ…æ≥˝À˘”– ˝æ›Œƒº˛£ø", null, "»∑»œ…æ≥˝", "≤ª…æ≥˝")))
			{
				string[] files = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "*.*");
				for (int i = 0; i < files.Length; i++)
				{
					File.Delete(files[i]);
				}
				Files.Clear();
			}
		}

		private void RemoveButton_Clicked(object sender, EventArgs e)
		{
			RemoteFile = !RemoteFile;
			if (RemoteFile)
			{
				CmdShare.IsEnabled = false;
				selectedFile = null;
				CmdDelete.IsEnabled = false;
				ReadFtpFileName();
				if (App.CN)
				{
					CmdRemove.Text = "≤Èø¥±æµÿŒƒº˛";
				}
				else
				{
					CmdRemove.Text = "View Local Files";
				}
			}
			else
			{
				CmdShare.IsEnabled = true;
				selectedFile = null;
				CmdDelete.IsEnabled = true;
				ReadLocalFileName();
				if (App.CN)
				{
					CmdRemove.Text = "≤Èø¥‘∆Œƒº˛";
				}
				else
				{
					CmdRemove.Text = "View Cloud Files";
				}
			}
		}

		private async void ShareButton_Clicked(object sender, EventArgs e)
		{
			if (selectedFile == null)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("√ª”–—°‘Ò“ª∏ˆ ˝æ›Œƒº˛");
				}
				else
				{
					UserDialogs.Instance.Alert("Select a Data File");
				}
			}
			else
			{
				ShareFile file = new ShareFile(App.fileName);
				await Share.RequestAsync(new ShareFileRequest
				{
					Title = "π≤œÌ ˝æ›Œƒº˛",
					File = file
				});
			}
		}

		private async void ReturnButton_Clicked(object sender, EventArgs e)
		{
			if (selectedFile == null)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("√ª”–—°‘Ò“ª∏ˆ ˝æ›Œƒº˛");
				}
				else
				{
					UserDialogs.Instance.Alert("Select a Data File");
				}
				await base.Navigation.PopModalAsync();
				return;
			}
			if (RemoteFile)
			{
				bool hasfile = false;
				bool flag = false;
				string[] files = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "*.*");
				for (int i = 0; i < files.Length; i++)
				{
					string text = files[i];
					int num = text.LastIndexOf('/');
					if (num >= 0)
					{
						text = text.Substring(num + 1);
					}
					if (selectedFile.SingleName == text)
					{
						hasfile = true;
						flag = ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Local file existed,Download and replace it£ø", null, "Downlaod & Replace", "Use Local File")) : (await UserDialogs.Instance.ConfirmAsync("±æµÿ”–∏√Œƒº˛£¨œ¬‘ÿ‘∂≥Ã ˝æ›∏≤∏«±æµÿŒƒº˛£ø", null, "∏≤∏«±æµÿŒƒº˛", " π”√±æµÿŒƒº˛")));
						break;
					}
				}
				if (hasfile)
				{
					if (flag)
					{
						App.Downloaded = 2;
					}
					else
					{
						App.Downloaded = 1;
					}
					App.fileName = selectedFile.FullName;
				}
				else
				{
					App.fileName = selectedFile.FullName;
					App.Downloaded = 2;
				}
			}
			else
			{
				App.Downloaded = 1;
			}
			await base.Navigation.PopModalAsync();
		}

		private void CmdList_Clicked(object sender, EventArgs e)
		{
			Files.Clear();
			string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
			foreach (string remoteFileName in App.RemoteFileNames)
			{
				string fullName = $"{folderPath}/{remoteFileName}";
				if (App.HardVer == 'H' || App.HardVer == 'L')
				{
					if (((remoteFileName[0] == 'H' || remoteFileName[0] == 'L') && remoteFileName[1] >= '0' && remoteFileName[1] <= '9') || remoteFileName.ToUpper().IndexOf(".HEB") > 0)
					{
						DownloadFile downloadFile = new DownloadFile();
						downloadFile.FullName = fullName;
						downloadFile.SingleName = remoteFileName;
						Files.Add(downloadFile);
					}
				}
				else if (App.HardVer == 'I' || App.HardVer == 'J')
				{
					if (((remoteFileName[0] == 'I' || remoteFileName[0] == 'J') && remoteFileName[1] >= '0' && remoteFileName[1] <= '9') || remoteFileName.ToUpper().IndexOf(".HEB") > 0)
					{
						DownloadFile downloadFile2 = new DownloadFile();
						downloadFile2.FullName = fullName;
						downloadFile2.SingleName = remoteFileName;
						Files.Add(downloadFile2);
					}
				}
				else if (App.HardVer == 'M' || App.HardVer == 'N')
				{
					if (((remoteFileName[0] == 'M' || remoteFileName[0] == 'N') && remoteFileName[1] >= '0' && remoteFileName[1] <= '9') || remoteFileName.ToUpper().IndexOf(".HEB") > 0)
					{
						DownloadFile downloadFile3 = new DownloadFile();
						downloadFile3.FullName = fullName;
						downloadFile3.SingleName = remoteFileName;
						Files.Add(downloadFile3);
					}
				}
				else if (App.HardVer == 'O' || App.HardVer == 'P')
				{
					if (((remoteFileName[0] == 'O' || remoteFileName[0] == 'P') && remoteFileName[1] >= '0' && remoteFileName[1] <= '9') || remoteFileName.ToUpper().IndexOf(".HEB") > 0)
					{
						DownloadFile downloadFile4 = new DownloadFile();
						downloadFile4.FullName = fullName;
						downloadFile4.SingleName = remoteFileName;
						Files.Add(downloadFile4);
					}
				}
				else if (App.HardVer == 'Q' || App.HardVer == 'R')
				{
					if (((remoteFileName[0] == 'Q' || remoteFileName[0] == 'R') && remoteFileName[1] >= '0' && remoteFileName[1] <= '9') || remoteFileName.ToUpper().IndexOf(".HEB") > 0)
					{
						DownloadFile downloadFile5 = new DownloadFile();
						downloadFile5.FullName = fullName;
						downloadFile5.SingleName = remoteFileName;
						Files.Add(downloadFile5);
					}
				}
				else if (App.HardVer == 'S' || App.HardVer == 'T')
				{
					if (((remoteFileName[0] == 'S' || remoteFileName[0] == 'T') && remoteFileName[1] >= '0' && remoteFileName[1] <= '9') || remoteFileName.ToUpper().IndexOf(".HEB") > 0)
					{
						DownloadFile downloadFile6 = new DownloadFile();
						downloadFile6.FullName = fullName;
						downloadFile6.SingleName = remoteFileName;
						Files.Add(downloadFile6);
					}
				}
				else if (App.HardVer == 'U' || App.HardVer == 'V')
				{
					if (((remoteFileName[0] == 'U' || remoteFileName[0] == 'V') && remoteFileName[1] >= '0' && remoteFileName[1] <= '9') || remoteFileName.ToUpper().IndexOf(".HEB") > 0)
					{
						DownloadFile downloadFile7 = new DownloadFile();
						downloadFile7.FullName = fullName;
						downloadFile7.SingleName = remoteFileName;
						Files.Add(downloadFile7);
					}
				}
				else if (App.HardVer == 'X' || App.HardVer == 'Y')
				{
					if (((remoteFileName[0] == 'X' || remoteFileName[0] == 'Y') && remoteFileName[1] >= '0' && remoteFileName[1] <= '9') || remoteFileName.ToUpper().IndexOf(".HEB") > 0)
					{
						DownloadFile downloadFile8 = new DownloadFile();
						downloadFile8.FullName = fullName;
						downloadFile8.SingleName = remoteFileName;
						Files.Add(downloadFile8);
					}
				}
				else if ((App.HardVer == 'G' || App.HardVer == 'A') && remoteFileName[0] >= 'A' && remoteFileName[0] <= 'Z' && remoteFileName[1] >= 'A' && remoteFileName[1] <= 'Z')
				{
					int num = remoteFileName.LastIndexOf(".hex");
					if (num > 3 && remoteFileName[num - 3] == 'A')
					{
						DownloadFile downloadFile9 = new DownloadFile();
						downloadFile9.FullName = fullName;
						downloadFile9.SingleName = remoteFileName;
						Files.Add(downloadFile9);
					}
				}
				else if (App.HardVer == 'B' && remoteFileName[0] >= 'A' && remoteFileName[0] <= 'Z' && remoteFileName[1] >= 'A' && remoteFileName[1] <= 'Z')
				{
					int num2 = remoteFileName.LastIndexOf(".bin");
					if (num2 > 3 && remoteFileName[num2 - 3] == 'B')
					{
						DownloadFile downloadFile10 = new DownloadFile();
						downloadFile10.FullName = fullName;
						downloadFile10.SingleName = remoteFileName;
						Files.Add(downloadFile10);
					}
				}
			}
		}

		private void CmdFlush_Clicked(object sender, EventArgs e)
		{
			Files.Clear();
			string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
			foreach (string remoteFileName in App.RemoteFileNames)
			{
				string fullName = $"{folderPath}/{remoteFileName}";
				if (remoteFileName.Contains("BN485"))
				{
					DownloadFile downloadFile = new DownloadFile();
					downloadFile.FullName = fullName;
					downloadFile.SingleName = remoteFileName;
					Files.Add(downloadFile);
				}
			}
		}

		private void AutoSaveButton_Clicked(object sender, EventArgs e)
		{
			if (App.autosave != "0")
			{
				SecureStorage.SetAsync("AutoSave", "0");
				App.autosave = "0";
			}
			else
			{
				SecureStorage.SetAsync("AutoSave", "1");
				App.autosave = "1";
			}
			if (App.CN)
			{
				if (App.autosave != "0")
				{
					CmdAutoSave.Text = "◊‘∂Ø±£¥Êø™";
				}
				else
				{
					CmdAutoSave.Text = "◊‘∂Ø±£¥Êπÿ";
				}
			}
			else if (App.autosave != "0")
			{
				CmdAutoSave.Text = "AutoSave On";
			}
			else
			{
				CmdAutoSave.Text = "AutoSave Off";
			}
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			if (ResourceLoader.IsEnabled && ResourceLoader.CanProvideContentFor(new ResourceLoader.ResourceLoadingQuery
			{
				AssemblyName = typeof(FilePage).GetTypeInfo().Assembly.GetName(),
				ResourcePath = "FilePage.xaml",
				Instance = this
			}))
			{
				__InitComponentRuntime();
				return;
			}
			if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
			{
				__InitComponentRuntime();
				return;
			}
			RowDefinition rowDefinition;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition = new RowDefinition(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 12, 14);
			RowDefinition rowDefinition2;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition2 = new RowDefinition(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 13, 14);
			RowDefinition rowDefinition3;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition3 = new RowDefinition(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 14, 14);
			RowDefinition rowDefinition4;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition4 = new RowDefinition(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 15, 14);
			DataTemplate dataTemplate;
			VisualDiagnostics.RegisterSourceInfo(dataTemplate = new DataTemplate(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 20, 18);
			Xamarin.Forms.ListView listView;
			VisualDiagnostics.RegisterSourceInfo(listView = new Xamarin.Forms.ListView(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 18, 10);
			ColumnDefinition columnDefinition;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition = new ColumnDefinition(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 30, 18);
			ColumnDefinition columnDefinition2;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition2 = new ColumnDefinition(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 31, 18);
			Xamarin.Forms.Button button;
			VisualDiagnostics.RegisterSourceInfo(button = new Xamarin.Forms.Button(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 33, 14);
			Xamarin.Forms.Button button2;
			VisualDiagnostics.RegisterSourceInfo(button2 = new Xamarin.Forms.Button(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 36, 14);
			Grid grid;
			VisualDiagnostics.RegisterSourceInfo(grid = new Grid(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 28, 10);
			ColumnDefinition columnDefinition3;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition3 = new ColumnDefinition(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 42, 18);
			ColumnDefinition columnDefinition4;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition4 = new ColumnDefinition(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 43, 18);
			ColumnDefinition columnDefinition5;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition5 = new ColumnDefinition(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 44, 18);
			Xamarin.Forms.Button button3;
			VisualDiagnostics.RegisterSourceInfo(button3 = new Xamarin.Forms.Button(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 46, 14);
			Xamarin.Forms.Button button4;
			VisualDiagnostics.RegisterSourceInfo(button4 = new Xamarin.Forms.Button(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 49, 14);
			Xamarin.Forms.Button button5;
			VisualDiagnostics.RegisterSourceInfo(button5 = new Xamarin.Forms.Button(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 52, 14);
			Grid grid2;
			VisualDiagnostics.RegisterSourceInfo(grid2 = new Grid(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 40, 10);
			ColumnDefinition columnDefinition6;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition6 = new ColumnDefinition(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 58, 18);
			ColumnDefinition columnDefinition7;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition7 = new ColumnDefinition(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 59, 18);
			Xamarin.Forms.Button button6;
			VisualDiagnostics.RegisterSourceInfo(button6 = new Xamarin.Forms.Button(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 61, 14);
			Xamarin.Forms.Button button7;
			VisualDiagnostics.RegisterSourceInfo(button7 = new Xamarin.Forms.Button(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 64, 14);
			Grid grid3;
			VisualDiagnostics.RegisterSourceInfo(grid3 = new Grid(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 56, 10);
			Grid grid4;
			VisualDiagnostics.RegisterSourceInfo(grid4 = new Grid(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 10, 6);
			FilePage filePage;
			VisualDiagnostics.RegisterSourceInfo(filePage = this, new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 2, 2);
			NameScope nameScope = (NameScope)(NameScope.GetNameScope(filePage) ?? new NameScope());
			NameScope.SetNameScope(filePage, nameScope);
			((INameScope)nameScope).RegisterName("FileListView", (object)listView);
			if (listView.StyleId == null)
			{
				listView.StyleId = "FileListView";
			}
			((INameScope)nameScope).RegisterName("CmdList", (object)button);
			if (button.StyleId == null)
			{
				button.StyleId = "CmdList";
			}
			((INameScope)nameScope).RegisterName("CmdFlush", (object)button2);
			if (button2.StyleId == null)
			{
				button2.StyleId = "CmdFlush";
			}
			((INameScope)nameScope).RegisterName("CmdRemove", (object)button3);
			if (button3.StyleId == null)
			{
				button3.StyleId = "CmdRemove";
			}
			((INameScope)nameScope).RegisterName("CmdDelete", (object)button4);
			if (button4.StyleId == null)
			{
				button4.StyleId = "CmdDelete";
			}
			((INameScope)nameScope).RegisterName("CmdAutoSave", (object)button5);
			if (button5.StyleId == null)
			{
				button5.StyleId = "CmdAutoSave";
			}
			((INameScope)nameScope).RegisterName("CmdShare", (object)button6);
			if (button6.StyleId == null)
			{
				button6.StyleId = "CmdShare";
			}
			((INameScope)nameScope).RegisterName("CmdReturn", (object)button7);
			if (button7.StyleId == null)
			{
				button7.StyleId = "CmdReturn";
			}
			FileListView = listView;
			CmdList = button;
			CmdFlush = button2;
			CmdRemove = button3;
			CmdDelete = button4;
			CmdAutoSave = button5;
			CmdShare = button6;
			CmdReturn = button7;
			filePage.SetValue(Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.UseSafeAreaProperty, true);
			filePage.SetValue(Xamarin.Forms.Page.TitleProperty, "Update File");
			filePage.SetValue(Xamarin.Forms.NavigationPage.BackButtonTitleProperty, "Back");
			rowDefinition.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("82*"));
			((DefinitionCollection<RowDefinition>)grid4.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition);
			rowDefinition2.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("6*"));
			((DefinitionCollection<RowDefinition>)grid4.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition2);
			rowDefinition3.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("6*"));
			((DefinitionCollection<RowDefinition>)grid4.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition3);
			rowDefinition4.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("6*"));
			((DefinitionCollection<RowDefinition>)grid4.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition4);
			listView.ItemSelected += filePage.ListView_ItemSelected;
			listView.SetValue(Grid.RowProperty, 0);
			listView.SetValue(Grid.ColumnProperty, 0);
			listView.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			object[] array = new object[0 + 4];
			array[0] = dataTemplate;
			array[1] = listView;
			array[2] = grid4;
			array[3] = filePage;
			object[] parentValues = array;
			FilePage root = filePage;
			((IDataTemplate)dataTemplate).LoadTemplate = delegate
			{
				BindingExtension bindingExtension;
				VisualDiagnostics.RegisterSourceInfo(bindingExtension = new BindingExtension(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 22, 32);
				Label label;
				VisualDiagnostics.RegisterSourceInfo(label = new Label(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 22, 26);
				Xamarin.Forms.ViewCell viewCell;
				VisualDiagnostics.RegisterSourceInfo(viewCell = new Xamarin.Forms.ViewCell(), new Uri("FilePage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 21, 22);
				NameScope nameScope2 = new NameScope();
				NameScope.SetNameScope(viewCell, nameScope2);
				bindingExtension.Path = "SingleName";
				BindingBase binding = ((IMarkupExtension<BindingBase>)bindingExtension).ProvideValue((IServiceProvider)null);
				label.SetBinding(Label.TextProperty, binding);
				BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
				FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
				XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
				Type typeFromHandle15 = typeof(IProvideValueTarget);
				int length;
				object[] array9 = new object[(length = parentValues.Length) + 2];
				Array.Copy(parentValues, 0, array9, 2, length);
				array9[0] = label;
				array9[1] = viewCell;
				object service8;
				xamlServiceProvider8.Add(typeFromHandle15, service8 = new SimpleValueTargetProvider(array9, Label.FontSizeProperty, nameScope2));
				xamlServiceProvider8.Add(typeof(IReferenceProvider), service8);
				Type typeFromHandle16 = typeof(IXamlTypeResolver);
				XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
				xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
				xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
				xmlNamespaceResolver8.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
				xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(<InitializeComponent>_anonXamlCDataTemplate_0).GetTypeInfo().Assembly));
				xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(22, 60)));
				label.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider8));
				label.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
				viewCell.View = label;
				return viewCell;
			};
			listView.SetValue(ItemsView<Xamarin.Forms.Cell>.ItemTemplateProperty, dataTemplate);
			grid4.Children.Add(listView);
			grid.SetValue(Grid.RowProperty, 1);
			grid.SetValue(Grid.ColumnProperty, 0);
			grid.SetValue(Grid.ColumnSpacingProperty, 2.0);
			grid.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
			columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
			button.SetValue(Grid.RowProperty, 0);
			button.SetValue(Grid.ColumnProperty, 0);
			button.SetValue(Xamarin.Forms.Button.TextProperty, "Locl");
			button.Clicked += filePage.CmdList_Clicked;
			button.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightSkyBlue);
			BindableProperty fontSizeProperty = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
			Type typeFromHandle = typeof(IProvideValueTarget);
			object[] array2 = new object[0 + 4];
			array2[0] = button;
			array2[1] = grid;
			array2[2] = grid4;
			array2[3] = filePage;
			object service;
			xamlServiceProvider.Add(typeFromHandle, service = new SimpleValueTargetProvider(array2, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider.Add(typeof(IReferenceProvider), service);
			Type typeFromHandle2 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
			xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(FilePage).GetTypeInfo().Assembly));
			xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(34, 70)));
			button.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider));
			button.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			grid.Children.Add(button);
			button2.SetValue(Grid.RowProperty, 0);
			button2.SetValue(Grid.ColumnProperty, 1);
			button2.SetValue(Xamarin.Forms.Button.TextProperty, "…æ≥˝Œƒº˛");
			button2.Clicked += filePage.CmdFlush_Clicked;
			button2.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightSkyBlue);
			BindableProperty fontSizeProperty2 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
			Type typeFromHandle3 = typeof(IProvideValueTarget);
			object[] array3 = new object[0 + 4];
			array3[0] = button2;
			array3[1] = grid;
			array3[2] = grid4;
			array3[3] = filePage;
			object service2;
			xamlServiceProvider2.Add(typeFromHandle3, service2 = new SimpleValueTargetProvider(array3, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider2.Add(typeof(IReferenceProvider), service2);
			Type typeFromHandle4 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
			xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver2.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(FilePage).GetTypeInfo().Assembly));
			xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(37, 70)));
			button2.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider2));
			button2.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			grid.Children.Add(button2);
			grid4.Children.Add(grid);
			grid2.SetValue(Grid.RowProperty, 2);
			grid2.SetValue(Grid.ColumnProperty, 0);
			grid2.SetValue(Grid.ColumnSpacingProperty, 2.0);
			grid2.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition3.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("40*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition3);
			columnDefinition4.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("30*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition4);
			columnDefinition5.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("30*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition5);
			button3.SetValue(Grid.RowProperty, 0);
			button3.SetValue(Grid.ColumnProperty, 0);
			button3.SetValue(Xamarin.Forms.Button.TextProperty, "Locl");
			button3.Clicked += filePage.RemoveButton_Clicked;
			button3.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightSkyBlue);
			BindableProperty fontSizeProperty3 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
			Type typeFromHandle5 = typeof(IProvideValueTarget);
			object[] array4 = new object[0 + 4];
			array4[0] = button3;
			array4[1] = grid2;
			array4[2] = grid4;
			array4[3] = filePage;
			object service3;
			xamlServiceProvider3.Add(typeFromHandle5, service3 = new SimpleValueTargetProvider(array4, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider3.Add(typeof(IReferenceProvider), service3);
			Type typeFromHandle6 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
			xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver3.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(FilePage).GetTypeInfo().Assembly));
			xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(47, 70)));
			button3.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider3));
			button3.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			grid2.Children.Add(button3);
			button4.SetValue(Grid.RowProperty, 0);
			button4.SetValue(Grid.ColumnProperty, 2);
			button4.SetValue(Xamarin.Forms.Button.TextProperty, "…æ≥˝Œƒº˛");
			button4.Clicked += filePage.DelButton_Clicked;
			button4.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button4.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightSkyBlue);
			BindableProperty fontSizeProperty4 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
			Type typeFromHandle7 = typeof(IProvideValueTarget);
			object[] array5 = new object[0 + 4];
			array5[0] = button4;
			array5[1] = grid2;
			array5[2] = grid4;
			array5[3] = filePage;
			object service4;
			xamlServiceProvider4.Add(typeFromHandle7, service4 = new SimpleValueTargetProvider(array5, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider4.Add(typeof(IReferenceProvider), service4);
			Type typeFromHandle8 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
			xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver4.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(FilePage).GetTypeInfo().Assembly));
			xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(50, 70)));
			button4.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider4));
			button4.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			grid2.Children.Add(button4);
			button5.SetValue(Grid.RowProperty, 0);
			button5.SetValue(Grid.ColumnProperty, 1);
			button5.SetValue(Xamarin.Forms.Button.TextProperty, "◊‘∂Ø±£¥Êø™");
			button5.Clicked += filePage.AutoSaveButton_Clicked;
			button5.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button5.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightSkyBlue);
			BindableProperty fontSizeProperty5 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
			Type typeFromHandle9 = typeof(IProvideValueTarget);
			object[] array6 = new object[0 + 4];
			array6[0] = button5;
			array6[1] = grid2;
			array6[2] = grid4;
			array6[3] = filePage;
			object service5;
			xamlServiceProvider5.Add(typeFromHandle9, service5 = new SimpleValueTargetProvider(array6, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider5.Add(typeof(IReferenceProvider), service5);
			Type typeFromHandle10 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
			xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver5.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(FilePage).GetTypeInfo().Assembly));
			xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(53, 70)));
			button5.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider5));
			button5.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			grid2.Children.Add(button5);
			grid4.Children.Add(grid2);
			grid3.SetValue(Grid.RowProperty, 3);
			grid3.SetValue(Grid.ColumnProperty, 0);
			grid3.SetValue(Grid.ColumnSpacingProperty, 2.0);
			grid3.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition6.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition6);
			columnDefinition7.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition7);
			button6.SetValue(Grid.RowProperty, 0);
			button6.SetValue(Grid.ColumnProperty, 0);
			button6.SetValue(Xamarin.Forms.Button.TextProperty, "∑÷œÌ");
			button6.Clicked += filePage.ShareButton_Clicked;
			button6.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button6.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightSkyBlue);
			BindableProperty fontSizeProperty6 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
			Type typeFromHandle11 = typeof(IProvideValueTarget);
			object[] array7 = new object[0 + 4];
			array7[0] = button6;
			array7[1] = grid3;
			array7[2] = grid4;
			array7[3] = filePage;
			object service6;
			xamlServiceProvider6.Add(typeFromHandle11, service6 = new SimpleValueTargetProvider(array7, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider6.Add(typeof(IReferenceProvider), service6);
			Type typeFromHandle12 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
			xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver6.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(FilePage).GetTypeInfo().Assembly));
			xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(62, 70)));
			button6.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider6));
			button6.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			grid3.Children.Add(button6);
			button7.SetValue(Grid.RowProperty, 0);
			button7.SetValue(Grid.ColumnProperty, 1);
			button7.SetValue(Xamarin.Forms.Button.TextProperty, "∑µªÿ");
			button7.Clicked += filePage.ReturnButton_Clicked;
			button7.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button7.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightSkyBlue);
			BindableProperty fontSizeProperty7 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
			Type typeFromHandle13 = typeof(IProvideValueTarget);
			object[] array8 = new object[0 + 4];
			array8[0] = button7;
			array8[1] = grid3;
			array8[2] = grid4;
			array8[3] = filePage;
			object service7;
			xamlServiceProvider7.Add(typeFromHandle13, service7 = new SimpleValueTargetProvider(array8, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider7.Add(typeof(IReferenceProvider), service7);
			Type typeFromHandle14 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
			xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver7.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(FilePage).GetTypeInfo().Assembly));
			xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(65, 70)));
			button7.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider7));
			button7.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			grid3.Children.Add(button7);
			grid4.Children.Add(grid3);
			filePage.SetValue(ContentPage.ContentProperty, grid4);
		}

		private void __InitComponentRuntime()
		{
			this.LoadFromXaml(typeof(FilePage));
			FileListView = this.FindByName<Xamarin.Forms.ListView>("FileListView");
			CmdList = this.FindByName<Xamarin.Forms.Button>("CmdList");
			CmdFlush = this.FindByName<Xamarin.Forms.Button>("CmdFlush");
			CmdRemove = this.FindByName<Xamarin.Forms.Button>("CmdRemove");
			CmdDelete = this.FindByName<Xamarin.Forms.Button>("CmdDelete");
			CmdAutoSave = this.FindByName<Xamarin.Forms.Button>("CmdAutoSave");
			CmdShare = this.FindByName<Xamarin.Forms.Button>("CmdShare");
			CmdReturn = this.FindByName<Xamarin.Forms.Button>("CmdReturn");
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	[XamlFilePath("GraphPage.xaml")]
	public class GraphPage : ContentPage
	{
		private SKPaint blackFillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Black
		};

		private SKPaint whiteStrokePaint = new SKPaint
		{
			Style = SKPaintStyle.Stroke,
			Color = SKColors.White,
			StrokeWidth = 2f,
			StrokeCap = SKStrokeCap.Round,
			IsAntialias = true
		};

		private SKPaint yellowStrokePaint = new SKPaint
		{
			Style = SKPaintStyle.Stroke,
			Color = SKColors.Yellow,
			StrokeWidth = 2f,
			StrokeCap = SKStrokeCap.Round,
			IsAntialias = true
		};

		private SKPaint whiteTextPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.White,
			StrokeWidth = 1f,
			TextSize = 16f,
			StrokeCap = SKStrokeCap.Round,
			IsAntialias = true
		};

		private SKPaint yellowTextPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Yellow,
			StrokeWidth = 8f,
			TextSize = 50f,
			StrokeCap = SKStrokeCap.Round,
			IsAntialias = true
		};

		private SKPaint yellowText2Paint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Yellow,
			StrokeWidth = 1f,
			TextSize = 20f,
			StrokeCap = SKStrokeCap.Round,
			IsAntialias = true
		};

		private SKBitmap batt_bitmap;

		private SKBitmap error_bitmap;

		private SKBitmap zuotong_bitmap;

		private SKBitmap push1_bitmap;

		private SKBitmap ok_bitmap;

		private SKBitmap rollD_bitmap;

		private SKBitmap rollN_bitmap;

		private SKBitmap rollR_bitmap;

		private SKBitmap stop_bitmap;

		private SKBitmap power_bitmap;

		private SKBitmap throttle_bitmap;

		private SKBitmap motortemp_bitmap;

		private SKBitmap phasec_bitmap;

		private SKBitmap linecurr_bitmap;

		private int m_gear;

		private int m_XSControl;

		private int m_roll;

		private int rcv_Series;

		private int m_SpeedaccT;

		private int m_Speedacc;

		private bool m_EABS;

		private bool isPortrait;

		private int rcv_rateratio;

		private bool autolearnstat;

		private int m_MeasureSpeed;

		private string m_BreakDown;

		private int ErrorNum;

		private bool Error;

		private bool m_stop;

		private float voltage;

		private float throttleVoltage;

		private float maxvol;

		private float minvol;

		private float avgvol;

		private float linecurr;

		private float m_InPower;

		private float modulation;

		private float deltavol;

		private float fullcap;

		private float restcap;

		private int ThrottleDepth;

		private float m_phaseAcurr;

		private float m_phaseCcurr;

		private int function_state;

		private int motor_running_state;

		private int motor_stop_state;

		private int Global_state1;

		private int Global_state2;

		private int Global_state3;

		private int rollingV;

		private int reversing;

		private int Global_state4;

		private int rcv_PolePairs;

		private int[] FlashReadAddr = new int[55]
		{
			226, 232, 238, 0, 6, 12, 18, 226, 232, 238,
			24, 30, 36, 42, 226, 232, 238, 48, 93, 99,
			105, 226, 232, 238, 124, 130, 136, 142, 226, 232,
			238, 148, 154, 160, 166, 226, 232, 238, 172, 178,
			184, 190, 226, 232, 238, 196, 202, 208, 226, 232,
			238, 214, 220, 244, 250
		};

		private char rcv_kzqVersion0;

		private int[] voltages;

		private int[] currents;

		private int[] caps;

		private int[] NeedBal;

		private float speed;

		private ushort rcv_turns;

		private uint rcv_TotalTime;

		private int rcv_AVGPower;

		private int rcv_AVGSpeed;

		private int rcv_DistanceL;

		private int rcv_DistanceH;

		private int rcv_Distance;

		private int rcv_WheelRatio;

		private int rcv_WheelRadius;

		private int rcv_WheelWidth;

		private byte CHGDSG;

		private byte NeedBalance0;

		private byte NeedBalance1;

		private byte NeedBalance2;

		private byte NeedBalance3;

		private int m_battcap;

		private int m_motortemp;

		private int m_mostemp;

		private int rcv_phaseCRatio;

		private int rcv_phaseARatio;

		private int rcv_lineCurrRatio;

		private int m_lineCurrRatio;

		private int m_phaseARatio;

		private int m_phaseCRatio;

		private int m_lineCurrRatioTime;

		private int m_phaseARatioTime;

		private int m_phaseCRatioTime;

		private bool m_lineCurrRatioNeedSent;

		private bool m_phaseARatioTimeNeedSent;

		private bool m_phaseCRatioTimeNeedSent;

		private byte[] crctablelo = new byte[256]
		{
			0, 192, 193, 1, 195, 3, 2, 194, 198, 6,
			7, 199, 5, 197, 196, 4, 204, 12, 13, 205,
			15, 207, 206, 14, 10, 202, 203, 11, 201, 9,
			8, 200, 216, 24, 25, 217, 27, 219, 218, 26,
			30, 222, 223, 31, 221, 29, 28, 220, 20, 212,
			213, 21, 215, 23, 22, 214, 210, 18, 19, 211,
			17, 209, 208, 16, 240, 48, 49, 241, 51, 243,
			242, 50, 54, 246, 247, 55, 245, 53, 52, 244,
			60, 252, 253, 61, 255, 63, 62, 254, 250, 58,
			59, 251, 57, 249, 248, 56, 40, 232, 233, 41,
			235, 43, 42, 234, 238, 46, 47, 239, 45, 237,
			236, 44, 228, 36, 37, 229, 39, 231, 230, 38,
			34, 226, 227, 35, 225, 33, 32, 224, 160, 96,
			97, 161, 99, 163, 162, 98, 102, 166, 167, 103,
			165, 101, 100, 164, 108, 172, 173, 109, 175, 111,
			110, 174, 170, 106, 107, 171, 105, 169, 168, 104,
			120, 184, 185, 121, 187, 123, 122, 186, 190, 126,
			127, 191, 125, 189, 188, 124, 180, 116, 117, 181,
			119, 183, 182, 118, 114, 178, 179, 115, 177, 113,
			112, 176, 80, 144, 145, 81, 147, 83, 82, 146,
			150, 86, 87, 151, 85, 149, 148, 84, 156, 92,
			93, 157, 95, 159, 158, 94, 90, 154, 155, 91,
			153, 89, 88, 152, 136, 72, 73, 137, 75, 139,
			138, 74, 78, 142, 143, 79, 141, 77, 76, 140,
			68, 132, 133, 69, 135, 71, 70, 134, 130, 66,
			67, 131, 65, 129, 128, 64
		};

		private byte[] crctablehi = new byte[256]
		{
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 0, 193, 129, 64, 1, 192,
			128, 65, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 0, 193,
			129, 64, 1, 192, 128, 65, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 0, 193,
			129, 64, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 1, 192, 128, 65, 0, 193,
			129, 64, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 0, 193, 129, 64, 1, 192,
			128, 65, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 0, 193, 129, 64, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			1, 192, 128, 65, 0, 193, 129, 64, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 1, 192, 128, 65, 0, 193,
			129, 64, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64
		};

		private ushort oldrcv_turns;

		private int R;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private StackLayout ControllerFoc;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView powerView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView gearView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView stopView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView runView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView speedView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid TempGrid;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView battCapView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView mosTempView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView motorTempView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid ThrottleGrid;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label motorStat;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label throttleVol;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView throttleView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label learnStat;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label weakStatus;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView alarmView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label lineVoltage;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label lineCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView lineCurrView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid PhaseGrid;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label phaseA;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView phaseAView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AVGPOWERT;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AVGPower;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AVGSPEEDT;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AVGSpeed;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label phaseC;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView phaseCView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid AlarmGrid;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AlarmRecord;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid FrameGrid;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label frameCnt;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label alarmMessage;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdAngle;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdLearn;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Distance;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TotalTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private StackLayout ControllerBMS;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView bmsVoltageView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView bmsCapView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView bmsCurrentView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SystemStatName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label WorkStat;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BalStatName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BalStat;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TotalVolName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TotalVol;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TotalCurrName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TotalCurrent;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TotalCapName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FullCap;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RestCapName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RestCap;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MOSTempName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MosTemp;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BalTempName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BalT;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label T1;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label T2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label T3;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label T4;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SingleMaxVolName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MaxVol;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SingleMinVolName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MinVol;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AvgVolName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AvgVol;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MaxDeltaVolName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DeltaVol;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BatteryName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VolCurrentName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BatteryName2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VolCurrentName2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC1;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC3;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC4;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC5;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC6;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC7;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC8;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC9;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC10;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC11;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC12;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC13;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC14;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC15;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC16;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC17;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC18;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC19;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC20;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC21;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC22;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC23;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VC24;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label frameCnt2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label alarmMessage2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button DSGOnName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button DSGOffName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CHGOnName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CHGOffName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button SystemOffName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button BalOffName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button BalOnName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button BalTestName;

		public GraphPage()
		{
			InitializeComponent();
			On<iOS>().SetUseSafeArea(value: true);
			isPortrait = true;
			m_gear = 0;
			m_XSControl = 0;
			m_roll = 0;
			rcv_PolePairs = 4;
			m_SpeedaccT = 0;
			m_Speedacc = 0;
			m_EABS = false;
			m_MeasureSpeed = 0;
			m_BreakDown = "";
			ErrorNum = 0;
			Error = false;
			m_stop = true;
			voltage = 0f;
			rollingV = 0;
			reversing = 0;
			rcv_Series = 0;
			linecurr = 0f;
			function_state = 65535;
			motor_running_state = 65535;
			motor_stop_state = 65535;
			Global_state1 = 65535;
			Global_state2 = 65535;
			Global_state3 = 65535;
			Global_state4 = 65535;
			m_InPower = 0f;
			modulation = 0f;
			ThrottleDepth = 0;
			m_phaseAcurr = 0f;
			m_phaseCcurr = 0f;
			voltages = new int[24];
			currents = new int[24];
			caps = new int[24];
			NeedBal = new int[24];
			for (int i = 0; i < 24; i++)
			{
				caps[i] = 0;
			}
			m_lineCurrRatio = 280;
			m_phaseARatio = 256;
			m_phaseCRatio = 256;
			if (App.CN)
			{
				learnStat.Text = "◊‘—ßœ∞";
				weakStatus.Text = "MTPA";
				motorStat.Text = "¬Ì¥Ôπÿ±’";
				throttleVol.Text = "”Õ√≈256/3.94V";
				lineVoltage.Text = "œﬂµÁ—π£∫000.0V";
				lineCurr.Text = "0A";
				phaseA.Text = "Aœ‡µÁ¡˜£∫0A";
				phaseC.Text = "Cœ‡µÁ¡˜£∫0A";
				frameCnt.Text = "Ω” ’÷°0";
				alarmMessage.Text = "Œ¥¡¨Ω”øÿ÷∆∆˜";
			}
			else
			{
				learnStat.Text = "AutoLearn";
				weakStatus.Text = "MTPA";
				motorStat.Text = "Motor Closed";
				throttleVol.Text = "Throttle256/3.94V";
				lineVoltage.Text = "LineVoltage:000.0V";
				lineCurr.Text = "0A";
				phaseA.Text = "APhaseCurr:0A";
				phaseC.Text = "CPhaseCurr:0A";
				frameCnt.Text = "RcvFrames:0";
				alarmMessage.Text = "Controller is not connected";
			}
			m_lineCurrRatioNeedSent = false;
			m_phaseARatioTimeNeedSent = false;
			m_phaseCRatioTimeNeedSent = false;
			if (App.bms)
			{
				ControllerFoc.IsVisible = false;
				ControllerBMS.IsVisible = true;
			}
			else
			{
				ControllerFoc.IsVisible = true;
				ControllerBMS.IsVisible = false;
			}
			base.SizeChanged += GraphPage_SizeChanged;
			Device.StartTimer(TimeSpan.FromMilliseconds(100.0), delegate
			{
				try
				{
					bmsVoltageView.InvalidateSurface();
					bmsCapView.InvalidateSurface();
					bmsCurrentView.InvalidateSurface();
					powerView.InvalidateSurface();
					speedView.InvalidateSurface();
					gearView.InvalidateSurface();
					stopView.InvalidateSurface();
					motorTempView.InvalidateSurface();
					battCapView.InvalidateSurface();
					runView.InvalidateSurface();
					alarmView.InvalidateSurface();
					mosTempView.InvalidateSurface();
					throttleView.InvalidateSurface();
					phaseAView.InvalidateSurface();
					phaseCView.InvalidateSurface();
					lineCurrView.InvalidateSurface();
					if (App.CN)
					{
						base.Title = "Õº±Ì";
					}
					else
					{
						base.Title = "Graph";
					}
					if (App.CN)
					{
						CmdAngle.Text = "∂‡π¶ƒ‹";
						if (autolearnstat)
						{
							CmdLearn.Text = "»°œ˚◊‘—ßœ∞";
						}
						else
						{
							CmdLearn.Text = "◊‘—ßœ∞";
						}
						SystemStatName.Text = "œµÕ≥◊¥Ã¨";
						BalStatName.Text = "æ˘∫‚◊¥Ã¨";
						TotalVolName.Text = "◊‹µÁ—π";
						TotalCurrName.Text = "◊‹µÁ¡˜";
						TotalCapName.Text = "◊‹»›¡ø";
						RestCapName.Text = " £”‡»›¡ø";
						MOSTempName.Text = "MOSŒ¬∂»";
						BalTempName.Text = "æ˘∫‚Œ¬∂»";
						SingleMaxVolName.Text = "µ•ÃÂ◊Ó∏ﬂµÁ—π";
						SingleMinVolName.Text = "µ•ÃÂ◊ÓµÕµÁ—π";
						AvgVolName.Text = "∆Ωæ˘µÁ—π";
						MaxDeltaVolName.Text = "◊Ó¥Û—π≤Ó";
						VolCurrentName.Text = "  µÁ —π  / æ˘∫‚µÁ¡˜";
						BatteryName.Text = "µ•ÃÂ";
						VolCurrentName2.Text = "  µÁ —π  / æ˘∫‚µÁ¡˜";
						BatteryName2.Text = "µ•ÃÂ";
						DSGOnName.Text = "¥Úø™∑≈µÁ";
						DSGOffName.Text = "πÿ±’∑≈µÁ";
						CHGOnName.Text = "¥Úø™≥‰µÁ";
						CHGOffName.Text = "πÿ±’≥‰µÁ";
						SystemOffName.Text = "πÿ±’œµÕ≥";
						BalOffName.Text = "πÿ±’æ˘∫‚";
						BalOnName.Text = "∆Ù∂Øæ˘∫‚";
						BalTestName.Text = "≤‚ ‘æ˘∫‚";
					}
					else
					{
						CmdAngle.Text = "MultiFunc";
						if (autolearnstat)
						{
							CmdLearn.Text = "ExitLearn";
						}
						else
						{
							CmdLearn.Text = "AutoLearn";
						}
						SystemStatName.Text = "System";
						BalStatName.Text = "Ballance";
						TotalVolName.Text = "Voltage";
						TotalCurrName.Text = "Current";
						TotalCapName.Text = "Total";
						RestCapName.Text = "Rest";
						MOSTempName.Text = "MOS Temp";
						BalTempName.Text = "Bal Temp";
						SingleMaxVolName.Text = "MaxVol";
						SingleMinVolName.Text = "MinVol";
						AvgVolName.Text = "AvgVol";
						MaxDeltaVolName.Text = "MaxDeltaVol";
						VolCurrentName.Text = " Volage  /BalCurr";
						BatteryName.Text = "Batt";
						VolCurrentName2.Text = " Voltage /BalCurr";
						BatteryName2.Text = "Batt";
						DSGOnName.Text = "DSG On";
						DSGOffName.Text = "DSG Off";
						CHGOnName.Text = "CHG On";
						CHGOffName.Text = "CHG Off";
						SystemOffName.Text = "Shutdown";
						BalOffName.Text = "Bal Off";
						BalOnName.Text = "Bal On";
						BalTestName.Text = "BalTest";
					}
					switch (rcv_Series)
					{
					default:
						VC1.IsVisible = false;
						VC2.IsVisible = false;
						VC3.IsVisible = false;
						VC4.IsVisible = false;
						VC5.IsVisible = false;
						VC6.IsVisible = false;
						VC7.IsVisible = false;
						VC8.IsVisible = false;
						VC9.IsVisible = false;
						VC10.IsVisible = false;
						VC11.IsVisible = false;
						VC12.IsVisible = false;
						VC13.IsVisible = false;
						VC14.IsVisible = false;
						VC15.IsVisible = false;
						VC16.IsVisible = false;
						VC17.IsVisible = false;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 4:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = false;
						VC6.IsVisible = false;
						VC7.IsVisible = false;
						VC8.IsVisible = false;
						VC9.IsVisible = false;
						VC10.IsVisible = false;
						VC11.IsVisible = false;
						VC12.IsVisible = false;
						VC13.IsVisible = false;
						VC14.IsVisible = false;
						VC15.IsVisible = false;
						VC16.IsVisible = false;
						VC17.IsVisible = false;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 5:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = false;
						VC7.IsVisible = false;
						VC8.IsVisible = false;
						VC9.IsVisible = false;
						VC10.IsVisible = false;
						VC11.IsVisible = false;
						VC12.IsVisible = false;
						VC13.IsVisible = false;
						VC14.IsVisible = false;
						VC15.IsVisible = false;
						VC16.IsVisible = false;
						VC17.IsVisible = false;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 6:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = false;
						VC8.IsVisible = false;
						VC9.IsVisible = false;
						VC10.IsVisible = false;
						VC11.IsVisible = false;
						VC12.IsVisible = false;
						VC13.IsVisible = false;
						VC14.IsVisible = false;
						VC15.IsVisible = false;
						VC16.IsVisible = false;
						VC17.IsVisible = false;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = true;
						VC24.IsVisible = false;
						break;
					case 7:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = false;
						VC9.IsVisible = false;
						VC10.IsVisible = false;
						VC11.IsVisible = false;
						VC12.IsVisible = false;
						VC13.IsVisible = false;
						VC14.IsVisible = false;
						VC15.IsVisible = false;
						VC16.IsVisible = false;
						VC17.IsVisible = false;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = true;
						VC24.IsVisible = false;
						break;
					case 8:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = false;
						VC10.IsVisible = false;
						VC11.IsVisible = false;
						VC12.IsVisible = false;
						VC13.IsVisible = false;
						VC14.IsVisible = false;
						VC15.IsVisible = false;
						VC16.IsVisible = false;
						VC17.IsVisible = false;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 9:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = false;
						VC11.IsVisible = false;
						VC12.IsVisible = false;
						VC13.IsVisible = false;
						VC14.IsVisible = false;
						VC15.IsVisible = false;
						VC16.IsVisible = false;
						VC17.IsVisible = false;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 10:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = false;
						VC12.IsVisible = false;
						VC13.IsVisible = false;
						VC14.IsVisible = false;
						VC15.IsVisible = false;
						VC16.IsVisible = false;
						VC17.IsVisible = false;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 11:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = true;
						VC12.IsVisible = false;
						VC13.IsVisible = false;
						VC14.IsVisible = false;
						VC15.IsVisible = false;
						VC16.IsVisible = false;
						VC17.IsVisible = false;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 12:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = true;
						VC12.IsVisible = true;
						VC13.IsVisible = false;
						VC14.IsVisible = false;
						VC15.IsVisible = false;
						VC16.IsVisible = false;
						VC17.IsVisible = false;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 13:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = true;
						VC12.IsVisible = true;
						VC13.IsVisible = true;
						VC14.IsVisible = false;
						VC15.IsVisible = false;
						VC16.IsVisible = false;
						VC17.IsVisible = false;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 14:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = true;
						VC12.IsVisible = true;
						VC13.IsVisible = true;
						VC14.IsVisible = true;
						VC15.IsVisible = false;
						VC16.IsVisible = false;
						VC17.IsVisible = false;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 15:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = true;
						VC12.IsVisible = true;
						VC13.IsVisible = true;
						VC14.IsVisible = true;
						VC15.IsVisible = true;
						VC16.IsVisible = false;
						VC17.IsVisible = false;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 16:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = true;
						VC12.IsVisible = true;
						VC13.IsVisible = true;
						VC14.IsVisible = true;
						VC15.IsVisible = true;
						VC16.IsVisible = true;
						VC17.IsVisible = false;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 17:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = true;
						VC12.IsVisible = true;
						VC13.IsVisible = true;
						VC14.IsVisible = true;
						VC15.IsVisible = true;
						VC16.IsVisible = true;
						VC17.IsVisible = true;
						VC18.IsVisible = false;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 18:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = true;
						VC12.IsVisible = true;
						VC13.IsVisible = true;
						VC14.IsVisible = true;
						VC15.IsVisible = true;
						VC16.IsVisible = true;
						VC17.IsVisible = true;
						VC18.IsVisible = true;
						VC19.IsVisible = false;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 19:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = true;
						VC12.IsVisible = true;
						VC13.IsVisible = true;
						VC14.IsVisible = true;
						VC15.IsVisible = true;
						VC16.IsVisible = true;
						VC17.IsVisible = true;
						VC18.IsVisible = true;
						VC19.IsVisible = true;
						VC20.IsVisible = false;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 20:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = true;
						VC12.IsVisible = true;
						VC13.IsVisible = true;
						VC14.IsVisible = true;
						VC15.IsVisible = true;
						VC16.IsVisible = true;
						VC17.IsVisible = true;
						VC18.IsVisible = true;
						VC19.IsVisible = true;
						VC20.IsVisible = true;
						VC21.IsVisible = false;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 21:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = true;
						VC12.IsVisible = true;
						VC13.IsVisible = true;
						VC14.IsVisible = true;
						VC15.IsVisible = true;
						VC16.IsVisible = true;
						VC17.IsVisible = true;
						VC18.IsVisible = true;
						VC19.IsVisible = true;
						VC20.IsVisible = true;
						VC21.IsVisible = true;
						VC22.IsVisible = false;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 22:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = true;
						VC12.IsVisible = true;
						VC13.IsVisible = true;
						VC14.IsVisible = true;
						VC15.IsVisible = true;
						VC16.IsVisible = true;
						VC17.IsVisible = true;
						VC18.IsVisible = true;
						VC19.IsVisible = true;
						VC20.IsVisible = true;
						VC21.IsVisible = true;
						VC22.IsVisible = true;
						VC23.IsVisible = false;
						VC24.IsVisible = false;
						break;
					case 23:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = true;
						VC12.IsVisible = true;
						VC13.IsVisible = true;
						VC14.IsVisible = true;
						VC15.IsVisible = true;
						VC16.IsVisible = true;
						VC17.IsVisible = true;
						VC18.IsVisible = true;
						VC19.IsVisible = true;
						VC20.IsVisible = true;
						VC21.IsVisible = true;
						VC22.IsVisible = true;
						VC23.IsVisible = true;
						VC24.IsVisible = false;
						break;
					case 24:
						VC1.IsVisible = true;
						VC2.IsVisible = true;
						VC3.IsVisible = true;
						VC4.IsVisible = true;
						VC5.IsVisible = true;
						VC6.IsVisible = true;
						VC7.IsVisible = true;
						VC8.IsVisible = true;
						VC9.IsVisible = true;
						VC10.IsVisible = true;
						VC11.IsVisible = true;
						VC12.IsVisible = true;
						VC13.IsVisible = true;
						VC14.IsVisible = true;
						VC15.IsVisible = true;
						VC16.IsVisible = true;
						VC17.IsVisible = true;
						VC18.IsVisible = true;
						VC19.IsVisible = true;
						VC20.IsVisible = true;
						VC21.IsVisible = true;
						VC22.IsVisible = true;
						VC23.IsVisible = true;
						VC24.IsVisible = true;
						break;
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Alert("Graph " + ex.ToString());
				}
				return true;
			});
			Assembly assembly = GetType().GetTypeInfo().Assembly;
			using (Stream stream = assembly.GetManifestResourceStream("MotorNet6.images.zuotong.png"))
			{
				zuotong_bitmap = SKBitmap.Decode(stream);
			}
			using (Stream stream2 = assembly.GetManifestResourceStream("MotorNet6.images.push1.bmp"))
			{
				push1_bitmap = SKBitmap.Decode(stream2);
			}
			using (Stream stream3 = assembly.GetManifestResourceStream("MotorNet6.images.error.bmp"))
			{
				error_bitmap = SKBitmap.Decode(stream3);
			}
			using (Stream stream4 = assembly.GetManifestResourceStream("MotorNet6.images.ok.bmp"))
			{
				ok_bitmap = SKBitmap.Decode(stream4);
			}
			using (Stream stream5 = assembly.GetManifestResourceStream("MotorNet6.images.rollD.bmp"))
			{
				rollD_bitmap = SKBitmap.Decode(stream5);
			}
			using (Stream stream6 = assembly.GetManifestResourceStream("MotorNet6.images.rollN.bmp"))
			{
				rollN_bitmap = SKBitmap.Decode(stream6);
			}
			using (Stream stream7 = assembly.GetManifestResourceStream("MotorNet6.images.rollR.bmp"))
			{
				rollR_bitmap = SKBitmap.Decode(stream7);
			}
			using (Stream stream8 = assembly.GetManifestResourceStream("MotorNet6.images.stop.bmp"))
			{
				stop_bitmap = SKBitmap.Decode(stream8);
			}
			using (Stream stream9 = assembly.GetManifestResourceStream("MotorNet6.images.motortemp_picture.bmp"))
			{
				motortemp_bitmap = SKBitmap.Decode(stream9);
			}
			using (Stream stream10 = assembly.GetManifestResourceStream("MotorNet6.images.throttle_picture.bmp"))
			{
				throttle_bitmap = SKBitmap.Decode(stream10);
			}
			using (Stream stream11 = assembly.GetManifestResourceStream("MotorNet6.images.power_picture.bmp"))
			{
				power_bitmap = SKBitmap.Decode(stream11);
			}
			using (Stream stream12 = assembly.GetManifestResourceStream("MotorNet6.images.batt_picture.png"))
			{
				batt_bitmap = SKBitmap.Decode(stream12);
			}
			using (Stream stream13 = assembly.GetManifestResourceStream("MotorNet6.images.phasec_pictrue.bmp"))
			{
				phasec_bitmap = SKBitmap.Decode(stream13);
			}
			using (Stream stream14 = assembly.GetManifestResourceStream("MotorNet6.images.Linecurr_pictrue.bmp"))
			{
				linecurr_bitmap = SKBitmap.Decode(stream14);
			}
			MessagingCenter.Subscribe(this, "ReadParaMeter", delegate(ConnectPage sender, byte[] arg)
			{
				try
				{
					if (arg[0] == 170 && arg.Length == 16)
					{
						if ((arg[1] & 0xC0) == 128)
						{
							App.rcvFrames++;
							int num = arg[1] & 0x7F;
							if (num < 55)
							{
								int num2 = FlashReadAddr[num];
								if (App.CN)
								{
									if (rcv_kzqVersion0 > '6')
									{
										frameCnt.Text = App.rcvFrames.ToString("Ω” ’÷°0");
									}
									else
									{
										frameCnt.Text = App.rcvFrames.ToString("Ω” ’ ˝æ›≤ªÕÍ’˚");
									}
								}
								else if (rcv_kzqVersion0 > '6')
								{
									frameCnt.Text = App.rcvFrames.ToString("Frames0");
								}
								else
								{
									frameCnt.Text = App.rcvFrames.ToString("Receiving");
								}
								switch (num2)
								{
								case 226:
								{
									ControllerFoc.IsVisible = true;
									ControllerBMS.IsVisible = false;
									App.bms = false;
									int num4 = arg[2] & 0xF;
									m_gear = num4 & 3;
									m_XSControl = (num4 >> 2) & 3;
									App.m_xscontrol = m_XSControl;
									num4 = (arg[2] & 0x30) >> 4;
									rollingV = (arg[2] >> 5) & 1;
									reversing = (arg[2] >> 4) & 1;
									if (rollingV == 0)
									{
										m_roll = 0;
									}
									else if (reversing == 0)
									{
										if (m_gear < 2 || m_gear == 3)
										{
											m_roll = 1;
										}
										else
										{
											m_roll = -1;
										}
									}
									else if (m_gear >= 2 || m_gear == 3)
									{
										m_roll = 1;
									}
									else
									{
										m_roll = -1;
									}
									App.PassOk = (arg[3] & 0x18) >> 3;
									App.CompPhoneOk = (arg[2] & 0x80) == 128;
									if ((arg[3] & 0x80) != 0)
									{
										function_state = 128;
									}
									else
									{
										function_state = 0;
									}
									if (App.CN)
									{
										if (arg[4] == 0 && (arg[5] & 0x7F) == 0)
										{
											ErrorNum++;
											if (ErrorNum == 6)
											{
												m_BreakDown = "œµÕ≥’˝≥£";
												Error = false;
												alarmMessage.Text = m_BreakDown;
												alarmMessage.TextColor = Color.Blue;
											}
											App.hallalarm = 0;
										}
										else
										{
											m_BreakDown = "";
											if ((arg[4] & 1) != 0)
											{
												m_BreakDown += "1.µÁª˙ªÙ∂˚π ’œ";
												App.hallalarm = 1;
											}
											else
											{
												App.hallalarm = 0;
											}
											if ((arg[4] & 2) != 0)
											{
												m_BreakDown += "2.”Õ√≈Ã§∞Âπ ’œ";
											}
											if ((arg[4] & 4) != 0)
											{
												m_BreakDown += "3.µÁ¡˜±£ª§÷ÿ∆Ù";
											}
											if ((arg[4] & 8) != 0)
											{
												m_BreakDown += "4.œ‡µÁ¡˜Õª±‰";
											}
											if ((arg[4] & 0x10) != 0)
											{
												if ((Global_state2 & 0x8000) != 0)
												{
													m_BreakDown += "5.π˝—ππ ’œ";
												}
												else
												{
													m_BreakDown += "18.«∑—ππ ’œ";
												}
											}
											if ((arg[4] & 0x20) != 0)
											{
												m_BreakDown += "6.∑¿µ¡±®æØ";
												App.fdalarm = true;
											}
											else
											{
												App.fdalarm = false;
											}
											if ((arg[4] & 0x40) != 0)
											{
												m_BreakDown += "7.µÁª˙π˝Œ¬";
											}
											if ((arg[4] & 0x80) != 0)
											{
												m_BreakDown += "8.øÿ÷∆∆˜π˝Œ¬";
											}
											if ((arg[5] & 1) != 0)
											{
												m_BreakDown += "9.œ‡µÁ¡˜“Á≥ˆ";
											}
											if ((arg[5] & 2) != 0)
											{
												m_BreakDown += "10.œ‡œﬂ¡„µ„π ’œ";
											}
											if ((arg[5] & 4) != 0)
											{
												if ((Global_state1 & 0x800) != 0)
												{
													m_BreakDown += "17.»±œ‡π ’œ";
												}
												else
												{
													m_BreakDown += "11.œ‡œﬂ∂Ã¬∑π ’œ";
												}
											}
											if ((arg[5] & 8) != 0)
											{
												m_BreakDown += "12.œﬂµÁ¡˜¡„µ„π ’œ";
											}
											if ((arg[5] & 0x10) != 0)
											{
												m_BreakDown += "13.MOSFET…œ«≈π ’œ";
											}
											if ((arg[5] & 0x20) != 0)
											{
												m_BreakDown += "14.MOSFETœ¬«≈π ’œ";
											}
											if ((arg[5] & 0x40) != 0)
											{
												m_BreakDown += "15.MOEµÁ¡˜±£ª§";
											}
											if ((motor_stop_state & 0x8000) != 0)
											{
												m_BreakDown += "16.…≤≥µπ ’œ";
											}
											if (arg[4] == 0 && (arg[5] & 0x7F) == 0)
											{
												Error = false;
											}
											else
											{
												Error = true;
											}
											alarmMessage.Text = m_BreakDown;
											alarmMessage.TextColor = Color.Red;
											ErrorNum = 0;
										}
									}
									else if (arg[4] == 0 && (arg[5] & 0x7F) == 0)
									{
										ErrorNum++;
										if (ErrorNum == 6)
										{
											m_BreakDown = "System OK";
											Error = false;
											alarmMessage.Text = m_BreakDown;
											alarmMessage.TextColor = Color.Blue;
										}
										App.hallalarm = 0;
									}
									else
									{
										m_BreakDown = "";
										if ((arg[4] & 1) != 0)
										{
											m_BreakDown += "1.Motor Hall Error";
											App.hallalarm = 1;
										}
										else
										{
											App.hallalarm = 0;
										}
										if ((arg[4] & 2) != 0)
										{
											m_BreakDown += "2.Throttle Error";
										}
										if ((arg[4] & 4) != 0)
										{
											m_BreakDown += "3.Current Protect Restert";
										}
										if ((arg[4] & 8) != 0)
										{
											m_BreakDown += "4.Phase Current Surge Protect";
										}
										if ((arg[4] & 0x10) != 0)
										{
											if ((Global_state2 & 0x8000) != 0)
											{
												m_BreakDown += "5.Over Voltage Alarm";
											}
											else
											{
												m_BreakDown += "18.Under Voltage Alarm";
											}
										}
										if ((arg[4] & 0x20) != 0)
										{
											m_BreakDown += "6.Alarm Protect";
											App.fdalarm = true;
										}
										else
										{
											App.fdalarm = false;
										}
										if ((arg[4] & 0x40) != 0)
										{
											m_BreakDown += "7.Motor Temp Protect";
										}
										if ((arg[4] & 0x80) != 0)
										{
											m_BreakDown += "8.Controller Temp Protect";
										}
										if ((arg[5] & 1) != 0)
										{
											m_BreakDown += "9.Phase Current Overflow Protect";
										}
										if ((arg[5] & 2) != 0)
										{
											m_BreakDown += "10.Phase Zero Error";
										}
										if ((arg[5] & 4) != 0)
										{
											if ((Global_state1 & 0x800) != 0)
											{
												m_BreakDown += "17.Phase Lost Alarm";
											}
											else
											{
												m_BreakDown += "11.Phase Short Alarm";
											}
										}
										if ((arg[5] & 8) != 0)
										{
											m_BreakDown += "12.Line Current Zero Error";
										}
										if ((arg[5] & 0x10) != 0)
										{
											m_BreakDown += "13.MOSFET High Side Error";
										}
										if ((arg[5] & 0x20) != 0)
										{
											m_BreakDown += "14.MOSFET Low Side Error";
										}
										if ((arg[5] & 0x40) != 0)
										{
											m_BreakDown += "15.MOE Current Protect";
										}
										if ((motor_stop_state & 0x8000) != 0)
										{
											m_BreakDown += "16.Brake Alarm";
										}
										if (arg[4] == 0 && (arg[5] & 0x7F) == 0)
										{
											Error = false;
										}
										else
										{
											Error = true;
										}
										alarmMessage.Text = m_BreakDown;
										alarmMessage.TextColor = Color.Red;
										ErrorNum = 0;
									}
									if ((arg[5] & 0x80) == 128)
									{
										m_stop = true;
									}
									else
									{
										m_stop = false;
									}
									App.Stop = m_stop;
									modulation = (float)(int)arg[6] / 128f;
									short motortemp = (short)(arg[9] * 256 + arg[8]);
									m_MeasureSpeed = motortemp;
									break;
								}
								case 232:
								{
									short motortemp = (short)(arg[3] * 256 + arg[2]);
									voltage = (float)motortemp / 10f;
									motortemp = (short)(arg[7] * 256 + arg[6]);
									linecurr = (float)motortemp / 4f;
									m_InPower = voltage * linecurr;
									ThrottleDepth = arg[13] * 256 + arg[12];
									if (App.CN)
									{
										lineCurr.Text = linecurr.ToString("œﬂµÁ¡˜£∫0.0A");
										lineVoltage.Text = voltage.ToString("œﬂµÁ—π£∫0.0V");
										throttleVol.Text = $"”Õ√≈£∫{ThrottleDepth} /" + throttleVoltage.ToString("0.00V");
									}
									else
									{
										lineCurr.Text = linecurr.ToString("Current:0.0A");
										lineVoltage.Text = voltage.ToString("Voltage£∫0.0V");
										throttleVol.Text = $"Throttle£∫{ThrottleDepth} /" + throttleVoltage.ToString("0.00V");
									}
									break;
								}
								case 238:
								{
									rcv_turns = (ushort)(arg[5] * 256 + arg[4]);
									int num5 = arg[6] * 65536 + arg[7] * 256 + arg[8];
									m_phaseAcurr = (float)(1.953125 * Math.Sqrt(num5));
									num5 = arg[9] * 65536 + arg[10] * 256 + arg[11];
									m_phaseCcurr = (float)(1.953125 * Math.Sqrt(num5));
									if (App.CN)
									{
										phaseA.Text = m_phaseAcurr.ToString("Aœ‡µÁ¡˜£∫0.0A");
										phaseC.Text = m_phaseCcurr.ToString("Cœ‡µÁ¡˜£∫0.0A");
									}
									else
									{
										phaseA.Text = m_phaseAcurr.ToString("APhaseCurr£∫0.0A");
										phaseC.Text = m_phaseCcurr.ToString("CPhaseCurr£∫0.0A");
									}
									break;
								}
								case 208:
								{
									rcv_AVGPower = arg[5] * 4;
									rcv_AVGSpeed = arg[8];
									rcv_WheelRatio = arg[6];
									rcv_WheelRadius = arg[7];
									rcv_WheelWidth = arg[9];
									rcv_rateratio = arg[11] * 256 + arg[10];
									R = rcv_WheelRadius * 1270 + rcv_WheelWidth * rcv_WheelRatio;
									double num8 = 0.0037699113633689247 * (double)R / (double)rcv_rateratio;
									speed = (float)((double)m_MeasureSpeed * num8);
									AVGPower.Text = rcv_AVGPower.ToString("0Wh/Km");
									AVGSpeed.Text = rcv_AVGSpeed.ToString("0Km/h");
									break;
								}
								case 214:
								{
									short motortemp = (short)(arg[13] * 256 + arg[12]);
									m_mostemp = motortemp;
									Global_state1 = arg[5] * 256 + arg[4];
									Global_state2 = arg[7] * 256 + arg[6];
									Global_state3 = arg[9] * 256 + arg[8];
									Global_state4 = arg[11] * 256 + arg[10];
									autolearnstat = (Global_state1 & 0x20) != 0;
									if (App.CN)
									{
										if ((Global_state2 & 8) != 0)
										{
											weakStatus.Text = "»ı¥≈";
											weakStatus.TextColor = Color.Green;
										}
										else
										{
											weakStatus.Text = "MTPA";
											weakStatus.TextColor = Color.DarkGreen;
										}
										if (autolearnstat)
										{
											learnStat.Text = "◊‘—ßœ∞";
										}
										else
										{
											learnStat.Text = "";
										}
										if ((Global_state1 & 0x2000) != 0)
										{
											motorStat.Text = "¬Ì¥Ôø™∆Ù";
											motorStat.TextColor = Color.DarkBlue;
										}
										else
										{
											motorStat.Text = "¬Ì¥Ôπÿ±’";
											motorStat.TextColor = Color.Black;
										}
									}
									else
									{
										if ((Global_state2 & 8) != 0)
										{
											weakStatus.Text = "Weak";
											weakStatus.TextColor = Color.Green;
										}
										else
										{
											weakStatus.Text = "MTPA";
											weakStatus.TextColor = Color.DarkGreen;
										}
										if (autolearnstat)
										{
											learnStat.Text = "AutoLearn";
										}
										else
										{
											learnStat.Text = "";
										}
										if ((Global_state1 & 0x2000) != 0)
										{
											motorStat.Text = "MotorRun";
											motorStat.TextColor = Color.DarkBlue;
										}
										else
										{
											motorStat.Text = "MotorStop";
											motorStat.TextColor = Color.Black;
										}
									}
									break;
								}
								case 250:
									motor_stop_state = arg[7] * 256 + arg[6];
									motor_running_state = arg[11] * 256;
									break;
								case 18:
									rcv_PolePairs = arg[6];
									break;
								case 105:
									rcv_DistanceL = arg[11] * 256 + arg[10];
									break;
								case 124:
								{
									App.crc_infoc0 = (uint)((arg[7] * 256 + arg[6]) * 65536 + arg[5] * 256 + arg[4]);
									App.crc_infoc1 = (uint)((arg[11] * 256 + arg[10]) * 65536 + arg[9] * 256 + arg[8]);
									rcv_TotalTime = App.crc_infoc0;
									double num6 = (float)rcv_TotalTime / 60f;
									rcv_DistanceH = arg[13] * 256 + arg[12];
									rcv_Distance = (rcv_DistanceH << 16) + rcv_DistanceL;
									double num7 = (float)rcv_Distance / 10f;
									if (App.CN)
									{
										AVGPOWERT.Text = "∆Ωæ˘ƒ‹∫ƒ";
										AVGSPEEDT.Text = "∆Ωæ˘ ±ÀŸ";
										TotalTime.Text = num6.ToString("π§◊˜ ±≥§: 0.0h");
										Distance.Text = num7.ToString("◊‹¿Ô≥Ã: 0.0Km");
									}
									else
									{
										AVGPOWERT.Text = "AVG Power";
										AVGSPEEDT.Text = "AVG Speed";
										TotalTime.Text = num6.ToString("WorkTime: 0.0h");
										Distance.Text = num7.ToString("ODO: 0.0Km");
									}
									break;
								}
								case 130:
									throttleVoltage = (float)(arg[3] * 256 + arg[2]) * 0.01f;
									if (App.CN)
									{
										throttleVol.Text = $"”Õ√≈£∫{ThrottleDepth} /" + throttleVoltage.ToString("0.00V");
									}
									else
									{
										throttleVol.Text = $"Throttle£∫{ThrottleDepth} /" + throttleVoltage.ToString("0.00V");
									}
									rcv_kzqVersion0 = (char)arg[11];
									break;
								case 154:
								{
									ushort num3 = (ushort)(arg[7] * 256 + arg[6]);
									AlarmRecord.Text = "CH " + App.channel;
									if (App.CN)
									{
										AlarmRecord.Text += $"º«¬º{(num3 >> 8) & 0xF}{(num3 >> 4) & 0xF}{num3 & 0xF}";
									}
									else
									{
										AlarmRecord.Text += $"Rec{(num3 >> 8) & 0xF}{(num3 >> 4) & 0xF}{num3 & 0xF}";
									}
									break;
								}
								case 244:
								{
									m_battcap = arg[5];
									App.SOC = m_battcap;
									short motortemp = (short)(arg[3] * 256 + arg[2]);
									m_motortemp = motortemp;
									break;
								}
								}
							}
						}
						else
						{
							int num9 = 0;
							for (int j = 0; j < 14; j++)
							{
								num9 += arg[j];
							}
							int num10 = arg[14] * 256 + arg[15];
							if (num10 == num9)
							{
								App.rcvFrames++;
								if (App.CN)
								{
									frameCnt2.Text = App.rcvFrames.ToString("Ω” ’÷°0");
									if (rcv_kzqVersion0 > '6')
									{
										frameCnt.Text = App.rcvFrames.ToString("Ω” ’÷°0");
									}
									else
									{
										frameCnt.Text = App.rcvFrames.ToString("Ω” ’ ˝æ›≤ªÕÍ’˚");
									}
								}
								else
								{
									frameCnt2.Text = App.rcvFrames.ToString("RcvFrames0");
									if (rcv_kzqVersion0 > '6')
									{
										frameCnt.Text = App.rcvFrames.ToString("RcvFrames0");
									}
									else
									{
										frameCnt.Text = App.rcvFrames.ToString("Receiving...");
									}
								}
								App.crc_infoc0 = 0u;
								App.crc_infoc1 = 0u;
								switch (arg[1])
								{
								case 0:
								{
									ControllerFoc.IsVisible = true;
									ControllerBMS.IsVisible = false;
									App.bms = false;
									int num23 = arg[4] & 0xF;
									m_gear = num23 & 3;
									m_XSControl = ((num23 >> 2) ^ 2) & 3;
									App.m_xscontrol = m_XSControl;
									num23 = (arg[4] & 0xF0) >> 4;
									if (num23 == 0)
									{
										m_roll = 0;
									}
									if (num23 == 1)
									{
										if (m_gear < 2 || m_gear == 3)
										{
											m_roll = 1;
										}
										else
										{
											m_roll = -1;
										}
									}
									if (num23 >= 2)
									{
										if (m_gear >= 2 || m_gear == 3)
										{
											m_roll = 1;
										}
										else
										{
											m_roll = -1;
										}
									}
									App.PassOk = (arg[5] & 0xC) >> 2;
									App.CompPhoneOk = false;
									m_EABS = (arg[5] & 3) == 2;
									short num16 = (short)(arg[6] * 256 + arg[7]);
									m_MeasureSpeed = num16;
									if (App.CN)
									{
										if (arg[8] == 0 && (arg[9] & 0x7F) == 0)
										{
											ErrorNum++;
											if (ErrorNum == 6)
											{
												m_BreakDown = "œµÕ≥’˝≥£";
												Error = false;
												alarmMessage.Text = m_BreakDown;
												alarmMessage.TextColor = Color.Blue;
												alarmMessage2.Text = m_BreakDown;
												alarmMessage2.TextColor = Color.Blue;
											}
											App.hallalarm = 0;
										}
										else
										{
											m_BreakDown = "";
											if ((arg[8] & 1) != 0)
											{
												App.hallalarm = 1;
												m_BreakDown += "1.µÁª˙ªÙ∂˚π ’œ";
											}
											else
											{
												App.hallalarm = 0;
											}
											if ((arg[8] & 2) != 0)
											{
												m_BreakDown += "2.”Õ√≈Ã§∞Âπ ’œ";
											}
											if ((arg[8] & 4) != 0)
											{
												m_BreakDown += "3.µÁ¡˜±£ª§÷ÿ∆Ù";
											}
											if ((arg[8] & 8) != 0)
											{
												m_BreakDown += "4.œ‡µÁ¡˜Õª±‰";
											}
											if ((arg[8] & 0x10) != 0)
											{
												if ((Global_state2 & 0x8000) != 0)
												{
													m_BreakDown += "5.π˝—ππ ’œ";
												}
												else
												{
													m_BreakDown += "18.«∑—ππ ’œ";
												}
											}
											if ((arg[8] & 0x20) != 0)
											{
												m_BreakDown += "6.∑¿µ¡±®æØ";
												App.fdalarm = true;
											}
											else
											{
												App.fdalarm = false;
											}
											if ((arg[8] & 0x40) != 0)
											{
												m_BreakDown += "7.µÁª˙π˝Œ¬";
											}
											if ((arg[8] & 0x80) != 0)
											{
												m_BreakDown += "8.øÿ÷∆∆˜π˝Œ¬";
											}
											if ((arg[9] & 1) != 0)
											{
												m_BreakDown += "9.œ‡µÁ¡˜“Á≥ˆ";
											}
											if ((arg[9] & 2) != 0)
											{
												m_BreakDown += "10.œ‡œﬂ¡„µ„π ’œ";
											}
											if ((arg[9] & 4) != 0)
											{
												if ((Global_state1 & 0x800) != 0)
												{
													m_BreakDown += "17.»±œ‡π ’œ";
												}
												else
												{
													m_BreakDown += "11.œ‡œﬂ∂Ã¬∑π ’œ";
												}
											}
											if ((arg[9] & 8) != 0)
											{
												m_BreakDown += "12.œﬂµÁ¡˜¡„µ„π ’œ";
											}
											if ((arg[9] & 0x10) != 0)
											{
												if ((arg[9] & 0x20) != 0)
												{
													m_BreakDown += "ºŸªı?";
												}
												else
												{
													m_BreakDown += "13.MOSFET…œ«≈π ’œ";
												}
											}
											if ((arg[9] & 0x20) != 0)
											{
												m_BreakDown += "14.MOSFETœ¬«≈π ’œ";
											}
											if ((arg[9] & 0x40) != 0)
											{
												m_BreakDown += "15.MOEµÁ¡˜±£ª§";
											}
											if ((motor_stop_state & 0x8000) != 0)
											{
												m_BreakDown += "16.…≤≥µπ ’œ";
											}
											if (arg[8] == 0 && (arg[9] & 0x7F) == 0)
											{
												Error = false;
											}
											else
											{
												Error = true;
											}
											alarmMessage.Text = m_BreakDown;
											alarmMessage.TextColor = Color.Red;
											alarmMessage2.Text = m_BreakDown;
											alarmMessage2.TextColor = Color.Red;
											ErrorNum = 0;
										}
									}
									else if (arg[8] == 0 && (arg[9] & 0x7F) == 0)
									{
										ErrorNum++;
										if (ErrorNum == 6)
										{
											m_BreakDown = "System OK";
											Error = false;
											alarmMessage.Text = m_BreakDown;
											alarmMessage.TextColor = Color.Blue;
											alarmMessage2.Text = m_BreakDown;
											alarmMessage2.TextColor = Color.Blue;
										}
										App.hallalarm = 0;
									}
									else
									{
										m_BreakDown = "";
										if ((arg[8] & 1) != 0)
										{
											App.hallalarm = 1;
											m_BreakDown += "1.Motor Hall Error";
										}
										else
										{
											App.hallalarm = 0;
										}
										if ((arg[8] & 2) != 0)
										{
											m_BreakDown += "2.Throttle Error";
										}
										if ((arg[8] & 4) != 0)
										{
											m_BreakDown += "3.Current Protect Restert";
										}
										if ((arg[8] & 8) != 0)
										{
											m_BreakDown += "4.Phase Current Surge Protect";
										}
										if ((arg[8] & 0x10) != 0)
										{
											if ((Global_state2 & 0x8000) != 0)
											{
												m_BreakDown += "5.Over Voltage Alarm";
											}
											else
											{
												m_BreakDown += "18.Under Voltage Alarm";
											}
										}
										if ((arg[8] & 0x20) != 0)
										{
											m_BreakDown += "6.Alarm Protect";
											App.fdalarm = true;
										}
										else
										{
											App.fdalarm = false;
										}
										if ((arg[8] & 0x40) != 0)
										{
											m_BreakDown += "7.Motor Temp Protect";
										}
										if ((arg[8] & 0x80) != 0)
										{
											m_BreakDown += "8.Controller Temp Protect";
										}
										if ((arg[9] & 1) != 0)
										{
											m_BreakDown += "9.Phase Current Overflow Protect";
										}
										if ((arg[9] & 2) != 0)
										{
											m_BreakDown += "10.Phase Zero Error";
										}
										if ((arg[9] & 4) != 0)
										{
											if ((Global_state1 & 0x800) != 0)
											{
												m_BreakDown += "17.Phase Lost Alarm";
											}
											else
											{
												m_BreakDown += "11.Phase Short Alarm";
											}
										}
										if ((arg[9] & 8) != 0)
										{
											m_BreakDown += "12.Line Current Zero Error";
										}
										if ((arg[9] & 0x10) != 0)
										{
											if ((arg[9] & 0x20) != 0)
											{
												m_BreakDown += "Fake Controller?";
											}
											else
											{
												m_BreakDown += "13.MOSFET High Side Error";
											}
										}
										if ((arg[9] & 0x20) != 0)
										{
											m_BreakDown += "14.MOSFET Low Side Error";
										}
										if ((arg[9] & 0x40) != 0)
										{
											m_BreakDown += "15.MOE Current Protect";
										}
										if ((motor_stop_state & 0x8000) != 0)
										{
											m_BreakDown += "16.Brake Alarm";
										}
										if (arg[8] == 0 && (arg[9] & 0x7F) == 0)
										{
											Error = false;
										}
										else
										{
											Error = true;
										}
										alarmMessage.Text = m_BreakDown;
										alarmMessage.TextColor = Color.Red;
										alarmMessage2.Text = m_BreakDown;
										alarmMessage2.TextColor = Color.Red;
										ErrorNum = 0;
									}
									if ((arg[9] & 0x80) == 128)
									{
										m_stop = true;
									}
									else
									{
										m_stop = false;
									}
									App.Stop = m_stop;
									break;
								}
								case 1:
								{
									short num16 = (short)(arg[2] * 256 + arg[3]);
									voltage = (float)num16 / 10f;
									num16 = (short)(arg[4] * 256 + arg[5]);
									linecurr = (float)num16 / 4f;
									m_InPower = voltage * linecurr;
									modulation = (float)(int)arg[6] / 128f;
									ThrottleDepth = arg[12] * 256 + arg[13];
									if (App.CN)
									{
										if ((arg[7] & 1) != 0)
										{
											weakStatus.Text = "»ı¥≈";
											weakStatus.TextColor = Color.Green;
										}
										else
										{
											weakStatus.Text = "MTPA";
											weakStatus.TextColor = Color.DarkGreen;
										}
										lineCurr.Text = linecurr.ToString("œﬂµÁ¡˜£∫0.0A");
										lineVoltage.Text = voltage.ToString("œﬂµÁ—π£∫0.0V");
										throttleVol.Text = $"”Õ√≈£∫{ThrottleDepth} /" + throttleVoltage.ToString("0.00V");
									}
									else
									{
										if ((arg[7] & 1) != 0)
										{
											weakStatus.Text = "Weak";
											weakStatus.TextColor = Color.Green;
										}
										else
										{
											weakStatus.Text = "MTPA";
											weakStatus.TextColor = Color.DarkGreen;
										}
										lineCurr.Text = linecurr.ToString("Current:0.0A");
										lineVoltage.Text = voltage.ToString("Voltage£∫0.0V");
										throttleVol.Text = $"Throttle£∫{ThrottleDepth} /" + throttleVoltage.ToString("0.00V");
									}
									break;
								}
								case 2:
									num10 = arg[2] * 65536 + arg[3] * 256 + arg[4];
									m_phaseAcurr = (float)(1.953125 * Math.Sqrt(num10));
									num10 = arg[9] * 65536 + arg[10] * 256 + arg[11];
									m_phaseCcurr = (float)(1.953125 * Math.Sqrt(num10));
									if (App.CN)
									{
										phaseA.Text = m_phaseAcurr.ToString("Aœ‡µÁ¡˜£∫0.0A");
										phaseC.Text = m_phaseCcurr.ToString("Cœ‡µÁ¡˜£∫0.0A");
									}
									else
									{
										phaseA.Text = m_phaseAcurr.ToString("APhaseCurr£∫0.0A");
										phaseC.Text = m_phaseCcurr.ToString("CPhaseCurr£∫0.0A");
									}
									break;
								case 3:
									rcv_phaseARatio = arg[8] * 256 + arg[9];
									rcv_phaseCRatio = arg[10] * 256 + arg[11];
									break;
								case 4:
								{
									short num16 = arg[4];
									if (num16 > 200)
									{
										m_motortemp -= 256;
									}
									m_mostemp = num16;
									rcv_lineCurrRatio = arg[8] * 256 + arg[9];
									break;
								}
								case 8:
								{
									rcv_PolePairs = arg[10];
									short num16 = (short)(arg[12] * 256 + arg[13]);
									break;
								}
								case 10:
									m_battcap = arg[10];
									App.SOC = m_battcap;
									break;
								case 13:
									rcv_kzqVersion0 = (char)arg[10];
									throttleVoltage = (float)(arg[4] * 256 + arg[5]) * 3.3f * 1.5f / 4096f;
									if (App.CN)
									{
										throttleVol.Text = $"”Õ√≈£∫{ThrottleDepth} /" + throttleVoltage.ToString("0.00V");
									}
									else
									{
										throttleVol.Text = $"Throttle£∫{ThrottleDepth} /" + throttleVoltage.ToString("0.00V");
									}
									m_motortemp = arg[2];
									break;
								case 15:
									motor_stop_state = arg[4] * 256 + arg[5];
									function_state = arg[2];
									motor_running_state = arg[3] * 256;
									Global_state1 = arg[6] * 256 + arg[7];
									Global_state2 = arg[8] * 256 + arg[9];
									Global_state3 = arg[10] * 256 + arg[11];
									Global_state4 = arg[12] * 256 + arg[13];
									autolearnstat = (Global_state1 & 0x20) != 0;
									if (App.CN)
									{
										if (autolearnstat)
										{
											learnStat.Text = "◊‘—ßœ∞";
										}
										else
										{
											learnStat.Text = "";
										}
										if ((Global_state1 & 0x2000) != 0)
										{
											motorStat.Text = "¬Ì¥Ôø™∆Ù";
											motorStat.TextColor = Color.DarkBlue;
										}
										else
										{
											motorStat.Text = "¬Ì¥Ôπÿ±’";
											motorStat.TextColor = Color.Black;
										}
									}
									else
									{
										if (autolearnstat)
										{
											learnStat.Text = "AutoLearn";
										}
										else
										{
											learnStat.Text = "";
										}
										if ((Global_state1 & 0x2000) != 0)
										{
											motorStat.Text = "MotorRun";
											motorStat.TextColor = Color.DarkBlue;
										}
										else
										{
											motorStat.Text = "MotorStop";
											motorStat.TextColor = Color.Black;
										}
									}
									break;
								case 18:
									if (App.bms)
									{
										rcv_Series = arg[8];
									}
									break;
								case 32:
								{
									App.bms = true;
									ControllerFoc.IsVisible = false;
									ControllerBMS.IsVisible = true;
									for (int num22 = 0; num22 < 6; num22++)
									{
										short num16 = (short)(arg[num22 * 2 + 2] * 256 + arg[num22 * 2 + 3]);
										voltages[num22] = num16;
										if (num16 > 4110)
										{
											caps[num22] = 127;
										}
										else if (num16 < 3600)
										{
											caps[num22] = 0;
										}
										else
										{
											caps[num22] = (num16 - 3600) / 4;
										}
									}
									break;
								}
								case 33:
								{
									for (int m = 0; m < 6; m++)
									{
										short num16 = (short)(arg[m * 2 + 2] * 256 + arg[m * 2 + 3]);
										voltages[m + 6] = num16;
										if (num16 > 4110)
										{
											caps[m + 6] = 127;
										}
										else if (num16 < 3600)
										{
											caps[m + 6] = 0;
										}
										else
										{
											caps[m + 6] = (num16 - 3600) / 4;
										}
									}
									break;
								}
								case 34:
								{
									for (int n = 0; n < 6; n++)
									{
										short num16 = (short)(arg[n * 2 + 2] * 256 + arg[n * 2 + 3]);
										voltages[n + 12] = num16;
										if (num16 > 4110)
										{
											caps[n + 12] = 127;
										}
										else if (num16 < 3600)
										{
											caps[n + 12] = 0;
										}
										else
										{
											caps[n + 12] = (num16 - 3600) / 4;
										}
									}
									break;
								}
								case 35:
								{
									for (int num25 = 0; num25 < 6; num25++)
									{
										short num16 = (short)(arg[num25 * 2 + 2] * 256 + arg[num25 * 2 + 3]);
										voltages[num25 + 18] = num16;
										if (num16 > 4110)
										{
											caps[num25 + 18] = 127;
										}
										else if (num16 < 3600)
										{
											caps[num25 + 18] = 0;
										}
										else
										{
											caps[num25 + 18] = (num16 - 3600) / 4;
										}
									}
									break;
								}
								case 36:
								{
									for (int num21 = 0; num21 < 6; num21++)
									{
										short num16 = (short)(arg[num21 * 2 + 2] * 256 + arg[num21 * 2 + 3]);
										currents[num21] = num16;
									}
									float num17 = (float)voltages[0] / 1000f;
									float num18 = (float)currents[0] / 1000f;
									VC1.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									if (NeedBal[0] == 0)
									{
										VC1.TextColor = Color.FromRgb(255 - 2 * caps[0], caps[0], 0);
									}
									else
									{
										VC1.TextColor = Color.Blue;
									}
									num17 = (float)voltages[1] / 1000f;
									num18 = (float)currents[1] / 1000f;
									VC2.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									if (NeedBal[1] == 0)
									{
										VC2.TextColor = Color.FromRgb(255 - 2 * caps[1], caps[1], 0);
									}
									else
									{
										VC2.TextColor = Color.Blue;
									}
									num17 = (float)voltages[2] / 1000f;
									num18 = (float)currents[2] / 1000f;
									VC3.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[3] / 1000f;
									num18 = (float)currents[3] / 1000f;
									VC4.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[4] / 1000f;
									num18 = (float)currents[4] / 1000f;
									VC5.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[5] / 1000f;
									num18 = (float)currents[5] / 1000f;
									VC6.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									if (NeedBal[2] == 0)
									{
										VC3.TextColor = Color.FromRgb(255 - 2 * caps[2], caps[2], 0);
									}
									else
									{
										VC3.TextColor = Color.Blue;
									}
									if (NeedBal[3] == 0)
									{
										VC4.TextColor = Color.FromRgb(255 - 2 * caps[3], caps[3], 0);
									}
									else
									{
										VC4.TextColor = Color.Blue;
									}
									if (NeedBal[4] == 0)
									{
										VC5.TextColor = Color.FromRgb(255 - 2 * caps[4], caps[4], 0);
									}
									else
									{
										VC5.TextColor = Color.Blue;
									}
									if (NeedBal[5] == 0)
									{
										VC6.TextColor = Color.FromRgb(255 - 2 * caps[5], caps[5], 0);
									}
									else
									{
										VC6.TextColor = Color.Blue;
									}
									break;
								}
								case 37:
								{
									for (int num20 = 0; num20 < 6; num20++)
									{
										short num16 = (short)(arg[num20 * 2 + 2] * 256 + arg[num20 * 2 + 3]);
										currents[num20 + 6] = num16;
									}
									float num17 = (float)voltages[6] / 1000f;
									float num18 = (float)currents[6] / 1000f;
									VC7.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[7] / 1000f;
									num18 = (float)currents[7] / 1000f;
									VC8.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[8] / 1000f;
									num18 = (float)currents[8] / 1000f;
									VC9.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[9] / 1000f;
									num18 = (float)currents[9] / 1000f;
									VC10.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[10] / 1000f;
									num18 = (float)currents[10] / 1000f;
									VC11.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[11] / 1000f;
									num18 = (float)currents[11] / 1000f;
									VC12.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									if (NeedBal[6] == 0)
									{
										VC7.TextColor = Color.FromRgb(255 - 2 * caps[6], caps[6], 0);
									}
									else
									{
										VC7.TextColor = Color.Blue;
									}
									if (NeedBal[7] == 0)
									{
										VC8.TextColor = Color.FromRgb(255 - 2 * caps[7], caps[7], 0);
									}
									else
									{
										VC8.TextColor = Color.Blue;
									}
									if (NeedBal[8] == 0)
									{
										VC9.TextColor = Color.FromRgb(255 - 2 * caps[8], caps[8], 0);
									}
									else
									{
										VC9.TextColor = Color.Blue;
									}
									if (NeedBal[9] == 0)
									{
										VC10.TextColor = Color.FromRgb(255 - 2 * caps[9], caps[9], 0);
									}
									else
									{
										VC10.TextColor = Color.Blue;
									}
									if (NeedBal[1] == 0)
									{
										VC11.TextColor = Color.FromRgb(255 - 2 * caps[10], caps[10], 0);
									}
									else
									{
										VC11.TextColor = Color.Blue;
									}
									if (NeedBal[11] == 0)
									{
										VC12.TextColor = Color.FromRgb(255 - 2 * caps[11], caps[11], 0);
									}
									else
									{
										VC12.TextColor = Color.Blue;
									}
									break;
								}
								case 38:
								{
									for (int num24 = 0; num24 < 6; num24++)
									{
										short num16 = (short)(arg[num24 * 2 + 2] * 256 + arg[num24 * 2 + 3]);
										currents[num24 + 12] = num16;
									}
									float num17 = (float)voltages[12] / 1000f;
									float num18 = (float)currents[12] / 1000f;
									VC13.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[13] / 1000f;
									num18 = (float)currents[13] / 1000f;
									VC14.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[14] / 1000f;
									num18 = (float)currents[14] / 1000f;
									VC15.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[15] / 1000f;
									num18 = (float)currents[15] / 1000f;
									VC16.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[16] / 1000f;
									num18 = (float)currents[16] / 1000f;
									VC17.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[17] / 1000f;
									num18 = (float)currents[17] / 1000f;
									VC18.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									if (NeedBal[12] == 0)
									{
										VC13.TextColor = Color.FromRgb(255 - 2 * caps[12], caps[12], 0);
									}
									else
									{
										VC13.TextColor = Color.Blue;
									}
									if (NeedBal[13] == 0)
									{
										VC14.TextColor = Color.FromRgb(255 - 2 * caps[13], caps[13], 0);
									}
									else
									{
										VC14.TextColor = Color.Blue;
									}
									if (NeedBal[14] == 0)
									{
										VC15.TextColor = Color.FromRgb(255 - 2 * caps[14], caps[14], 0);
									}
									else
									{
										VC15.TextColor = Color.Blue;
									}
									if (NeedBal[15] == 0)
									{
										VC16.TextColor = Color.FromRgb(255 - 2 * caps[15], caps[15], 0);
									}
									else
									{
										VC16.TextColor = Color.Blue;
									}
									if (NeedBal[16] == 0)
									{
										VC17.TextColor = Color.FromRgb(255 - 2 * caps[16], caps[16], 0);
									}
									else
									{
										VC17.TextColor = Color.Blue;
									}
									if (NeedBal[17] == 0)
									{
										VC18.TextColor = Color.FromRgb(255 - 2 * caps[17], caps[17], 0);
									}
									else
									{
										VC18.TextColor = Color.Blue;
									}
									break;
								}
								case 39:
								{
									for (int l = 0; l < 6; l++)
									{
										short num16 = (short)(arg[l * 2 + 2] * 256 + arg[l * 2 + 3]);
										currents[l + 18] = num16;
									}
									float num17 = (float)voltages[18] / 1000f;
									float num18 = (float)currents[18] / 1000f;
									VC19.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[19] / 1000f;
									num18 = (float)currents[19] / 1000f;
									VC20.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[20] / 1000f;
									num18 = (float)currents[20] / 1000f;
									VC21.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[21] / 1000f;
									num18 = (float)currents[21] / 1000f;
									VC22.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[22] / 1000f;
									num18 = (float)currents[22] / 1000f;
									VC23.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									num17 = (float)voltages[23] / 1000f;
									num18 = (float)currents[23] / 1000f;
									VC24.Text = num17.ToString("0.000V/") + num18.ToString("0.000A");
									if (NeedBal[18] == 0)
									{
										VC19.TextColor = Color.FromRgb(255 - caps[18] * 2, caps[18], 0);
									}
									else
									{
										VC19.TextColor = Color.Blue;
									}
									if (NeedBal[19] == 0)
									{
										VC20.TextColor = Color.FromRgb(255 - caps[19] * 2, caps[19], 0);
									}
									else
									{
										VC20.TextColor = Color.Blue;
									}
									if (NeedBal[20] == 0)
									{
										VC21.TextColor = Color.FromRgb(255 - caps[20] * 2, caps[20], 0);
									}
									else
									{
										VC21.TextColor = Color.Blue;
									}
									if (NeedBal[21] == 0)
									{
										VC22.TextColor = Color.FromRgb(255 - 2 * caps[21], caps[21], 0);
									}
									else
									{
										VC22.TextColor = Color.Blue;
									}
									if (NeedBal[22] == 0)
									{
										VC23.TextColor = Color.FromRgb(255 - 2 * caps[22], caps[22], 0);
									}
									else
									{
										VC23.TextColor = Color.Blue;
									}
									if (NeedBal[23] == 0)
									{
										VC24.TextColor = Color.FromRgb(255 - 2 * caps[23], caps[23], 0);
									}
									else
									{
										VC24.TextColor = Color.Blue;
									}
									break;
								}
								case 40:
								{
									short num16 = (short)(arg[2] * 256 + arg[3]);
									voltage = (float)num16 / 10f;
									TotalVol.Text = voltage.ToString("0.0V");
									int num19 = (arg[12] << 24) + (arg[13] << 16) + (arg[4] << 8) + arg[5];
									linecurr = (float)num19 / 100f;
									TotalCurrent.Text = linecurr.ToString("0.00A");
									num16 = (short)(arg[6] * 256 + arg[7]);
									maxvol = (float)num16 / 1000f;
									MaxVol.Text = maxvol.ToString("0.000V");
									num16 = (short)(arg[8] * 256 + arg[9]);
									minvol = (float)num16 / 1000f;
									MinVol.Text = minvol.ToString("0.000V");
									num16 = (short)(arg[10] * 256 + arg[11]);
									avgvol = (float)num16 / 1000f;
									AvgVol.Text = avgvol.ToString("0.000V");
									deltavol = maxvol - minvol;
									DeltaVol.Text = deltavol.ToString("0.000V");
									break;
								}
								case 41:
								{
									short num16 = (short)(arg[2] * 256 + arg[3]);
									fullcap = (float)num16 / 100f;
									FullCap.Text = fullcap.ToString("0.00AH");
									num16 = (short)(arg[4] * 256 + arg[5]);
									restcap = (float)num16 / 100f;
									RestCap.Text = restcap.ToString("0.00AH");
									m_battcap = arg[8];
									App.SOC = m_battcap;
									break;
								}
								case 47:
								{
									if (App.CN)
									{
										if (arg[6] == 1)
										{
											BalStat.Text = "∆Ù∂Ø";
											BalStat.TextColor = Color.Blue;
										}
										else if (arg[6] == 2)
										{
											BalStat.Text = "≤‚ ‘";
											BalStat.TextColor = Color.Red;
										}
										else
										{
											BalStat.Text = "Õ£÷π";
											BalStat.TextColor = Color.Black;
										}
									}
									else if (arg[6] == 1)
									{
										BalStat.Text = "Start";
										BalStat.TextColor = Color.Blue;
									}
									else if (arg[6] == 2)
									{
										BalStat.Text = "Test";
										BalStat.TextColor = Color.Red;
									}
									else
									{
										BalStat.Text = "Stop";
										BalStat.TextColor = Color.Black;
									}
									if ((arg[7] & 0x80) == 128)
									{
										CHGDSG = (byte)((arg[7] >> 4) & 3);
										if (App.CN)
										{
											switch (CHGDSG)
											{
											case 0:
												WorkStat.Text = "≥‰µÁπÿ,∑≈µÁπÿ";
												WorkStat.TextColor = Color.ForestGreen;
												break;
											case 1:
												WorkStat.Text = "≥‰µÁπÿ,∑≈µÁø™";
												WorkStat.TextColor = Color.ForestGreen;
												break;
											case 2:
												WorkStat.Text = "≥‰µÁø™,∑≈µÁπÿ";
												WorkStat.TextColor = Color.ForestGreen;
												break;
											default:
												WorkStat.Text = "≥‰µÁø™,∑≈µÁø™";
												WorkStat.TextColor = Color.ForestGreen;
												break;
											}
										}
										else
										{
											switch (CHGDSG)
											{
											case 0:
												WorkStat.Text = "CHG Off,DSG Off";
												WorkStat.TextColor = Color.ForestGreen;
												break;
											case 1:
												WorkStat.Text = "CHG Off,DSG On";
												WorkStat.TextColor = Color.ForestGreen;
												break;
											case 2:
												WorkStat.Text = "CHG On,DSG Off";
												WorkStat.TextColor = Color.ForestGreen;
												break;
											default:
												WorkStat.Text = "CHG On,DSG On";
												WorkStat.TextColor = Color.ForestGreen;
												break;
											}
										}
									}
									else
									{
										CHGDSG = arg[7];
										if (App.CN)
										{
											switch (CHGDSG)
											{
											case 0:
												WorkStat.Text = "∏¥Œª";
												WorkStat.TextColor = Color.Black;
												break;
											case 1:
												WorkStat.Text = "∂œø™";
												WorkStat.TextColor = Color.Black;
												break;
											case 2:
												WorkStat.Text = "‘§≥‰";
												WorkStat.TextColor = Color.Green;
												break;
											case 3:
												WorkStat.Text = "≥‰µÁ";
												WorkStat.TextColor = Color.ForestGreen;
												break;
											case 4:
												WorkStat.Text = "‘§∑≈";
												WorkStat.TextColor = Color.DarkRed;
												break;
											case 5:
												WorkStat.Text = "∑≈µÁ";
												WorkStat.TextColor = Color.Red;
												break;
											case 6:
												WorkStat.Text = "¥ÌŒÛ";
												WorkStat.TextColor = Color.Red;
												break;
											case 8:
												WorkStat.Text = "∑≈µÁ±£ª§";
												WorkStat.TextColor = Color.Red;
												break;
											case 9:
												WorkStat.Text = "≥‰µÁ±£ª§";
												WorkStat.TextColor = Color.Red;
												break;
											case 10:
												WorkStat.Text = "∑≈µÁºÏ";
												WorkStat.TextColor = Color.Red;
												break;
											case 11:
												WorkStat.Text = "≥‰µÁºÏ";
												WorkStat.TextColor = Color.ForestGreen;
												break;
											case 7:
												WorkStat.Text = "∑≈µÁπÿ±’";
												WorkStat.TextColor = Color.Black;
												break;
											default:
												WorkStat.Text = "πÿ±’";
												WorkStat.TextColor = Color.Black;
												break;
											}
										}
										else
										{
											switch (CHGDSG)
											{
											case 0:
												WorkStat.Text = "Reset";
												WorkStat.TextColor = Color.Black;
												break;
											case 1:
												WorkStat.Text = "Off";
												WorkStat.TextColor = Color.Black;
												break;
											case 2:
												WorkStat.Text = "PreCHG";
												WorkStat.TextColor = Color.Green;
												break;
											case 3:
												WorkStat.Text = "CHG";
												WorkStat.TextColor = Color.ForestGreen;
												break;
											case 4:
												WorkStat.Text = "PreDSG";
												WorkStat.TextColor = Color.DarkRed;
												break;
											case 5:
												WorkStat.Text = "DSG";
												WorkStat.TextColor = Color.Red;
												break;
											case 6:
												WorkStat.Text = "Error";
												WorkStat.TextColor = Color.Red;
												break;
											case 8:
												WorkStat.Text = "DSG Protect";
												WorkStat.TextColor = Color.Red;
												break;
											case 9:
												WorkStat.Text = "CHG Protect";
												WorkStat.TextColor = Color.Red;
												break;
											case 10:
												WorkStat.Text = "DSG Detect";
												WorkStat.TextColor = Color.Red;
												break;
											case 11:
												WorkStat.Text = "CHG Detect";
												WorkStat.TextColor = Color.ForestGreen;
												break;
											case 7:
												WorkStat.Text = "DSG Off";
												WorkStat.TextColor = Color.Black;
												break;
											default:
												WorkStat.Text = "Off";
												WorkStat.TextColor = Color.Black;
												break;
											}
										}
									}
									NeedBalance0 = arg[8];
									byte b = 1;
									for (int k = 0; k < 8; k++)
									{
										if ((NeedBalance0 & b) == 0)
										{
											NeedBal[k] = 10;
										}
										else if (NeedBal[k] > 0)
										{
											NeedBal[k]--;
										}
										b <<= 1;
									}
									NeedBalance1 = arg[9];
									b = 1;
									for (int k = 8; k < 16; k++)
									{
										if ((NeedBalance1 & b) == 0)
										{
											NeedBal[k] = 10;
										}
										else if (NeedBal[k] > 0)
										{
											NeedBal[k]--;
										}
										b <<= 1;
									}
									NeedBalance2 = arg[10];
									b = 1;
									for (int k = 16; k < 24; k++)
									{
										if ((NeedBalance2 & b) == 0)
										{
											NeedBal[k] = 10;
										}
										else if (NeedBal[k] > 0)
										{
											NeedBal[k]--;
										}
										b <<= 1;
									}
									NeedBalance3 = arg[11];
									break;
								}
								case 50:
								{
									short num16 = (short)(arg[2] * 256 + arg[3]);
									T1.Text = num16.ToString("0°Ê");
									num16 = (short)(arg[4] * 256 + arg[5]);
									T2.Text = num16.ToString("0°Ê");
									num16 = (short)(arg[6] * 256 + arg[7]);
									T3.Text = num16.ToString("0°Ê");
									num16 = (short)(arg[8] * 256 + arg[9]);
									T4.Text = num16.ToString("0°Ê");
									num16 = (short)(arg[10] * 256 + arg[11]);
									MosTemp.Text = num16.ToString("0°Ê");
									num16 = (short)(arg[12] * 256 + arg[13]);
									BalT.Text = num16.ToString("0°Ê");
									break;
								}
								case 53:
								{
									int num11 = (arg[4] << 24) + (arg[5] << 16) + (arg[6] << 8) + arg[7];
									uint num12 = (uint)num11 / 86400u;
									uint num13 = (uint)(num11 - (int)(num12 * 86400)) / 3600u;
									uint num14 = (uint)(num11 - (int)(num12 * 86400) - (int)(num13 * 3600)) / 60u;
									uint num15 = (uint)num11 % 60u;
									if (arg[3] == 0 && arg[2] == 0)
									{
										alarmMessage2.TextColor = Color.Blue;
									}
									else
									{
										alarmMessage2.TextColor = Color.Red;
									}
									if (App.CN)
									{
										alarmMessage2.Text = "◊‹π§◊˜ ±º‰:" + num12.ToString("0ÃÏ") + num13.ToString("0 ±") + num14.ToString("0∑÷") + num15.ToString("0√Î");
									}
									else
									{
										alarmMessage2.Text = "Total WorkTime:" + num12.ToString("0D ") + num13.ToString("0H ") + num14.ToString("0M ") + num15.ToString("0S");
									}
									if (App.CN)
									{
										if ((arg[2] & 0xC0) != 0)
										{
											alarmMessage2.Text += " ˝æ›¥ÌH ";
										}
										if ((arg[2] & 0x20) != 0)
										{
											alarmMessage2.Text += "◊‹«∑—π ";
										}
										if ((arg[2] & 0x10) != 0)
										{
											alarmMessage2.Text += "µ•ÃÂ«∑—π ";
										}
										if ((arg[2] & 8) != 0)
										{
											alarmMessage2.Text += "—π≤Ó¥Û ";
										}
										if ((arg[2] & 4) != 0)
										{
											alarmMessage2.Text += "MOSπ˝Œ¬ ";
										}
										if ((arg[2] & 2) != 0)
										{
											alarmMessage2.Text += "∑≈µÁπ˝Œ¬ ";
										}
										if ((arg[2] & 1) != 0)
										{
											alarmMessage2.Text += "MOSπ ’œ ";
										}
										if ((arg[3] & 0x80) != 0)
										{
											alarmMessage2.Text += "∂Ã¬∑  ";
										}
										if ((arg[3] & 0x40) != 0)
										{
											alarmMessage2.Text += "π˝∑≈  ";
										}
										if ((arg[3] & 0x20) != 0)
										{
											alarmMessage2.Text += "∑≈µÁµÕŒ¬  ";
										}
										if ((arg[3] & 0x10) != 0)
										{
											alarmMessage2.Text += "≥‰µÁµÕŒ¬  ";
										}
										if ((arg[3] & 8) != 0)
										{
											alarmMessage2.Text += "π˝≥‰  ";
										}
										if ((arg[3] & 4) != 0)
										{
											alarmMessage2.Text += "≥‰µÁπ˝Œ¬  ";
										}
										if ((arg[3] & 2) != 0)
										{
											alarmMessage2.Text += "µ•ÃÂπ˝—π  ";
										}
										if ((arg[3] & 1) != 0)
										{
											alarmMessage2.Text += "◊‹π˝—π  ";
										}
									}
									else
									{
										if ((arg[2] & 0xC0) != 0)
										{
											alarmMessage2.Text += "Data Error ";
										}
										if ((arg[2] & 0x20) != 0)
										{
											alarmMessage2.Text += "Total LowVol ";
										}
										if ((arg[2] & 0x10) != 0)
										{
											alarmMessage2.Text += "Single LowVol ";
										}
										if ((arg[2] & 8) != 0)
										{
											alarmMessage2.Text += "Over DeltaVol ";
										}
										if ((arg[2] & 4) != 0)
										{
											alarmMessage2.Text += "MOS OverTemp ";
										}
										if ((arg[2] & 2) != 0)
										{
											alarmMessage2.Text += "DSG OverTemp ";
										}
										if ((arg[2] & 1) != 0)
										{
											alarmMessage2.Text += "MOS Fault ";
										}
										if ((arg[3] & 0x80) != 0)
										{
											alarmMessage2.Text += "Short Curr  ";
										}
										if ((arg[3] & 0x40) != 0)
										{
											alarmMessage2.Text += "Over DSG  ";
										}
										if ((arg[3] & 0x20) != 0)
										{
											alarmMessage2.Text += "DSG LowTemp  ";
										}
										if ((arg[3] & 0x10) != 0)
										{
											alarmMessage2.Text += "CHG LowTemp  ";
										}
										if ((arg[3] & 8) != 0)
										{
											alarmMessage2.Text += "Over CHG  ";
										}
										if ((arg[3] & 4) != 0)
										{
											alarmMessage2.Text += "CHG OverTemp  ";
										}
										if ((arg[3] & 2) != 0)
										{
											alarmMessage2.Text += "Single OverVol  ";
										}
										if ((arg[3] & 1) != 0)
										{
											alarmMessage2.Text += "Total OverVol  ";
										}
									}
									App.PassOk = arg[10] & 3;
									break;
								}
								}
							}
						}
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Alert("GraphS " + ex.ToString());
				}
			});
		}

		private void GraphPage_SizeChanged(object sender, EventArgs e)
		{
			isPortrait = base.Height > base.Width;
			if (isPortrait)
			{
				PhaseGrid.IsVisible = true;
				TempGrid.IsVisible = true;
				ThrottleGrid.IsVisible = true;
				AlarmGrid.IsVisible = true;
				FrameGrid.IsVisible = true;
				powerView.WidthRequest = 150.0;
				powerView.HeightRequest = 100.0;
				speedView.WidthRequest = 150.0;
				speedView.HeightRequest = 100.0;
				runView.HeightRequest = 60.0;
			}
			else
			{
				PhaseGrid.IsVisible = false;
				TempGrid.IsVisible = false;
				ThrottleGrid.IsVisible = false;
				AlarmGrid.IsVisible = false;
				FrameGrid.IsVisible = false;
				powerView.WidthRequest = 500.0;
				powerView.HeightRequest = 500.0;
				speedView.WidthRequest = 500.0;
				speedView.HeightRequest = 500.0;
				runView.HeightRequest = 300.0;
			}
		}

		private void powerView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			Draw(canvas, info, "KW", m_InPower.ToString("0W"), (int)m_InPower, 1);
			if (!isPortrait)
			{
				float num = Math.Min((float)info.Width / 500f, (float)info.Height / 500f);
				float num2 = ((float)info.Width - num * 500f) / 2f;
				float num3 = ((float)info.Height - num * 500f) / 2f;
				float num4 = num * 250f;
				canvas.DrawText(voltage.ToString("Voltage: 0.0V"), num2 + num4 - num * 110f, num3 + num4 + num * 160f, yellowTextPaint);
				canvas.DrawText(ThrottleDepth.ToString("Throttle: 0"), num2 + num4 - num * 110f, num3 + num4 + num * 190f, yellowTextPaint);
			}
		}

		private void Draw(SKCanvas canvas, SKImageInfo info, string str, string strvalue, int value, int gain)
		{
			float num = Math.Min((float)info.Width / 500f, (float)info.Height / 500f);
			float num2 = ((float)info.Width - num * 500f) / 2f;
			float num3 = ((float)info.Height - num * 500f) / 2f;
			SKPaint[] array = new SKPaint[6]
			{
				new SKPaint
				{
					Style = SKPaintStyle.Stroke,
					Color = SKColors.Blue,
					StrokeWidth = num * 16f,
					StrokeCap = SKStrokeCap.Square,
					IsAntialias = true
				},
				new SKPaint
				{
					Style = SKPaintStyle.Stroke,
					Color = SKColors.LightBlue,
					StrokeWidth = num * 16f,
					StrokeCap = SKStrokeCap.Square,
					IsAntialias = true
				},
				new SKPaint
				{
					Style = SKPaintStyle.Stroke,
					Color = SKColors.LightGreen,
					StrokeWidth = num * 16f,
					StrokeCap = SKStrokeCap.Square,
					IsAntialias = true
				},
				new SKPaint
				{
					Style = SKPaintStyle.Stroke,
					Color = SKColors.Orange,
					StrokeWidth = num * 16f,
					StrokeCap = SKStrokeCap.Square,
					IsAntialias = true
				},
				new SKPaint
				{
					Style = SKPaintStyle.Stroke,
					Color = SKColors.OrangeRed,
					StrokeWidth = num * 16f,
					StrokeCap = SKStrokeCap.Square,
					IsAntialias = true
				},
				new SKPaint
				{
					Style = SKPaintStyle.Stroke,
					Color = SKColors.Red,
					StrokeWidth = num * 16f,
					StrokeCap = SKStrokeCap.Square,
					IsAntialias = true
				}
			};
			float num4 = 135f;
			canvas.DrawCircle(num2 + num * 250f, num3 + num * 250f, num * 240f, blackFillPaint);
			SKPaint sKPaint = new SKPaint();
			float num5 = num * 250f;
			SKPoint sKPoint = new SKPoint(num2 + num5, num3 + num5);
			sKPaint.Shader = SKShader.CreateRadialGradient(sKPoint, num * 50f, new SKColor[2]
			{
				SKColors.Black,
				SKColors.White
			}, null, SKShaderTileMode.Repeat);
			sKPaint.Style = SKPaintStyle.Stroke;
			sKPaint.StrokeWidth = num * 50f;
			SKPaint paint = new SKPaint
			{
				Style = SKPaintStyle.Stroke,
				Color = SKColors.Gold,
				StrokeWidth = 5f,
				StrokeCap = SKStrokeCap.Round,
				IsAntialias = true
			};
			canvas.DrawCircle(sKPoint, num * 225f, sKPaint);
			canvas.DrawCircle(num2 + num * 250f, num3 + num * 250f, num * 220f, paint);
			canvas.DrawCircle(num2 + num * 250f, num3 + num * 250f, num * 245f, whiteStrokePaint);
			canvas.DrawCircle(num2 + num * 250f, num3 + num * 250f, num * 200f, whiteStrokePaint);
			canvas.DrawCircle(sKPoint, num * 20f, sKPaint);
			SKRect oval = new SKRect(num2 + num * 38f, num3 + num * 38f, num2 + num * 500f - num * 38f, num3 + num * 500f - num * 38f);
			for (int i = 0; i < array.Length; i++)
			{
				float num6 = num4 + 45f;
				canvas.DrawArc(oval, num4, num6 - num4, useCenter: false, array[i]);
				num4 = num6;
			}
			SKPaint paint2 = new SKPaint
			{
				Style = SKPaintStyle.Fill,
				Color = SKColors.White,
				StrokeWidth = 8f,
				TextSize = 30f * num,
				StrokeCap = SKStrokeCap.Round,
				IsAntialias = true
			};
			SKPaint paint3 = new SKPaint
			{
				Style = SKPaintStyle.Fill,
				Color = SKColors.Yellow,
				StrokeWidth = 8f,
				TextSize = 50f * num,
				StrokeCap = SKStrokeCap.Round,
				IsAntialias = true
			};
			canvas.DrawText(strvalue, num2 + num5 - num * (float)(strvalue.Length * 14), num3 + num5 + num * 110f, paint3);
			canvas.DrawText(str, num2 + num5 - num * (float)(str.Length * 10), num3 + num5 - num * 60f, paint2);
			double num7 = num * 160f;
			double num8 = 0.0;
			double num9 = 0.0;
			double num10 = 0.0;
			double num11 = 0.0;
			for (int j = 0; j < 13; j++)
			{
				str = $"{j * gain}";
				num8 = num7 * Math.Cos((double)(j * 20 - 210) * Math.PI / 180.0) - (double)(num * 20f);
				num9 = num7 * Math.Sin((double)(j * 20 - 210) * Math.PI / 180.0) + 10.0;
				double num12 = (double)(num * 180f) * Math.Cos((double)(j * 20 - 210) * Math.PI / 180.0);
				double num13 = (double)(num * 180f) * Math.Sin((double)(j * 20 - 210) * Math.PI / 180.0);
				num10 = (double)(num * 220f) * Math.Cos((double)(j * 20 - 210) * Math.PI / 180.0);
				num11 = (double)(num * 220f) * Math.Sin((double)(j * 20 - 210) * Math.PI / 180.0);
				canvas.DrawLine((float)(num12 + (double)num5 + (double)num2), (float)(num13 + (double)num5 + (double)num3), (float)(num10 + (double)num5 + (double)num2), (float)(num11 + (double)num5 + (double)num3), whiteStrokePaint);
				canvas.DrawText(str, (float)((double)num2 + num8 + (double)num5), (float)((double)num3 + num9 + (double)num5), paint2);
			}
			float num14 = (float)(value * 360) / 18000f + 150f;
			whiteStrokePaint.StrokeWidth = 5f;
			float num15 = 0f;
			float num16 = 0f;
			num15 = (float)((double)(num * 220f) * Math.Cos((double)num14 * Math.PI / 180.0));
			num16 = (float)((double)(num * 220f) * Math.Sin((double)num14 * Math.PI / 180.0));
			canvas.DrawLine(num2 + num5, num3 + num5, num2 + num5 + num15, num3 + num5 + num16, whiteStrokePaint);
			whiteStrokePaint.StrokeWidth = 2f;
		}

		private void speedView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			if (isPortrait)
			{
				Draw(strvalue: (rcv_PolePairs < 16) ? m_MeasureSpeed.ToString("0R") : $"{m_MeasureSpeed * 4 / rcv_PolePairs}R", canvas: canvas, info: info, str: "1000RPM", value: m_MeasureSpeed, gain: 1);
				return;
			}
			string strvalue = speed.ToString("0.0");
			Draw(canvas, info, "km/h", strvalue, (int)((double)(speed * 50f) + 0.5), 20);
			float num = Math.Min((float)info.Width / 500f, (float)info.Height / 500f);
			float num2 = ((float)info.Width - num * 500f) / 2f;
			float num3 = ((float)info.Height - num * 500f) / 2f;
			float num4 = num * 250f;
			new SKPaint
			{
				Style = SKPaintStyle.Stroke,
				Color = SKColors.Gold,
				StrokeWidth = 5f,
				StrokeCap = SKStrokeCap.Round,
				IsAntialias = true
			};
			canvas.DrawText("Motor T: " + m_motortemp + "°„", num2 + num4 - num * 110f, num3 + num4 + num * 160f, yellowTextPaint);
			canvas.DrawText("MCU   T: " + m_mostemp + "°„", num2 + num4 - num * 110f, num3 + num4 + num * 190f, yellowTextPaint);
		}

		private void gearView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			float num = Math.Min((float)info.Width / 500f, (float)info.Height / 500f);
			float num2 = ((float)info.Width - num * 500f) / 2f;
			float num3 = ((float)info.Height - num * 500f) / 2f;
			float num4 = num * 250f;
			if ((motor_stop_state & 0x800) != 0)
			{
				canvas.DrawCircle(num2 + num * 250f, num3 + num * 250f, num * 250f, blackFillPaint);
				SKPaint paint = new SKPaint
				{
					Style = SKPaintStyle.Fill,
					Color = SKColors.Red,
					StrokeWidth = num * 300f,
					TextSize = num * 500f,
					StrokeCap = SKStrokeCap.Round,
					IsAntialias = true
				};
				float x = num2 + num4 - num * 180f;
				float y = num3 + num4 + num * 150f;
				canvas.DrawText("H", x, y, paint);
				return;
			}
			if ((motor_stop_state & 2) != 0)
			{
				SKPaint paint2 = new SKPaint
				{
					Style = SKPaintStyle.Stroke,
					Color = SKColors.Green,
					StrokeWidth = 30f * num,
					StrokeCap = SKStrokeCap.Round,
					IsAntialias = true
				};
				SKRect oval = new SKRect(num2 + 10f, num3 + 10f, num2 + num4 * 2f - 10f, num3 + num4 * 2f - 10f);
				canvas.DrawArc(oval, 150f, 240f, useCenter: false, paint2);
				double num5 = num * 160f;
				for (int i = 0; i < 7; i++)
				{
					if (i == 2)
					{
						double num6 = num5 * Math.Cos((double)(i * 40 - 210) * Math.PI / 180.0);
						double num7 = num5 * Math.Sin((double)(i * 40 - 210) * Math.PI / 180.0);
						double num8 = (double)(num * 300f) * Math.Cos((double)(i * 40 - 210) * Math.PI / 180.0);
						double num9 = (double)(num * 300f) * Math.Sin((double)(i * 40 - 210) * Math.PI / 180.0);
						canvas.DrawLine((float)(num6 + (double)num4 + (double)num2), (float)(num7 + (double)num4 + (double)num3), (float)(num8 + (double)num4 + (double)num2), (float)(num9 + (double)num4 + (double)num3), paint2);
					}
					else
					{
						double num6 = num5 * Math.Cos((double)(i * 40 - 210) * Math.PI / 180.0);
						double num7 = num5 * Math.Sin((double)(i * 40 - 210) * Math.PI / 180.0);
						double num8 = (double)(num * 220f) * Math.Cos((double)(i * 40 - 210) * Math.PI / 180.0);
						double num9 = (double)(num * 220f) * Math.Sin((double)(i * 40 - 210) * Math.PI / 180.0);
						canvas.DrawLine((float)(num6 + (double)num4 + (double)num2), (float)(num7 + (double)num4 + (double)num3), (float)(num8 + (double)num4 + (double)num2), (float)(num9 + (double)num4 + (double)num3), paint2);
					}
				}
				return;
			}
			if ((Global_state2 & 0x200) != 0)
			{
				canvas.DrawCircle(num2 + num * 250f, num3 + num * 250f, num * 250f, blackFillPaint);
				SKPaint paint3 = new SKPaint
				{
					Style = SKPaintStyle.Fill,
					Color = SKColors.White,
					StrokeWidth = num * 300f,
					TextSize = num * 500f,
					StrokeCap = SKStrokeCap.Round,
					IsAntialias = true
				};
				float x2 = num2 + num4 - num * 180f;
				float y2 = num3 + num4 + num * 150f;
				canvas.DrawText("A", x2, y2, paint3);
				return;
			}
			canvas.DrawCircle(num2 + num * 250f, num3 + num * 250f, num * 250f, blackFillPaint);
			if (m_gear == 1)
			{
				if ((Global_state3 & 4) != 0)
				{
					SKPaint paint4 = new SKPaint
					{
						Style = SKPaintStyle.Fill,
						Color = SKColors.Red,
						StrokeWidth = num * 100f,
						TextSize = num * 200f,
						StrokeCap = SKStrokeCap.Round,
						IsAntialias = true
					};
					float x3 = num2 + num4 - num * 220f;
					float y3 = num3 + num4 + num * 100f;
					canvas.DrawText("BST", x3, y3, paint4);
				}
				else if (m_XSControl == 0)
				{
					SKPaint paint5 = new SKPaint
					{
						Style = SKPaintStyle.Fill,
						Color = SKColors.White,
						StrokeWidth = num * 300f,
						TextSize = num * 500f,
						StrokeCap = SKStrokeCap.Round,
						IsAntialias = true
					};
					float x4 = num2 + num4 - num * 150f;
					float y4 = num3 + num4 + num * 150f;
					canvas.DrawText("1", x4, y4, paint5);
				}
				else if (m_XSControl == 1)
				{
					SKPaint paint6 = new SKPaint
					{
						Style = SKPaintStyle.Fill,
						Color = SKColors.White,
						StrokeWidth = num * 30f,
						TextSize = num * 500f,
						StrokeCap = SKStrokeCap.Round,
						IsAntialias = true
					};
					float x5 = num2 + num4 - num * 150f;
					float y5 = num3 + num4 + num * 150f;
					canvas.DrawText("2", x5, y5, paint6);
				}
				else
				{
					SKPaint paint7 = new SKPaint
					{
						Style = SKPaintStyle.Fill,
						Color = SKColors.White,
						StrokeWidth = num * 300f,
						TextSize = num * 500f,
						StrokeCap = SKStrokeCap.Round,
						IsAntialias = true
					};
					float x6 = num2 + num4 - num * 150f;
					float y6 = num3 + num4 + num * 150f;
					canvas.DrawText("3", x6, y6, paint7);
				}
			}
			else if (m_gear == 2)
			{
				SKPaint paint8 = new SKPaint
				{
					Style = SKPaintStyle.Fill,
					Color = SKColors.Red,
					StrokeWidth = num * 300f,
					TextSize = num * 500f,
					StrokeCap = SKStrokeCap.Round,
					IsAntialias = true
				};
				float x7 = num2 + num4 - num * 180f;
				float y7 = num3 + num4 + num * 150f;
				canvas.DrawText("R", x7, y7, paint8);
			}
			else if (m_gear == 0)
			{
				SKPaint paint9 = new SKPaint
				{
					Style = SKPaintStyle.Fill,
					Color = SKColors.White,
					StrokeWidth = num * 300f,
					TextSize = num * 500f,
					StrokeCap = SKStrokeCap.Round,
					IsAntialias = true
				};
				float x8 = num2 + num4 - num * 150f;
				float y8 = num3 + num4 + num * 150f;
				canvas.DrawText("P", x8, y8, paint9);
			}
			else
			{
				SKPaint paint10 = new SKPaint
				{
					Style = SKPaintStyle.Fill,
					Color = SKColors.White,
					StrokeWidth = num * 300f,
					TextSize = num * 500f,
					StrokeCap = SKStrokeCap.Round,
					IsAntialias = true
				};
				float x9 = num2 + num4 - num * 150f;
				float y9 = num3 + num4 + num * 150f;
				canvas.DrawText("?", x9, y9, paint10);
			}
		}

		private void stopView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			if (m_stop)
			{
				SKPaint paint = new SKPaint
				{
					Style = SKPaintStyle.Stroke,
					Color = SKColors.Red,
					StrokeWidth = 10f,
					StrokeCap = SKStrokeCap.Round,
					IsAntialias = true
				};
				float num = Math.Min((float)info.Width / 100f, (float)info.Height / 100f);
				float num2 = ((float)info.Width - num * 100f) / 2f;
				float num3 = ((float)info.Height - num * 100f) / 2f;
				SKRect oval = new SKRect(num2 + 10f, num3 + 10f, num2 + num * 100f - 10f, num3 + num * 100f - 10f);
				canvas.DrawArc(oval, 135f, 90f, useCenter: false, paint);
				canvas.DrawArc(oval, 315f, 90f, useCenter: false, paint);
				canvas.DrawCircle(num2 + num * 50f, num3 + num * 50f, num * 35f, paint);
				canvas.DrawLine(num2 + num * 50f, num3 + num * 65f, num2 + num * 50f, num3 + num * 70f, paint);
				canvas.DrawLine(num2 + num * 50f, num3 + num * 30f, num2 + num * 50f, num3 + num * 55f, paint);
			}
		}

		private void motorTempView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			float num = Math.Min((float)info.Width / (float)motortemp_bitmap.Width, (float)info.Height / (float)motortemp_bitmap.Height);
			float num2 = ((float)info.Width - num * (float)motortemp_bitmap.Width) / 2f;
			float num3 = ((float)info.Height - num * (float)motortemp_bitmap.Height) / 2f;
			canvas.DrawBitmap(dest: new SKRect(num2, num3, num2 + num * (float)motortemp_bitmap.Width, num3 + num * (float)motortemp_bitmap.Height), bitmap: motortemp_bitmap);
			int width = e.Info.Width;
			canvas.Translate(dy: e.Info.Height / 2, dx: width / 2);
			canvas.Scale((float)width / 200f);
			canvas.Save();
			float degrees = (float)(m_motortemp * 3 / 2) - 90f;
			canvas.RotateDegrees(degrees);
			whiteStrokePaint.StrokeWidth = 2f;
			canvas.DrawLine(0f, 10f, 0f, -80f, whiteStrokePaint);
			canvas.Restore();
			canvas.DrawText(m_motortemp.ToString("0°„"), -20f, 60f, yellowText2Paint);
			canvas.DrawText("Motor Temprature", -60f, 75f, whiteTextPaint);
		}

		private void battCapView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			float num = Math.Min((float)info.Width / (float)batt_bitmap.Width, (float)info.Height / (float)batt_bitmap.Height);
			float num2 = ((float)info.Width - num * (float)batt_bitmap.Width) / 2f;
			float num3 = ((float)info.Height - num * (float)batt_bitmap.Height) / 2f;
			canvas.DrawBitmap(dest: new SKRect(num2, num3, num2 + num * (float)batt_bitmap.Width, num3 + num * (float)batt_bitmap.Height), bitmap: batt_bitmap);
			int width = e.Info.Width;
			canvas.Translate(dy: e.Info.Height / 2, dx: width / 2);
			canvas.Scale((float)width / 200f);
			canvas.Save();
			float degrees = (float)(m_battcap * 9) / 4f - 112.5f;
			canvas.RotateDegrees(degrees);
			whiteStrokePaint.StrokeWidth = 2f;
			canvas.DrawLine(0f, 10f, 0f, -80f, whiteStrokePaint);
			canvas.Restore();
			canvas.DrawText(m_battcap.ToString(), -20f, 45f, yellowText2Paint);
			canvas.DrawText("Batt Capacity", -40f, 60f, whiteTextPaint);
		}

		private void bmsVoltageView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			float num = Math.Min((float)info.Width / (float)batt_bitmap.Width, (float)info.Height / (float)batt_bitmap.Height);
			float num2 = ((float)info.Width - num * (float)batt_bitmap.Width) / 2f;
			float num3 = ((float)info.Height - num * (float)batt_bitmap.Height) / 2f;
			canvas.DrawBitmap(dest: new SKRect(num2, num3, num2 + num * (float)batt_bitmap.Width, num3 + num * (float)batt_bitmap.Height), bitmap: batt_bitmap);
			int width = e.Info.Width;
			canvas.Translate(dy: e.Info.Height / 2, dx: width / 2);
			canvas.Scale((float)width / 200f);
			canvas.Save();
			float degrees = voltage * 9f / 4f - 112.5f;
			canvas.RotateDegrees(degrees);
			whiteStrokePaint.StrokeWidth = 2f;
			canvas.DrawLine(0f, 10f, 0f, -80f, whiteStrokePaint);
			canvas.Restore();
			canvas.DrawText(voltage.ToString(), -20f, 45f, yellowText2Paint);
			canvas.DrawText("Voltage", -40f, 60f, whiteTextPaint);
		}

		private void bmsCapView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			float num = Math.Min((float)info.Width / (float)batt_bitmap.Width, (float)info.Height / (float)batt_bitmap.Height);
			float num2 = ((float)info.Width - num * (float)batt_bitmap.Width) / 2f;
			float num3 = ((float)info.Height - num * (float)batt_bitmap.Height) / 2f;
			canvas.DrawBitmap(dest: new SKRect(num2, num3, num2 + num * (float)batt_bitmap.Width, num3 + num * (float)batt_bitmap.Height), bitmap: batt_bitmap);
			int width = e.Info.Width;
			canvas.Translate(dy: e.Info.Height / 2, dx: width / 2);
			canvas.Scale((float)width / 200f);
			canvas.Save();
			float degrees = (float)(m_battcap * 9) / 4f - 112.5f;
			canvas.RotateDegrees(degrees);
			whiteStrokePaint.StrokeWidth = 2f;
			canvas.DrawLine(0f, 10f, 0f, -80f, whiteStrokePaint);
			canvas.Restore();
			canvas.DrawText(m_battcap.ToString(), -20f, 45f, yellowText2Paint);
			canvas.DrawText("Capacity", -40f, 60f, whiteTextPaint);
		}

		private void bmsCurrentView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			float num = Math.Min((float)info.Width / (float)motortemp_bitmap.Width, (float)info.Height / (float)motortemp_bitmap.Height);
			float num2 = ((float)info.Width - num * (float)motortemp_bitmap.Width) / 2f;
			float num3 = ((float)info.Height - num * (float)motortemp_bitmap.Height) / 2f;
			canvas.DrawBitmap(dest: new SKRect(num2, num3, num2 + num * (float)motortemp_bitmap.Width, num3 + num * (float)motortemp_bitmap.Height), bitmap: motortemp_bitmap);
			int width = e.Info.Width;
			canvas.Translate(dy: e.Info.Height / 2, dx: width / 2);
			canvas.Scale((float)width / 200f);
			canvas.Save();
			float degrees = linecurr * 360f / 600f - 90f;
			canvas.RotateDegrees(degrees);
			whiteStrokePaint.StrokeWidth = 2f;
			canvas.DrawLine(0f, 10f, 0f, -70f, whiteStrokePaint);
			canvas.Restore();
			canvas.DrawText(linecurr.ToString(), -20f, 45f, yellowText2Paint);
			canvas.DrawText("Current", -40f, 60f, whiteTextPaint);
		}

		private void runView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			if (m_roll == 0)
			{
				if ((Global_state3 & 1) != 0)
				{
					SKPaint paint = new SKPaint
					{
						Style = SKPaintStyle.Stroke,
						Color = SKColors.Red,
						StrokeWidth = 16f,
						StrokeCap = SKStrokeCap.Round,
						IsAntialias = true
					};
					float num = Math.Min((float)info.Width / 100f, (float)info.Height / 100f);
					float num2 = ((float)info.Width - num * 100f) / 2f;
					float num3 = ((float)info.Height - num * 100f) / 2f;
					new SKRect(num2 + 10f, num3 + 10f, num2 + num * 100f - 10f, num3 + num * 100f - 10f);
					canvas.DrawLine(num2 + num * 25f, num3 + num * 80f, num2 + num * 40f, num3 + num * 80f, paint);
					canvas.DrawLine(num2 + num * 40f, num3 + num * 80f, num2 + num * 75f, num3 + num * 20f, paint);
					canvas.DrawLine(num2 + num * 65f, num3 + num * 35f, num2 + num * 75f, num3 + num * 40f, paint);
					SKPaint paint2 = new SKPaint
					{
						Style = SKPaintStyle.Stroke,
						Color = SKColors.LightGray,
						StrokeWidth = 5f,
						StrokeCap = SKStrokeCap.Round,
						IsAntialias = true
					};
					float num4 = num * 50f;
					SKPoint c = new SKPoint(num2 + num4, num3 + num4);
					canvas.DrawCircle(c, num * 45f, paint2);
				}
				else
				{
					float num5 = Math.Min((float)info.Width / (float)rollN_bitmap.Width, (float)info.Height / (float)rollN_bitmap.Height);
					float num6 = ((float)info.Width - num5 * (float)rollN_bitmap.Width) / 2f;
					float num7 = ((float)info.Height - num5 * (float)rollN_bitmap.Height) / 2f;
					canvas.DrawBitmap(dest: new SKRect(num6, num7, num6 + num5 * (float)rollN_bitmap.Width, num7 + num5 * (float)rollN_bitmap.Height), bitmap: rollN_bitmap);
				}
			}
			else if (m_roll == 1)
			{
				float num8 = Math.Min((float)info.Width / (float)rollD_bitmap.Width, (float)info.Height / (float)rollD_bitmap.Height);
				float num9 = ((float)info.Width - num8 * (float)rollD_bitmap.Width) / 2f;
				float num10 = ((float)info.Height - num8 * (float)rollD_bitmap.Height) / 2f;
				canvas.DrawBitmap(dest: new SKRect(num9, num10, num9 + num8 * (float)rollD_bitmap.Width, num10 + num8 * (float)rollD_bitmap.Height), bitmap: rollD_bitmap);
			}
			else
			{
				float num11 = Math.Min((float)info.Width / (float)rollR_bitmap.Width, (float)info.Height / (float)rollR_bitmap.Height);
				float num12 = ((float)info.Width - num11 * (float)rollR_bitmap.Width) / 2f;
				float num13 = ((float)info.Height - num11 * (float)rollR_bitmap.Height) / 2f;
				canvas.DrawBitmap(dest: new SKRect(num12, num13, num12 + num11 * (float)rollR_bitmap.Width, num13 + num11 * (float)rollR_bitmap.Height), bitmap: rollR_bitmap);
			}
			int width = e.Info.Width;
			int height = e.Info.Height;
			canvas.Translate(width / 2, height / 2);
			canvas.Scale((float)width / 200f);
		}

		private void alarmView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			if (Error)
			{
				float num = Math.Min((float)info.Width / (float)error_bitmap.Width, (float)info.Height / (float)error_bitmap.Height);
				float num2 = ((float)info.Width - num * (float)error_bitmap.Width) / 2f;
				float num3 = ((float)info.Height - num * (float)error_bitmap.Height) / 2f;
				canvas.DrawBitmap(dest: new SKRect(num2, num3, num2 + num * (float)error_bitmap.Width, num3 + num * (float)error_bitmap.Height), bitmap: error_bitmap);
			}
			else if (App.NewVersion)
			{
				if ((Global_state2 & 0x200) == 512)
				{
					float num4 = Math.Min((float)info.Width / (float)push1_bitmap.Width, (float)info.Height / (float)push1_bitmap.Height);
					float num5 = ((float)info.Width - num4 * (float)push1_bitmap.Width) / 2f;
					float num6 = ((float)info.Height - num4 * (float)push1_bitmap.Height) / 2f;
					canvas.DrawBitmap(dest: new SKRect(num5, num6, num5 + num4 * (float)push1_bitmap.Width, num6 + num4 * (float)push1_bitmap.Height), bitmap: push1_bitmap);
				}
				else if ((Global_state1 & 0x100) == 0)
				{
					float num7 = Math.Min((float)info.Width / (float)zuotong_bitmap.Width, (float)info.Height / (float)zuotong_bitmap.Height);
					float num8 = ((float)info.Width - num7 * (float)zuotong_bitmap.Width) / 2f;
					float num9 = ((float)info.Height - num7 * (float)zuotong_bitmap.Height) / 2f;
					canvas.DrawBitmap(dest: new SKRect(num8, num9, num8 + num7 * (float)zuotong_bitmap.Width, num9 + num7 * (float)zuotong_bitmap.Height), bitmap: zuotong_bitmap);
				}
				else
				{
					float num10 = Math.Min((float)info.Width / (float)ok_bitmap.Width, (float)info.Height / (float)ok_bitmap.Height);
					float num11 = ((float)info.Width - num10 * (float)ok_bitmap.Width) / 2f;
					float num12 = ((float)info.Height - num10 * (float)ok_bitmap.Height) / 2f;
					canvas.DrawBitmap(dest: new SKRect(num11, num12, num11 + num10 * (float)ok_bitmap.Width, num12 + num10 * (float)ok_bitmap.Height), bitmap: ok_bitmap);
				}
			}
			else
			{
				float num13 = Math.Min((float)info.Width / (float)ok_bitmap.Width, (float)info.Height / (float)ok_bitmap.Height);
				float num14 = ((float)info.Width - num13 * (float)ok_bitmap.Width) / 2f;
				float num15 = ((float)info.Height - num13 * (float)ok_bitmap.Height) / 2f;
				canvas.DrawBitmap(dest: new SKRect(num14, num15, num14 + num13 * (float)ok_bitmap.Width, num15 + num13 * (float)ok_bitmap.Height), bitmap: ok_bitmap);
			}
			int width = e.Info.Width;
			int height = e.Info.Height;
			canvas.Translate(width / 2, height / 2);
			canvas.Scale((float)width / 200f);
		}

		private void mosTempView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			float num = Math.Min((float)info.Width / (float)motortemp_bitmap.Width, (float)info.Height / (float)motortemp_bitmap.Height);
			float num2 = ((float)info.Width - num * (float)motortemp_bitmap.Width) / 2f;
			float num3 = ((float)info.Height - num * (float)motortemp_bitmap.Height) / 2f;
			canvas.DrawBitmap(dest: new SKRect(num2, num3, num2 + num * (float)motortemp_bitmap.Width, num3 + num * (float)motortemp_bitmap.Height), bitmap: motortemp_bitmap);
			int width = e.Info.Width;
			canvas.Translate(dy: e.Info.Height / 2, dx: width / 2);
			canvas.Scale((float)width / 200f);
			canvas.Save();
			float degrees = (float)(m_mostemp * 3) / 2f - 90f;
			canvas.RotateDegrees(degrees);
			whiteStrokePaint.StrokeWidth = 2f;
			canvas.DrawLine(0f, 10f, 0f, -80f, whiteStrokePaint);
			canvas.Restore();
			canvas.DrawText(m_mostemp.ToString("0°„"), -20f, 60f, yellowText2Paint);
			canvas.DrawText("MOS Temprature", -60f, 75f, whiteTextPaint);
		}

		private void lineCurrView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			float num = Math.Min((float)info.Width / (float)linecurr_bitmap.Width, (float)info.Height / (float)linecurr_bitmap.Height);
			float num2 = ((float)info.Width - num * (float)linecurr_bitmap.Width) / 2f;
			float num3 = ((float)info.Height - num * (float)linecurr_bitmap.Height) / 2f;
			canvas.DrawBitmap(dest: new SKRect(num2, num3, num2 + num * (float)linecurr_bitmap.Width, num3 + num * (float)linecurr_bitmap.Height), bitmap: linecurr_bitmap);
			int width = e.Info.Width;
			canvas.Translate(dy: e.Info.Height * 111 / 180, dx: width / 2);
			canvas.Scale((float)width / 200f);
			canvas.Save();
			float degrees = linecurr * 360f / 600f;
			canvas.RotateDegrees(degrees);
			whiteStrokePaint.StrokeWidth = 2f;
			canvas.DrawLine(0f, 10f, 0f, -70f, whiteStrokePaint);
			canvas.Restore();
		}

		private void phaseAView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			float num = Math.Min((float)info.Width / (float)phasec_bitmap.Width, (float)info.Height / (float)phasec_bitmap.Height);
			float num2 = ((float)info.Width - num * (float)phasec_bitmap.Width) / 2f;
			float num3 = ((float)info.Height - num * (float)phasec_bitmap.Height) / 2f;
			canvas.DrawBitmap(dest: new SKRect(num2, num3, num2 + num * (float)phasec_bitmap.Width, num3 + num * (float)phasec_bitmap.Height), bitmap: phasec_bitmap);
			int width = e.Info.Width;
			canvas.Translate(dy: e.Info.Height * 114 / 180, dx: width / 2);
			canvas.Scale((float)width / 200f);
			canvas.Save();
			float degrees = m_phaseAcurr * 360f / 900f - 120f;
			canvas.RotateDegrees(degrees);
			whiteStrokePaint.StrokeWidth = 2f;
			canvas.DrawLine(0f, 10f, 0f, -70f, whiteStrokePaint);
			canvas.Restore();
		}

		private void phaseCView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			float num = Math.Min((float)info.Width / (float)phasec_bitmap.Width, (float)info.Height / (float)phasec_bitmap.Height);
			float num2 = ((float)info.Width - num * (float)phasec_bitmap.Width) / 2f;
			float num3 = ((float)info.Height - num * (float)phasec_bitmap.Height) / 2f;
			canvas.DrawBitmap(dest: new SKRect(num2, num3, num2 + num * (float)phasec_bitmap.Width, num3 + num * (float)phasec_bitmap.Height), bitmap: phasec_bitmap);
			int width = e.Info.Width;
			canvas.Translate(dy: e.Info.Height * 114 / 180, dx: width / 2);
			canvas.Scale((float)width / 200f);
			canvas.Save();
			float degrees = m_phaseCcurr * 360f / 900f - 120f;
			canvas.RotateDegrees(degrees);
			whiteStrokePaint.StrokeWidth = 2f;
			canvas.DrawLine(0f, 10f, 0f, -70f, whiteStrokePaint);
			canvas.Restore();
		}

		private void throttleView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			float num = Math.Min((float)info.Width / (float)throttle_bitmap.Width, (float)info.Height / (float)throttle_bitmap.Height);
			float num2 = ((float)info.Width - num * (float)throttle_bitmap.Width) / 2f;
			float num3 = ((float)info.Height - num * (float)throttle_bitmap.Height) / 2f;
			canvas.DrawBitmap(dest: new SKRect(num2, num3, num2 + num * (float)throttle_bitmap.Width, num3 + num * (float)throttle_bitmap.Height), bitmap: throttle_bitmap);
			int width = e.Info.Width;
			canvas.Translate(dy: e.Info.Height * 108 / 180, dx: width / 2);
			canvas.Scale((float)width / 200f);
			canvas.Save();
			float degrees = (float)(ThrottleDepth * 360) / 384f - 120f;
			canvas.RotateDegrees(degrees);
			whiteStrokePaint.StrokeWidth = 2f;
			canvas.DrawLine(0f, 10f, 0f, -70f, whiteStrokePaint);
			canvas.Restore();
			canvas.DrawText(ThrottleDepth.ToString(), -10f, 25f, yellowText2Paint);
		}

		private async void OpenDSG_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Open Discharge MOS", null, "Open", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("¥Úø™∑≈µÁMOS", null, "¥Úø™", "»°œ˚"))))
			{
				SendRs232Data(4, 111, 187, 102);
			}
		}

		private async void CloseDSG_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Close Discharge MOS", null, "Close", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("πÿ±’∑≈µÁMOS", null, "πÿ±’", "»°œ˚"))))
			{
				SendRs232Data(4, 111, 221, 102);
			}
		}

		private async void OpenCHG_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Open Charge MOS", null, "Open", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("¥Úø™≥‰µÁMOS", null, "¥Úø™", "»°œ˚"))))
			{
				SendRs232Data(4, 111, 170, 102);
			}
		}

		private async void CloseCHG_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Close Charge MOS", null, "Close", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("πÿ±’≥‰µÁMOS", null, "πÿ±’", "»°œ˚"))))
			{
				SendRs232Data(4, 111, 204, 102);
			}
		}

		private void WriteAddr(byte[] data, byte addr, byte len)
		{
			data[0] = 170;
			len += 4;
			data[1] = (byte)(192 + len);
			data[2] = addr;
			data[3] = addr;
			byte b = 60;
			byte b2 = 127;
			byte b3;
			for (b3 = 0; b3 < len; b3++)
			{
				int num = b ^ data[b3];
				b = (byte)(b2 ^ crctablehi[num]);
				b2 = crctablelo[num];
			}
			data[b3] = b;
			data[b3 + 1] = b2;
			MessagingCenter.Send(this, "WriteParaMeter", data);
		}

		private async void BindA()
		{
			if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Controller is not bound or login, Please bind or login the controller.", null, "Bind", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("øÿ÷∆∆˜Œ¥∞Û∂®µ«¬º£¨«Îœ»∞Û∂®µ«¬ºøÿ÷∆∆˜°£", null, "∞Û∂®", "»°œ˚")))
			{
				App.NotBindStat = 99;
			}
		}

		private bool NotBindingStat()
		{
			if (App.RcvRemoteCount > 0 && !App.isConnected)
			{
				return false;
			}
			if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
			{
				BindA();
				return true;
			}
			return false;
		}

		private async void ButtonTestAngle_Clicked(object sender, EventArgs e)
		{
			string text = ((!App.CN) ? (await DisplayActionSheet("MultiFunc:", "cancel", "A-Display P", "B-Display 1", "C-Display 2", "D-Display 3", "E-Display BST", "F-Display A", "G-Display H", "H-Display R", "I-Display Speed", "J-Display Cruise", "K-Display SOC", "L-Display Current", "M-Display TCS", "N-Display Brake", "O-Display SideStand", "P-Display Seat", "Q-Display Throttle", "R-Display HbarAlarm", "S-Display Motor Alarm", "T-Display Controller Alarm", "U-Start Analyze", "X-Switch BLE Channel", "Y-Cancel Follow", "Z-Start Speed Ratio Measure")) : (await DisplayActionSheet("∂‡π¶ƒ‹:", "cancel", "A-œ‘ æµµŒªP", "B-œ‘ æµµŒª1", "C-œ‘ æµµŒª2", "D-œ‘ æµµŒª3", "E-œ‘ æµµŒªBST", "F-œ‘ æµµŒªA", "G-œ‘ æµµŒªH", "H-œ‘ æµµŒªR", "I-œ‘ æÀŸ∂»", "J-œ‘ æ—≤∫Ω", "K-œ‘ æµÁ¡ø", "L-œ‘ æµÁ¡˜", "M-œ‘ æTCS", "N-œ‘ æ…≤≥µ", "O-œ‘ æ±ﬂ≥≈", "P-œ‘ æ◊¯Õ∞", "Q-œ‘ æ”Õ√≈", "R-œ‘ æ◊™∞—∏ÊæØ", "S-œ‘ æµÁª˙∏ÊæØ", "T-œ‘ æøÿ÷∆∆˜∏ÊæØ", "U-∆Ù∂Ø–≠“È∑÷Œˆ", "X-«–ªª¿∂—¿Õ®µ¿", "Y-»°œ˚∏˙ÀÊ", "Z-ÀŸ±»≤‚¡ø")));
			if (!(text != "cancel") || string.IsNullOrWhiteSpace(text) || NotBindingStat())
			{
				return;
			}
			char c = text[0];
			switch (c)
			{
			case 'Z':
			{
				if (rcv_WheelRatio == 0 || rcv_WheelRadius == 0 || rcv_WheelWidth == 0 || rcv_PolePairs == 0)
				{
					break;
				}
				oldrcv_turns = rcv_turns;
				if (!((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Drive forward 100m and click Confirm upon arrival.", null, "Confirm", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("œÚ«∞–– ª100√◊£¨µΩ¥Ôƒøµƒµÿ∫Û£¨µ„»∑»œ", null, "»∑»œ", "»°œ˚"))))
				{
					break;
				}
				ushort num2 = (ushort)(rcv_turns - oldrcv_turns);
				int num3 = R * num2 / 6366 / rcv_PolePairs;
				if (num3 > 0)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num3,
						(byte)(num3 >> 8),
						0,
						0
					}, 212, 2);
					if (App.CN)
					{
						UserDialogs.Instance.Alert("ÀŸ±»£∫" + num3);
					}
					else
					{
						UserDialogs.Instance.Alert("SpeedRatio:" + num3);
					}
				}
				else if (App.CN)
				{
					UserDialogs.Instance.Alert(" ß∞‹£¨–– ª¡À0√◊.");
				}
				else
				{
					UserDialogs.Instance.Alert("Failed, drove 0m.");
				}
				break;
			}
			case 'Y':
				if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Enter Non-Following Status", null, "Enter", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´Ω¯»Î»°œ˚∏˙ÀÊ◊¥Ã¨", null, "Ω¯»Î", "»°œ˚")))
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8] { 0, 0, 0, 0, 136, 1, 0, 0 }, 160, 2);
					}
					else
					{
						SendRs232Data(4, 2, 0, 0);
					}
				}
				break;
			case 'X':
				if (App.channel != 2)
				{
					SendRs232Data(4, 181, 2, 254);
					App.channel = 2;
				}
				else
				{
					SendRs232Data(4, 181, 1, byte.MaxValue);
					App.channel = 1;
				}
				break;
			default:
			{
				int num = c - 65;
				SendRs232Data(4, 181, 3, (byte)num);
				break;
			}
			}
		}

		private async void ButtonAutoLearn_Clicked(object sender, EventArgs e)
		{
			if (NotBindingStat())
			{
				return;
			}
			bool flag = true;
			if (!autolearnstat)
			{
				flag = ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Enter Self Learning Status", null, "Enter", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´Ω¯»Î◊‘—ßœ∞◊¥Ã¨", null, "Ω¯»Î", "»°œ˚")));
			}
			if (!flag)
			{
				return;
			}
			if (autolearnstat)
			{
				if (App.NewVersion)
				{
					WriteAddr(new byte[8] { 0, 0, 0, 0, 136, 3, 0, 0 }, 160, 2);
				}
				else
				{
					SendRs232Data(4, 111, 187, 85);
				}
			}
			else if (App.NewVersion)
			{
				WriteAddr(new byte[8] { 0, 0, 0, 0, 136, 2, 0, 0 }, 160, 2);
			}
			else
			{
				SendRs232Data(4, 111, 170, 85);
			}
		}

		private void SendRs232Data(byte mcmd, byte scmd, byte va1, byte va2)
		{
			byte[] array = new byte[8];
			array[0] = 170;
			array[1] = mcmd;
			array[2] = (byte)(~array[1]);
			array[3] = scmd;
			array[4] = va1;
			array[5] = va2;
			array[6] = (byte)(array[0] + array[1] + array[2] + array[3] + array[4] + array[5]);
			array[7] = (byte)(~array[6]);
			MessagingCenter.Send(this, "WriteParaMeter", array);
		}

		private async void TestBallance_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Test Ballance", null, "OK", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("æ˘∫‚≤‚ ‘", null, "»∑∂®", "»°œ˚"))))
			{
				SendRs232Data(4, 111, 204, 85);
			}
		}

		private async void ButtonAutoBallance_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Start Ballance", null, "Shutdown", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("ø™∆Ù◊‘∂Øæ˘∫‚", null, "ø™∆Ù", "»°œ˚"))))
			{
				SendRs232Data(4, 111, 170, 85);
			}
		}

		private async void CloseBallance_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Stop Ballance", null, "Stop", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("Õ£÷π◊‘∂Øæ˘∫‚", null, "Õ£÷π", "»°œ˚"))))
			{
				SendRs232Data(4, 111, 187, 85);
			}
		}

		private async void CloseSystem_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("System Shutdown", null, "Shutdown", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´πÿ±’œµÕ≥", null, "πÿ±’", "»°œ˚"))))
			{
				SendRs232Data(4, 2, 170, 85);
			}
		}

		private void ButtonCancelAutoLearn_Clicked(object sender, EventArgs e)
		{
			NotBindingStat();
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			if (ResourceLoader.IsEnabled && ResourceLoader.CanProvideContentFor(new ResourceLoader.ResourceLoadingQuery
			{
				AssemblyName = typeof(GraphPage).GetTypeInfo().Assembly.GetName(),
				ResourcePath = "GraphPage.xaml",
				Instance = this
			}))
			{
				__InitComponentRuntime();
				return;
			}
			if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
			{
				__InitComponentRuntime();
				return;
			}
			ColumnDefinition columnDefinition;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 13, 26);
			ColumnDefinition columnDefinition2;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition2 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 14, 26);
			ColumnDefinition columnDefinition3;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition3 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 15, 26);
			SKCanvasView sKCanvasView;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 17, 22);
			RowDefinition rowDefinition;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 23, 30);
			RowDefinition rowDefinition2;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition2 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 24, 30);
			RowDefinition rowDefinition3;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition3 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 25, 30);
			SKCanvasView sKCanvasView2;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView2 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 27, 26);
			SKCanvasView sKCanvasView3;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView3 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 31, 26);
			SKCanvasView sKCanvasView4;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView4 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 35, 26);
			Grid grid;
			VisualDiagnostics.RegisterSourceInfo(grid = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 21, 22);
			SKCanvasView sKCanvasView5;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView5 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 40, 22);
			Grid grid2;
			VisualDiagnostics.RegisterSourceInfo(grid2 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 11, 18);
			ColumnDefinition columnDefinition4;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition4 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 47, 26);
			ColumnDefinition columnDefinition5;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition5 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 48, 26);
			ColumnDefinition columnDefinition6;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition6 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 49, 26);
			SKCanvasView sKCanvasView6;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView6 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 51, 22);
			SKCanvasView sKCanvasView7;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView7 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 55, 22);
			SKCanvasView sKCanvasView8;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView8 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 59, 22);
			Grid grid3;
			VisualDiagnostics.RegisterSourceInfo(grid3 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 45, 18);
			ColumnDefinition columnDefinition7;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition7 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 66, 26);
			ColumnDefinition columnDefinition8;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition8 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 67, 26);
			ColumnDefinition columnDefinition9;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition9 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 68, 26);
			RowDefinition rowDefinition4;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition4 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 72, 30);
			RowDefinition rowDefinition5;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition5 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 73, 30);
			RowDefinition rowDefinition6;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition6 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 74, 30);
			Label label;
			VisualDiagnostics.RegisterSourceInfo(label = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 76, 26);
			Label label2;
			VisualDiagnostics.RegisterSourceInfo(label2 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 77, 26);
			SKCanvasView sKCanvasView9;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView9 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 78, 26);
			Grid grid4;
			VisualDiagnostics.RegisterSourceInfo(grid4 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 70, 22);
			RowDefinition rowDefinition7;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition7 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 85, 30);
			RowDefinition rowDefinition8;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition8 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 86, 30);
			RowDefinition rowDefinition9;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition9 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 87, 30);
			Label label3;
			VisualDiagnostics.RegisterSourceInfo(label3 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 89, 26);
			Label label4;
			VisualDiagnostics.RegisterSourceInfo(label4 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 90, 26);
			SKCanvasView sKCanvasView10;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView10 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 91, 26);
			Grid grid5;
			VisualDiagnostics.RegisterSourceInfo(grid5 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 83, 22);
			RowDefinition rowDefinition10;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition10 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 98, 30);
			RowDefinition rowDefinition11;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition11 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 99, 30);
			RowDefinition rowDefinition12;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition12 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 100, 30);
			Label label5;
			VisualDiagnostics.RegisterSourceInfo(label5 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 102, 26);
			Label label6;
			VisualDiagnostics.RegisterSourceInfo(label6 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 103, 26);
			SKCanvasView sKCanvasView11;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView11 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 104, 26);
			Grid grid6;
			VisualDiagnostics.RegisterSourceInfo(grid6 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 96, 22);
			Grid grid7;
			VisualDiagnostics.RegisterSourceInfo(grid7 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 64, 18);
			ColumnDefinition columnDefinition10;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition10 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 111, 26);
			ColumnDefinition columnDefinition11;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition11 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 112, 26);
			ColumnDefinition columnDefinition12;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition12 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 113, 26);
			RowDefinition rowDefinition13;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition13 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 117, 30);
			RowDefinition rowDefinition14;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition14 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 118, 30);
			Label label7;
			VisualDiagnostics.RegisterSourceInfo(label7 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 120, 26);
			SKCanvasView sKCanvasView12;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView12 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 121, 26);
			Grid grid8;
			VisualDiagnostics.RegisterSourceInfo(grid8 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 115, 22);
			RowDefinition rowDefinition15;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition15 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 127, 30);
			RowDefinition rowDefinition16;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition16 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 128, 30);
			RowDefinition rowDefinition17;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition17 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 129, 30);
			RowDefinition rowDefinition18;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition18 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 130, 30);
			Label label8;
			VisualDiagnostics.RegisterSourceInfo(label8 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 132, 26);
			Label label9;
			VisualDiagnostics.RegisterSourceInfo(label9 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 133, 26);
			Label label10;
			VisualDiagnostics.RegisterSourceInfo(label10 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 134, 26);
			Label label11;
			VisualDiagnostics.RegisterSourceInfo(label11 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 135, 26);
			Grid grid9;
			VisualDiagnostics.RegisterSourceInfo(grid9 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 125, 22);
			RowDefinition rowDefinition19;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition19 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 139, 30);
			RowDefinition rowDefinition20;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition20 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 140, 30);
			Label label12;
			VisualDiagnostics.RegisterSourceInfo(label12 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 142, 26);
			SKCanvasView sKCanvasView13;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView13 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 143, 26);
			Grid grid10;
			VisualDiagnostics.RegisterSourceInfo(grid10 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 137, 22);
			Grid grid11;
			VisualDiagnostics.RegisterSourceInfo(grid11 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 109, 18);
			ColumnDefinition columnDefinition13;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition13 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 150, 26);
			ColumnDefinition columnDefinition14;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition14 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 151, 26);
			Label label13;
			VisualDiagnostics.RegisterSourceInfo(label13 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 153, 22);
			Grid grid12;
			VisualDiagnostics.RegisterSourceInfo(grid12 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 148, 18);
			ColumnDefinition columnDefinition15;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition15 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 160, 26);
			ColumnDefinition columnDefinition16;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition16 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 161, 26);
			Label label14;
			VisualDiagnostics.RegisterSourceInfo(label14 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 163, 22);
			Label label15;
			VisualDiagnostics.RegisterSourceInfo(label15 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 166, 22);
			Grid grid13;
			VisualDiagnostics.RegisterSourceInfo(grid13 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 158, 18);
			ColumnDefinition columnDefinition17;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition17 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 172, 26);
			ColumnDefinition columnDefinition18;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition18 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 173, 26);
			ColumnDefinition columnDefinition19;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition19 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 174, 26);
			ColumnDefinition columnDefinition20;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition20 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 175, 26);
			Xamarin.Forms.Button button;
			VisualDiagnostics.RegisterSourceInfo(button = new Xamarin.Forms.Button(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 177, 22);
			Xamarin.Forms.Button button2;
			VisualDiagnostics.RegisterSourceInfo(button2 = new Xamarin.Forms.Button(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 178, 22);
			Label label16;
			VisualDiagnostics.RegisterSourceInfo(label16 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 179, 22);
			Label label17;
			VisualDiagnostics.RegisterSourceInfo(label17 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 180, 22);
			Grid grid14;
			VisualDiagnostics.RegisterSourceInfo(grid14 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 170, 18);
			StackLayout stackLayout;
			VisualDiagnostics.RegisterSourceInfo(stackLayout = new StackLayout(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 10, 14);
			ColumnDefinition columnDefinition21;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition21 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 189, 30);
			ColumnDefinition columnDefinition22;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition22 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 190, 30);
			ColumnDefinition columnDefinition23;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition23 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 191, 30);
			SKCanvasView sKCanvasView14;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView14 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 193, 26);
			SKCanvasView sKCanvasView15;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView15 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 197, 26);
			SKCanvasView sKCanvasView16;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView16 = new SKCanvasView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 201, 26);
			Grid grid15;
			VisualDiagnostics.RegisterSourceInfo(grid15 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 187, 22);
			RowDefinition rowDefinition21;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition21 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 208, 34);
			RowDefinition rowDefinition22;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition22 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 209, 34);
			RowDefinition rowDefinition23;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition23 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 210, 34);
			ColumnDefinition columnDefinition24;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition24 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 213, 34);
			ColumnDefinition columnDefinition25;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition25 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 214, 34);
			ColumnDefinition columnDefinition26;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition26 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 219, 42);
			ColumnDefinition columnDefinition27;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition27 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 220, 42);
			Label label18;
			VisualDiagnostics.RegisterSourceInfo(label18 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 222, 38);
			Label label19;
			VisualDiagnostics.RegisterSourceInfo(label19 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 225, 38);
			Grid grid16;
			VisualDiagnostics.RegisterSourceInfo(grid16 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 217, 34);
			Frame frame;
			VisualDiagnostics.RegisterSourceInfo(frame = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 216, 30);
			ColumnDefinition columnDefinition28;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition28 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 233, 42);
			ColumnDefinition columnDefinition29;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition29 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 234, 42);
			Label label20;
			VisualDiagnostics.RegisterSourceInfo(label20 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 236, 38);
			Label label21;
			VisualDiagnostics.RegisterSourceInfo(label21 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 239, 38);
			Grid grid17;
			VisualDiagnostics.RegisterSourceInfo(grid17 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 231, 34);
			Frame frame2;
			VisualDiagnostics.RegisterSourceInfo(frame2 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 230, 30);
			ColumnDefinition columnDefinition30;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition30 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 247, 42);
			ColumnDefinition columnDefinition31;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition31 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 248, 42);
			Label label22;
			VisualDiagnostics.RegisterSourceInfo(label22 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 250, 38);
			Label label23;
			VisualDiagnostics.RegisterSourceInfo(label23 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 253, 38);
			Grid grid18;
			VisualDiagnostics.RegisterSourceInfo(grid18 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 245, 34);
			Frame frame3;
			VisualDiagnostics.RegisterSourceInfo(frame3 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 244, 30);
			ColumnDefinition columnDefinition32;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition32 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 261, 42);
			ColumnDefinition columnDefinition33;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition33 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 262, 42);
			Label label24;
			VisualDiagnostics.RegisterSourceInfo(label24 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 264, 38);
			Label label25;
			VisualDiagnostics.RegisterSourceInfo(label25 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 267, 38);
			Grid grid19;
			VisualDiagnostics.RegisterSourceInfo(grid19 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 259, 34);
			Frame frame4;
			VisualDiagnostics.RegisterSourceInfo(frame4 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 258, 30);
			ColumnDefinition columnDefinition34;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition34 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 275, 42);
			ColumnDefinition columnDefinition35;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition35 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 276, 42);
			Label label26;
			VisualDiagnostics.RegisterSourceInfo(label26 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 278, 38);
			Label label27;
			VisualDiagnostics.RegisterSourceInfo(label27 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 281, 38);
			Grid grid20;
			VisualDiagnostics.RegisterSourceInfo(grid20 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 273, 34);
			Frame frame5;
			VisualDiagnostics.RegisterSourceInfo(frame5 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 272, 30);
			ColumnDefinition columnDefinition36;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition36 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 289, 42);
			ColumnDefinition columnDefinition37;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition37 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 290, 42);
			Label label28;
			VisualDiagnostics.RegisterSourceInfo(label28 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 292, 38);
			Label label29;
			VisualDiagnostics.RegisterSourceInfo(label29 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 295, 38);
			Grid grid21;
			VisualDiagnostics.RegisterSourceInfo(grid21 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 287, 34);
			Frame frame6;
			VisualDiagnostics.RegisterSourceInfo(frame6 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 286, 30);
			Grid grid22;
			VisualDiagnostics.RegisterSourceInfo(grid22 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 206, 26);
			ColumnDefinition columnDefinition38;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition38 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 304, 34);
			ColumnDefinition columnDefinition39;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition39 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 305, 34);
			ColumnDefinition columnDefinition40;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition40 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 310, 42);
			ColumnDefinition columnDefinition41;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition41 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 311, 42);
			Label label30;
			VisualDiagnostics.RegisterSourceInfo(label30 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 313, 38);
			Label label31;
			VisualDiagnostics.RegisterSourceInfo(label31 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 316, 38);
			Grid grid23;
			VisualDiagnostics.RegisterSourceInfo(grid23 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 308, 34);
			Frame frame7;
			VisualDiagnostics.RegisterSourceInfo(frame7 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 307, 30);
			ColumnDefinition columnDefinition42;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition42 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 324, 42);
			ColumnDefinition columnDefinition43;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition43 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 325, 42);
			Label label32;
			VisualDiagnostics.RegisterSourceInfo(label32 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 327, 38);
			Label label33;
			VisualDiagnostics.RegisterSourceInfo(label33 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 330, 38);
			Grid grid24;
			VisualDiagnostics.RegisterSourceInfo(grid24 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 322, 34);
			Frame frame8;
			VisualDiagnostics.RegisterSourceInfo(frame8 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 321, 30);
			Grid grid25;
			VisualDiagnostics.RegisterSourceInfo(grid25 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 302, 26);
			ColumnDefinition columnDefinition44;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition44 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 338, 34);
			ColumnDefinition columnDefinition45;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition45 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 339, 34);
			ColumnDefinition columnDefinition46;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition46 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 340, 34);
			ColumnDefinition columnDefinition47;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition47 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 341, 34);
			ColumnDefinition columnDefinition48;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition48 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 346, 42);
			ColumnDefinition columnDefinition49;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition49 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 347, 42);
			Label label34;
			VisualDiagnostics.RegisterSourceInfo(label34 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 349, 38);
			Label label35;
			VisualDiagnostics.RegisterSourceInfo(label35 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 352, 38);
			Grid grid26;
			VisualDiagnostics.RegisterSourceInfo(grid26 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 344, 34);
			Frame frame9;
			VisualDiagnostics.RegisterSourceInfo(frame9 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 343, 30);
			ColumnDefinition columnDefinition50;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition50 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 360, 42);
			ColumnDefinition columnDefinition51;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition51 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 361, 42);
			Label label36;
			VisualDiagnostics.RegisterSourceInfo(label36 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 363, 38);
			Label label37;
			VisualDiagnostics.RegisterSourceInfo(label37 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 366, 38);
			Grid grid27;
			VisualDiagnostics.RegisterSourceInfo(grid27 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 358, 34);
			Frame frame10;
			VisualDiagnostics.RegisterSourceInfo(frame10 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 357, 30);
			ColumnDefinition columnDefinition52;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition52 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 374, 42);
			ColumnDefinition columnDefinition53;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition53 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 375, 42);
			Label label38;
			VisualDiagnostics.RegisterSourceInfo(label38 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 377, 38);
			Label label39;
			VisualDiagnostics.RegisterSourceInfo(label39 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 380, 38);
			Grid grid28;
			VisualDiagnostics.RegisterSourceInfo(grid28 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 372, 34);
			Frame frame11;
			VisualDiagnostics.RegisterSourceInfo(frame11 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 371, 30);
			ColumnDefinition columnDefinition54;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition54 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 388, 42);
			ColumnDefinition columnDefinition55;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition55 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 389, 42);
			Label label40;
			VisualDiagnostics.RegisterSourceInfo(label40 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 391, 38);
			Label label41;
			VisualDiagnostics.RegisterSourceInfo(label41 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 394, 38);
			Grid grid29;
			VisualDiagnostics.RegisterSourceInfo(grid29 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 386, 34);
			Frame frame12;
			VisualDiagnostics.RegisterSourceInfo(frame12 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 385, 30);
			Grid grid30;
			VisualDiagnostics.RegisterSourceInfo(grid30 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 336, 26);
			RowDefinition rowDefinition24;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition24 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 402, 34);
			RowDefinition rowDefinition25;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition25 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 403, 34);
			RowDefinition rowDefinition26;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition26 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 404, 34);
			ColumnDefinition columnDefinition56;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition56 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 407, 34);
			ColumnDefinition columnDefinition57;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition57 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 408, 34);
			ColumnDefinition columnDefinition58;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition58 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 413, 42);
			ColumnDefinition columnDefinition59;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition59 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 414, 42);
			Label label42;
			VisualDiagnostics.RegisterSourceInfo(label42 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 416, 38);
			Label label43;
			VisualDiagnostics.RegisterSourceInfo(label43 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 419, 38);
			Grid grid31;
			VisualDiagnostics.RegisterSourceInfo(grid31 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 411, 34);
			Frame frame13;
			VisualDiagnostics.RegisterSourceInfo(frame13 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 410, 30);
			ColumnDefinition columnDefinition60;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition60 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 427, 42);
			ColumnDefinition columnDefinition61;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition61 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 428, 42);
			Label label44;
			VisualDiagnostics.RegisterSourceInfo(label44 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 430, 38);
			Label label45;
			VisualDiagnostics.RegisterSourceInfo(label45 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 433, 38);
			Grid grid32;
			VisualDiagnostics.RegisterSourceInfo(grid32 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 425, 34);
			Frame frame14;
			VisualDiagnostics.RegisterSourceInfo(frame14 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 424, 30);
			ColumnDefinition columnDefinition62;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition62 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 442, 42);
			ColumnDefinition columnDefinition63;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition63 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 443, 42);
			Label label46;
			VisualDiagnostics.RegisterSourceInfo(label46 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 445, 38);
			Label label47;
			VisualDiagnostics.RegisterSourceInfo(label47 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 448, 38);
			Grid grid33;
			VisualDiagnostics.RegisterSourceInfo(grid33 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 440, 34);
			Frame frame15;
			VisualDiagnostics.RegisterSourceInfo(frame15 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 439, 30);
			ColumnDefinition columnDefinition64;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition64 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 456, 42);
			ColumnDefinition columnDefinition65;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition65 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 457, 42);
			Label label48;
			VisualDiagnostics.RegisterSourceInfo(label48 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 459, 38);
			Label label49;
			VisualDiagnostics.RegisterSourceInfo(label49 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 462, 38);
			Grid grid34;
			VisualDiagnostics.RegisterSourceInfo(grid34 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 454, 34);
			Frame frame16;
			VisualDiagnostics.RegisterSourceInfo(frame16 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 453, 30);
			ColumnDefinition columnDefinition66;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition66 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 470, 42);
			ColumnDefinition columnDefinition67;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition67 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 471, 42);
			Label label50;
			VisualDiagnostics.RegisterSourceInfo(label50 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 473, 38);
			Label label51;
			VisualDiagnostics.RegisterSourceInfo(label51 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 476, 38);
			Grid grid35;
			VisualDiagnostics.RegisterSourceInfo(grid35 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 468, 34);
			Frame frame17;
			VisualDiagnostics.RegisterSourceInfo(frame17 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 467, 30);
			ColumnDefinition columnDefinition68;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition68 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 484, 42);
			ColumnDefinition columnDefinition69;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition69 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 485, 42);
			Label label52;
			VisualDiagnostics.RegisterSourceInfo(label52 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 487, 38);
			Label label53;
			VisualDiagnostics.RegisterSourceInfo(label53 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 490, 38);
			Grid grid36;
			VisualDiagnostics.RegisterSourceInfo(grid36 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 482, 34);
			Frame frame18;
			VisualDiagnostics.RegisterSourceInfo(frame18 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 481, 30);
			Grid grid37;
			VisualDiagnostics.RegisterSourceInfo(grid37 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 400, 26);
			RowDefinition rowDefinition27;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition27 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 498, 34);
			RowDefinition rowDefinition28;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition28 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 499, 34);
			RowDefinition rowDefinition29;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition29 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 500, 34);
			RowDefinition rowDefinition30;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition30 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 501, 34);
			RowDefinition rowDefinition31;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition31 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 502, 34);
			RowDefinition rowDefinition32;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition32 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 503, 34);
			RowDefinition rowDefinition33;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition33 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 504, 34);
			RowDefinition rowDefinition34;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition34 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 505, 34);
			RowDefinition rowDefinition35;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition35 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 506, 34);
			RowDefinition rowDefinition36;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition36 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 507, 34);
			RowDefinition rowDefinition37;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition37 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 508, 34);
			RowDefinition rowDefinition38;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition38 = new RowDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 509, 34);
			ColumnDefinition columnDefinition70;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition70 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 512, 34);
			ColumnDefinition columnDefinition71;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition71 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 513, 34);
			ColumnDefinition columnDefinition72;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition72 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 518, 42);
			ColumnDefinition columnDefinition73;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition73 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 519, 42);
			BoxView boxView;
			VisualDiagnostics.RegisterSourceInfo(boxView = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 521, 38);
			Label label54;
			VisualDiagnostics.RegisterSourceInfo(label54 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 522, 38);
			Label label55;
			VisualDiagnostics.RegisterSourceInfo(label55 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 525, 38);
			Grid grid38;
			VisualDiagnostics.RegisterSourceInfo(grid38 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 516, 34);
			Frame frame19;
			VisualDiagnostics.RegisterSourceInfo(frame19 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 515, 30);
			ColumnDefinition columnDefinition74;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition74 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 533, 42);
			ColumnDefinition columnDefinition75;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition75 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 534, 42);
			BoxView boxView2;
			VisualDiagnostics.RegisterSourceInfo(boxView2 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 536, 38);
			Label label56;
			VisualDiagnostics.RegisterSourceInfo(label56 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 537, 38);
			Label label57;
			VisualDiagnostics.RegisterSourceInfo(label57 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 540, 38);
			Grid grid39;
			VisualDiagnostics.RegisterSourceInfo(grid39 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 531, 34);
			Frame frame20;
			VisualDiagnostics.RegisterSourceInfo(frame20 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 530, 30);
			ColumnDefinition columnDefinition76;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition76 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 548, 42);
			ColumnDefinition columnDefinition77;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition77 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 549, 42);
			BoxView boxView3;
			VisualDiagnostics.RegisterSourceInfo(boxView3 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 551, 38);
			Label label58;
			VisualDiagnostics.RegisterSourceInfo(label58 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 552, 38);
			Label label59;
			VisualDiagnostics.RegisterSourceInfo(label59 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 555, 38);
			Grid grid40;
			VisualDiagnostics.RegisterSourceInfo(grid40 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 546, 34);
			Frame frame21;
			VisualDiagnostics.RegisterSourceInfo(frame21 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 545, 30);
			ColumnDefinition columnDefinition78;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition78 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 563, 42);
			ColumnDefinition columnDefinition79;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition79 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 564, 42);
			BoxView boxView4;
			VisualDiagnostics.RegisterSourceInfo(boxView4 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 566, 38);
			Label label60;
			VisualDiagnostics.RegisterSourceInfo(label60 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 567, 38);
			Label label61;
			VisualDiagnostics.RegisterSourceInfo(label61 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 570, 38);
			Grid grid41;
			VisualDiagnostics.RegisterSourceInfo(grid41 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 561, 34);
			Frame frame22;
			VisualDiagnostics.RegisterSourceInfo(frame22 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 560, 30);
			ColumnDefinition columnDefinition80;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition80 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 578, 42);
			ColumnDefinition columnDefinition81;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition81 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 579, 42);
			BoxView boxView5;
			VisualDiagnostics.RegisterSourceInfo(boxView5 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 581, 38);
			Label label62;
			VisualDiagnostics.RegisterSourceInfo(label62 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 582, 38);
			Label label63;
			VisualDiagnostics.RegisterSourceInfo(label63 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 585, 38);
			Grid grid42;
			VisualDiagnostics.RegisterSourceInfo(grid42 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 576, 34);
			Frame frame23;
			VisualDiagnostics.RegisterSourceInfo(frame23 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 575, 30);
			ColumnDefinition columnDefinition82;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition82 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 593, 42);
			ColumnDefinition columnDefinition83;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition83 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 594, 42);
			BoxView boxView6;
			VisualDiagnostics.RegisterSourceInfo(boxView6 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 596, 38);
			Label label64;
			VisualDiagnostics.RegisterSourceInfo(label64 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 597, 38);
			Label label65;
			VisualDiagnostics.RegisterSourceInfo(label65 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 600, 38);
			Grid grid43;
			VisualDiagnostics.RegisterSourceInfo(grid43 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 591, 34);
			Frame frame24;
			VisualDiagnostics.RegisterSourceInfo(frame24 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 590, 30);
			ColumnDefinition columnDefinition84;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition84 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 608, 42);
			ColumnDefinition columnDefinition85;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition85 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 609, 42);
			BoxView boxView7;
			VisualDiagnostics.RegisterSourceInfo(boxView7 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 611, 38);
			Label label66;
			VisualDiagnostics.RegisterSourceInfo(label66 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 612, 38);
			Label label67;
			VisualDiagnostics.RegisterSourceInfo(label67 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 615, 38);
			Grid grid44;
			VisualDiagnostics.RegisterSourceInfo(grid44 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 606, 34);
			Frame frame25;
			VisualDiagnostics.RegisterSourceInfo(frame25 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 605, 30);
			ColumnDefinition columnDefinition86;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition86 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 623, 42);
			ColumnDefinition columnDefinition87;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition87 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 624, 42);
			BoxView boxView8;
			VisualDiagnostics.RegisterSourceInfo(boxView8 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 626, 38);
			Label label68;
			VisualDiagnostics.RegisterSourceInfo(label68 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 627, 38);
			Label label69;
			VisualDiagnostics.RegisterSourceInfo(label69 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 630, 38);
			Grid grid45;
			VisualDiagnostics.RegisterSourceInfo(grid45 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 621, 34);
			Frame frame26;
			VisualDiagnostics.RegisterSourceInfo(frame26 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 620, 30);
			ColumnDefinition columnDefinition88;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition88 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 638, 42);
			ColumnDefinition columnDefinition89;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition89 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 639, 42);
			BoxView boxView9;
			VisualDiagnostics.RegisterSourceInfo(boxView9 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 641, 38);
			Label label70;
			VisualDiagnostics.RegisterSourceInfo(label70 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 642, 38);
			Label label71;
			VisualDiagnostics.RegisterSourceInfo(label71 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 645, 38);
			Grid grid46;
			VisualDiagnostics.RegisterSourceInfo(grid46 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 636, 34);
			Frame frame27;
			VisualDiagnostics.RegisterSourceInfo(frame27 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 635, 30);
			ColumnDefinition columnDefinition90;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition90 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 653, 42);
			ColumnDefinition columnDefinition91;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition91 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 654, 42);
			BoxView boxView10;
			VisualDiagnostics.RegisterSourceInfo(boxView10 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 656, 38);
			Label label72;
			VisualDiagnostics.RegisterSourceInfo(label72 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 657, 38);
			Label label73;
			VisualDiagnostics.RegisterSourceInfo(label73 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 660, 38);
			Grid grid47;
			VisualDiagnostics.RegisterSourceInfo(grid47 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 651, 34);
			Frame frame28;
			VisualDiagnostics.RegisterSourceInfo(frame28 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 650, 30);
			ColumnDefinition columnDefinition92;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition92 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 668, 42);
			ColumnDefinition columnDefinition93;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition93 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 669, 42);
			BoxView boxView11;
			VisualDiagnostics.RegisterSourceInfo(boxView11 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 671, 38);
			Label label74;
			VisualDiagnostics.RegisterSourceInfo(label74 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 672, 38);
			Label label75;
			VisualDiagnostics.RegisterSourceInfo(label75 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 675, 38);
			Grid grid48;
			VisualDiagnostics.RegisterSourceInfo(grid48 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 666, 34);
			Frame frame29;
			VisualDiagnostics.RegisterSourceInfo(frame29 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 665, 30);
			ColumnDefinition columnDefinition94;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition94 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 683, 42);
			ColumnDefinition columnDefinition95;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition95 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 684, 42);
			BoxView boxView12;
			VisualDiagnostics.RegisterSourceInfo(boxView12 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 686, 38);
			Label label76;
			VisualDiagnostics.RegisterSourceInfo(label76 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 687, 38);
			Label label77;
			VisualDiagnostics.RegisterSourceInfo(label77 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 690, 38);
			Grid grid49;
			VisualDiagnostics.RegisterSourceInfo(grid49 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 681, 34);
			Frame frame30;
			VisualDiagnostics.RegisterSourceInfo(frame30 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 680, 30);
			ColumnDefinition columnDefinition96;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition96 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 698, 42);
			ColumnDefinition columnDefinition97;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition97 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 699, 42);
			BoxView boxView13;
			VisualDiagnostics.RegisterSourceInfo(boxView13 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 701, 38);
			Label label78;
			VisualDiagnostics.RegisterSourceInfo(label78 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 702, 38);
			Label label79;
			VisualDiagnostics.RegisterSourceInfo(label79 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 705, 38);
			Grid grid50;
			VisualDiagnostics.RegisterSourceInfo(grid50 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 696, 34);
			Frame frame31;
			VisualDiagnostics.RegisterSourceInfo(frame31 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 695, 30);
			ColumnDefinition columnDefinition98;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition98 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 713, 42);
			ColumnDefinition columnDefinition99;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition99 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 714, 42);
			BoxView boxView14;
			VisualDiagnostics.RegisterSourceInfo(boxView14 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 716, 38);
			Label label80;
			VisualDiagnostics.RegisterSourceInfo(label80 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 717, 38);
			Label label81;
			VisualDiagnostics.RegisterSourceInfo(label81 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 720, 38);
			Grid grid51;
			VisualDiagnostics.RegisterSourceInfo(grid51 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 711, 34);
			Frame frame32;
			VisualDiagnostics.RegisterSourceInfo(frame32 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 710, 30);
			ColumnDefinition columnDefinition100;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition100 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 728, 42);
			ColumnDefinition columnDefinition101;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition101 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 729, 42);
			BoxView boxView15;
			VisualDiagnostics.RegisterSourceInfo(boxView15 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 731, 38);
			Label label82;
			VisualDiagnostics.RegisterSourceInfo(label82 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 732, 38);
			Label label83;
			VisualDiagnostics.RegisterSourceInfo(label83 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 735, 38);
			Grid grid52;
			VisualDiagnostics.RegisterSourceInfo(grid52 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 726, 34);
			Frame frame33;
			VisualDiagnostics.RegisterSourceInfo(frame33 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 725, 30);
			ColumnDefinition columnDefinition102;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition102 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 743, 42);
			ColumnDefinition columnDefinition103;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition103 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 744, 42);
			BoxView boxView16;
			VisualDiagnostics.RegisterSourceInfo(boxView16 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 746, 38);
			Label label84;
			VisualDiagnostics.RegisterSourceInfo(label84 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 747, 38);
			Label label85;
			VisualDiagnostics.RegisterSourceInfo(label85 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 750, 38);
			Grid grid53;
			VisualDiagnostics.RegisterSourceInfo(grid53 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 741, 34);
			Frame frame34;
			VisualDiagnostics.RegisterSourceInfo(frame34 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 740, 30);
			ColumnDefinition columnDefinition104;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition104 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 758, 42);
			ColumnDefinition columnDefinition105;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition105 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 759, 42);
			BoxView boxView17;
			VisualDiagnostics.RegisterSourceInfo(boxView17 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 761, 38);
			Label label86;
			VisualDiagnostics.RegisterSourceInfo(label86 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 762, 38);
			Label label87;
			VisualDiagnostics.RegisterSourceInfo(label87 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 765, 38);
			Grid grid54;
			VisualDiagnostics.RegisterSourceInfo(grid54 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 756, 34);
			Frame frame35;
			VisualDiagnostics.RegisterSourceInfo(frame35 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 755, 30);
			ColumnDefinition columnDefinition106;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition106 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 773, 42);
			ColumnDefinition columnDefinition107;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition107 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 774, 42);
			BoxView boxView18;
			VisualDiagnostics.RegisterSourceInfo(boxView18 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 776, 38);
			Label label88;
			VisualDiagnostics.RegisterSourceInfo(label88 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 777, 38);
			Label label89;
			VisualDiagnostics.RegisterSourceInfo(label89 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 780, 38);
			Grid grid55;
			VisualDiagnostics.RegisterSourceInfo(grid55 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 771, 34);
			Frame frame36;
			VisualDiagnostics.RegisterSourceInfo(frame36 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 770, 30);
			ColumnDefinition columnDefinition108;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition108 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 788, 42);
			ColumnDefinition columnDefinition109;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition109 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 789, 42);
			BoxView boxView19;
			VisualDiagnostics.RegisterSourceInfo(boxView19 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 791, 38);
			Label label90;
			VisualDiagnostics.RegisterSourceInfo(label90 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 792, 38);
			Label label91;
			VisualDiagnostics.RegisterSourceInfo(label91 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 795, 38);
			Grid grid56;
			VisualDiagnostics.RegisterSourceInfo(grid56 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 786, 34);
			Frame frame37;
			VisualDiagnostics.RegisterSourceInfo(frame37 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 785, 30);
			ColumnDefinition columnDefinition110;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition110 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 803, 42);
			ColumnDefinition columnDefinition111;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition111 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 804, 42);
			BoxView boxView20;
			VisualDiagnostics.RegisterSourceInfo(boxView20 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 806, 38);
			Label label92;
			VisualDiagnostics.RegisterSourceInfo(label92 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 807, 38);
			Label label93;
			VisualDiagnostics.RegisterSourceInfo(label93 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 810, 38);
			Grid grid57;
			VisualDiagnostics.RegisterSourceInfo(grid57 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 801, 34);
			Frame frame38;
			VisualDiagnostics.RegisterSourceInfo(frame38 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 800, 30);
			ColumnDefinition columnDefinition112;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition112 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 818, 42);
			ColumnDefinition columnDefinition113;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition113 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 819, 42);
			BoxView boxView21;
			VisualDiagnostics.RegisterSourceInfo(boxView21 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 821, 38);
			Label label94;
			VisualDiagnostics.RegisterSourceInfo(label94 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 822, 38);
			Label label95;
			VisualDiagnostics.RegisterSourceInfo(label95 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 825, 38);
			Grid grid58;
			VisualDiagnostics.RegisterSourceInfo(grid58 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 816, 34);
			Frame frame39;
			VisualDiagnostics.RegisterSourceInfo(frame39 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 815, 30);
			ColumnDefinition columnDefinition114;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition114 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 833, 42);
			ColumnDefinition columnDefinition115;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition115 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 834, 42);
			BoxView boxView22;
			VisualDiagnostics.RegisterSourceInfo(boxView22 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 836, 38);
			Label label96;
			VisualDiagnostics.RegisterSourceInfo(label96 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 837, 38);
			Label label97;
			VisualDiagnostics.RegisterSourceInfo(label97 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 840, 38);
			Grid grid59;
			VisualDiagnostics.RegisterSourceInfo(grid59 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 831, 34);
			Frame frame40;
			VisualDiagnostics.RegisterSourceInfo(frame40 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 830, 30);
			ColumnDefinition columnDefinition116;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition116 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 848, 42);
			ColumnDefinition columnDefinition117;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition117 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 849, 42);
			BoxView boxView23;
			VisualDiagnostics.RegisterSourceInfo(boxView23 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 851, 38);
			Label label98;
			VisualDiagnostics.RegisterSourceInfo(label98 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 852, 38);
			Label label99;
			VisualDiagnostics.RegisterSourceInfo(label99 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 855, 38);
			Grid grid60;
			VisualDiagnostics.RegisterSourceInfo(grid60 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 846, 34);
			Frame frame41;
			VisualDiagnostics.RegisterSourceInfo(frame41 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 845, 30);
			ColumnDefinition columnDefinition118;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition118 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 863, 42);
			ColumnDefinition columnDefinition119;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition119 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 864, 42);
			BoxView boxView24;
			VisualDiagnostics.RegisterSourceInfo(boxView24 = new BoxView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 866, 38);
			Label label100;
			VisualDiagnostics.RegisterSourceInfo(label100 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 867, 38);
			Label label101;
			VisualDiagnostics.RegisterSourceInfo(label101 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 870, 38);
			Grid grid61;
			VisualDiagnostics.RegisterSourceInfo(grid61 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 861, 34);
			Frame frame42;
			VisualDiagnostics.RegisterSourceInfo(frame42 = new Frame(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 860, 30);
			Grid grid62;
			VisualDiagnostics.RegisterSourceInfo(grid62 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 496, 26);
			StackLayout stackLayout2;
			VisualDiagnostics.RegisterSourceInfo(stackLayout2 = new StackLayout(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 185, 22);
			Xamarin.Forms.ScrollView scrollView;
			VisualDiagnostics.RegisterSourceInfo(scrollView = new Xamarin.Forms.ScrollView(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 184, 18);
			ColumnDefinition columnDefinition120;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition120 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 881, 26);
			ColumnDefinition columnDefinition121;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition121 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 882, 26);
			Label label102;
			VisualDiagnostics.RegisterSourceInfo(label102 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 884, 22);
			Label label103;
			VisualDiagnostics.RegisterSourceInfo(label103 = new Label(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 887, 22);
			Grid grid63;
			VisualDiagnostics.RegisterSourceInfo(grid63 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 879, 18);
			ColumnDefinition columnDefinition122;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition122 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 893, 26);
			ColumnDefinition columnDefinition123;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition123 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 894, 26);
			ColumnDefinition columnDefinition124;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition124 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 895, 26);
			ColumnDefinition columnDefinition125;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition125 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 896, 26);
			Xamarin.Forms.Button button3;
			VisualDiagnostics.RegisterSourceInfo(button3 = new Xamarin.Forms.Button(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 898, 22);
			Xamarin.Forms.Button button4;
			VisualDiagnostics.RegisterSourceInfo(button4 = new Xamarin.Forms.Button(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 901, 22);
			Xamarin.Forms.Button button5;
			VisualDiagnostics.RegisterSourceInfo(button5 = new Xamarin.Forms.Button(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 904, 22);
			Xamarin.Forms.Button button6;
			VisualDiagnostics.RegisterSourceInfo(button6 = new Xamarin.Forms.Button(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 907, 22);
			Grid grid64;
			VisualDiagnostics.RegisterSourceInfo(grid64 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 891, 18);
			ColumnDefinition columnDefinition126;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition126 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 913, 26);
			ColumnDefinition columnDefinition127;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition127 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 914, 26);
			ColumnDefinition columnDefinition128;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition128 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 915, 26);
			ColumnDefinition columnDefinition129;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition129 = new ColumnDefinition(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 916, 26);
			Xamarin.Forms.Button button7;
			VisualDiagnostics.RegisterSourceInfo(button7 = new Xamarin.Forms.Button(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 918, 22);
			Xamarin.Forms.Button button8;
			VisualDiagnostics.RegisterSourceInfo(button8 = new Xamarin.Forms.Button(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 921, 22);
			Xamarin.Forms.Button button9;
			VisualDiagnostics.RegisterSourceInfo(button9 = new Xamarin.Forms.Button(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 924, 22);
			Xamarin.Forms.Button button10;
			VisualDiagnostics.RegisterSourceInfo(button10 = new Xamarin.Forms.Button(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 927, 22);
			Grid grid65;
			VisualDiagnostics.RegisterSourceInfo(grid65 = new Grid(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 911, 18);
			StackLayout stackLayout3;
			VisualDiagnostics.RegisterSourceInfo(stackLayout3 = new StackLayout(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 183, 14);
			StackLayout stackLayout4;
			VisualDiagnostics.RegisterSourceInfo(stackLayout4 = new StackLayout(), new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 9, 10);
			GraphPage graphPage;
			VisualDiagnostics.RegisterSourceInfo(graphPage = this, new Uri("GraphPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 2, 2);
			NameScope nameScope = (NameScope)(NameScope.GetNameScope(graphPage) ?? new NameScope());
			NameScope.SetNameScope(graphPage, nameScope);
			((INameScope)nameScope).RegisterName("ControllerFoc", (object)stackLayout);
			if (stackLayout.StyleId == null)
			{
				stackLayout.StyleId = "ControllerFoc";
			}
			((INameScope)nameScope).RegisterName("powerView", (object)sKCanvasView);
			if (sKCanvasView.StyleId == null)
			{
				sKCanvasView.StyleId = "powerView";
			}
			((INameScope)nameScope).RegisterName("gearView", (object)sKCanvasView2);
			if (sKCanvasView2.StyleId == null)
			{
				sKCanvasView2.StyleId = "gearView";
			}
			((INameScope)nameScope).RegisterName("stopView", (object)sKCanvasView3);
			if (sKCanvasView3.StyleId == null)
			{
				sKCanvasView3.StyleId = "stopView";
			}
			((INameScope)nameScope).RegisterName("runView", (object)sKCanvasView4);
			if (sKCanvasView4.StyleId == null)
			{
				sKCanvasView4.StyleId = "runView";
			}
			((INameScope)nameScope).RegisterName("speedView", (object)sKCanvasView5);
			if (sKCanvasView5.StyleId == null)
			{
				sKCanvasView5.StyleId = "speedView";
			}
			((INameScope)nameScope).RegisterName("TempGrid", (object)grid3);
			if (grid3.StyleId == null)
			{
				grid3.StyleId = "TempGrid";
			}
			((INameScope)nameScope).RegisterName("battCapView", (object)sKCanvasView6);
			if (sKCanvasView6.StyleId == null)
			{
				sKCanvasView6.StyleId = "battCapView";
			}
			((INameScope)nameScope).RegisterName("mosTempView", (object)sKCanvasView7);
			if (sKCanvasView7.StyleId == null)
			{
				sKCanvasView7.StyleId = "mosTempView";
			}
			((INameScope)nameScope).RegisterName("motorTempView", (object)sKCanvasView8);
			if (sKCanvasView8.StyleId == null)
			{
				sKCanvasView8.StyleId = "motorTempView";
			}
			((INameScope)nameScope).RegisterName("ThrottleGrid", (object)grid7);
			if (grid7.StyleId == null)
			{
				grid7.StyleId = "ThrottleGrid";
			}
			((INameScope)nameScope).RegisterName("motorStat", (object)label);
			if (label.StyleId == null)
			{
				label.StyleId = "motorStat";
			}
			((INameScope)nameScope).RegisterName("throttleVol", (object)label2);
			if (label2.StyleId == null)
			{
				label2.StyleId = "throttleVol";
			}
			((INameScope)nameScope).RegisterName("throttleView", (object)sKCanvasView9);
			if (sKCanvasView9.StyleId == null)
			{
				sKCanvasView9.StyleId = "throttleView";
			}
			((INameScope)nameScope).RegisterName("learnStat", (object)label3);
			if (label3.StyleId == null)
			{
				label3.StyleId = "learnStat";
			}
			((INameScope)nameScope).RegisterName("weakStatus", (object)label4);
			if (label4.StyleId == null)
			{
				label4.StyleId = "weakStatus";
			}
			((INameScope)nameScope).RegisterName("alarmView", (object)sKCanvasView10);
			if (sKCanvasView10.StyleId == null)
			{
				sKCanvasView10.StyleId = "alarmView";
			}
			((INameScope)nameScope).RegisterName("lineVoltage", (object)label5);
			if (label5.StyleId == null)
			{
				label5.StyleId = "lineVoltage";
			}
			((INameScope)nameScope).RegisterName("lineCurr", (object)label6);
			if (label6.StyleId == null)
			{
				label6.StyleId = "lineCurr";
			}
			((INameScope)nameScope).RegisterName("lineCurrView", (object)sKCanvasView11);
			if (sKCanvasView11.StyleId == null)
			{
				sKCanvasView11.StyleId = "lineCurrView";
			}
			((INameScope)nameScope).RegisterName("PhaseGrid", (object)grid11);
			if (grid11.StyleId == null)
			{
				grid11.StyleId = "PhaseGrid";
			}
			((INameScope)nameScope).RegisterName("phaseA", (object)label7);
			if (label7.StyleId == null)
			{
				label7.StyleId = "phaseA";
			}
			((INameScope)nameScope).RegisterName("phaseAView", (object)sKCanvasView12);
			if (sKCanvasView12.StyleId == null)
			{
				sKCanvasView12.StyleId = "phaseAView";
			}
			((INameScope)nameScope).RegisterName("AVGPOWERT", (object)label8);
			if (label8.StyleId == null)
			{
				label8.StyleId = "AVGPOWERT";
			}
			((INameScope)nameScope).RegisterName("AVGPower", (object)label9);
			if (label9.StyleId == null)
			{
				label9.StyleId = "AVGPower";
			}
			((INameScope)nameScope).RegisterName("AVGSPEEDT", (object)label10);
			if (label10.StyleId == null)
			{
				label10.StyleId = "AVGSPEEDT";
			}
			((INameScope)nameScope).RegisterName("AVGSpeed", (object)label11);
			if (label11.StyleId == null)
			{
				label11.StyleId = "AVGSpeed";
			}
			((INameScope)nameScope).RegisterName("phaseC", (object)label12);
			if (label12.StyleId == null)
			{
				label12.StyleId = "phaseC";
			}
			((INameScope)nameScope).RegisterName("phaseCView", (object)sKCanvasView13);
			if (sKCanvasView13.StyleId == null)
			{
				sKCanvasView13.StyleId = "phaseCView";
			}
			((INameScope)nameScope).RegisterName("AlarmGrid", (object)grid12);
			if (grid12.StyleId == null)
			{
				grid12.StyleId = "AlarmGrid";
			}
			((INameScope)nameScope).RegisterName("AlarmRecord", (object)label13);
			if (label13.StyleId == null)
			{
				label13.StyleId = "AlarmRecord";
			}
			((INameScope)nameScope).RegisterName("FrameGrid", (object)grid13);
			if (grid13.StyleId == null)
			{
				grid13.StyleId = "FrameGrid";
			}
			((INameScope)nameScope).RegisterName("frameCnt", (object)label14);
			if (label14.StyleId == null)
			{
				label14.StyleId = "frameCnt";
			}
			((INameScope)nameScope).RegisterName("alarmMessage", (object)label15);
			if (label15.StyleId == null)
			{
				label15.StyleId = "alarmMessage";
			}
			((INameScope)nameScope).RegisterName("CmdAngle", (object)button);
			if (button.StyleId == null)
			{
				button.StyleId = "CmdAngle";
			}
			((INameScope)nameScope).RegisterName("CmdLearn", (object)button2);
			if (button2.StyleId == null)
			{
				button2.StyleId = "CmdLearn";
			}
			((INameScope)nameScope).RegisterName("Distance", (object)label16);
			if (label16.StyleId == null)
			{
				label16.StyleId = "Distance";
			}
			((INameScope)nameScope).RegisterName("TotalTime", (object)label17);
			if (label17.StyleId == null)
			{
				label17.StyleId = "TotalTime";
			}
			((INameScope)nameScope).RegisterName("ControllerBMS", (object)stackLayout3);
			if (stackLayout3.StyleId == null)
			{
				stackLayout3.StyleId = "ControllerBMS";
			}
			((INameScope)nameScope).RegisterName("bmsVoltageView", (object)sKCanvasView14);
			if (sKCanvasView14.StyleId == null)
			{
				sKCanvasView14.StyleId = "bmsVoltageView";
			}
			((INameScope)nameScope).RegisterName("bmsCapView", (object)sKCanvasView15);
			if (sKCanvasView15.StyleId == null)
			{
				sKCanvasView15.StyleId = "bmsCapView";
			}
			((INameScope)nameScope).RegisterName("bmsCurrentView", (object)sKCanvasView16);
			if (sKCanvasView16.StyleId == null)
			{
				sKCanvasView16.StyleId = "bmsCurrentView";
			}
			((INameScope)nameScope).RegisterName("SystemStatName", (object)label18);
			if (label18.StyleId == null)
			{
				label18.StyleId = "SystemStatName";
			}
			((INameScope)nameScope).RegisterName("WorkStat", (object)label19);
			if (label19.StyleId == null)
			{
				label19.StyleId = "WorkStat";
			}
			((INameScope)nameScope).RegisterName("BalStatName", (object)label20);
			if (label20.StyleId == null)
			{
				label20.StyleId = "BalStatName";
			}
			((INameScope)nameScope).RegisterName("BalStat", (object)label21);
			if (label21.StyleId == null)
			{
				label21.StyleId = "BalStat";
			}
			((INameScope)nameScope).RegisterName("TotalVolName", (object)label22);
			if (label22.StyleId == null)
			{
				label22.StyleId = "TotalVolName";
			}
			((INameScope)nameScope).RegisterName("TotalVol", (object)label23);
			if (label23.StyleId == null)
			{
				label23.StyleId = "TotalVol";
			}
			((INameScope)nameScope).RegisterName("TotalCurrName", (object)label24);
			if (label24.StyleId == null)
			{
				label24.StyleId = "TotalCurrName";
			}
			((INameScope)nameScope).RegisterName("TotalCurrent", (object)label25);
			if (label25.StyleId == null)
			{
				label25.StyleId = "TotalCurrent";
			}
			((INameScope)nameScope).RegisterName("TotalCapName", (object)label26);
			if (label26.StyleId == null)
			{
				label26.StyleId = "TotalCapName";
			}
			((INameScope)nameScope).RegisterName("FullCap", (object)label27);
			if (label27.StyleId == null)
			{
				label27.StyleId = "FullCap";
			}
			((INameScope)nameScope).RegisterName("RestCapName", (object)label28);
			if (label28.StyleId == null)
			{
				label28.StyleId = "RestCapName";
			}
			((INameScope)nameScope).RegisterName("RestCap", (object)label29);
			if (label29.StyleId == null)
			{
				label29.StyleId = "RestCap";
			}
			((INameScope)nameScope).RegisterName("MOSTempName", (object)label30);
			if (label30.StyleId == null)
			{
				label30.StyleId = "MOSTempName";
			}
			((INameScope)nameScope).RegisterName("MosTemp", (object)label31);
			if (label31.StyleId == null)
			{
				label31.StyleId = "MosTemp";
			}
			((INameScope)nameScope).RegisterName("BalTempName", (object)label32);
			if (label32.StyleId == null)
			{
				label32.StyleId = "BalTempName";
			}
			((INameScope)nameScope).RegisterName("BalT", (object)label33);
			if (label33.StyleId == null)
			{
				label33.StyleId = "BalT";
			}
			((INameScope)nameScope).RegisterName("T1", (object)label35);
			if (label35.StyleId == null)
			{
				label35.StyleId = "T1";
			}
			((INameScope)nameScope).RegisterName("T2", (object)label37);
			if (label37.StyleId == null)
			{
				label37.StyleId = "T2";
			}
			((INameScope)nameScope).RegisterName("T3", (object)label39);
			if (label39.StyleId == null)
			{
				label39.StyleId = "T3";
			}
			((INameScope)nameScope).RegisterName("T4", (object)label41);
			if (label41.StyleId == null)
			{
				label41.StyleId = "T4";
			}
			((INameScope)nameScope).RegisterName("SingleMaxVolName", (object)label42);
			if (label42.StyleId == null)
			{
				label42.StyleId = "SingleMaxVolName";
			}
			((INameScope)nameScope).RegisterName("MaxVol", (object)label43);
			if (label43.StyleId == null)
			{
				label43.StyleId = "MaxVol";
			}
			((INameScope)nameScope).RegisterName("SingleMinVolName", (object)label44);
			if (label44.StyleId == null)
			{
				label44.StyleId = "SingleMinVolName";
			}
			((INameScope)nameScope).RegisterName("MinVol", (object)label45);
			if (label45.StyleId == null)
			{
				label45.StyleId = "MinVol";
			}
			((INameScope)nameScope).RegisterName("AvgVolName", (object)label46);
			if (label46.StyleId == null)
			{
				label46.StyleId = "AvgVolName";
			}
			((INameScope)nameScope).RegisterName("AvgVol", (object)label47);
			if (label47.StyleId == null)
			{
				label47.StyleId = "AvgVol";
			}
			((INameScope)nameScope).RegisterName("MaxDeltaVolName", (object)label48);
			if (label48.StyleId == null)
			{
				label48.StyleId = "MaxDeltaVolName";
			}
			((INameScope)nameScope).RegisterName("DeltaVol", (object)label49);
			if (label49.StyleId == null)
			{
				label49.StyleId = "DeltaVol";
			}
			((INameScope)nameScope).RegisterName("BatteryName", (object)label50);
			if (label50.StyleId == null)
			{
				label50.StyleId = "BatteryName";
			}
			((INameScope)nameScope).RegisterName("VolCurrentName", (object)label51);
			if (label51.StyleId == null)
			{
				label51.StyleId = "VolCurrentName";
			}
			((INameScope)nameScope).RegisterName("BatteryName2", (object)label52);
			if (label52.StyleId == null)
			{
				label52.StyleId = "BatteryName2";
			}
			((INameScope)nameScope).RegisterName("VolCurrentName2", (object)label53);
			if (label53.StyleId == null)
			{
				label53.StyleId = "VolCurrentName2";
			}
			((INameScope)nameScope).RegisterName("VC1", (object)label55);
			if (label55.StyleId == null)
			{
				label55.StyleId = "VC1";
			}
			((INameScope)nameScope).RegisterName("VC2", (object)label57);
			if (label57.StyleId == null)
			{
				label57.StyleId = "VC2";
			}
			((INameScope)nameScope).RegisterName("VC3", (object)label59);
			if (label59.StyleId == null)
			{
				label59.StyleId = "VC3";
			}
			((INameScope)nameScope).RegisterName("VC4", (object)label61);
			if (label61.StyleId == null)
			{
				label61.StyleId = "VC4";
			}
			((INameScope)nameScope).RegisterName("VC5", (object)label63);
			if (label63.StyleId == null)
			{
				label63.StyleId = "VC5";
			}
			((INameScope)nameScope).RegisterName("VC6", (object)label65);
			if (label65.StyleId == null)
			{
				label65.StyleId = "VC6";
			}
			((INameScope)nameScope).RegisterName("VC7", (object)label67);
			if (label67.StyleId == null)
			{
				label67.StyleId = "VC7";
			}
			((INameScope)nameScope).RegisterName("VC8", (object)label69);
			if (label69.StyleId == null)
			{
				label69.StyleId = "VC8";
			}
			((INameScope)nameScope).RegisterName("VC9", (object)label71);
			if (label71.StyleId == null)
			{
				label71.StyleId = "VC9";
			}
			((INameScope)nameScope).RegisterName("VC10", (object)label73);
			if (label73.StyleId == null)
			{
				label73.StyleId = "VC10";
			}
			((INameScope)nameScope).RegisterName("VC11", (object)label75);
			if (label75.StyleId == null)
			{
				label75.StyleId = "VC11";
			}
			((INameScope)nameScope).RegisterName("VC12", (object)label77);
			if (label77.StyleId == null)
			{
				label77.StyleId = "VC12";
			}
			((INameScope)nameScope).RegisterName("VC13", (object)label79);
			if (label79.StyleId == null)
			{
				label79.StyleId = "VC13";
			}
			((INameScope)nameScope).RegisterName("VC14", (object)label81);
			if (label81.StyleId == null)
			{
				label81.StyleId = "VC14";
			}
			((INameScope)nameScope).RegisterName("VC15", (object)label83);
			if (label83.StyleId == null)
			{
				label83.StyleId = "VC15";
			}
			((INameScope)nameScope).RegisterName("VC16", (object)label85);
			if (label85.StyleId == null)
			{
				label85.StyleId = "VC16";
			}
			((INameScope)nameScope).RegisterName("VC17", (object)label87);
			if (label87.StyleId == null)
			{
				label87.StyleId = "VC17";
			}
			((INameScope)nameScope).RegisterName("VC18", (object)label89);
			if (label89.StyleId == null)
			{
				label89.StyleId = "VC18";
			}
			((INameScope)nameScope).RegisterName("VC19", (object)label91);
			if (label91.StyleId == null)
			{
				label91.StyleId = "VC19";
			}
			((INameScope)nameScope).RegisterName("VC20", (object)label93);
			if (label93.StyleId == null)
			{
				label93.StyleId = "VC20";
			}
			((INameScope)nameScope).RegisterName("VC21", (object)label95);
			if (label95.StyleId == null)
			{
				label95.StyleId = "VC21";
			}
			((INameScope)nameScope).RegisterName("VC22", (object)label97);
			if (label97.StyleId == null)
			{
				label97.StyleId = "VC22";
			}
			((INameScope)nameScope).RegisterName("VC23", (object)label99);
			if (label99.StyleId == null)
			{
				label99.StyleId = "VC23";
			}
			((INameScope)nameScope).RegisterName("VC24", (object)label101);
			if (label101.StyleId == null)
			{
				label101.StyleId = "VC24";
			}
			((INameScope)nameScope).RegisterName("frameCnt2", (object)label102);
			if (label102.StyleId == null)
			{
				label102.StyleId = "frameCnt2";
			}
			((INameScope)nameScope).RegisterName("alarmMessage2", (object)label103);
			if (label103.StyleId == null)
			{
				label103.StyleId = "alarmMessage2";
			}
			((INameScope)nameScope).RegisterName("DSGOnName", (object)button3);
			if (button3.StyleId == null)
			{
				button3.StyleId = "DSGOnName";
			}
			((INameScope)nameScope).RegisterName("DSGOffName", (object)button4);
			if (button4.StyleId == null)
			{
				button4.StyleId = "DSGOffName";
			}
			((INameScope)nameScope).RegisterName("CHGOnName", (object)button5);
			if (button5.StyleId == null)
			{
				button5.StyleId = "CHGOnName";
			}
			((INameScope)nameScope).RegisterName("CHGOffName", (object)button6);
			if (button6.StyleId == null)
			{
				button6.StyleId = "CHGOffName";
			}
			((INameScope)nameScope).RegisterName("SystemOffName", (object)button7);
			if (button7.StyleId == null)
			{
				button7.StyleId = "SystemOffName";
			}
			((INameScope)nameScope).RegisterName("BalOffName", (object)button8);
			if (button8.StyleId == null)
			{
				button8.StyleId = "BalOffName";
			}
			((INameScope)nameScope).RegisterName("BalOnName", (object)button9);
			if (button9.StyleId == null)
			{
				button9.StyleId = "BalOnName";
			}
			((INameScope)nameScope).RegisterName("BalTestName", (object)button10);
			if (button10.StyleId == null)
			{
				button10.StyleId = "BalTestName";
			}
			ControllerFoc = stackLayout;
			powerView = sKCanvasView;
			gearView = sKCanvasView2;
			stopView = sKCanvasView3;
			runView = sKCanvasView4;
			speedView = sKCanvasView5;
			TempGrid = grid3;
			battCapView = sKCanvasView6;
			mosTempView = sKCanvasView7;
			motorTempView = sKCanvasView8;
			ThrottleGrid = grid7;
			motorStat = label;
			throttleVol = label2;
			throttleView = sKCanvasView9;
			learnStat = label3;
			weakStatus = label4;
			alarmView = sKCanvasView10;
			lineVoltage = label5;
			lineCurr = label6;
			lineCurrView = sKCanvasView11;
			PhaseGrid = grid11;
			phaseA = label7;
			phaseAView = sKCanvasView12;
			AVGPOWERT = label8;
			AVGPower = label9;
			AVGSPEEDT = label10;
			AVGSpeed = label11;
			phaseC = label12;
			phaseCView = sKCanvasView13;
			AlarmGrid = grid12;
			AlarmRecord = label13;
			FrameGrid = grid13;
			frameCnt = label14;
			alarmMessage = label15;
			CmdAngle = button;
			CmdLearn = button2;
			Distance = label16;
			TotalTime = label17;
			ControllerBMS = stackLayout3;
			bmsVoltageView = sKCanvasView14;
			bmsCapView = sKCanvasView15;
			bmsCurrentView = sKCanvasView16;
			SystemStatName = label18;
			WorkStat = label19;
			BalStatName = label20;
			BalStat = label21;
			TotalVolName = label22;
			TotalVol = label23;
			TotalCurrName = label24;
			TotalCurrent = label25;
			TotalCapName = label26;
			FullCap = label27;
			RestCapName = label28;
			RestCap = label29;
			MOSTempName = label30;
			MosTemp = label31;
			BalTempName = label32;
			BalT = label33;
			T1 = label35;
			T2 = label37;
			T3 = label39;
			T4 = label41;
			SingleMaxVolName = label42;
			MaxVol = label43;
			SingleMinVolName = label44;
			MinVol = label45;
			AvgVolName = label46;
			AvgVol = label47;
			MaxDeltaVolName = label48;
			DeltaVol = label49;
			BatteryName = label50;
			VolCurrentName = label51;
			BatteryName2 = label52;
			VolCurrentName2 = label53;
			VC1 = label55;
			VC2 = label57;
			VC3 = label59;
			VC4 = label61;
			VC5 = label63;
			VC6 = label65;
			VC7 = label67;
			VC8 = label69;
			VC9 = label71;
			VC10 = label73;
			VC11 = label75;
			VC12 = label77;
			VC13 = label79;
			VC14 = label81;
			VC15 = label83;
			VC16 = label85;
			VC17 = label87;
			VC18 = label89;
			VC19 = label91;
			VC20 = label93;
			VC21 = label95;
			VC22 = label97;
			VC23 = label99;
			VC24 = label101;
			frameCnt2 = label102;
			alarmMessage2 = label103;
			DSGOnName = button3;
			DSGOffName = button4;
			CHGOnName = button5;
			CHGOffName = button6;
			SystemOffName = button7;
			BalOffName = button8;
			BalOnName = button9;
			BalTestName = button10;
			graphPage.SetValue(Xamarin.Forms.Page.TitleProperty, "Graph");
			grid2.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid2.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
			columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
			columnDefinition3.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition3);
			sKCanvasView.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 500.0);
			sKCanvasView.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 500.0);
			sKCanvasView.SetValue(Grid.RowProperty, 0);
			sKCanvasView.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView.PaintSurface += graphPage.powerView_PaintSurface;
			grid2.Children.Add(sKCanvasView);
			grid.SetValue(Grid.RowProperty, 0);
			grid.SetValue(Grid.ColumnProperty, 1);
			grid.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid.SetValue(Grid.RowSpacingProperty, 0.0);
			rowDefinition.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("8*"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition);
			rowDefinition2.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("6*"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition2);
			rowDefinition3.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("6*"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition3);
			sKCanvasView2.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 80.0);
			sKCanvasView2.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 60.0);
			sKCanvasView2.SetValue(Grid.RowProperty, 0);
			sKCanvasView2.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView2.PaintSurface += graphPage.gearView_PaintSurface;
			grid.Children.Add(sKCanvasView2);
			sKCanvasView3.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 55.0);
			sKCanvasView3.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 60.0);
			sKCanvasView3.SetValue(Grid.RowProperty, 1);
			sKCanvasView3.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView3.PaintSurface += graphPage.stopView_PaintSurface;
			grid.Children.Add(sKCanvasView3);
			sKCanvasView4.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 60.0);
			sKCanvasView4.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 60.0);
			sKCanvasView4.SetValue(Grid.RowProperty, 2);
			sKCanvasView4.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView4.PaintSurface += graphPage.runView_PaintSurface;
			grid.Children.Add(sKCanvasView4);
			grid2.Children.Add(grid);
			sKCanvasView5.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 500.0);
			sKCanvasView5.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 500.0);
			sKCanvasView5.SetValue(Grid.RowProperty, 0);
			sKCanvasView5.SetValue(Grid.ColumnProperty, 2);
			sKCanvasView5.PaintSurface += graphPage.speedView_PaintSurface;
			grid2.Children.Add(sKCanvasView5);
			stackLayout.Children.Add(grid2);
			grid3.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid3.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition4.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition4);
			columnDefinition5.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition5);
			columnDefinition6.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition6);
			sKCanvasView6.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 120.0);
			sKCanvasView6.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 100.0);
			sKCanvasView6.SetValue(Grid.RowProperty, 0);
			sKCanvasView6.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView6.PaintSurface += graphPage.battCapView_PaintSurface;
			grid3.Children.Add(sKCanvasView6);
			sKCanvasView7.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 120.0);
			sKCanvasView7.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 100.0);
			sKCanvasView7.SetValue(Grid.RowProperty, 0);
			sKCanvasView7.SetValue(Grid.ColumnProperty, 1);
			sKCanvasView7.PaintSurface += graphPage.mosTempView_PaintSurface;
			grid3.Children.Add(sKCanvasView7);
			sKCanvasView8.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 120.0);
			sKCanvasView8.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 100.0);
			sKCanvasView8.SetValue(Grid.RowProperty, 0);
			sKCanvasView8.SetValue(Grid.ColumnProperty, 2);
			sKCanvasView8.PaintSurface += graphPage.motorTempView_PaintSurface;
			grid3.Children.Add(sKCanvasView8);
			stackLayout.Children.Add(grid3);
			grid7.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid7.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition7.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid7.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition7);
			columnDefinition8.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid7.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition8);
			columnDefinition9.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid7.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition9);
			grid4.SetValue(Grid.RowProperty, 0);
			grid4.SetValue(Grid.ColumnProperty, 2);
			grid4.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid4.SetValue(Grid.RowSpacingProperty, 0.0);
			rowDefinition4.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid4.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition4);
			rowDefinition5.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<RowDefinition>)grid4.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition5);
			rowDefinition6.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid4.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition6);
			label.SetValue(Grid.RowProperty, 0);
			label.SetValue(Grid.ColumnProperty, 0);
			label.SetValue(Label.TextColorProperty, Color.SkyBlue);
			BindableProperty fontSizeProperty = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
			Type typeFromHandle = typeof(IProvideValueTarget);
			object[] array = new object[0 + 6];
			array[0] = label;
			array[1] = grid4;
			array[2] = grid7;
			array[3] = stackLayout;
			array[4] = stackLayout4;
			array[5] = graphPage;
			object service;
			xamlServiceProvider.Add(typeFromHandle, service = new SimpleValueTargetProvider(array, Label.FontSizeProperty, nameScope));
			xamlServiceProvider.Add(typeof(IReferenceProvider), service);
			Type typeFromHandle2 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
			xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(76, 101)));
			label.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider));
			label.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
			label.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label);
			label2.SetValue(Grid.RowProperty, 2);
			label2.SetValue(Grid.ColumnProperty, 0);
			label2.SetValue(Label.TextColorProperty, Color.DarkGoldenrod);
			BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
			Type typeFromHandle3 = typeof(IProvideValueTarget);
			object[] array2 = new object[0 + 6];
			array2[0] = label2;
			array2[1] = grid4;
			array2[2] = grid7;
			array2[3] = stackLayout;
			array2[4] = stackLayout4;
			array2[5] = graphPage;
			object service2;
			xamlServiceProvider2.Add(typeFromHandle3, service2 = new SimpleValueTargetProvider(array2, Label.FontSizeProperty, nameScope));
			xamlServiceProvider2.Add(typeof(IReferenceProvider), service2);
			Type typeFromHandle4 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
			xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver2.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(77, 108)));
			label2.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider2));
			label2.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
			label2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label2);
			sKCanvasView9.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 80.0);
			sKCanvasView9.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 320.0);
			sKCanvasView9.SetValue(Grid.RowProperty, 1);
			sKCanvasView9.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView9.PaintSurface += graphPage.throttleView_PaintSurface;
			grid4.Children.Add(sKCanvasView9);
			grid7.Children.Add(grid4);
			grid5.SetValue(Grid.RowProperty, 0);
			grid5.SetValue(Grid.ColumnProperty, 1);
			grid5.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid5.SetValue(Grid.RowSpacingProperty, 0.0);
			rowDefinition7.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition7);
			rowDefinition8.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition8);
			rowDefinition9.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition9);
			label3.SetValue(Grid.RowProperty, 0);
			label3.SetValue(Grid.ColumnProperty, 0);
			label3.SetValue(Label.TextColorProperty, Color.SkyBlue);
			BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
			Type typeFromHandle5 = typeof(IProvideValueTarget);
			object[] array3 = new object[0 + 6];
			array3[0] = label3;
			array3[1] = grid5;
			array3[2] = grid7;
			array3[3] = stackLayout;
			array3[4] = stackLayout4;
			array3[5] = graphPage;
			object service3;
			xamlServiceProvider3.Add(typeFromHandle5, service3 = new SimpleValueTargetProvider(array3, Label.FontSizeProperty, nameScope));
			xamlServiceProvider3.Add(typeof(IReferenceProvider), service3);
			Type typeFromHandle6 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
			xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver3.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(89, 100)));
			label3.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider3));
			label3.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
			label3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label3);
			label4.SetValue(Grid.RowProperty, 2);
			label4.SetValue(Grid.ColumnProperty, 0);
			label4.SetValue(Label.TextColorProperty, Color.Green);
			BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
			Type typeFromHandle7 = typeof(IProvideValueTarget);
			object[] array4 = new object[0 + 6];
			array4[0] = label4;
			array4[1] = grid5;
			array4[2] = grid7;
			array4[3] = stackLayout;
			array4[4] = stackLayout4;
			array4[5] = graphPage;
			object service4;
			xamlServiceProvider4.Add(typeFromHandle7, service4 = new SimpleValueTargetProvider(array4, Label.FontSizeProperty, nameScope));
			xamlServiceProvider4.Add(typeof(IReferenceProvider), service4);
			Type typeFromHandle8 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
			xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver4.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(90, 100)));
			label4.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider4));
			label4.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
			label4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label4);
			sKCanvasView10.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 80.0);
			sKCanvasView10.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 50.0);
			sKCanvasView10.SetValue(Grid.RowProperty, 1);
			sKCanvasView10.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView10.PaintSurface += graphPage.alarmView_PaintSurface;
			grid5.Children.Add(sKCanvasView10);
			grid7.Children.Add(grid5);
			grid6.SetValue(Grid.RowProperty, 0);
			grid6.SetValue(Grid.ColumnProperty, 0);
			grid6.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid6.SetValue(Grid.RowSpacingProperty, 0.0);
			rowDefinition10.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition10);
			rowDefinition11.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition11);
			rowDefinition12.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition12);
			label5.SetValue(Grid.RowProperty, 0);
			label5.SetValue(Grid.ColumnProperty, 0);
			label5.SetValue(Label.TextColorProperty, Color.SkyBlue);
			BindableProperty fontSizeProperty5 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
			Type typeFromHandle9 = typeof(IProvideValueTarget);
			object[] array5 = new object[0 + 6];
			array5[0] = label5;
			array5[1] = grid6;
			array5[2] = grid7;
			array5[3] = stackLayout;
			array5[4] = stackLayout4;
			array5[5] = graphPage;
			object service5;
			xamlServiceProvider5.Add(typeFromHandle9, service5 = new SimpleValueTargetProvider(array5, Label.FontSizeProperty, nameScope));
			xamlServiceProvider5.Add(typeof(IReferenceProvider), service5);
			Type typeFromHandle10 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
			xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver5.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(102, 102)));
			label5.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider5));
			label5.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
			label5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label5);
			label6.SetValue(Grid.RowProperty, 2);
			label6.SetValue(Grid.ColumnProperty, 0);
			label6.SetValue(Label.TextColorProperty, Color.Green);
			BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
			Type typeFromHandle11 = typeof(IProvideValueTarget);
			object[] array6 = new object[0 + 6];
			array6[0] = label6;
			array6[1] = grid6;
			array6[2] = grid7;
			array6[3] = stackLayout;
			array6[4] = stackLayout4;
			array6[5] = graphPage;
			object service6;
			xamlServiceProvider6.Add(typeFromHandle11, service6 = new SimpleValueTargetProvider(array6, Label.FontSizeProperty, nameScope));
			xamlServiceProvider6.Add(typeof(IReferenceProvider), service6);
			Type typeFromHandle12 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
			xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver6.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(103, 98)));
			label6.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider6));
			label6.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
			label6.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label6);
			sKCanvasView11.SetValue(Grid.RowProperty, 1);
			sKCanvasView11.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView11.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 80.0);
			sKCanvasView11.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 320.0);
			sKCanvasView11.PaintSurface += graphPage.lineCurrView_PaintSurface;
			grid6.Children.Add(sKCanvasView11);
			grid7.Children.Add(grid6);
			stackLayout.Children.Add(grid7);
			grid11.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid11.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition10.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid11.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition10);
			columnDefinition11.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid11.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition11);
			columnDefinition12.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid11.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition12);
			grid8.SetValue(Grid.RowProperty, 0);
			grid8.SetValue(Grid.ColumnProperty, 0);
			grid8.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid8.SetValue(Grid.RowSpacingProperty, 0.0);
			rowDefinition13.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<RowDefinition>)grid8.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition13);
			rowDefinition14.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid8.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition14);
			label7.SetValue(Grid.RowProperty, 1);
			label7.SetValue(Grid.ColumnProperty, 0);
			label7.SetValue(Label.TextColorProperty, Color.Green);
			BindableProperty fontSizeProperty7 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
			Type typeFromHandle13 = typeof(IProvideValueTarget);
			object[] array7 = new object[0 + 6];
			array7[0] = label7;
			array7[1] = grid8;
			array7[2] = grid11;
			array7[3] = stackLayout;
			array7[4] = stackLayout4;
			array7[5] = graphPage;
			object service7;
			xamlServiceProvider7.Add(typeFromHandle13, service7 = new SimpleValueTargetProvider(array7, Label.FontSizeProperty, nameScope));
			xamlServiceProvider7.Add(typeof(IReferenceProvider), service7);
			Type typeFromHandle14 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
			xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver7.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(120, 95)));
			label7.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider7));
			label7.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
			label7.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid8.Children.Add(label7);
			sKCanvasView12.SetValue(Grid.RowProperty, 0);
			sKCanvasView12.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView12.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 80.0);
			sKCanvasView12.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 320.0);
			sKCanvasView12.PaintSurface += graphPage.phaseAView_PaintSurface;
			grid8.Children.Add(sKCanvasView12);
			grid11.Children.Add(grid8);
			grid9.SetValue(Grid.RowProperty, 0);
			grid9.SetValue(Grid.ColumnProperty, 1);
			grid9.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid9.SetValue(Grid.RowSpacingProperty, 0.0);
			rowDefinition15.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid9.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition15);
			rowDefinition16.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid9.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition16);
			rowDefinition17.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid9.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition17);
			rowDefinition18.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid9.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition18);
			label8.SetValue(Grid.RowProperty, 0);
			label8.SetValue(Grid.ColumnProperty, 0);
			label8.SetValue(Label.TextColorProperty, Color.Green);
			BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
			Type typeFromHandle15 = typeof(IProvideValueTarget);
			object[] array8 = new object[0 + 6];
			array8[0] = label8;
			array8[1] = grid9;
			array8[2] = grid11;
			array8[3] = stackLayout;
			array8[4] = stackLayout4;
			array8[5] = graphPage;
			object service8;
			xamlServiceProvider8.Add(typeFromHandle15, service8 = new SimpleValueTargetProvider(array8, Label.FontSizeProperty, nameScope));
			xamlServiceProvider8.Add(typeof(IReferenceProvider), service8);
			Type typeFromHandle16 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
			xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver8.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(132, 98)));
			label8.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider8));
			label8.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label8.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
			label8.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid9.Children.Add(label8);
			label9.SetValue(Grid.RowProperty, 1);
			label9.SetValue(Grid.ColumnProperty, 0);
			label9.SetValue(Label.TextColorProperty, Color.DarkGoldenrod);
			BindableProperty fontSizeProperty9 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter9 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
			Type typeFromHandle17 = typeof(IProvideValueTarget);
			object[] array9 = new object[0 + 6];
			array9[0] = label9;
			array9[1] = grid9;
			array9[2] = grid11;
			array9[3] = stackLayout;
			array9[4] = stackLayout4;
			array9[5] = graphPage;
			object service9;
			xamlServiceProvider9.Add(typeFromHandle17, service9 = new SimpleValueTargetProvider(array9, Label.FontSizeProperty, nameScope));
			xamlServiceProvider9.Add(typeof(IReferenceProvider), service9);
			Type typeFromHandle18 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
			xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver9.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(133, 105)));
			label9.SetValue(fontSizeProperty9, ((IExtendedTypeConverter)fontSizeConverter9).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider9));
			label9.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label9.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
			label9.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid9.Children.Add(label9);
			label10.SetValue(Grid.RowProperty, 2);
			label10.SetValue(Grid.ColumnProperty, 0);
			label10.SetValue(Label.TextColorProperty, Color.Green);
			BindableProperty fontSizeProperty10 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter10 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
			Type typeFromHandle19 = typeof(IProvideValueTarget);
			object[] array10 = new object[0 + 6];
			array10[0] = label10;
			array10[1] = grid9;
			array10[2] = grid11;
			array10[3] = stackLayout;
			array10[4] = stackLayout4;
			array10[5] = graphPage;
			object service10;
			xamlServiceProvider10.Add(typeFromHandle19, service10 = new SimpleValueTargetProvider(array10, Label.FontSizeProperty, nameScope));
			xamlServiceProvider10.Add(typeof(IReferenceProvider), service10);
			Type typeFromHandle20 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
			xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver10.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(134, 98)));
			label10.SetValue(fontSizeProperty10, ((IExtendedTypeConverter)fontSizeConverter10).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider10));
			label10.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label10.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
			label10.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid9.Children.Add(label10);
			label11.SetValue(Grid.RowProperty, 3);
			label11.SetValue(Grid.ColumnProperty, 0);
			label11.SetValue(Label.TextColorProperty, Color.DarkGoldenrod);
			BindableProperty fontSizeProperty11 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter11 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
			Type typeFromHandle21 = typeof(IProvideValueTarget);
			object[] array11 = new object[0 + 6];
			array11[0] = label11;
			array11[1] = grid9;
			array11[2] = grid11;
			array11[3] = stackLayout;
			array11[4] = stackLayout4;
			array11[5] = graphPage;
			object service11;
			xamlServiceProvider11.Add(typeFromHandle21, service11 = new SimpleValueTargetProvider(array11, Label.FontSizeProperty, nameScope));
			xamlServiceProvider11.Add(typeof(IReferenceProvider), service11);
			Type typeFromHandle22 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
			xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver11.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(135, 105)));
			label11.SetValue(fontSizeProperty11, ((IExtendedTypeConverter)fontSizeConverter11).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider11));
			label11.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label11.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
			label11.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid9.Children.Add(label11);
			grid11.Children.Add(grid9);
			grid10.SetValue(Grid.RowProperty, 0);
			grid10.SetValue(Grid.ColumnProperty, 2);
			grid10.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid10.SetValue(Grid.RowSpacingProperty, 0.0);
			rowDefinition19.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<RowDefinition>)grid10.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition19);
			rowDefinition20.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid10.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition20);
			label12.SetValue(Grid.RowProperty, 1);
			label12.SetValue(Grid.ColumnProperty, 0);
			label12.SetValue(Label.TextColorProperty, Color.Green);
			BindableProperty fontSizeProperty12 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter12 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
			Type typeFromHandle23 = typeof(IProvideValueTarget);
			object[] array12 = new object[0 + 6];
			array12[0] = label12;
			array12[1] = grid10;
			array12[2] = grid11;
			array12[3] = stackLayout;
			array12[4] = stackLayout4;
			array12[5] = graphPage;
			object service12;
			xamlServiceProvider12.Add(typeFromHandle23, service12 = new SimpleValueTargetProvider(array12, Label.FontSizeProperty, nameScope));
			xamlServiceProvider12.Add(typeof(IReferenceProvider), service12);
			Type typeFromHandle24 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
			xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver12.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(142, 95)));
			label12.SetValue(fontSizeProperty12, ((IExtendedTypeConverter)fontSizeConverter12).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider12));
			label12.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label12.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
			label12.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label12);
			sKCanvasView13.SetValue(Grid.RowProperty, 0);
			sKCanvasView13.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView13.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 80.0);
			sKCanvasView13.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 320.0);
			sKCanvasView13.PaintSurface += graphPage.phaseCView_PaintSurface;
			grid10.Children.Add(sKCanvasView13);
			grid11.Children.Add(grid10);
			stackLayout.Children.Add(grid11);
			grid12.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid12.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition13.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid12.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition13);
			columnDefinition14.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid12.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition14);
			label13.SetValue(Label.TextColorProperty, Color.SkyBlue);
			BindableProperty fontSizeProperty13 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter13 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
			Type typeFromHandle25 = typeof(IProvideValueTarget);
			object[] array13 = new object[0 + 5];
			array13[0] = label13;
			array13[1] = grid12;
			array13[2] = stackLayout;
			array13[3] = stackLayout4;
			array13[4] = graphPage;
			object service13;
			xamlServiceProvider13.Add(typeFromHandle25, service13 = new SimpleValueTargetProvider(array13, Label.FontSizeProperty, nameScope));
			xamlServiceProvider13.Add(typeof(IReferenceProvider), service13);
			Type typeFromHandle26 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
			xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver13.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(154, 40)));
			label13.SetValue(fontSizeProperty13, ((IExtendedTypeConverter)fontSizeConverter13).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider13));
			label13.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label13.SetValue(Grid.RowProperty, 0);
			label13.SetValue(Grid.ColumnProperty, 0);
			grid12.Children.Add(label13);
			stackLayout.Children.Add(grid12);
			grid13.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid13.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition15.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid13.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition15);
			columnDefinition16.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid13.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition16);
			label14.SetValue(Label.TextColorProperty, Color.SkyBlue);
			BindableProperty fontSizeProperty14 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter14 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
			Type typeFromHandle27 = typeof(IProvideValueTarget);
			object[] array14 = new object[0 + 5];
			array14[0] = label14;
			array14[1] = grid13;
			array14[2] = stackLayout;
			array14[3] = stackLayout4;
			array14[4] = graphPage;
			object service14;
			xamlServiceProvider14.Add(typeFromHandle27, service14 = new SimpleValueTargetProvider(array14, Label.FontSizeProperty, nameScope));
			xamlServiceProvider14.Add(typeof(IReferenceProvider), service14);
			Type typeFromHandle28 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
			xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver14.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(164, 40)));
			label14.SetValue(fontSizeProperty14, ((IExtendedTypeConverter)fontSizeConverter14).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider14));
			label14.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label14.SetValue(Grid.RowProperty, 0);
			label14.SetValue(Grid.ColumnProperty, 0);
			grid13.Children.Add(label14);
			label15.SetValue(Label.TextColorProperty, Color.Red);
			BindableProperty fontSizeProperty15 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter15 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider15 = new XamlServiceProvider();
			Type typeFromHandle29 = typeof(IProvideValueTarget);
			object[] array15 = new object[0 + 5];
			array15[0] = label15;
			array15[1] = grid13;
			array15[2] = stackLayout;
			array15[3] = stackLayout4;
			array15[4] = graphPage;
			object service15;
			xamlServiceProvider15.Add(typeFromHandle29, service15 = new SimpleValueTargetProvider(array15, Label.FontSizeProperty, nameScope));
			xamlServiceProvider15.Add(typeof(IReferenceProvider), service15);
			Type typeFromHandle30 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver15 = new XmlNamespaceResolver();
			xmlNamespaceResolver15.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver15.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver15.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider15.Add(typeFromHandle30, new XamlTypeResolver(xmlNamespaceResolver15, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider15.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(167, 36)));
			label15.SetValue(fontSizeProperty15, ((IExtendedTypeConverter)fontSizeConverter15).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider15));
			label15.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label15.SetValue(Grid.RowProperty, 0);
			label15.SetValue(Grid.ColumnProperty, 1);
			grid13.Children.Add(label15);
			stackLayout.Children.Add(grid13);
			grid14.SetValue(Grid.ColumnSpacingProperty, 2.0);
			grid14.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition17.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25*"));
			((DefinitionCollection<ColumnDefinition>)grid14.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition17);
			columnDefinition18.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25*"));
			((DefinitionCollection<ColumnDefinition>)grid14.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition18);
			columnDefinition19.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25*"));
			((DefinitionCollection<ColumnDefinition>)grid14.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition19);
			columnDefinition20.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25*"));
			((DefinitionCollection<ColumnDefinition>)grid14.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition20);
			button.SetValue(Xamarin.Forms.Button.TextProperty, "∂‡π¶ƒ‹");
			button.SetValue(Grid.RowProperty, 0);
			button.SetValue(Grid.ColumnProperty, 0);
			button.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.DarkGoldenrod);
			BindableProperty fontSizeProperty16 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter16 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider16 = new XamlServiceProvider();
			Type typeFromHandle31 = typeof(IProvideValueTarget);
			object[] array16 = new object[0 + 5];
			array16[0] = button;
			array16[1] = grid14;
			array16[2] = stackLayout;
			array16[3] = stackLayout4;
			array16[4] = graphPage;
			object service16;
			xamlServiceProvider16.Add(typeFromHandle31, service16 = new SimpleValueTargetProvider(array16, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider16.Add(typeof(IReferenceProvider), service16);
			Type typeFromHandle32 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver16 = new XmlNamespaceResolver();
			xmlNamespaceResolver16.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver16.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver16.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider16.Add(typeFromHandle32, new XamlTypeResolver(xmlNamespaceResolver16, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider16.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(177, 144)));
			button.SetValue(fontSizeProperty16, ((IExtendedTypeConverter)fontSizeConverter16).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider16));
			button.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button.Clicked += graphPage.ButtonTestAngle_Clicked;
			grid14.Children.Add(button);
			button2.SetValue(Xamarin.Forms.Button.TextProperty, "◊‘—ßœ∞");
			button2.SetValue(Grid.RowProperty, 0);
			button2.SetValue(Grid.ColumnProperty, 1);
			button2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button2.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.DarkGoldenrod);
			BindableProperty fontSizeProperty17 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter17 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider17 = new XamlServiceProvider();
			Type typeFromHandle33 = typeof(IProvideValueTarget);
			object[] array17 = new object[0 + 5];
			array17[0] = button2;
			array17[1] = grid14;
			array17[2] = stackLayout;
			array17[3] = stackLayout4;
			array17[4] = graphPage;
			object service17;
			xamlServiceProvider17.Add(typeFromHandle33, service17 = new SimpleValueTargetProvider(array17, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider17.Add(typeof(IReferenceProvider), service17);
			Type typeFromHandle34 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver17 = new XmlNamespaceResolver();
			xmlNamespaceResolver17.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver17.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver17.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider17.Add(typeFromHandle34, new XamlTypeResolver(xmlNamespaceResolver17, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider17.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(178, 145)));
			button2.SetValue(fontSizeProperty17, ((IExtendedTypeConverter)fontSizeConverter17).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider17));
			button2.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button2.Clicked += graphPage.ButtonAutoLearn_Clicked;
			grid14.Children.Add(button2);
			label16.SetValue(Label.TextProperty, "ODO: 112345.1km");
			label16.SetValue(Label.TextColorProperty, Color.DarkGoldenrod);
			BindableProperty fontSizeProperty18 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter18 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider18 = new XamlServiceProvider();
			Type typeFromHandle35 = typeof(IProvideValueTarget);
			object[] array18 = new object[0 + 5];
			array18[0] = label16;
			array18[1] = grid14;
			array18[2] = stackLayout;
			array18[3] = stackLayout4;
			array18[4] = graphPage;
			object service18;
			xamlServiceProvider18.Add(typeFromHandle35, service18 = new SimpleValueTargetProvider(array18, Label.FontSizeProperty, nameScope));
			xamlServiceProvider18.Add(typeof(IReferenceProvider), service18);
			Type typeFromHandle36 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver18 = new XmlNamespaceResolver();
			xmlNamespaceResolver18.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver18.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver18.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider18.Add(typeFromHandle36, new XamlTypeResolver(xmlNamespaceResolver18, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider18.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(179, 98)));
			label16.SetValue(fontSizeProperty18, ((IExtendedTypeConverter)fontSizeConverter18).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider18));
			label16.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label16.SetValue(Grid.RowProperty, 0);
			label16.SetValue(Grid.ColumnProperty, 2);
			grid14.Children.Add(label16);
			label17.SetValue(Label.TextProperty, "π§◊˜ ±º‰£∫1.3–° ±");
			label17.SetValue(Label.TextColorProperty, Color.DarkGoldenrod);
			BindableProperty fontSizeProperty19 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter19 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider19 = new XamlServiceProvider();
			Type typeFromHandle37 = typeof(IProvideValueTarget);
			object[] array19 = new object[0 + 5];
			array19[0] = label17;
			array19[1] = grid14;
			array19[2] = stackLayout;
			array19[3] = stackLayout4;
			array19[4] = graphPage;
			object service19;
			xamlServiceProvider19.Add(typeFromHandle37, service19 = new SimpleValueTargetProvider(array19, Label.FontSizeProperty, nameScope));
			xamlServiceProvider19.Add(typeof(IReferenceProvider), service19);
			Type typeFromHandle38 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver19 = new XmlNamespaceResolver();
			xmlNamespaceResolver19.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver19.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver19.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider19.Add(typeFromHandle38, new XamlTypeResolver(xmlNamespaceResolver19, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider19.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(180, 95)));
			label17.SetValue(fontSizeProperty19, ((IExtendedTypeConverter)fontSizeConverter19).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider19));
			label17.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label17.SetValue(Grid.RowProperty, 0);
			label17.SetValue(Grid.ColumnProperty, 3);
			grid14.Children.Add(label17);
			stackLayout.Children.Add(grid14);
			stackLayout4.Children.Add(stackLayout);
			stackLayout3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			columnDefinition21.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("4*"));
			((DefinitionCollection<ColumnDefinition>)grid15.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition21);
			columnDefinition22.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("4*"));
			((DefinitionCollection<ColumnDefinition>)grid15.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition22);
			columnDefinition23.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("4*"));
			((DefinitionCollection<ColumnDefinition>)grid15.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition23);
			sKCanvasView14.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 120.0);
			sKCanvasView14.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 100.0);
			sKCanvasView14.SetValue(Grid.RowProperty, 0);
			sKCanvasView14.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView14.PaintSurface += graphPage.bmsVoltageView_PaintSurface;
			grid15.Children.Add(sKCanvasView14);
			sKCanvasView15.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 120.0);
			sKCanvasView15.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 100.0);
			sKCanvasView15.SetValue(Grid.RowProperty, 0);
			sKCanvasView15.SetValue(Grid.ColumnProperty, 1);
			sKCanvasView15.PaintSurface += graphPage.bmsCapView_PaintSurface;
			grid15.Children.Add(sKCanvasView15);
			sKCanvasView16.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 120.0);
			sKCanvasView16.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 100.0);
			sKCanvasView16.SetValue(Grid.RowProperty, 0);
			sKCanvasView16.SetValue(Grid.ColumnProperty, 2);
			sKCanvasView16.PaintSurface += graphPage.bmsCurrentView_PaintSurface;
			grid15.Children.Add(sKCanvasView16);
			stackLayout2.Children.Add(grid15);
			rowDefinition21.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid22.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition21);
			rowDefinition22.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid22.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition22);
			rowDefinition23.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid22.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition23);
			columnDefinition24.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid22.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition24);
			columnDefinition25.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid22.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition25);
			frame.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame.SetValue(Grid.RowProperty, 0);
			frame.SetValue(Grid.ColumnProperty, 0);
			columnDefinition26.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid16.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition26);
			columnDefinition27.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid16.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition27);
			label18.SetValue(Label.TextProperty, "œµÕ≥◊¥Ã¨");
			label18.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty20 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter20 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider20 = new XamlServiceProvider();
			Type typeFromHandle39 = typeof(IProvideValueTarget);
			object[] array20 = new object[0 + 9];
			array20[0] = label18;
			array20[1] = grid16;
			array20[2] = frame;
			array20[3] = grid22;
			array20[4] = stackLayout2;
			array20[5] = scrollView;
			array20[6] = stackLayout3;
			array20[7] = stackLayout4;
			array20[8] = graphPage;
			object service20;
			xamlServiceProvider20.Add(typeFromHandle39, service20 = new SimpleValueTargetProvider(array20, Label.FontSizeProperty, nameScope));
			xamlServiceProvider20.Add(typeof(IReferenceProvider), service20);
			Type typeFromHandle40 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver20 = new XmlNamespaceResolver();
			xmlNamespaceResolver20.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver20.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver20.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider20.Add(typeFromHandle40, new XamlTypeResolver(xmlNamespaceResolver20, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider20.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(223, 31)));
			label18.SetValue(fontSizeProperty20, ((IExtendedTypeConverter)fontSizeConverter20).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider20));
			label18.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label18.SetValue(Grid.RowProperty, 0);
			label18.SetValue(Grid.ColumnProperty, 0);
			grid16.Children.Add(label18);
			label19.SetValue(Label.TextProperty, "Work");
			label19.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty21 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter21 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider21 = new XamlServiceProvider();
			Type typeFromHandle41 = typeof(IProvideValueTarget);
			object[] array21 = new object[0 + 9];
			array21[0] = label19;
			array21[1] = grid16;
			array21[2] = frame;
			array21[3] = grid22;
			array21[4] = stackLayout2;
			array21[5] = scrollView;
			array21[6] = stackLayout3;
			array21[7] = stackLayout4;
			array21[8] = graphPage;
			object service21;
			xamlServiceProvider21.Add(typeFromHandle41, service21 = new SimpleValueTargetProvider(array21, Label.FontSizeProperty, nameScope));
			xamlServiceProvider21.Add(typeof(IReferenceProvider), service21);
			Type typeFromHandle42 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver21 = new XmlNamespaceResolver();
			xmlNamespaceResolver21.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver21.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver21.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider21.Add(typeFromHandle42, new XamlTypeResolver(xmlNamespaceResolver21, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider21.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(226, 30)));
			label19.SetValue(fontSizeProperty21, ((IExtendedTypeConverter)fontSizeConverter21).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider21));
			label19.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label19.SetValue(Grid.RowProperty, 0);
			label19.SetValue(Grid.ColumnProperty, 1);
			grid16.Children.Add(label19);
			frame.SetValue(ContentView.ContentProperty, grid16);
			grid22.Children.Add(frame);
			frame2.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame2.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame2.SetValue(Grid.RowProperty, 0);
			frame2.SetValue(Grid.ColumnProperty, 1);
			columnDefinition28.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid17.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition28);
			columnDefinition29.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid17.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition29);
			label20.SetValue(Label.TextProperty, "æ˘∫‚◊¥Ã¨");
			label20.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty22 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter22 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider22 = new XamlServiceProvider();
			Type typeFromHandle43 = typeof(IProvideValueTarget);
			object[] array22 = new object[0 + 9];
			array22[0] = label20;
			array22[1] = grid17;
			array22[2] = frame2;
			array22[3] = grid22;
			array22[4] = stackLayout2;
			array22[5] = scrollView;
			array22[6] = stackLayout3;
			array22[7] = stackLayout4;
			array22[8] = graphPage;
			object service22;
			xamlServiceProvider22.Add(typeFromHandle43, service22 = new SimpleValueTargetProvider(array22, Label.FontSizeProperty, nameScope));
			xamlServiceProvider22.Add(typeof(IReferenceProvider), service22);
			Type typeFromHandle44 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver22 = new XmlNamespaceResolver();
			xmlNamespaceResolver22.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver22.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver22.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider22.Add(typeFromHandle44, new XamlTypeResolver(xmlNamespaceResolver22, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider22.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(237, 31)));
			label20.SetValue(fontSizeProperty22, ((IExtendedTypeConverter)fontSizeConverter22).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider22));
			label20.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label20.SetValue(Grid.RowProperty, 0);
			label20.SetValue(Grid.ColumnProperty, 0);
			grid17.Children.Add(label20);
			label21.SetValue(Label.TextProperty, "Bal");
			label21.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty23 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter23 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider23 = new XamlServiceProvider();
			Type typeFromHandle45 = typeof(IProvideValueTarget);
			object[] array23 = new object[0 + 9];
			array23[0] = label21;
			array23[1] = grid17;
			array23[2] = frame2;
			array23[3] = grid22;
			array23[4] = stackLayout2;
			array23[5] = scrollView;
			array23[6] = stackLayout3;
			array23[7] = stackLayout4;
			array23[8] = graphPage;
			object service23;
			xamlServiceProvider23.Add(typeFromHandle45, service23 = new SimpleValueTargetProvider(array23, Label.FontSizeProperty, nameScope));
			xamlServiceProvider23.Add(typeof(IReferenceProvider), service23);
			Type typeFromHandle46 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver23 = new XmlNamespaceResolver();
			xmlNamespaceResolver23.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver23.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver23.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider23.Add(typeFromHandle46, new XamlTypeResolver(xmlNamespaceResolver23, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider23.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(240, 30)));
			label21.SetValue(fontSizeProperty23, ((IExtendedTypeConverter)fontSizeConverter23).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider23));
			label21.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label21.SetValue(Grid.RowProperty, 0);
			label21.SetValue(Grid.ColumnProperty, 1);
			grid17.Children.Add(label21);
			frame2.SetValue(ContentView.ContentProperty, grid17);
			grid22.Children.Add(frame2);
			frame3.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame3.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame3.SetValue(Grid.RowProperty, 1);
			frame3.SetValue(Grid.ColumnProperty, 0);
			columnDefinition30.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid18.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition30);
			columnDefinition31.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid18.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition31);
			label22.SetValue(Label.TextProperty, "◊‹µÁ—π");
			label22.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty24 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter24 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider24 = new XamlServiceProvider();
			Type typeFromHandle47 = typeof(IProvideValueTarget);
			object[] array24 = new object[0 + 9];
			array24[0] = label22;
			array24[1] = grid18;
			array24[2] = frame3;
			array24[3] = grid22;
			array24[4] = stackLayout2;
			array24[5] = scrollView;
			array24[6] = stackLayout3;
			array24[7] = stackLayout4;
			array24[8] = graphPage;
			object service24;
			xamlServiceProvider24.Add(typeFromHandle47, service24 = new SimpleValueTargetProvider(array24, Label.FontSizeProperty, nameScope));
			xamlServiceProvider24.Add(typeof(IReferenceProvider), service24);
			Type typeFromHandle48 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver24 = new XmlNamespaceResolver();
			xmlNamespaceResolver24.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver24.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver24.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider24.Add(typeFromHandle48, new XamlTypeResolver(xmlNamespaceResolver24, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider24.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(251, 31)));
			label22.SetValue(fontSizeProperty24, ((IExtendedTypeConverter)fontSizeConverter24).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider24));
			label22.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label22.SetValue(Grid.RowProperty, 0);
			label22.SetValue(Grid.ColumnProperty, 0);
			grid18.Children.Add(label22);
			label23.SetValue(Label.TextProperty, "000.0V");
			label23.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty25 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter25 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider25 = new XamlServiceProvider();
			Type typeFromHandle49 = typeof(IProvideValueTarget);
			object[] array25 = new object[0 + 9];
			array25[0] = label23;
			array25[1] = grid18;
			array25[2] = frame3;
			array25[3] = grid22;
			array25[4] = stackLayout2;
			array25[5] = scrollView;
			array25[6] = stackLayout3;
			array25[7] = stackLayout4;
			array25[8] = graphPage;
			object service25;
			xamlServiceProvider25.Add(typeFromHandle49, service25 = new SimpleValueTargetProvider(array25, Label.FontSizeProperty, nameScope));
			xamlServiceProvider25.Add(typeof(IReferenceProvider), service25);
			Type typeFromHandle50 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver25 = new XmlNamespaceResolver();
			xmlNamespaceResolver25.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver25.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver25.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider25.Add(typeFromHandle50, new XamlTypeResolver(xmlNamespaceResolver25, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider25.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(254, 30)));
			label23.SetValue(fontSizeProperty25, ((IExtendedTypeConverter)fontSizeConverter25).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider25));
			label23.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label23.SetValue(Grid.RowProperty, 0);
			label23.SetValue(Grid.ColumnProperty, 1);
			grid18.Children.Add(label23);
			frame3.SetValue(ContentView.ContentProperty, grid18);
			grid22.Children.Add(frame3);
			frame4.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame4.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame4.SetValue(Grid.RowProperty, 1);
			frame4.SetValue(Grid.ColumnProperty, 1);
			columnDefinition32.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid19.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition32);
			columnDefinition33.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid19.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition33);
			label24.SetValue(Label.TextProperty, "◊‹µÁ¡˜");
			label24.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty26 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter26 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider26 = new XamlServiceProvider();
			Type typeFromHandle51 = typeof(IProvideValueTarget);
			object[] array26 = new object[0 + 9];
			array26[0] = label24;
			array26[1] = grid19;
			array26[2] = frame4;
			array26[3] = grid22;
			array26[4] = stackLayout2;
			array26[5] = scrollView;
			array26[6] = stackLayout3;
			array26[7] = stackLayout4;
			array26[8] = graphPage;
			object service26;
			xamlServiceProvider26.Add(typeFromHandle51, service26 = new SimpleValueTargetProvider(array26, Label.FontSizeProperty, nameScope));
			xamlServiceProvider26.Add(typeof(IReferenceProvider), service26);
			Type typeFromHandle52 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver26 = new XmlNamespaceResolver();
			xmlNamespaceResolver26.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver26.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver26.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider26.Add(typeFromHandle52, new XamlTypeResolver(xmlNamespaceResolver26, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider26.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(265, 31)));
			label24.SetValue(fontSizeProperty26, ((IExtendedTypeConverter)fontSizeConverter26).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider26));
			label24.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label24.SetValue(Grid.RowProperty, 0);
			label24.SetValue(Grid.ColumnProperty, 0);
			grid19.Children.Add(label24);
			label25.SetValue(Label.TextProperty, "0000.0A");
			label25.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty27 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter27 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider27 = new XamlServiceProvider();
			Type typeFromHandle53 = typeof(IProvideValueTarget);
			object[] array27 = new object[0 + 9];
			array27[0] = label25;
			array27[1] = grid19;
			array27[2] = frame4;
			array27[3] = grid22;
			array27[4] = stackLayout2;
			array27[5] = scrollView;
			array27[6] = stackLayout3;
			array27[7] = stackLayout4;
			array27[8] = graphPage;
			object service27;
			xamlServiceProvider27.Add(typeFromHandle53, service27 = new SimpleValueTargetProvider(array27, Label.FontSizeProperty, nameScope));
			xamlServiceProvider27.Add(typeof(IReferenceProvider), service27);
			Type typeFromHandle54 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver27 = new XmlNamespaceResolver();
			xmlNamespaceResolver27.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver27.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver27.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider27.Add(typeFromHandle54, new XamlTypeResolver(xmlNamespaceResolver27, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider27.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(268, 30)));
			label25.SetValue(fontSizeProperty27, ((IExtendedTypeConverter)fontSizeConverter27).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider27));
			label25.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label25.SetValue(Grid.RowProperty, 0);
			label25.SetValue(Grid.ColumnProperty, 1);
			grid19.Children.Add(label25);
			frame4.SetValue(ContentView.ContentProperty, grid19);
			grid22.Children.Add(frame4);
			frame5.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame5.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame5.SetValue(Grid.RowProperty, 2);
			frame5.SetValue(Grid.ColumnProperty, 0);
			columnDefinition34.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid20.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition34);
			columnDefinition35.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid20.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition35);
			label26.SetValue(Label.TextProperty, "◊‹»›¡ø");
			label26.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty28 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter28 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider28 = new XamlServiceProvider();
			Type typeFromHandle55 = typeof(IProvideValueTarget);
			object[] array28 = new object[0 + 9];
			array28[0] = label26;
			array28[1] = grid20;
			array28[2] = frame5;
			array28[3] = grid22;
			array28[4] = stackLayout2;
			array28[5] = scrollView;
			array28[6] = stackLayout3;
			array28[7] = stackLayout4;
			array28[8] = graphPage;
			object service28;
			xamlServiceProvider28.Add(typeFromHandle55, service28 = new SimpleValueTargetProvider(array28, Label.FontSizeProperty, nameScope));
			xamlServiceProvider28.Add(typeof(IReferenceProvider), service28);
			Type typeFromHandle56 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver28 = new XmlNamespaceResolver();
			xmlNamespaceResolver28.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver28.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver28.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider28.Add(typeFromHandle56, new XamlTypeResolver(xmlNamespaceResolver28, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider28.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(279, 31)));
			label26.SetValue(fontSizeProperty28, ((IExtendedTypeConverter)fontSizeConverter28).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider28));
			label26.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label26.SetValue(Grid.RowProperty, 0);
			label26.SetValue(Grid.ColumnProperty, 0);
			grid20.Children.Add(label26);
			label27.SetValue(Label.TextProperty, "000.0AH");
			label27.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty29 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter29 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider29 = new XamlServiceProvider();
			Type typeFromHandle57 = typeof(IProvideValueTarget);
			object[] array29 = new object[0 + 9];
			array29[0] = label27;
			array29[1] = grid20;
			array29[2] = frame5;
			array29[3] = grid22;
			array29[4] = stackLayout2;
			array29[5] = scrollView;
			array29[6] = stackLayout3;
			array29[7] = stackLayout4;
			array29[8] = graphPage;
			object service29;
			xamlServiceProvider29.Add(typeFromHandle57, service29 = new SimpleValueTargetProvider(array29, Label.FontSizeProperty, nameScope));
			xamlServiceProvider29.Add(typeof(IReferenceProvider), service29);
			Type typeFromHandle58 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver29 = new XmlNamespaceResolver();
			xmlNamespaceResolver29.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver29.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver29.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider29.Add(typeFromHandle58, new XamlTypeResolver(xmlNamespaceResolver29, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider29.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(282, 30)));
			label27.SetValue(fontSizeProperty29, ((IExtendedTypeConverter)fontSizeConverter29).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider29));
			label27.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label27.SetValue(Grid.RowProperty, 0);
			label27.SetValue(Grid.ColumnProperty, 1);
			grid20.Children.Add(label27);
			frame5.SetValue(ContentView.ContentProperty, grid20);
			grid22.Children.Add(frame5);
			frame6.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame6.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame6.SetValue(Grid.RowProperty, 2);
			frame6.SetValue(Grid.ColumnProperty, 1);
			columnDefinition36.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid21.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition36);
			columnDefinition37.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid21.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition37);
			label28.SetValue(Label.TextProperty, " £”‡»›¡ø");
			label28.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty30 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter30 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider30 = new XamlServiceProvider();
			Type typeFromHandle59 = typeof(IProvideValueTarget);
			object[] array30 = new object[0 + 9];
			array30[0] = label28;
			array30[1] = grid21;
			array30[2] = frame6;
			array30[3] = grid22;
			array30[4] = stackLayout2;
			array30[5] = scrollView;
			array30[6] = stackLayout3;
			array30[7] = stackLayout4;
			array30[8] = graphPage;
			object service30;
			xamlServiceProvider30.Add(typeFromHandle59, service30 = new SimpleValueTargetProvider(array30, Label.FontSizeProperty, nameScope));
			xamlServiceProvider30.Add(typeof(IReferenceProvider), service30);
			Type typeFromHandle60 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver30 = new XmlNamespaceResolver();
			xmlNamespaceResolver30.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver30.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver30.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider30.Add(typeFromHandle60, new XamlTypeResolver(xmlNamespaceResolver30, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider30.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(293, 31)));
			label28.SetValue(fontSizeProperty30, ((IExtendedTypeConverter)fontSizeConverter30).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider30));
			label28.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label28.SetValue(Grid.RowProperty, 0);
			label28.SetValue(Grid.ColumnProperty, 0);
			grid21.Children.Add(label28);
			label29.SetValue(Label.TextProperty, "000.0AH");
			label29.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty31 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter31 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider31 = new XamlServiceProvider();
			Type typeFromHandle61 = typeof(IProvideValueTarget);
			object[] array31 = new object[0 + 9];
			array31[0] = label29;
			array31[1] = grid21;
			array31[2] = frame6;
			array31[3] = grid22;
			array31[4] = stackLayout2;
			array31[5] = scrollView;
			array31[6] = stackLayout3;
			array31[7] = stackLayout4;
			array31[8] = graphPage;
			object service31;
			xamlServiceProvider31.Add(typeFromHandle61, service31 = new SimpleValueTargetProvider(array31, Label.FontSizeProperty, nameScope));
			xamlServiceProvider31.Add(typeof(IReferenceProvider), service31);
			Type typeFromHandle62 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver31 = new XmlNamespaceResolver();
			xmlNamespaceResolver31.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver31.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver31.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider31.Add(typeFromHandle62, new XamlTypeResolver(xmlNamespaceResolver31, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider31.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(296, 30)));
			label29.SetValue(fontSizeProperty31, ((IExtendedTypeConverter)fontSizeConverter31).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider31));
			label29.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label29.SetValue(Grid.RowProperty, 0);
			label29.SetValue(Grid.ColumnProperty, 1);
			grid21.Children.Add(label29);
			frame6.SetValue(ContentView.ContentProperty, grid21);
			grid22.Children.Add(frame6);
			stackLayout2.Children.Add(grid22);
			columnDefinition38.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid25.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition38);
			columnDefinition39.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid25.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition39);
			frame7.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame7.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame7.SetValue(Grid.RowProperty, 0);
			frame7.SetValue(Grid.ColumnProperty, 0);
			columnDefinition40.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid23.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition40);
			columnDefinition41.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid23.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition41);
			label30.SetValue(Label.TextProperty, "MOSŒ¬∂»");
			label30.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty32 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter32 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider32 = new XamlServiceProvider();
			Type typeFromHandle63 = typeof(IProvideValueTarget);
			object[] array32 = new object[0 + 9];
			array32[0] = label30;
			array32[1] = grid23;
			array32[2] = frame7;
			array32[3] = grid25;
			array32[4] = stackLayout2;
			array32[5] = scrollView;
			array32[6] = stackLayout3;
			array32[7] = stackLayout4;
			array32[8] = graphPage;
			object service32;
			xamlServiceProvider32.Add(typeFromHandle63, service32 = new SimpleValueTargetProvider(array32, Label.FontSizeProperty, nameScope));
			xamlServiceProvider32.Add(typeof(IReferenceProvider), service32);
			Type typeFromHandle64 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver32 = new XmlNamespaceResolver();
			xmlNamespaceResolver32.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver32.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver32.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider32.Add(typeFromHandle64, new XamlTypeResolver(xmlNamespaceResolver32, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider32.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(314, 31)));
			label30.SetValue(fontSizeProperty32, ((IExtendedTypeConverter)fontSizeConverter32).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider32));
			label30.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label30.SetValue(Grid.RowProperty, 0);
			label30.SetValue(Grid.ColumnProperty, 0);
			grid23.Children.Add(label30);
			label31.SetValue(Label.TextProperty, "000.0°Ê");
			label31.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty33 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter33 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider33 = new XamlServiceProvider();
			Type typeFromHandle65 = typeof(IProvideValueTarget);
			object[] array33 = new object[0 + 9];
			array33[0] = label31;
			array33[1] = grid23;
			array33[2] = frame7;
			array33[3] = grid25;
			array33[4] = stackLayout2;
			array33[5] = scrollView;
			array33[6] = stackLayout3;
			array33[7] = stackLayout4;
			array33[8] = graphPage;
			object service33;
			xamlServiceProvider33.Add(typeFromHandle65, service33 = new SimpleValueTargetProvider(array33, Label.FontSizeProperty, nameScope));
			xamlServiceProvider33.Add(typeof(IReferenceProvider), service33);
			Type typeFromHandle66 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver33 = new XmlNamespaceResolver();
			xmlNamespaceResolver33.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver33.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver33.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider33.Add(typeFromHandle66, new XamlTypeResolver(xmlNamespaceResolver33, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider33.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(317, 30)));
			label31.SetValue(fontSizeProperty33, ((IExtendedTypeConverter)fontSizeConverter33).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider33));
			label31.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label31.SetValue(Grid.RowProperty, 0);
			label31.SetValue(Grid.ColumnProperty, 1);
			grid23.Children.Add(label31);
			frame7.SetValue(ContentView.ContentProperty, grid23);
			grid25.Children.Add(frame7);
			frame8.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame8.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame8.SetValue(Grid.RowProperty, 0);
			frame8.SetValue(Grid.ColumnProperty, 1);
			columnDefinition42.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid24.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition42);
			columnDefinition43.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid24.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition43);
			label32.SetValue(Label.TextProperty, "æ˘∫‚Œ¬∂»");
			label32.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty34 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter34 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider34 = new XamlServiceProvider();
			Type typeFromHandle67 = typeof(IProvideValueTarget);
			object[] array34 = new object[0 + 9];
			array34[0] = label32;
			array34[1] = grid24;
			array34[2] = frame8;
			array34[3] = grid25;
			array34[4] = stackLayout2;
			array34[5] = scrollView;
			array34[6] = stackLayout3;
			array34[7] = stackLayout4;
			array34[8] = graphPage;
			object service34;
			xamlServiceProvider34.Add(typeFromHandle67, service34 = new SimpleValueTargetProvider(array34, Label.FontSizeProperty, nameScope));
			xamlServiceProvider34.Add(typeof(IReferenceProvider), service34);
			Type typeFromHandle68 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver34 = new XmlNamespaceResolver();
			xmlNamespaceResolver34.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver34.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver34.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider34.Add(typeFromHandle68, new XamlTypeResolver(xmlNamespaceResolver34, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider34.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(328, 31)));
			label32.SetValue(fontSizeProperty34, ((IExtendedTypeConverter)fontSizeConverter34).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider34));
			label32.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label32.SetValue(Grid.RowProperty, 0);
			label32.SetValue(Grid.ColumnProperty, 0);
			grid24.Children.Add(label32);
			label33.SetValue(Label.TextProperty, "000.0°Ê");
			label33.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty35 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter35 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider35 = new XamlServiceProvider();
			Type typeFromHandle69 = typeof(IProvideValueTarget);
			object[] array35 = new object[0 + 9];
			array35[0] = label33;
			array35[1] = grid24;
			array35[2] = frame8;
			array35[3] = grid25;
			array35[4] = stackLayout2;
			array35[5] = scrollView;
			array35[6] = stackLayout3;
			array35[7] = stackLayout4;
			array35[8] = graphPage;
			object service35;
			xamlServiceProvider35.Add(typeFromHandle69, service35 = new SimpleValueTargetProvider(array35, Label.FontSizeProperty, nameScope));
			xamlServiceProvider35.Add(typeof(IReferenceProvider), service35);
			Type typeFromHandle70 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver35 = new XmlNamespaceResolver();
			xmlNamespaceResolver35.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver35.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver35.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider35.Add(typeFromHandle70, new XamlTypeResolver(xmlNamespaceResolver35, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider35.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(331, 30)));
			label33.SetValue(fontSizeProperty35, ((IExtendedTypeConverter)fontSizeConverter35).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider35));
			label33.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label33.SetValue(Grid.RowProperty, 0);
			label33.SetValue(Grid.ColumnProperty, 1);
			grid24.Children.Add(label33);
			frame8.SetValue(ContentView.ContentProperty, grid24);
			grid25.Children.Add(frame8);
			stackLayout2.Children.Add(grid25);
			columnDefinition44.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid30.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition44);
			columnDefinition45.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid30.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition45);
			columnDefinition46.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid30.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition46);
			columnDefinition47.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid30.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition47);
			frame9.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame9.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame9.SetValue(Grid.RowProperty, 0);
			frame9.SetValue(Grid.ColumnProperty, 0);
			columnDefinition48.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid26.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition48);
			columnDefinition49.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("4*"));
			((DefinitionCollection<ColumnDefinition>)grid26.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition49);
			label34.SetValue(Label.TextProperty, "T1");
			label34.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty36 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter36 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider36 = new XamlServiceProvider();
			Type typeFromHandle71 = typeof(IProvideValueTarget);
			object[] array36 = new object[0 + 9];
			array36[0] = label34;
			array36[1] = grid26;
			array36[2] = frame9;
			array36[3] = grid30;
			array36[4] = stackLayout2;
			array36[5] = scrollView;
			array36[6] = stackLayout3;
			array36[7] = stackLayout4;
			array36[8] = graphPage;
			object service36;
			xamlServiceProvider36.Add(typeFromHandle71, service36 = new SimpleValueTargetProvider(array36, Label.FontSizeProperty, nameScope));
			xamlServiceProvider36.Add(typeof(IReferenceProvider), service36);
			Type typeFromHandle72 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver36 = new XmlNamespaceResolver();
			xmlNamespaceResolver36.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver36.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver36.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider36.Add(typeFromHandle72, new XamlTypeResolver(xmlNamespaceResolver36, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider36.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(350, 31)));
			label34.SetValue(fontSizeProperty36, ((IExtendedTypeConverter)fontSizeConverter36).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider36));
			label34.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label34.SetValue(Grid.RowProperty, 0);
			label34.SetValue(Grid.ColumnProperty, 0);
			grid26.Children.Add(label34);
			label35.SetValue(Label.TextProperty, "000.0°Ê");
			label35.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty37 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter37 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider37 = new XamlServiceProvider();
			Type typeFromHandle73 = typeof(IProvideValueTarget);
			object[] array37 = new object[0 + 9];
			array37[0] = label35;
			array37[1] = grid26;
			array37[2] = frame9;
			array37[3] = grid30;
			array37[4] = stackLayout2;
			array37[5] = scrollView;
			array37[6] = stackLayout3;
			array37[7] = stackLayout4;
			array37[8] = graphPage;
			object service37;
			xamlServiceProvider37.Add(typeFromHandle73, service37 = new SimpleValueTargetProvider(array37, Label.FontSizeProperty, nameScope));
			xamlServiceProvider37.Add(typeof(IReferenceProvider), service37);
			Type typeFromHandle74 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver37 = new XmlNamespaceResolver();
			xmlNamespaceResolver37.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver37.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver37.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider37.Add(typeFromHandle74, new XamlTypeResolver(xmlNamespaceResolver37, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider37.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(353, 30)));
			label35.SetValue(fontSizeProperty37, ((IExtendedTypeConverter)fontSizeConverter37).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider37));
			label35.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label35.SetValue(Grid.RowProperty, 0);
			label35.SetValue(Grid.ColumnProperty, 1);
			grid26.Children.Add(label35);
			frame9.SetValue(ContentView.ContentProperty, grid26);
			grid30.Children.Add(frame9);
			frame10.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame10.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame10.SetValue(Grid.RowProperty, 0);
			frame10.SetValue(Grid.ColumnProperty, 1);
			columnDefinition50.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid27.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition50);
			columnDefinition51.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("4*"));
			((DefinitionCollection<ColumnDefinition>)grid27.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition51);
			label36.SetValue(Label.TextProperty, "T2");
			label36.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty38 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter38 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider38 = new XamlServiceProvider();
			Type typeFromHandle75 = typeof(IProvideValueTarget);
			object[] array38 = new object[0 + 9];
			array38[0] = label36;
			array38[1] = grid27;
			array38[2] = frame10;
			array38[3] = grid30;
			array38[4] = stackLayout2;
			array38[5] = scrollView;
			array38[6] = stackLayout3;
			array38[7] = stackLayout4;
			array38[8] = graphPage;
			object service38;
			xamlServiceProvider38.Add(typeFromHandle75, service38 = new SimpleValueTargetProvider(array38, Label.FontSizeProperty, nameScope));
			xamlServiceProvider38.Add(typeof(IReferenceProvider), service38);
			Type typeFromHandle76 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver38 = new XmlNamespaceResolver();
			xmlNamespaceResolver38.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver38.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver38.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider38.Add(typeFromHandle76, new XamlTypeResolver(xmlNamespaceResolver38, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider38.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(364, 31)));
			label36.SetValue(fontSizeProperty38, ((IExtendedTypeConverter)fontSizeConverter38).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider38));
			label36.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label36.SetValue(Grid.RowProperty, 0);
			label36.SetValue(Grid.ColumnProperty, 0);
			grid27.Children.Add(label36);
			label37.SetValue(Label.TextProperty, "000.0°Ê");
			label37.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty39 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter39 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider39 = new XamlServiceProvider();
			Type typeFromHandle77 = typeof(IProvideValueTarget);
			object[] array39 = new object[0 + 9];
			array39[0] = label37;
			array39[1] = grid27;
			array39[2] = frame10;
			array39[3] = grid30;
			array39[4] = stackLayout2;
			array39[5] = scrollView;
			array39[6] = stackLayout3;
			array39[7] = stackLayout4;
			array39[8] = graphPage;
			object service39;
			xamlServiceProvider39.Add(typeFromHandle77, service39 = new SimpleValueTargetProvider(array39, Label.FontSizeProperty, nameScope));
			xamlServiceProvider39.Add(typeof(IReferenceProvider), service39);
			Type typeFromHandle78 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver39 = new XmlNamespaceResolver();
			xmlNamespaceResolver39.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver39.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver39.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider39.Add(typeFromHandle78, new XamlTypeResolver(xmlNamespaceResolver39, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider39.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(367, 30)));
			label37.SetValue(fontSizeProperty39, ((IExtendedTypeConverter)fontSizeConverter39).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider39));
			label37.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label37.SetValue(Grid.RowProperty, 0);
			label37.SetValue(Grid.ColumnProperty, 1);
			grid27.Children.Add(label37);
			frame10.SetValue(ContentView.ContentProperty, grid27);
			grid30.Children.Add(frame10);
			frame11.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame11.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame11.SetValue(Grid.RowProperty, 0);
			frame11.SetValue(Grid.ColumnProperty, 2);
			columnDefinition52.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid28.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition52);
			columnDefinition53.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("4*"));
			((DefinitionCollection<ColumnDefinition>)grid28.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition53);
			label38.SetValue(Label.TextProperty, "T3");
			label38.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty40 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter40 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider40 = new XamlServiceProvider();
			Type typeFromHandle79 = typeof(IProvideValueTarget);
			object[] array40 = new object[0 + 9];
			array40[0] = label38;
			array40[1] = grid28;
			array40[2] = frame11;
			array40[3] = grid30;
			array40[4] = stackLayout2;
			array40[5] = scrollView;
			array40[6] = stackLayout3;
			array40[7] = stackLayout4;
			array40[8] = graphPage;
			object service40;
			xamlServiceProvider40.Add(typeFromHandle79, service40 = new SimpleValueTargetProvider(array40, Label.FontSizeProperty, nameScope));
			xamlServiceProvider40.Add(typeof(IReferenceProvider), service40);
			Type typeFromHandle80 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver40 = new XmlNamespaceResolver();
			xmlNamespaceResolver40.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver40.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver40.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider40.Add(typeFromHandle80, new XamlTypeResolver(xmlNamespaceResolver40, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider40.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(378, 31)));
			label38.SetValue(fontSizeProperty40, ((IExtendedTypeConverter)fontSizeConverter40).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider40));
			label38.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label38.SetValue(Grid.RowProperty, 0);
			label38.SetValue(Grid.ColumnProperty, 0);
			grid28.Children.Add(label38);
			label39.SetValue(Label.TextProperty, "000.0°Ê");
			label39.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty41 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter41 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider41 = new XamlServiceProvider();
			Type typeFromHandle81 = typeof(IProvideValueTarget);
			object[] array41 = new object[0 + 9];
			array41[0] = label39;
			array41[1] = grid28;
			array41[2] = frame11;
			array41[3] = grid30;
			array41[4] = stackLayout2;
			array41[5] = scrollView;
			array41[6] = stackLayout3;
			array41[7] = stackLayout4;
			array41[8] = graphPage;
			object service41;
			xamlServiceProvider41.Add(typeFromHandle81, service41 = new SimpleValueTargetProvider(array41, Label.FontSizeProperty, nameScope));
			xamlServiceProvider41.Add(typeof(IReferenceProvider), service41);
			Type typeFromHandle82 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver41 = new XmlNamespaceResolver();
			xmlNamespaceResolver41.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver41.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver41.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider41.Add(typeFromHandle82, new XamlTypeResolver(xmlNamespaceResolver41, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider41.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(381, 30)));
			label39.SetValue(fontSizeProperty41, ((IExtendedTypeConverter)fontSizeConverter41).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider41));
			label39.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label39.SetValue(Grid.RowProperty, 0);
			label39.SetValue(Grid.ColumnProperty, 1);
			grid28.Children.Add(label39);
			frame11.SetValue(ContentView.ContentProperty, grid28);
			grid30.Children.Add(frame11);
			frame12.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame12.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame12.SetValue(Grid.RowProperty, 0);
			frame12.SetValue(Grid.ColumnProperty, 3);
			columnDefinition54.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid29.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition54);
			columnDefinition55.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("4*"));
			((DefinitionCollection<ColumnDefinition>)grid29.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition55);
			label40.SetValue(Label.TextProperty, "T4");
			label40.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty42 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter42 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider42 = new XamlServiceProvider();
			Type typeFromHandle83 = typeof(IProvideValueTarget);
			object[] array42 = new object[0 + 9];
			array42[0] = label40;
			array42[1] = grid29;
			array42[2] = frame12;
			array42[3] = grid30;
			array42[4] = stackLayout2;
			array42[5] = scrollView;
			array42[6] = stackLayout3;
			array42[7] = stackLayout4;
			array42[8] = graphPage;
			object service42;
			xamlServiceProvider42.Add(typeFromHandle83, service42 = new SimpleValueTargetProvider(array42, Label.FontSizeProperty, nameScope));
			xamlServiceProvider42.Add(typeof(IReferenceProvider), service42);
			Type typeFromHandle84 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver42 = new XmlNamespaceResolver();
			xmlNamespaceResolver42.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver42.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver42.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider42.Add(typeFromHandle84, new XamlTypeResolver(xmlNamespaceResolver42, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider42.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(392, 31)));
			label40.SetValue(fontSizeProperty42, ((IExtendedTypeConverter)fontSizeConverter42).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider42));
			label40.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label40.SetValue(Grid.RowProperty, 0);
			label40.SetValue(Grid.ColumnProperty, 0);
			grid29.Children.Add(label40);
			label41.SetValue(Label.TextProperty, "000.0°Ê");
			label41.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty43 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter43 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider43 = new XamlServiceProvider();
			Type typeFromHandle85 = typeof(IProvideValueTarget);
			object[] array43 = new object[0 + 9];
			array43[0] = label41;
			array43[1] = grid29;
			array43[2] = frame12;
			array43[3] = grid30;
			array43[4] = stackLayout2;
			array43[5] = scrollView;
			array43[6] = stackLayout3;
			array43[7] = stackLayout4;
			array43[8] = graphPage;
			object service43;
			xamlServiceProvider43.Add(typeFromHandle85, service43 = new SimpleValueTargetProvider(array43, Label.FontSizeProperty, nameScope));
			xamlServiceProvider43.Add(typeof(IReferenceProvider), service43);
			Type typeFromHandle86 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver43 = new XmlNamespaceResolver();
			xmlNamespaceResolver43.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver43.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver43.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider43.Add(typeFromHandle86, new XamlTypeResolver(xmlNamespaceResolver43, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider43.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(395, 30)));
			label41.SetValue(fontSizeProperty43, ((IExtendedTypeConverter)fontSizeConverter43).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider43));
			label41.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label41.SetValue(Grid.RowProperty, 0);
			label41.SetValue(Grid.ColumnProperty, 1);
			grid29.Children.Add(label41);
			frame12.SetValue(ContentView.ContentProperty, grid29);
			grid30.Children.Add(frame12);
			stackLayout2.Children.Add(grid30);
			rowDefinition24.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid37.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition24);
			rowDefinition25.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid37.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition25);
			rowDefinition26.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid37.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition26);
			columnDefinition56.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid37.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition56);
			columnDefinition57.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid37.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition57);
			frame13.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame13.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame13.SetValue(Grid.RowProperty, 0);
			frame13.SetValue(Grid.ColumnProperty, 0);
			columnDefinition58.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid31.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition58);
			columnDefinition59.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid31.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition59);
			label42.SetValue(Label.TextProperty, "µ•ÃÂ◊Ó∏ﬂµÁ—π");
			label42.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty44 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter44 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider44 = new XamlServiceProvider();
			Type typeFromHandle87 = typeof(IProvideValueTarget);
			object[] array44 = new object[0 + 9];
			array44[0] = label42;
			array44[1] = grid31;
			array44[2] = frame13;
			array44[3] = grid37;
			array44[4] = stackLayout2;
			array44[5] = scrollView;
			array44[6] = stackLayout3;
			array44[7] = stackLayout4;
			array44[8] = graphPage;
			object service44;
			xamlServiceProvider44.Add(typeFromHandle87, service44 = new SimpleValueTargetProvider(array44, Label.FontSizeProperty, nameScope));
			xamlServiceProvider44.Add(typeof(IReferenceProvider), service44);
			Type typeFromHandle88 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver44 = new XmlNamespaceResolver();
			xmlNamespaceResolver44.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver44.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver44.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider44.Add(typeFromHandle88, new XamlTypeResolver(xmlNamespaceResolver44, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider44.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(417, 31)));
			label42.SetValue(fontSizeProperty44, ((IExtendedTypeConverter)fontSizeConverter44).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider44));
			label42.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label42.SetValue(Grid.RowProperty, 0);
			label42.SetValue(Grid.ColumnProperty, 0);
			grid31.Children.Add(label42);
			label43.SetValue(Label.TextProperty, "0.000V");
			label43.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty45 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter45 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider45 = new XamlServiceProvider();
			Type typeFromHandle89 = typeof(IProvideValueTarget);
			object[] array45 = new object[0 + 9];
			array45[0] = label43;
			array45[1] = grid31;
			array45[2] = frame13;
			array45[3] = grid37;
			array45[4] = stackLayout2;
			array45[5] = scrollView;
			array45[6] = stackLayout3;
			array45[7] = stackLayout4;
			array45[8] = graphPage;
			object service45;
			xamlServiceProvider45.Add(typeFromHandle89, service45 = new SimpleValueTargetProvider(array45, Label.FontSizeProperty, nameScope));
			xamlServiceProvider45.Add(typeof(IReferenceProvider), service45);
			Type typeFromHandle90 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver45 = new XmlNamespaceResolver();
			xmlNamespaceResolver45.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver45.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver45.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider45.Add(typeFromHandle90, new XamlTypeResolver(xmlNamespaceResolver45, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider45.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(420, 30)));
			label43.SetValue(fontSizeProperty45, ((IExtendedTypeConverter)fontSizeConverter45).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider45));
			label43.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label43.SetValue(Grid.RowProperty, 0);
			label43.SetValue(Grid.ColumnProperty, 1);
			grid31.Children.Add(label43);
			frame13.SetValue(ContentView.ContentProperty, grid31);
			grid37.Children.Add(frame13);
			frame14.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame14.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame14.SetValue(Grid.RowProperty, 0);
			frame14.SetValue(Grid.ColumnProperty, 1);
			columnDefinition60.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid32.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition60);
			columnDefinition61.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid32.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition61);
			label44.SetValue(Label.TextProperty, "µ•ÃÂ◊ÓµÕµÁ—π");
			label44.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty46 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter46 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider46 = new XamlServiceProvider();
			Type typeFromHandle91 = typeof(IProvideValueTarget);
			object[] array46 = new object[0 + 9];
			array46[0] = label44;
			array46[1] = grid32;
			array46[2] = frame14;
			array46[3] = grid37;
			array46[4] = stackLayout2;
			array46[5] = scrollView;
			array46[6] = stackLayout3;
			array46[7] = stackLayout4;
			array46[8] = graphPage;
			object service46;
			xamlServiceProvider46.Add(typeFromHandle91, service46 = new SimpleValueTargetProvider(array46, Label.FontSizeProperty, nameScope));
			xamlServiceProvider46.Add(typeof(IReferenceProvider), service46);
			Type typeFromHandle92 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver46 = new XmlNamespaceResolver();
			xmlNamespaceResolver46.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver46.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver46.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider46.Add(typeFromHandle92, new XamlTypeResolver(xmlNamespaceResolver46, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider46.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(431, 31)));
			label44.SetValue(fontSizeProperty46, ((IExtendedTypeConverter)fontSizeConverter46).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider46));
			label44.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label44.SetValue(Grid.RowProperty, 0);
			label44.SetValue(Grid.ColumnProperty, 0);
			grid32.Children.Add(label44);
			label45.SetValue(Label.TextProperty, "0.000V");
			label45.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty47 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter47 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider47 = new XamlServiceProvider();
			Type typeFromHandle93 = typeof(IProvideValueTarget);
			object[] array47 = new object[0 + 9];
			array47[0] = label45;
			array47[1] = grid32;
			array47[2] = frame14;
			array47[3] = grid37;
			array47[4] = stackLayout2;
			array47[5] = scrollView;
			array47[6] = stackLayout3;
			array47[7] = stackLayout4;
			array47[8] = graphPage;
			object service47;
			xamlServiceProvider47.Add(typeFromHandle93, service47 = new SimpleValueTargetProvider(array47, Label.FontSizeProperty, nameScope));
			xamlServiceProvider47.Add(typeof(IReferenceProvider), service47);
			Type typeFromHandle94 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver47 = new XmlNamespaceResolver();
			xmlNamespaceResolver47.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver47.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver47.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider47.Add(typeFromHandle94, new XamlTypeResolver(xmlNamespaceResolver47, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider47.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(434, 30)));
			label45.SetValue(fontSizeProperty47, ((IExtendedTypeConverter)fontSizeConverter47).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider47));
			label45.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label45.SetValue(Grid.RowProperty, 0);
			label45.SetValue(Grid.ColumnProperty, 1);
			grid32.Children.Add(label45);
			frame14.SetValue(ContentView.ContentProperty, grid32);
			grid37.Children.Add(frame14);
			frame15.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame15.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame15.SetValue(Grid.RowProperty, 1);
			frame15.SetValue(Grid.ColumnProperty, 0);
			columnDefinition62.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid33.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition62);
			columnDefinition63.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid33.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition63);
			label46.SetValue(Label.TextProperty, "∆Ωæ˘µÁ—π");
			label46.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty48 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter48 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider48 = new XamlServiceProvider();
			Type typeFromHandle95 = typeof(IProvideValueTarget);
			object[] array48 = new object[0 + 9];
			array48[0] = label46;
			array48[1] = grid33;
			array48[2] = frame15;
			array48[3] = grid37;
			array48[4] = stackLayout2;
			array48[5] = scrollView;
			array48[6] = stackLayout3;
			array48[7] = stackLayout4;
			array48[8] = graphPage;
			object service48;
			xamlServiceProvider48.Add(typeFromHandle95, service48 = new SimpleValueTargetProvider(array48, Label.FontSizeProperty, nameScope));
			xamlServiceProvider48.Add(typeof(IReferenceProvider), service48);
			Type typeFromHandle96 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver48 = new XmlNamespaceResolver();
			xmlNamespaceResolver48.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver48.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver48.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider48.Add(typeFromHandle96, new XamlTypeResolver(xmlNamespaceResolver48, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider48.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(446, 31)));
			label46.SetValue(fontSizeProperty48, ((IExtendedTypeConverter)fontSizeConverter48).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider48));
			label46.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label46.SetValue(Grid.RowProperty, 0);
			label46.SetValue(Grid.ColumnProperty, 0);
			grid33.Children.Add(label46);
			label47.SetValue(Label.TextProperty, "0.000V");
			label47.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty49 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter49 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider49 = new XamlServiceProvider();
			Type typeFromHandle97 = typeof(IProvideValueTarget);
			object[] array49 = new object[0 + 9];
			array49[0] = label47;
			array49[1] = grid33;
			array49[2] = frame15;
			array49[3] = grid37;
			array49[4] = stackLayout2;
			array49[5] = scrollView;
			array49[6] = stackLayout3;
			array49[7] = stackLayout4;
			array49[8] = graphPage;
			object service49;
			xamlServiceProvider49.Add(typeFromHandle97, service49 = new SimpleValueTargetProvider(array49, Label.FontSizeProperty, nameScope));
			xamlServiceProvider49.Add(typeof(IReferenceProvider), service49);
			Type typeFromHandle98 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver49 = new XmlNamespaceResolver();
			xmlNamespaceResolver49.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver49.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver49.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider49.Add(typeFromHandle98, new XamlTypeResolver(xmlNamespaceResolver49, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider49.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(449, 30)));
			label47.SetValue(fontSizeProperty49, ((IExtendedTypeConverter)fontSizeConverter49).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider49));
			label47.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label47.SetValue(Grid.RowProperty, 0);
			label47.SetValue(Grid.ColumnProperty, 1);
			grid33.Children.Add(label47);
			frame15.SetValue(ContentView.ContentProperty, grid33);
			grid37.Children.Add(frame15);
			frame16.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame16.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame16.SetValue(Grid.RowProperty, 1);
			frame16.SetValue(Grid.ColumnProperty, 1);
			columnDefinition64.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid34.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition64);
			columnDefinition65.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid34.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition65);
			label48.SetValue(Label.TextProperty, "◊Ó¥Û—π≤Ó");
			label48.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty50 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter50 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider50 = new XamlServiceProvider();
			Type typeFromHandle99 = typeof(IProvideValueTarget);
			object[] array50 = new object[0 + 9];
			array50[0] = label48;
			array50[1] = grid34;
			array50[2] = frame16;
			array50[3] = grid37;
			array50[4] = stackLayout2;
			array50[5] = scrollView;
			array50[6] = stackLayout3;
			array50[7] = stackLayout4;
			array50[8] = graphPage;
			object service50;
			xamlServiceProvider50.Add(typeFromHandle99, service50 = new SimpleValueTargetProvider(array50, Label.FontSizeProperty, nameScope));
			xamlServiceProvider50.Add(typeof(IReferenceProvider), service50);
			Type typeFromHandle100 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver50 = new XmlNamespaceResolver();
			xmlNamespaceResolver50.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver50.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver50.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider50.Add(typeFromHandle100, new XamlTypeResolver(xmlNamespaceResolver50, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider50.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(460, 31)));
			label48.SetValue(fontSizeProperty50, ((IExtendedTypeConverter)fontSizeConverter50).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider50));
			label48.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label48.SetValue(Grid.RowProperty, 0);
			label48.SetValue(Grid.ColumnProperty, 0);
			grid34.Children.Add(label48);
			label49.SetValue(Label.TextProperty, "0.000V");
			label49.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty51 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter51 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider51 = new XamlServiceProvider();
			Type typeFromHandle101 = typeof(IProvideValueTarget);
			object[] array51 = new object[0 + 9];
			array51[0] = label49;
			array51[1] = grid34;
			array51[2] = frame16;
			array51[3] = grid37;
			array51[4] = stackLayout2;
			array51[5] = scrollView;
			array51[6] = stackLayout3;
			array51[7] = stackLayout4;
			array51[8] = graphPage;
			object service51;
			xamlServiceProvider51.Add(typeFromHandle101, service51 = new SimpleValueTargetProvider(array51, Label.FontSizeProperty, nameScope));
			xamlServiceProvider51.Add(typeof(IReferenceProvider), service51);
			Type typeFromHandle102 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver51 = new XmlNamespaceResolver();
			xmlNamespaceResolver51.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver51.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver51.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider51.Add(typeFromHandle102, new XamlTypeResolver(xmlNamespaceResolver51, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider51.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(463, 30)));
			label49.SetValue(fontSizeProperty51, ((IExtendedTypeConverter)fontSizeConverter51).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider51));
			label49.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label49.SetValue(Grid.RowProperty, 0);
			label49.SetValue(Grid.ColumnProperty, 1);
			grid34.Children.Add(label49);
			frame16.SetValue(ContentView.ContentProperty, grid34);
			grid37.Children.Add(frame16);
			frame17.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame17.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame17.SetValue(Grid.RowProperty, 2);
			frame17.SetValue(Grid.ColumnProperty, 0);
			columnDefinition66.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid35.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition66);
			columnDefinition67.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid35.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition67);
			label50.SetValue(Label.TextProperty, "µ•ÃÂ");
			label50.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty52 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter52 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider52 = new XamlServiceProvider();
			Type typeFromHandle103 = typeof(IProvideValueTarget);
			object[] array52 = new object[0 + 9];
			array52[0] = label50;
			array52[1] = grid35;
			array52[2] = frame17;
			array52[3] = grid37;
			array52[4] = stackLayout2;
			array52[5] = scrollView;
			array52[6] = stackLayout3;
			array52[7] = stackLayout4;
			array52[8] = graphPage;
			object service52;
			xamlServiceProvider52.Add(typeFromHandle103, service52 = new SimpleValueTargetProvider(array52, Label.FontSizeProperty, nameScope));
			xamlServiceProvider52.Add(typeof(IReferenceProvider), service52);
			Type typeFromHandle104 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver52 = new XmlNamespaceResolver();
			xmlNamespaceResolver52.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver52.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver52.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider52.Add(typeFromHandle104, new XamlTypeResolver(xmlNamespaceResolver52, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider52.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(474, 30)));
			label50.SetValue(fontSizeProperty52, ((IExtendedTypeConverter)fontSizeConverter52).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider52));
			label50.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label50.SetValue(Grid.RowProperty, 0);
			label50.SetValue(Grid.ColumnProperty, 0);
			grid35.Children.Add(label50);
			label51.SetValue(Label.TextProperty, "  µÁ —π  / æ˘∫‚µÁ¡˜");
			label51.SetValue(Label.TextColorProperty, Color.Red);
			BindableProperty fontSizeProperty53 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter53 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider53 = new XamlServiceProvider();
			Type typeFromHandle105 = typeof(IProvideValueTarget);
			object[] array53 = new object[0 + 9];
			array53[0] = label51;
			array53[1] = grid35;
			array53[2] = frame17;
			array53[3] = grid37;
			array53[4] = stackLayout2;
			array53[5] = scrollView;
			array53[6] = stackLayout3;
			array53[7] = stackLayout4;
			array53[8] = graphPage;
			object service53;
			xamlServiceProvider53.Add(typeFromHandle105, service53 = new SimpleValueTargetProvider(array53, Label.FontSizeProperty, nameScope));
			xamlServiceProvider53.Add(typeof(IReferenceProvider), service53);
			Type typeFromHandle106 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver53 = new XmlNamespaceResolver();
			xmlNamespaceResolver53.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver53.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver53.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider53.Add(typeFromHandle106, new XamlTypeResolver(xmlNamespaceResolver53, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider53.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(477, 29)));
			label51.SetValue(fontSizeProperty53, ((IExtendedTypeConverter)fontSizeConverter53).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider53));
			label51.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label51.SetValue(Grid.RowProperty, 0);
			label51.SetValue(Grid.ColumnProperty, 1);
			grid35.Children.Add(label51);
			frame17.SetValue(ContentView.ContentProperty, grid35);
			grid37.Children.Add(frame17);
			frame18.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame18.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame18.SetValue(Grid.RowProperty, 2);
			frame18.SetValue(Grid.ColumnProperty, 1);
			columnDefinition68.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid36.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition68);
			columnDefinition69.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid36.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition69);
			label52.SetValue(Label.TextProperty, "µ•ÃÂ");
			label52.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty54 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter54 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider54 = new XamlServiceProvider();
			Type typeFromHandle107 = typeof(IProvideValueTarget);
			object[] array54 = new object[0 + 9];
			array54[0] = label52;
			array54[1] = grid36;
			array54[2] = frame18;
			array54[3] = grid37;
			array54[4] = stackLayout2;
			array54[5] = scrollView;
			array54[6] = stackLayout3;
			array54[7] = stackLayout4;
			array54[8] = graphPage;
			object service54;
			xamlServiceProvider54.Add(typeFromHandle107, service54 = new SimpleValueTargetProvider(array54, Label.FontSizeProperty, nameScope));
			xamlServiceProvider54.Add(typeof(IReferenceProvider), service54);
			Type typeFromHandle108 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver54 = new XmlNamespaceResolver();
			xmlNamespaceResolver54.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver54.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver54.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider54.Add(typeFromHandle108, new XamlTypeResolver(xmlNamespaceResolver54, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider54.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(488, 30)));
			label52.SetValue(fontSizeProperty54, ((IExtendedTypeConverter)fontSizeConverter54).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider54));
			label52.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label52.SetValue(Grid.RowProperty, 0);
			label52.SetValue(Grid.ColumnProperty, 0);
			grid36.Children.Add(label52);
			label53.SetValue(Label.TextProperty, "  µÁ —π  / æ˘∫‚µÁ¡˜");
			label53.SetValue(Label.TextColorProperty, Color.Red);
			BindableProperty fontSizeProperty55 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter55 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider55 = new XamlServiceProvider();
			Type typeFromHandle109 = typeof(IProvideValueTarget);
			object[] array55 = new object[0 + 9];
			array55[0] = label53;
			array55[1] = grid36;
			array55[2] = frame18;
			array55[3] = grid37;
			array55[4] = stackLayout2;
			array55[5] = scrollView;
			array55[6] = stackLayout3;
			array55[7] = stackLayout4;
			array55[8] = graphPage;
			object service55;
			xamlServiceProvider55.Add(typeFromHandle109, service55 = new SimpleValueTargetProvider(array55, Label.FontSizeProperty, nameScope));
			xamlServiceProvider55.Add(typeof(IReferenceProvider), service55);
			Type typeFromHandle110 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver55 = new XmlNamespaceResolver();
			xmlNamespaceResolver55.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver55.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver55.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider55.Add(typeFromHandle110, new XamlTypeResolver(xmlNamespaceResolver55, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider55.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(491, 29)));
			label53.SetValue(fontSizeProperty55, ((IExtendedTypeConverter)fontSizeConverter55).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider55));
			label53.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label53.SetValue(Grid.RowProperty, 0);
			label53.SetValue(Grid.ColumnProperty, 1);
			grid36.Children.Add(label53);
			frame18.SetValue(ContentView.ContentProperty, grid36);
			grid37.Children.Add(frame18);
			stackLayout2.Children.Add(grid37);
			rowDefinition27.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid62.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition27);
			rowDefinition28.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid62.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition28);
			rowDefinition29.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid62.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition29);
			rowDefinition30.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid62.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition30);
			rowDefinition31.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid62.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition31);
			rowDefinition32.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid62.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition32);
			rowDefinition33.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid62.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition33);
			rowDefinition34.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid62.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition34);
			rowDefinition35.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid62.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition35);
			rowDefinition36.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid62.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition36);
			rowDefinition37.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid62.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition37);
			rowDefinition38.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<RowDefinition>)grid62.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition38);
			columnDefinition70.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid62.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition70);
			columnDefinition71.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid62.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition71);
			frame19.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame19.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame19.SetValue(Grid.RowProperty, 0);
			frame19.SetValue(Grid.ColumnProperty, 0);
			columnDefinition72.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid38.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition72);
			columnDefinition73.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid38.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition73);
			boxView.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			grid38.Children.Add(boxView);
			label54.SetValue(Label.TextProperty, "1");
			label54.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label54.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty56 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter56 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider56 = new XamlServiceProvider();
			Type typeFromHandle111 = typeof(IProvideValueTarget);
			object[] array56 = new object[0 + 9];
			array56[0] = label54;
			array56[1] = grid38;
			array56[2] = frame19;
			array56[3] = grid62;
			array56[4] = stackLayout2;
			array56[5] = scrollView;
			array56[6] = stackLayout3;
			array56[7] = stackLayout4;
			array56[8] = graphPage;
			object service56;
			xamlServiceProvider56.Add(typeFromHandle111, service56 = new SimpleValueTargetProvider(array56, Label.FontSizeProperty, nameScope));
			xamlServiceProvider56.Add(typeof(IReferenceProvider), service56);
			Type typeFromHandle112 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver56 = new XmlNamespaceResolver();
			xmlNamespaceResolver56.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver56.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver56.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider56.Add(typeFromHandle112, new XamlTypeResolver(xmlNamespaceResolver56, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider56.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(523, 31)));
			label54.SetValue(fontSizeProperty56, ((IExtendedTypeConverter)fontSizeConverter56).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider56));
			label54.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label54.SetValue(Grid.RowProperty, 0);
			label54.SetValue(Grid.ColumnProperty, 0);
			grid38.Children.Add(label54);
			label55.SetValue(Label.TextProperty, "0.000V/0.000A");
			label55.SetValue(Label.TextColorProperty, Color.White);
			BindableProperty fontSizeProperty57 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter57 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider57 = new XamlServiceProvider();
			Type typeFromHandle113 = typeof(IProvideValueTarget);
			object[] array57 = new object[0 + 9];
			array57[0] = label55;
			array57[1] = grid38;
			array57[2] = frame19;
			array57[3] = grid62;
			array57[4] = stackLayout2;
			array57[5] = scrollView;
			array57[6] = stackLayout3;
			array57[7] = stackLayout4;
			array57[8] = graphPage;
			object service57;
			xamlServiceProvider57.Add(typeFromHandle113, service57 = new SimpleValueTargetProvider(array57, Label.FontSizeProperty, nameScope));
			xamlServiceProvider57.Add(typeof(IReferenceProvider), service57);
			Type typeFromHandle114 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver57 = new XmlNamespaceResolver();
			xmlNamespaceResolver57.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver57.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver57.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider57.Add(typeFromHandle114, new XamlTypeResolver(xmlNamespaceResolver57, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider57.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(526, 31)));
			label55.SetValue(fontSizeProperty57, ((IExtendedTypeConverter)fontSizeConverter57).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider57));
			label55.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label55.SetValue(Grid.RowProperty, 0);
			label55.SetValue(Grid.ColumnProperty, 1);
			grid38.Children.Add(label55);
			frame19.SetValue(ContentView.ContentProperty, grid38);
			grid62.Children.Add(frame19);
			frame20.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame20.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame20.SetValue(Grid.RowProperty, 0);
			frame20.SetValue(Grid.ColumnProperty, 1);
			columnDefinition74.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid39.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition74);
			columnDefinition75.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid39.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition75);
			boxView2.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView2.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView2.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView2.SetValue(Grid.RowProperty, 0);
			boxView2.SetValue(Grid.ColumnProperty, 0);
			grid39.Children.Add(boxView2);
			label56.SetValue(Label.TextProperty, "2");
			label56.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label56.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty58 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter58 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider58 = new XamlServiceProvider();
			Type typeFromHandle115 = typeof(IProvideValueTarget);
			object[] array58 = new object[0 + 9];
			array58[0] = label56;
			array58[1] = grid39;
			array58[2] = frame20;
			array58[3] = grid62;
			array58[4] = stackLayout2;
			array58[5] = scrollView;
			array58[6] = stackLayout3;
			array58[7] = stackLayout4;
			array58[8] = graphPage;
			object service58;
			xamlServiceProvider58.Add(typeFromHandle115, service58 = new SimpleValueTargetProvider(array58, Label.FontSizeProperty, nameScope));
			xamlServiceProvider58.Add(typeof(IReferenceProvider), service58);
			Type typeFromHandle116 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver58 = new XmlNamespaceResolver();
			xmlNamespaceResolver58.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver58.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver58.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider58.Add(typeFromHandle116, new XamlTypeResolver(xmlNamespaceResolver58, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider58.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(538, 29)));
			label56.SetValue(fontSizeProperty58, ((IExtendedTypeConverter)fontSizeConverter58).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider58));
			label56.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label56.SetValue(Grid.RowProperty, 0);
			label56.SetValue(Grid.ColumnProperty, 0);
			grid39.Children.Add(label56);
			label57.SetValue(Label.TextProperty, "0.000V/0.000A");
			label57.SetValue(Label.TextColorProperty, Color.White);
			BindableProperty fontSizeProperty59 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter59 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider59 = new XamlServiceProvider();
			Type typeFromHandle117 = typeof(IProvideValueTarget);
			object[] array59 = new object[0 + 9];
			array59[0] = label57;
			array59[1] = grid39;
			array59[2] = frame20;
			array59[3] = grid62;
			array59[4] = stackLayout2;
			array59[5] = scrollView;
			array59[6] = stackLayout3;
			array59[7] = stackLayout4;
			array59[8] = graphPage;
			object service59;
			xamlServiceProvider59.Add(typeFromHandle117, service59 = new SimpleValueTargetProvider(array59, Label.FontSizeProperty, nameScope));
			xamlServiceProvider59.Add(typeof(IReferenceProvider), service59);
			Type typeFromHandle118 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver59 = new XmlNamespaceResolver();
			xmlNamespaceResolver59.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver59.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver59.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider59.Add(typeFromHandle118, new XamlTypeResolver(xmlNamespaceResolver59, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider59.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(541, 29)));
			label57.SetValue(fontSizeProperty59, ((IExtendedTypeConverter)fontSizeConverter59).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider59));
			label57.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label57.SetValue(Grid.RowProperty, 0);
			label57.SetValue(Grid.ColumnProperty, 1);
			grid39.Children.Add(label57);
			frame20.SetValue(ContentView.ContentProperty, grid39);
			grid62.Children.Add(frame20);
			frame21.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame21.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame21.SetValue(Grid.RowProperty, 1);
			frame21.SetValue(Grid.ColumnProperty, 0);
			columnDefinition76.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid40.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition76);
			columnDefinition77.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid40.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition77);
			boxView3.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView3.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView3.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView3.SetValue(Grid.RowProperty, 0);
			boxView3.SetValue(Grid.ColumnProperty, 0);
			grid40.Children.Add(boxView3);
			label58.SetValue(Label.TextProperty, "3");
			label58.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label58.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty60 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter60 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider60 = new XamlServiceProvider();
			Type typeFromHandle119 = typeof(IProvideValueTarget);
			object[] array60 = new object[0 + 9];
			array60[0] = label58;
			array60[1] = grid40;
			array60[2] = frame21;
			array60[3] = grid62;
			array60[4] = stackLayout2;
			array60[5] = scrollView;
			array60[6] = stackLayout3;
			array60[7] = stackLayout4;
			array60[8] = graphPage;
			object service60;
			xamlServiceProvider60.Add(typeFromHandle119, service60 = new SimpleValueTargetProvider(array60, Label.FontSizeProperty, nameScope));
			xamlServiceProvider60.Add(typeof(IReferenceProvider), service60);
			Type typeFromHandle120 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver60 = new XmlNamespaceResolver();
			xmlNamespaceResolver60.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver60.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver60.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider60.Add(typeFromHandle120, new XamlTypeResolver(xmlNamespaceResolver60, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider60.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(553, 31)));
			label58.SetValue(fontSizeProperty60, ((IExtendedTypeConverter)fontSizeConverter60).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider60));
			label58.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label58.SetValue(Grid.RowProperty, 0);
			label58.SetValue(Grid.ColumnProperty, 0);
			grid40.Children.Add(label58);
			label59.SetValue(Label.TextProperty, "0.000V/0.000A");
			label59.SetValue(Label.TextColorProperty, Color.WhiteSmoke);
			BindableProperty fontSizeProperty61 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter61 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider61 = new XamlServiceProvider();
			Type typeFromHandle121 = typeof(IProvideValueTarget);
			object[] array61 = new object[0 + 9];
			array61[0] = label59;
			array61[1] = grid40;
			array61[2] = frame21;
			array61[3] = grid62;
			array61[4] = stackLayout2;
			array61[5] = scrollView;
			array61[6] = stackLayout3;
			array61[7] = stackLayout4;
			array61[8] = graphPage;
			object service61;
			xamlServiceProvider61.Add(typeFromHandle121, service61 = new SimpleValueTargetProvider(array61, Label.FontSizeProperty, nameScope));
			xamlServiceProvider61.Add(typeof(IReferenceProvider), service61);
			Type typeFromHandle122 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver61 = new XmlNamespaceResolver();
			xmlNamespaceResolver61.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver61.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver61.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider61.Add(typeFromHandle122, new XamlTypeResolver(xmlNamespaceResolver61, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider61.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(556, 36)));
			label59.SetValue(fontSizeProperty61, ((IExtendedTypeConverter)fontSizeConverter61).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider61));
			label59.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label59.SetValue(Grid.RowProperty, 0);
			label59.SetValue(Grid.ColumnProperty, 1);
			grid40.Children.Add(label59);
			frame21.SetValue(ContentView.ContentProperty, grid40);
			grid62.Children.Add(frame21);
			frame22.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame22.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame22.SetValue(Grid.RowProperty, 1);
			frame22.SetValue(Grid.ColumnProperty, 1);
			columnDefinition78.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid41.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition78);
			columnDefinition79.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid41.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition79);
			boxView4.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView4.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView4.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView4.SetValue(Grid.RowProperty, 0);
			boxView4.SetValue(Grid.ColumnProperty, 0);
			grid41.Children.Add(boxView4);
			label60.SetValue(Label.TextProperty, "4");
			label60.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label60.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty62 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter62 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider62 = new XamlServiceProvider();
			Type typeFromHandle123 = typeof(IProvideValueTarget);
			object[] array62 = new object[0 + 9];
			array62[0] = label60;
			array62[1] = grid41;
			array62[2] = frame22;
			array62[3] = grid62;
			array62[4] = stackLayout2;
			array62[5] = scrollView;
			array62[6] = stackLayout3;
			array62[7] = stackLayout4;
			array62[8] = graphPage;
			object service62;
			xamlServiceProvider62.Add(typeFromHandle123, service62 = new SimpleValueTargetProvider(array62, Label.FontSizeProperty, nameScope));
			xamlServiceProvider62.Add(typeof(IReferenceProvider), service62);
			Type typeFromHandle124 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver62 = new XmlNamespaceResolver();
			xmlNamespaceResolver62.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver62.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver62.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider62.Add(typeFromHandle124, new XamlTypeResolver(xmlNamespaceResolver62, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider62.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(568, 29)));
			label60.SetValue(fontSizeProperty62, ((IExtendedTypeConverter)fontSizeConverter62).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider62));
			label60.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label60.SetValue(Grid.RowProperty, 0);
			label60.SetValue(Grid.ColumnProperty, 0);
			grid41.Children.Add(label60);
			label61.SetValue(Label.TextProperty, "0.000V/0.000A");
			label61.SetValue(Label.TextColorProperty, Color.WhiteSmoke);
			BindableProperty fontSizeProperty63 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter63 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider63 = new XamlServiceProvider();
			Type typeFromHandle125 = typeof(IProvideValueTarget);
			object[] array63 = new object[0 + 9];
			array63[0] = label61;
			array63[1] = grid41;
			array63[2] = frame22;
			array63[3] = grid62;
			array63[4] = stackLayout2;
			array63[5] = scrollView;
			array63[6] = stackLayout3;
			array63[7] = stackLayout4;
			array63[8] = graphPage;
			object service63;
			xamlServiceProvider63.Add(typeFromHandle125, service63 = new SimpleValueTargetProvider(array63, Label.FontSizeProperty, nameScope));
			xamlServiceProvider63.Add(typeof(IReferenceProvider), service63);
			Type typeFromHandle126 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver63 = new XmlNamespaceResolver();
			xmlNamespaceResolver63.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver63.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver63.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider63.Add(typeFromHandle126, new XamlTypeResolver(xmlNamespaceResolver63, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider63.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(571, 34)));
			label61.SetValue(fontSizeProperty63, ((IExtendedTypeConverter)fontSizeConverter63).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider63));
			label61.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label61.SetValue(Grid.RowProperty, 0);
			label61.SetValue(Grid.ColumnProperty, 1);
			grid41.Children.Add(label61);
			frame22.SetValue(ContentView.ContentProperty, grid41);
			grid62.Children.Add(frame22);
			frame23.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame23.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame23.SetValue(Grid.RowProperty, 2);
			frame23.SetValue(Grid.ColumnProperty, 0);
			columnDefinition80.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid42.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition80);
			columnDefinition81.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid42.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition81);
			boxView5.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView5.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView5.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView5.SetValue(Grid.RowProperty, 0);
			boxView5.SetValue(Grid.ColumnProperty, 0);
			grid42.Children.Add(boxView5);
			label62.SetValue(Label.TextProperty, "5");
			label62.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label62.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty64 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter64 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider64 = new XamlServiceProvider();
			Type typeFromHandle127 = typeof(IProvideValueTarget);
			object[] array64 = new object[0 + 9];
			array64[0] = label62;
			array64[1] = grid42;
			array64[2] = frame23;
			array64[3] = grid62;
			array64[4] = stackLayout2;
			array64[5] = scrollView;
			array64[6] = stackLayout3;
			array64[7] = stackLayout4;
			array64[8] = graphPage;
			object service64;
			xamlServiceProvider64.Add(typeFromHandle127, service64 = new SimpleValueTargetProvider(array64, Label.FontSizeProperty, nameScope));
			xamlServiceProvider64.Add(typeof(IReferenceProvider), service64);
			Type typeFromHandle128 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver64 = new XmlNamespaceResolver();
			xmlNamespaceResolver64.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver64.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver64.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider64.Add(typeFromHandle128, new XamlTypeResolver(xmlNamespaceResolver64, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider64.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(583, 31)));
			label62.SetValue(fontSizeProperty64, ((IExtendedTypeConverter)fontSizeConverter64).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider64));
			label62.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label62.SetValue(Grid.RowProperty, 0);
			label62.SetValue(Grid.ColumnProperty, 0);
			grid42.Children.Add(label62);
			label63.SetValue(Label.TextProperty, "0.000V/0.000A");
			label63.SetValue(Label.TextColorProperty, Color.AntiqueWhite);
			BindableProperty fontSizeProperty65 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter65 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider65 = new XamlServiceProvider();
			Type typeFromHandle129 = typeof(IProvideValueTarget);
			object[] array65 = new object[0 + 9];
			array65[0] = label63;
			array65[1] = grid42;
			array65[2] = frame23;
			array65[3] = grid62;
			array65[4] = stackLayout2;
			array65[5] = scrollView;
			array65[6] = stackLayout3;
			array65[7] = stackLayout4;
			array65[8] = graphPage;
			object service65;
			xamlServiceProvider65.Add(typeFromHandle129, service65 = new SimpleValueTargetProvider(array65, Label.FontSizeProperty, nameScope));
			xamlServiceProvider65.Add(typeof(IReferenceProvider), service65);
			Type typeFromHandle130 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver65 = new XmlNamespaceResolver();
			xmlNamespaceResolver65.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver65.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver65.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider65.Add(typeFromHandle130, new XamlTypeResolver(xmlNamespaceResolver65, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider65.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(586, 38)));
			label63.SetValue(fontSizeProperty65, ((IExtendedTypeConverter)fontSizeConverter65).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider65));
			label63.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label63.SetValue(Grid.RowProperty, 0);
			label63.SetValue(Grid.ColumnProperty, 1);
			grid42.Children.Add(label63);
			frame23.SetValue(ContentView.ContentProperty, grid42);
			grid62.Children.Add(frame23);
			frame24.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame24.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame24.SetValue(Grid.RowProperty, 2);
			frame24.SetValue(Grid.ColumnProperty, 1);
			columnDefinition82.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid43.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition82);
			columnDefinition83.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid43.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition83);
			boxView6.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView6.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView6.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView6.SetValue(Grid.RowProperty, 0);
			boxView6.SetValue(Grid.ColumnProperty, 0);
			grid43.Children.Add(boxView6);
			label64.SetValue(Label.TextProperty, "6");
			label64.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label64.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty66 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter66 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider66 = new XamlServiceProvider();
			Type typeFromHandle131 = typeof(IProvideValueTarget);
			object[] array66 = new object[0 + 9];
			array66[0] = label64;
			array66[1] = grid43;
			array66[2] = frame24;
			array66[3] = grid62;
			array66[4] = stackLayout2;
			array66[5] = scrollView;
			array66[6] = stackLayout3;
			array66[7] = stackLayout4;
			array66[8] = graphPage;
			object service66;
			xamlServiceProvider66.Add(typeFromHandle131, service66 = new SimpleValueTargetProvider(array66, Label.FontSizeProperty, nameScope));
			xamlServiceProvider66.Add(typeof(IReferenceProvider), service66);
			Type typeFromHandle132 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver66 = new XmlNamespaceResolver();
			xmlNamespaceResolver66.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver66.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver66.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider66.Add(typeFromHandle132, new XamlTypeResolver(xmlNamespaceResolver66, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider66.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(598, 29)));
			label64.SetValue(fontSizeProperty66, ((IExtendedTypeConverter)fontSizeConverter66).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider66));
			label64.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label64.SetValue(Grid.RowProperty, 0);
			label64.SetValue(Grid.ColumnProperty, 0);
			grid43.Children.Add(label64);
			label65.SetValue(Label.TextProperty, "0.000V/0.000A");
			label65.SetValue(Label.TextColorProperty, Color.AntiqueWhite);
			BindableProperty fontSizeProperty67 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter67 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider67 = new XamlServiceProvider();
			Type typeFromHandle133 = typeof(IProvideValueTarget);
			object[] array67 = new object[0 + 9];
			array67[0] = label65;
			array67[1] = grid43;
			array67[2] = frame24;
			array67[3] = grid62;
			array67[4] = stackLayout2;
			array67[5] = scrollView;
			array67[6] = stackLayout3;
			array67[7] = stackLayout4;
			array67[8] = graphPage;
			object service67;
			xamlServiceProvider67.Add(typeFromHandle133, service67 = new SimpleValueTargetProvider(array67, Label.FontSizeProperty, nameScope));
			xamlServiceProvider67.Add(typeof(IReferenceProvider), service67);
			Type typeFromHandle134 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver67 = new XmlNamespaceResolver();
			xmlNamespaceResolver67.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver67.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver67.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider67.Add(typeFromHandle134, new XamlTypeResolver(xmlNamespaceResolver67, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider67.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(601, 36)));
			label65.SetValue(fontSizeProperty67, ((IExtendedTypeConverter)fontSizeConverter67).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider67));
			label65.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label65.SetValue(Grid.RowProperty, 0);
			label65.SetValue(Grid.ColumnProperty, 1);
			grid43.Children.Add(label65);
			frame24.SetValue(ContentView.ContentProperty, grid43);
			grid62.Children.Add(frame24);
			frame25.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame25.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame25.SetValue(Grid.RowProperty, 3);
			frame25.SetValue(Grid.ColumnProperty, 0);
			columnDefinition84.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid44.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition84);
			columnDefinition85.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid44.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition85);
			boxView7.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView7.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView7.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView7.SetValue(Grid.RowProperty, 0);
			boxView7.SetValue(Grid.ColumnProperty, 0);
			grid44.Children.Add(boxView7);
			label66.SetValue(Label.TextProperty, "7");
			label66.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label66.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty68 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter68 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider68 = new XamlServiceProvider();
			Type typeFromHandle135 = typeof(IProvideValueTarget);
			object[] array68 = new object[0 + 9];
			array68[0] = label66;
			array68[1] = grid44;
			array68[2] = frame25;
			array68[3] = grid62;
			array68[4] = stackLayout2;
			array68[5] = scrollView;
			array68[6] = stackLayout3;
			array68[7] = stackLayout4;
			array68[8] = graphPage;
			object service68;
			xamlServiceProvider68.Add(typeFromHandle135, service68 = new SimpleValueTargetProvider(array68, Label.FontSizeProperty, nameScope));
			xamlServiceProvider68.Add(typeof(IReferenceProvider), service68);
			Type typeFromHandle136 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver68 = new XmlNamespaceResolver();
			xmlNamespaceResolver68.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver68.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver68.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider68.Add(typeFromHandle136, new XamlTypeResolver(xmlNamespaceResolver68, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider68.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(613, 31)));
			label66.SetValue(fontSizeProperty68, ((IExtendedTypeConverter)fontSizeConverter68).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider68));
			label66.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label66.SetValue(Grid.RowProperty, 0);
			label66.SetValue(Grid.ColumnProperty, 0);
			grid44.Children.Add(label66);
			label67.SetValue(Label.TextProperty, "0.000V/0.000A");
			label67.SetValue(Label.TextColorProperty, Color.FloralWhite);
			BindableProperty fontSizeProperty69 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter69 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider69 = new XamlServiceProvider();
			Type typeFromHandle137 = typeof(IProvideValueTarget);
			object[] array69 = new object[0 + 9];
			array69[0] = label67;
			array69[1] = grid44;
			array69[2] = frame25;
			array69[3] = grid62;
			array69[4] = stackLayout2;
			array69[5] = scrollView;
			array69[6] = stackLayout3;
			array69[7] = stackLayout4;
			array69[8] = graphPage;
			object service69;
			xamlServiceProvider69.Add(typeFromHandle137, service69 = new SimpleValueTargetProvider(array69, Label.FontSizeProperty, nameScope));
			xamlServiceProvider69.Add(typeof(IReferenceProvider), service69);
			Type typeFromHandle138 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver69 = new XmlNamespaceResolver();
			xmlNamespaceResolver69.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver69.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver69.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider69.Add(typeFromHandle138, new XamlTypeResolver(xmlNamespaceResolver69, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider69.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(616, 37)));
			label67.SetValue(fontSizeProperty69, ((IExtendedTypeConverter)fontSizeConverter69).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider69));
			label67.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label67.SetValue(Grid.RowProperty, 0);
			label67.SetValue(Grid.ColumnProperty, 1);
			grid44.Children.Add(label67);
			frame25.SetValue(ContentView.ContentProperty, grid44);
			grid62.Children.Add(frame25);
			frame26.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame26.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame26.SetValue(Grid.RowProperty, 3);
			frame26.SetValue(Grid.ColumnProperty, 1);
			columnDefinition86.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid45.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition86);
			columnDefinition87.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid45.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition87);
			boxView8.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView8.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView8.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView8.SetValue(Grid.RowProperty, 0);
			boxView8.SetValue(Grid.ColumnProperty, 0);
			grid45.Children.Add(boxView8);
			label68.SetValue(Label.TextProperty, "8");
			label68.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label68.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty70 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter70 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider70 = new XamlServiceProvider();
			Type typeFromHandle139 = typeof(IProvideValueTarget);
			object[] array70 = new object[0 + 9];
			array70[0] = label68;
			array70[1] = grid45;
			array70[2] = frame26;
			array70[3] = grid62;
			array70[4] = stackLayout2;
			array70[5] = scrollView;
			array70[6] = stackLayout3;
			array70[7] = stackLayout4;
			array70[8] = graphPage;
			object service70;
			xamlServiceProvider70.Add(typeFromHandle139, service70 = new SimpleValueTargetProvider(array70, Label.FontSizeProperty, nameScope));
			xamlServiceProvider70.Add(typeof(IReferenceProvider), service70);
			Type typeFromHandle140 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver70 = new XmlNamespaceResolver();
			xmlNamespaceResolver70.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver70.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver70.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider70.Add(typeFromHandle140, new XamlTypeResolver(xmlNamespaceResolver70, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider70.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(628, 29)));
			label68.SetValue(fontSizeProperty70, ((IExtendedTypeConverter)fontSizeConverter70).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider70));
			label68.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label68.SetValue(Grid.RowProperty, 0);
			label68.SetValue(Grid.ColumnProperty, 0);
			grid45.Children.Add(label68);
			label69.SetValue(Label.TextProperty, "0.000V/0.000A");
			label69.SetValue(Label.TextColorProperty, Color.FloralWhite);
			BindableProperty fontSizeProperty71 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter71 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider71 = new XamlServiceProvider();
			Type typeFromHandle141 = typeof(IProvideValueTarget);
			object[] array71 = new object[0 + 9];
			array71[0] = label69;
			array71[1] = grid45;
			array71[2] = frame26;
			array71[3] = grid62;
			array71[4] = stackLayout2;
			array71[5] = scrollView;
			array71[6] = stackLayout3;
			array71[7] = stackLayout4;
			array71[8] = graphPage;
			object service71;
			xamlServiceProvider71.Add(typeFromHandle141, service71 = new SimpleValueTargetProvider(array71, Label.FontSizeProperty, nameScope));
			xamlServiceProvider71.Add(typeof(IReferenceProvider), service71);
			Type typeFromHandle142 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver71 = new XmlNamespaceResolver();
			xmlNamespaceResolver71.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver71.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver71.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider71.Add(typeFromHandle142, new XamlTypeResolver(xmlNamespaceResolver71, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider71.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(631, 35)));
			label69.SetValue(fontSizeProperty71, ((IExtendedTypeConverter)fontSizeConverter71).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider71));
			label69.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label69.SetValue(Grid.RowProperty, 0);
			label69.SetValue(Grid.ColumnProperty, 1);
			grid45.Children.Add(label69);
			frame26.SetValue(ContentView.ContentProperty, grid45);
			grid62.Children.Add(frame26);
			frame27.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame27.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame27.SetValue(Grid.RowProperty, 4);
			frame27.SetValue(Grid.ColumnProperty, 0);
			columnDefinition88.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid46.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition88);
			columnDefinition89.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid46.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition89);
			boxView9.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView9.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView9.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView9.SetValue(Grid.RowProperty, 0);
			boxView9.SetValue(Grid.ColumnProperty, 0);
			grid46.Children.Add(boxView9);
			label70.SetValue(Label.TextProperty, "9");
			label70.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label70.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty72 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter72 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider72 = new XamlServiceProvider();
			Type typeFromHandle143 = typeof(IProvideValueTarget);
			object[] array72 = new object[0 + 9];
			array72[0] = label70;
			array72[1] = grid46;
			array72[2] = frame27;
			array72[3] = grid62;
			array72[4] = stackLayout2;
			array72[5] = scrollView;
			array72[6] = stackLayout3;
			array72[7] = stackLayout4;
			array72[8] = graphPage;
			object service72;
			xamlServiceProvider72.Add(typeFromHandle143, service72 = new SimpleValueTargetProvider(array72, Label.FontSizeProperty, nameScope));
			xamlServiceProvider72.Add(typeof(IReferenceProvider), service72);
			Type typeFromHandle144 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver72 = new XmlNamespaceResolver();
			xmlNamespaceResolver72.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver72.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver72.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider72.Add(typeFromHandle144, new XamlTypeResolver(xmlNamespaceResolver72, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider72.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(643, 31)));
			label70.SetValue(fontSizeProperty72, ((IExtendedTypeConverter)fontSizeConverter72).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider72));
			label70.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label70.SetValue(Grid.RowProperty, 0);
			label70.SetValue(Grid.ColumnProperty, 0);
			grid46.Children.Add(label70);
			label71.SetValue(Label.TextProperty, "0.000V/0.000A");
			label71.SetValue(Label.TextColorProperty, Color.GhostWhite);
			BindableProperty fontSizeProperty73 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter73 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider73 = new XamlServiceProvider();
			Type typeFromHandle145 = typeof(IProvideValueTarget);
			object[] array73 = new object[0 + 9];
			array73[0] = label71;
			array73[1] = grid46;
			array73[2] = frame27;
			array73[3] = grid62;
			array73[4] = stackLayout2;
			array73[5] = scrollView;
			array73[6] = stackLayout3;
			array73[7] = stackLayout4;
			array73[8] = graphPage;
			object service73;
			xamlServiceProvider73.Add(typeFromHandle145, service73 = new SimpleValueTargetProvider(array73, Label.FontSizeProperty, nameScope));
			xamlServiceProvider73.Add(typeof(IReferenceProvider), service73);
			Type typeFromHandle146 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver73 = new XmlNamespaceResolver();
			xmlNamespaceResolver73.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver73.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver73.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider73.Add(typeFromHandle146, new XamlTypeResolver(xmlNamespaceResolver73, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider73.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(646, 36)));
			label71.SetValue(fontSizeProperty73, ((IExtendedTypeConverter)fontSizeConverter73).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider73));
			label71.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label71.SetValue(Grid.RowProperty, 0);
			label71.SetValue(Grid.ColumnProperty, 1);
			grid46.Children.Add(label71);
			frame27.SetValue(ContentView.ContentProperty, grid46);
			grid62.Children.Add(frame27);
			frame28.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame28.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame28.SetValue(Grid.RowProperty, 4);
			frame28.SetValue(Grid.ColumnProperty, 1);
			columnDefinition90.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid47.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition90);
			columnDefinition91.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid47.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition91);
			boxView10.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView10.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView10.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView10.SetValue(Grid.RowProperty, 0);
			boxView10.SetValue(Grid.ColumnProperty, 0);
			grid47.Children.Add(boxView10);
			label72.SetValue(Label.TextProperty, "10");
			label72.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label72.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty74 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter74 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider74 = new XamlServiceProvider();
			Type typeFromHandle147 = typeof(IProvideValueTarget);
			object[] array74 = new object[0 + 9];
			array74[0] = label72;
			array74[1] = grid47;
			array74[2] = frame28;
			array74[3] = grid62;
			array74[4] = stackLayout2;
			array74[5] = scrollView;
			array74[6] = stackLayout3;
			array74[7] = stackLayout4;
			array74[8] = graphPage;
			object service74;
			xamlServiceProvider74.Add(typeFromHandle147, service74 = new SimpleValueTargetProvider(array74, Label.FontSizeProperty, nameScope));
			xamlServiceProvider74.Add(typeof(IReferenceProvider), service74);
			Type typeFromHandle148 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver74 = new XmlNamespaceResolver();
			xmlNamespaceResolver74.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver74.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver74.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider74.Add(typeFromHandle148, new XamlTypeResolver(xmlNamespaceResolver74, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider74.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(658, 29)));
			label72.SetValue(fontSizeProperty74, ((IExtendedTypeConverter)fontSizeConverter74).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider74));
			label72.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label72.SetValue(Grid.RowProperty, 0);
			label72.SetValue(Grid.ColumnProperty, 0);
			grid47.Children.Add(label72);
			label73.SetValue(Label.TextProperty, "0.000V/0.000A");
			label73.SetValue(Label.TextColorProperty, Color.GhostWhite);
			BindableProperty fontSizeProperty75 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter75 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider75 = new XamlServiceProvider();
			Type typeFromHandle149 = typeof(IProvideValueTarget);
			object[] array75 = new object[0 + 9];
			array75[0] = label73;
			array75[1] = grid47;
			array75[2] = frame28;
			array75[3] = grid62;
			array75[4] = stackLayout2;
			array75[5] = scrollView;
			array75[6] = stackLayout3;
			array75[7] = stackLayout4;
			array75[8] = graphPage;
			object service75;
			xamlServiceProvider75.Add(typeFromHandle149, service75 = new SimpleValueTargetProvider(array75, Label.FontSizeProperty, nameScope));
			xamlServiceProvider75.Add(typeof(IReferenceProvider), service75);
			Type typeFromHandle150 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver75 = new XmlNamespaceResolver();
			xmlNamespaceResolver75.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver75.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver75.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider75.Add(typeFromHandle150, new XamlTypeResolver(xmlNamespaceResolver75, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider75.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(661, 34)));
			label73.SetValue(fontSizeProperty75, ((IExtendedTypeConverter)fontSizeConverter75).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider75));
			label73.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label73.SetValue(Grid.RowProperty, 0);
			label73.SetValue(Grid.ColumnProperty, 1);
			grid47.Children.Add(label73);
			frame28.SetValue(ContentView.ContentProperty, grid47);
			grid62.Children.Add(frame28);
			frame29.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame29.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame29.SetValue(Grid.RowProperty, 5);
			frame29.SetValue(Grid.ColumnProperty, 0);
			columnDefinition92.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid48.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition92);
			columnDefinition93.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid48.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition93);
			boxView11.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView11.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView11.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView11.SetValue(Grid.RowProperty, 0);
			boxView11.SetValue(Grid.ColumnProperty, 0);
			grid48.Children.Add(boxView11);
			label74.SetValue(Label.TextProperty, "11");
			label74.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label74.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty76 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter76 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider76 = new XamlServiceProvider();
			Type typeFromHandle151 = typeof(IProvideValueTarget);
			object[] array76 = new object[0 + 9];
			array76[0] = label74;
			array76[1] = grid48;
			array76[2] = frame29;
			array76[3] = grid62;
			array76[4] = stackLayout2;
			array76[5] = scrollView;
			array76[6] = stackLayout3;
			array76[7] = stackLayout4;
			array76[8] = graphPage;
			object service76;
			xamlServiceProvider76.Add(typeFromHandle151, service76 = new SimpleValueTargetProvider(array76, Label.FontSizeProperty, nameScope));
			xamlServiceProvider76.Add(typeof(IReferenceProvider), service76);
			Type typeFromHandle152 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver76 = new XmlNamespaceResolver();
			xmlNamespaceResolver76.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver76.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver76.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider76.Add(typeFromHandle152, new XamlTypeResolver(xmlNamespaceResolver76, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider76.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(673, 31)));
			label74.SetValue(fontSizeProperty76, ((IExtendedTypeConverter)fontSizeConverter76).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider76));
			label74.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label74.SetValue(Grid.RowProperty, 0);
			label74.SetValue(Grid.ColumnProperty, 0);
			grid48.Children.Add(label74);
			label75.SetValue(Label.TextProperty, "0.000V/0.000A");
			label75.SetValue(Label.TextColorProperty, Color.NavajoWhite);
			BindableProperty fontSizeProperty77 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter77 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider77 = new XamlServiceProvider();
			Type typeFromHandle153 = typeof(IProvideValueTarget);
			object[] array77 = new object[0 + 9];
			array77[0] = label75;
			array77[1] = grid48;
			array77[2] = frame29;
			array77[3] = grid62;
			array77[4] = stackLayout2;
			array77[5] = scrollView;
			array77[6] = stackLayout3;
			array77[7] = stackLayout4;
			array77[8] = graphPage;
			object service77;
			xamlServiceProvider77.Add(typeFromHandle153, service77 = new SimpleValueTargetProvider(array77, Label.FontSizeProperty, nameScope));
			xamlServiceProvider77.Add(typeof(IReferenceProvider), service77);
			Type typeFromHandle154 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver77 = new XmlNamespaceResolver();
			xmlNamespaceResolver77.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver77.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver77.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider77.Add(typeFromHandle154, new XamlTypeResolver(xmlNamespaceResolver77, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider77.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(676, 37)));
			label75.SetValue(fontSizeProperty77, ((IExtendedTypeConverter)fontSizeConverter77).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider77));
			label75.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label75.SetValue(Grid.RowProperty, 0);
			label75.SetValue(Grid.ColumnProperty, 1);
			grid48.Children.Add(label75);
			frame29.SetValue(ContentView.ContentProperty, grid48);
			grid62.Children.Add(frame29);
			frame30.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame30.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame30.SetValue(Grid.RowProperty, 5);
			frame30.SetValue(Grid.ColumnProperty, 1);
			columnDefinition94.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid49.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition94);
			columnDefinition95.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid49.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition95);
			boxView12.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView12.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView12.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView12.SetValue(Grid.RowProperty, 0);
			boxView12.SetValue(Grid.ColumnProperty, 0);
			grid49.Children.Add(boxView12);
			label76.SetValue(Label.TextProperty, "12");
			label76.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label76.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty78 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter78 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider78 = new XamlServiceProvider();
			Type typeFromHandle155 = typeof(IProvideValueTarget);
			object[] array78 = new object[0 + 9];
			array78[0] = label76;
			array78[1] = grid49;
			array78[2] = frame30;
			array78[3] = grid62;
			array78[4] = stackLayout2;
			array78[5] = scrollView;
			array78[6] = stackLayout3;
			array78[7] = stackLayout4;
			array78[8] = graphPage;
			object service78;
			xamlServiceProvider78.Add(typeFromHandle155, service78 = new SimpleValueTargetProvider(array78, Label.FontSizeProperty, nameScope));
			xamlServiceProvider78.Add(typeof(IReferenceProvider), service78);
			Type typeFromHandle156 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver78 = new XmlNamespaceResolver();
			xmlNamespaceResolver78.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver78.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver78.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider78.Add(typeFromHandle156, new XamlTypeResolver(xmlNamespaceResolver78, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider78.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(688, 29)));
			label76.SetValue(fontSizeProperty78, ((IExtendedTypeConverter)fontSizeConverter78).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider78));
			label76.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label76.SetValue(Grid.RowProperty, 0);
			label76.SetValue(Grid.ColumnProperty, 0);
			grid49.Children.Add(label76);
			label77.SetValue(Label.TextProperty, "0.000V/0.000A");
			label77.SetValue(Label.TextColorProperty, Color.NavajoWhite);
			BindableProperty fontSizeProperty79 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter79 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider79 = new XamlServiceProvider();
			Type typeFromHandle157 = typeof(IProvideValueTarget);
			object[] array79 = new object[0 + 9];
			array79[0] = label77;
			array79[1] = grid49;
			array79[2] = frame30;
			array79[3] = grid62;
			array79[4] = stackLayout2;
			array79[5] = scrollView;
			array79[6] = stackLayout3;
			array79[7] = stackLayout4;
			array79[8] = graphPage;
			object service79;
			xamlServiceProvider79.Add(typeFromHandle157, service79 = new SimpleValueTargetProvider(array79, Label.FontSizeProperty, nameScope));
			xamlServiceProvider79.Add(typeof(IReferenceProvider), service79);
			Type typeFromHandle158 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver79 = new XmlNamespaceResolver();
			xmlNamespaceResolver79.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver79.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver79.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider79.Add(typeFromHandle158, new XamlTypeResolver(xmlNamespaceResolver79, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider79.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(691, 35)));
			label77.SetValue(fontSizeProperty79, ((IExtendedTypeConverter)fontSizeConverter79).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider79));
			label77.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label77.SetValue(Grid.RowProperty, 0);
			label77.SetValue(Grid.ColumnProperty, 1);
			grid49.Children.Add(label77);
			frame30.SetValue(ContentView.ContentProperty, grid49);
			grid62.Children.Add(frame30);
			frame31.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame31.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame31.SetValue(Grid.RowProperty, 6);
			frame31.SetValue(Grid.ColumnProperty, 0);
			columnDefinition96.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid50.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition96);
			columnDefinition97.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid50.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition97);
			boxView13.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView13.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView13.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView13.SetValue(Grid.RowProperty, 0);
			boxView13.SetValue(Grid.ColumnProperty, 0);
			grid50.Children.Add(boxView13);
			label78.SetValue(Label.TextProperty, "13");
			label78.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label78.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty80 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter80 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider80 = new XamlServiceProvider();
			Type typeFromHandle159 = typeof(IProvideValueTarget);
			object[] array80 = new object[0 + 9];
			array80[0] = label78;
			array80[1] = grid50;
			array80[2] = frame31;
			array80[3] = grid62;
			array80[4] = stackLayout2;
			array80[5] = scrollView;
			array80[6] = stackLayout3;
			array80[7] = stackLayout4;
			array80[8] = graphPage;
			object service80;
			xamlServiceProvider80.Add(typeFromHandle159, service80 = new SimpleValueTargetProvider(array80, Label.FontSizeProperty, nameScope));
			xamlServiceProvider80.Add(typeof(IReferenceProvider), service80);
			Type typeFromHandle160 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver80 = new XmlNamespaceResolver();
			xmlNamespaceResolver80.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver80.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver80.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider80.Add(typeFromHandle160, new XamlTypeResolver(xmlNamespaceResolver80, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider80.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(703, 31)));
			label78.SetValue(fontSizeProperty80, ((IExtendedTypeConverter)fontSizeConverter80).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider80));
			label78.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label78.SetValue(Grid.RowProperty, 0);
			label78.SetValue(Grid.ColumnProperty, 0);
			grid50.Children.Add(label78);
			label79.SetValue(Label.TextProperty, "0.000V/0.000A");
			label79.SetValue(Label.TextColorProperty, Color.AliceBlue);
			BindableProperty fontSizeProperty81 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter81 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider81 = new XamlServiceProvider();
			Type typeFromHandle161 = typeof(IProvideValueTarget);
			object[] array81 = new object[0 + 9];
			array81[0] = label79;
			array81[1] = grid50;
			array81[2] = frame31;
			array81[3] = grid62;
			array81[4] = stackLayout2;
			array81[5] = scrollView;
			array81[6] = stackLayout3;
			array81[7] = stackLayout4;
			array81[8] = graphPage;
			object service81;
			xamlServiceProvider81.Add(typeFromHandle161, service81 = new SimpleValueTargetProvider(array81, Label.FontSizeProperty, nameScope));
			xamlServiceProvider81.Add(typeof(IReferenceProvider), service81);
			Type typeFromHandle162 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver81 = new XmlNamespaceResolver();
			xmlNamespaceResolver81.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver81.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver81.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider81.Add(typeFromHandle162, new XamlTypeResolver(xmlNamespaceResolver81, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider81.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(706, 35)));
			label79.SetValue(fontSizeProperty81, ((IExtendedTypeConverter)fontSizeConverter81).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider81));
			label79.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label79.SetValue(Grid.RowProperty, 0);
			label79.SetValue(Grid.ColumnProperty, 1);
			grid50.Children.Add(label79);
			frame31.SetValue(ContentView.ContentProperty, grid50);
			grid62.Children.Add(frame31);
			frame32.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame32.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame32.SetValue(Grid.RowProperty, 6);
			frame32.SetValue(Grid.ColumnProperty, 1);
			columnDefinition98.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid51.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition98);
			columnDefinition99.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid51.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition99);
			boxView14.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView14.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView14.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView14.SetValue(Grid.RowProperty, 0);
			boxView14.SetValue(Grid.ColumnProperty, 0);
			grid51.Children.Add(boxView14);
			label80.SetValue(Label.TextProperty, "14");
			label80.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label80.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty82 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter82 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider82 = new XamlServiceProvider();
			Type typeFromHandle163 = typeof(IProvideValueTarget);
			object[] array82 = new object[0 + 9];
			array82[0] = label80;
			array82[1] = grid51;
			array82[2] = frame32;
			array82[3] = grid62;
			array82[4] = stackLayout2;
			array82[5] = scrollView;
			array82[6] = stackLayout3;
			array82[7] = stackLayout4;
			array82[8] = graphPage;
			object service82;
			xamlServiceProvider82.Add(typeFromHandle163, service82 = new SimpleValueTargetProvider(array82, Label.FontSizeProperty, nameScope));
			xamlServiceProvider82.Add(typeof(IReferenceProvider), service82);
			Type typeFromHandle164 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver82 = new XmlNamespaceResolver();
			xmlNamespaceResolver82.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver82.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver82.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider82.Add(typeFromHandle164, new XamlTypeResolver(xmlNamespaceResolver82, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider82.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(718, 29)));
			label80.SetValue(fontSizeProperty82, ((IExtendedTypeConverter)fontSizeConverter82).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider82));
			label80.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label80.SetValue(Grid.RowProperty, 0);
			label80.SetValue(Grid.ColumnProperty, 0);
			grid51.Children.Add(label80);
			label81.SetValue(Label.TextProperty, "0.000V/0.000A");
			label81.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty83 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter83 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider83 = new XamlServiceProvider();
			Type typeFromHandle165 = typeof(IProvideValueTarget);
			object[] array83 = new object[0 + 9];
			array83[0] = label81;
			array83[1] = grid51;
			array83[2] = frame32;
			array83[3] = grid62;
			array83[4] = stackLayout2;
			array83[5] = scrollView;
			array83[6] = stackLayout3;
			array83[7] = stackLayout4;
			array83[8] = graphPage;
			object service83;
			xamlServiceProvider83.Add(typeFromHandle165, service83 = new SimpleValueTargetProvider(array83, Label.FontSizeProperty, nameScope));
			xamlServiceProvider83.Add(typeof(IReferenceProvider), service83);
			Type typeFromHandle166 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver83 = new XmlNamespaceResolver();
			xmlNamespaceResolver83.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver83.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver83.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider83.Add(typeFromHandle166, new XamlTypeResolver(xmlNamespaceResolver83, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider83.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(721, 29)));
			label81.SetValue(fontSizeProperty83, ((IExtendedTypeConverter)fontSizeConverter83).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider83));
			label81.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label81.SetValue(Grid.RowProperty, 0);
			label81.SetValue(Grid.ColumnProperty, 1);
			grid51.Children.Add(label81);
			frame32.SetValue(ContentView.ContentProperty, grid51);
			grid62.Children.Add(frame32);
			frame33.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame33.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame33.SetValue(Grid.RowProperty, 7);
			frame33.SetValue(Grid.ColumnProperty, 0);
			columnDefinition100.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid52.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition100);
			columnDefinition101.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid52.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition101);
			boxView15.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView15.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView15.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView15.SetValue(Grid.RowProperty, 0);
			boxView15.SetValue(Grid.ColumnProperty, 0);
			grid52.Children.Add(boxView15);
			label82.SetValue(Label.TextProperty, "15");
			label82.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label82.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty84 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter84 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider84 = new XamlServiceProvider();
			Type typeFromHandle167 = typeof(IProvideValueTarget);
			object[] array84 = new object[0 + 9];
			array84[0] = label82;
			array84[1] = grid52;
			array84[2] = frame33;
			array84[3] = grid62;
			array84[4] = stackLayout2;
			array84[5] = scrollView;
			array84[6] = stackLayout3;
			array84[7] = stackLayout4;
			array84[8] = graphPage;
			object service84;
			xamlServiceProvider84.Add(typeFromHandle167, service84 = new SimpleValueTargetProvider(array84, Label.FontSizeProperty, nameScope));
			xamlServiceProvider84.Add(typeof(IReferenceProvider), service84);
			Type typeFromHandle168 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver84 = new XmlNamespaceResolver();
			xmlNamespaceResolver84.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver84.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver84.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider84.Add(typeFromHandle168, new XamlTypeResolver(xmlNamespaceResolver84, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider84.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(733, 31)));
			label82.SetValue(fontSizeProperty84, ((IExtendedTypeConverter)fontSizeConverter84).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider84));
			label82.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label82.SetValue(Grid.RowProperty, 0);
			label82.SetValue(Grid.ColumnProperty, 0);
			grid52.Children.Add(label82);
			label83.SetValue(Label.TextProperty, "0.000V/0.000A");
			label83.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty85 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter85 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider85 = new XamlServiceProvider();
			Type typeFromHandle169 = typeof(IProvideValueTarget);
			object[] array85 = new object[0 + 9];
			array85[0] = label83;
			array85[1] = grid52;
			array85[2] = frame33;
			array85[3] = grid62;
			array85[4] = stackLayout2;
			array85[5] = scrollView;
			array85[6] = stackLayout3;
			array85[7] = stackLayout4;
			array85[8] = graphPage;
			object service85;
			xamlServiceProvider85.Add(typeFromHandle169, service85 = new SimpleValueTargetProvider(array85, Label.FontSizeProperty, nameScope));
			xamlServiceProvider85.Add(typeof(IReferenceProvider), service85);
			Type typeFromHandle170 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver85 = new XmlNamespaceResolver();
			xmlNamespaceResolver85.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver85.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver85.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider85.Add(typeFromHandle170, new XamlTypeResolver(xmlNamespaceResolver85, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider85.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(736, 31)));
			label83.SetValue(fontSizeProperty85, ((IExtendedTypeConverter)fontSizeConverter85).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider85));
			label83.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label83.SetValue(Grid.RowProperty, 0);
			label83.SetValue(Grid.ColumnProperty, 1);
			grid52.Children.Add(label83);
			frame33.SetValue(ContentView.ContentProperty, grid52);
			grid62.Children.Add(frame33);
			frame34.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame34.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame34.SetValue(Grid.RowProperty, 7);
			frame34.SetValue(Grid.ColumnProperty, 1);
			columnDefinition102.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid53.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition102);
			columnDefinition103.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid53.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition103);
			boxView16.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView16.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView16.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView16.SetValue(Grid.RowProperty, 0);
			boxView16.SetValue(Grid.ColumnProperty, 0);
			grid53.Children.Add(boxView16);
			label84.SetValue(Label.TextProperty, "16");
			label84.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label84.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty86 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter86 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider86 = new XamlServiceProvider();
			Type typeFromHandle171 = typeof(IProvideValueTarget);
			object[] array86 = new object[0 + 9];
			array86[0] = label84;
			array86[1] = grid53;
			array86[2] = frame34;
			array86[3] = grid62;
			array86[4] = stackLayout2;
			array86[5] = scrollView;
			array86[6] = stackLayout3;
			array86[7] = stackLayout4;
			array86[8] = graphPage;
			object service86;
			xamlServiceProvider86.Add(typeFromHandle171, service86 = new SimpleValueTargetProvider(array86, Label.FontSizeProperty, nameScope));
			xamlServiceProvider86.Add(typeof(IReferenceProvider), service86);
			Type typeFromHandle172 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver86 = new XmlNamespaceResolver();
			xmlNamespaceResolver86.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver86.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver86.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider86.Add(typeFromHandle172, new XamlTypeResolver(xmlNamespaceResolver86, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider86.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(748, 29)));
			label84.SetValue(fontSizeProperty86, ((IExtendedTypeConverter)fontSizeConverter86).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider86));
			label84.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label84.SetValue(Grid.RowProperty, 0);
			label84.SetValue(Grid.ColumnProperty, 0);
			grid53.Children.Add(label84);
			label85.SetValue(Label.TextProperty, "0.000V/0.000A");
			label85.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty87 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter87 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider87 = new XamlServiceProvider();
			Type typeFromHandle173 = typeof(IProvideValueTarget);
			object[] array87 = new object[0 + 9];
			array87[0] = label85;
			array87[1] = grid53;
			array87[2] = frame34;
			array87[3] = grid62;
			array87[4] = stackLayout2;
			array87[5] = scrollView;
			array87[6] = stackLayout3;
			array87[7] = stackLayout4;
			array87[8] = graphPage;
			object service87;
			xamlServiceProvider87.Add(typeFromHandle173, service87 = new SimpleValueTargetProvider(array87, Label.FontSizeProperty, nameScope));
			xamlServiceProvider87.Add(typeof(IReferenceProvider), service87);
			Type typeFromHandle174 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver87 = new XmlNamespaceResolver();
			xmlNamespaceResolver87.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver87.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver87.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider87.Add(typeFromHandle174, new XamlTypeResolver(xmlNamespaceResolver87, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider87.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(751, 29)));
			label85.SetValue(fontSizeProperty87, ((IExtendedTypeConverter)fontSizeConverter87).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider87));
			label85.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label85.SetValue(Grid.RowProperty, 0);
			label85.SetValue(Grid.ColumnProperty, 1);
			grid53.Children.Add(label85);
			frame34.SetValue(ContentView.ContentProperty, grid53);
			grid62.Children.Add(frame34);
			frame35.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame35.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame35.SetValue(Grid.RowProperty, 8);
			frame35.SetValue(Grid.ColumnProperty, 0);
			columnDefinition104.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid54.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition104);
			columnDefinition105.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid54.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition105);
			boxView17.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView17.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView17.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView17.SetValue(Grid.RowProperty, 0);
			boxView17.SetValue(Grid.ColumnProperty, 0);
			grid54.Children.Add(boxView17);
			label86.SetValue(Label.TextProperty, "17");
			label86.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label86.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty88 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter88 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider88 = new XamlServiceProvider();
			Type typeFromHandle175 = typeof(IProvideValueTarget);
			object[] array88 = new object[0 + 9];
			array88[0] = label86;
			array88[1] = grid54;
			array88[2] = frame35;
			array88[3] = grid62;
			array88[4] = stackLayout2;
			array88[5] = scrollView;
			array88[6] = stackLayout3;
			array88[7] = stackLayout4;
			array88[8] = graphPage;
			object service88;
			xamlServiceProvider88.Add(typeFromHandle175, service88 = new SimpleValueTargetProvider(array88, Label.FontSizeProperty, nameScope));
			xamlServiceProvider88.Add(typeof(IReferenceProvider), service88);
			Type typeFromHandle176 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver88 = new XmlNamespaceResolver();
			xmlNamespaceResolver88.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver88.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver88.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider88.Add(typeFromHandle176, new XamlTypeResolver(xmlNamespaceResolver88, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider88.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(763, 31)));
			label86.SetValue(fontSizeProperty88, ((IExtendedTypeConverter)fontSizeConverter88).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider88));
			label86.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label86.SetValue(Grid.RowProperty, 0);
			label86.SetValue(Grid.ColumnProperty, 0);
			grid54.Children.Add(label86);
			label87.SetValue(Label.TextProperty, "0.000V/0.000A");
			label87.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty89 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter89 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider89 = new XamlServiceProvider();
			Type typeFromHandle177 = typeof(IProvideValueTarget);
			object[] array89 = new object[0 + 9];
			array89[0] = label87;
			array89[1] = grid54;
			array89[2] = frame35;
			array89[3] = grid62;
			array89[4] = stackLayout2;
			array89[5] = scrollView;
			array89[6] = stackLayout3;
			array89[7] = stackLayout4;
			array89[8] = graphPage;
			object service89;
			xamlServiceProvider89.Add(typeFromHandle177, service89 = new SimpleValueTargetProvider(array89, Label.FontSizeProperty, nameScope));
			xamlServiceProvider89.Add(typeof(IReferenceProvider), service89);
			Type typeFromHandle178 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver89 = new XmlNamespaceResolver();
			xmlNamespaceResolver89.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver89.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver89.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider89.Add(typeFromHandle178, new XamlTypeResolver(xmlNamespaceResolver89, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider89.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(766, 31)));
			label87.SetValue(fontSizeProperty89, ((IExtendedTypeConverter)fontSizeConverter89).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider89));
			label87.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label87.SetValue(Grid.RowProperty, 0);
			label87.SetValue(Grid.ColumnProperty, 1);
			grid54.Children.Add(label87);
			frame35.SetValue(ContentView.ContentProperty, grid54);
			grid62.Children.Add(frame35);
			frame36.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame36.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame36.SetValue(Grid.RowProperty, 8);
			frame36.SetValue(Grid.ColumnProperty, 1);
			columnDefinition106.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid55.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition106);
			columnDefinition107.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid55.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition107);
			boxView18.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView18.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView18.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView18.SetValue(Grid.RowProperty, 0);
			boxView18.SetValue(Grid.ColumnProperty, 0);
			grid55.Children.Add(boxView18);
			label88.SetValue(Label.TextProperty, "18");
			label88.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label88.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty90 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter90 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider90 = new XamlServiceProvider();
			Type typeFromHandle179 = typeof(IProvideValueTarget);
			object[] array90 = new object[0 + 9];
			array90[0] = label88;
			array90[1] = grid55;
			array90[2] = frame36;
			array90[3] = grid62;
			array90[4] = stackLayout2;
			array90[5] = scrollView;
			array90[6] = stackLayout3;
			array90[7] = stackLayout4;
			array90[8] = graphPage;
			object service90;
			xamlServiceProvider90.Add(typeFromHandle179, service90 = new SimpleValueTargetProvider(array90, Label.FontSizeProperty, nameScope));
			xamlServiceProvider90.Add(typeof(IReferenceProvider), service90);
			Type typeFromHandle180 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver90 = new XmlNamespaceResolver();
			xmlNamespaceResolver90.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver90.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver90.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider90.Add(typeFromHandle180, new XamlTypeResolver(xmlNamespaceResolver90, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider90.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(778, 29)));
			label88.SetValue(fontSizeProperty90, ((IExtendedTypeConverter)fontSizeConverter90).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider90));
			label88.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label88.SetValue(Grid.RowProperty, 0);
			label88.SetValue(Grid.ColumnProperty, 0);
			grid55.Children.Add(label88);
			label89.SetValue(Label.TextProperty, "0.000V/0.000A");
			label89.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty91 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter91 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider91 = new XamlServiceProvider();
			Type typeFromHandle181 = typeof(IProvideValueTarget);
			object[] array91 = new object[0 + 9];
			array91[0] = label89;
			array91[1] = grid55;
			array91[2] = frame36;
			array91[3] = grid62;
			array91[4] = stackLayout2;
			array91[5] = scrollView;
			array91[6] = stackLayout3;
			array91[7] = stackLayout4;
			array91[8] = graphPage;
			object service91;
			xamlServiceProvider91.Add(typeFromHandle181, service91 = new SimpleValueTargetProvider(array91, Label.FontSizeProperty, nameScope));
			xamlServiceProvider91.Add(typeof(IReferenceProvider), service91);
			Type typeFromHandle182 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver91 = new XmlNamespaceResolver();
			xmlNamespaceResolver91.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver91.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver91.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider91.Add(typeFromHandle182, new XamlTypeResolver(xmlNamespaceResolver91, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider91.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(781, 29)));
			label89.SetValue(fontSizeProperty91, ((IExtendedTypeConverter)fontSizeConverter91).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider91));
			label89.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label89.SetValue(Grid.RowProperty, 0);
			label89.SetValue(Grid.ColumnProperty, 1);
			grid55.Children.Add(label89);
			frame36.SetValue(ContentView.ContentProperty, grid55);
			grid62.Children.Add(frame36);
			frame37.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame37.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame37.SetValue(Grid.RowProperty, 9);
			frame37.SetValue(Grid.ColumnProperty, 0);
			columnDefinition108.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid56.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition108);
			columnDefinition109.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid56.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition109);
			boxView19.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView19.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView19.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView19.SetValue(Grid.RowProperty, 0);
			boxView19.SetValue(Grid.ColumnProperty, 0);
			grid56.Children.Add(boxView19);
			label90.SetValue(Label.TextProperty, "19");
			label90.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label90.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty92 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter92 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider92 = new XamlServiceProvider();
			Type typeFromHandle183 = typeof(IProvideValueTarget);
			object[] array92 = new object[0 + 9];
			array92[0] = label90;
			array92[1] = grid56;
			array92[2] = frame37;
			array92[3] = grid62;
			array92[4] = stackLayout2;
			array92[5] = scrollView;
			array92[6] = stackLayout3;
			array92[7] = stackLayout4;
			array92[8] = graphPage;
			object service92;
			xamlServiceProvider92.Add(typeFromHandle183, service92 = new SimpleValueTargetProvider(array92, Label.FontSizeProperty, nameScope));
			xamlServiceProvider92.Add(typeof(IReferenceProvider), service92);
			Type typeFromHandle184 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver92 = new XmlNamespaceResolver();
			xmlNamespaceResolver92.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver92.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver92.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider92.Add(typeFromHandle184, new XamlTypeResolver(xmlNamespaceResolver92, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider92.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(793, 31)));
			label90.SetValue(fontSizeProperty92, ((IExtendedTypeConverter)fontSizeConverter92).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider92));
			label90.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label90.SetValue(Grid.RowProperty, 0);
			label90.SetValue(Grid.ColumnProperty, 0);
			grid56.Children.Add(label90);
			label91.SetValue(Label.TextProperty, "0.000V/0.000A");
			label91.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty93 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter93 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider93 = new XamlServiceProvider();
			Type typeFromHandle185 = typeof(IProvideValueTarget);
			object[] array93 = new object[0 + 9];
			array93[0] = label91;
			array93[1] = grid56;
			array93[2] = frame37;
			array93[3] = grid62;
			array93[4] = stackLayout2;
			array93[5] = scrollView;
			array93[6] = stackLayout3;
			array93[7] = stackLayout4;
			array93[8] = graphPage;
			object service93;
			xamlServiceProvider93.Add(typeFromHandle185, service93 = new SimpleValueTargetProvider(array93, Label.FontSizeProperty, nameScope));
			xamlServiceProvider93.Add(typeof(IReferenceProvider), service93);
			Type typeFromHandle186 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver93 = new XmlNamespaceResolver();
			xmlNamespaceResolver93.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver93.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver93.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider93.Add(typeFromHandle186, new XamlTypeResolver(xmlNamespaceResolver93, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider93.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(796, 31)));
			label91.SetValue(fontSizeProperty93, ((IExtendedTypeConverter)fontSizeConverter93).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider93));
			label91.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label91.SetValue(Grid.RowProperty, 0);
			label91.SetValue(Grid.ColumnProperty, 1);
			grid56.Children.Add(label91);
			frame37.SetValue(ContentView.ContentProperty, grid56);
			grid62.Children.Add(frame37);
			frame38.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame38.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame38.SetValue(Grid.RowProperty, 9);
			frame38.SetValue(Grid.ColumnProperty, 1);
			columnDefinition110.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid57.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition110);
			columnDefinition111.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid57.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition111);
			boxView20.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView20.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView20.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView20.SetValue(Grid.RowProperty, 0);
			boxView20.SetValue(Grid.ColumnProperty, 0);
			grid57.Children.Add(boxView20);
			label92.SetValue(Label.TextProperty, "20");
			label92.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label92.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty94 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter94 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider94 = new XamlServiceProvider();
			Type typeFromHandle187 = typeof(IProvideValueTarget);
			object[] array94 = new object[0 + 9];
			array94[0] = label92;
			array94[1] = grid57;
			array94[2] = frame38;
			array94[3] = grid62;
			array94[4] = stackLayout2;
			array94[5] = scrollView;
			array94[6] = stackLayout3;
			array94[7] = stackLayout4;
			array94[8] = graphPage;
			object service94;
			xamlServiceProvider94.Add(typeFromHandle187, service94 = new SimpleValueTargetProvider(array94, Label.FontSizeProperty, nameScope));
			xamlServiceProvider94.Add(typeof(IReferenceProvider), service94);
			Type typeFromHandle188 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver94 = new XmlNamespaceResolver();
			xmlNamespaceResolver94.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver94.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver94.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider94.Add(typeFromHandle188, new XamlTypeResolver(xmlNamespaceResolver94, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider94.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(808, 29)));
			label92.SetValue(fontSizeProperty94, ((IExtendedTypeConverter)fontSizeConverter94).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider94));
			label92.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label92.SetValue(Grid.RowProperty, 0);
			label92.SetValue(Grid.ColumnProperty, 0);
			grid57.Children.Add(label92);
			label93.SetValue(Label.TextProperty, "0.000V/0.000A");
			label93.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty95 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter95 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider95 = new XamlServiceProvider();
			Type typeFromHandle189 = typeof(IProvideValueTarget);
			object[] array95 = new object[0 + 9];
			array95[0] = label93;
			array95[1] = grid57;
			array95[2] = frame38;
			array95[3] = grid62;
			array95[4] = stackLayout2;
			array95[5] = scrollView;
			array95[6] = stackLayout3;
			array95[7] = stackLayout4;
			array95[8] = graphPage;
			object service95;
			xamlServiceProvider95.Add(typeFromHandle189, service95 = new SimpleValueTargetProvider(array95, Label.FontSizeProperty, nameScope));
			xamlServiceProvider95.Add(typeof(IReferenceProvider), service95);
			Type typeFromHandle190 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver95 = new XmlNamespaceResolver();
			xmlNamespaceResolver95.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver95.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver95.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider95.Add(typeFromHandle190, new XamlTypeResolver(xmlNamespaceResolver95, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider95.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(811, 29)));
			label93.SetValue(fontSizeProperty95, ((IExtendedTypeConverter)fontSizeConverter95).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider95));
			label93.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label93.SetValue(Grid.RowProperty, 0);
			label93.SetValue(Grid.ColumnProperty, 1);
			grid57.Children.Add(label93);
			frame38.SetValue(ContentView.ContentProperty, grid57);
			grid62.Children.Add(frame38);
			frame39.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame39.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame39.SetValue(Grid.RowProperty, 10);
			frame39.SetValue(Grid.ColumnProperty, 0);
			columnDefinition112.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid58.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition112);
			columnDefinition113.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid58.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition113);
			boxView21.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView21.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView21.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView21.SetValue(Grid.RowProperty, 0);
			boxView21.SetValue(Grid.ColumnProperty, 0);
			grid58.Children.Add(boxView21);
			label94.SetValue(Label.TextProperty, "21");
			label94.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label94.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty96 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter96 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider96 = new XamlServiceProvider();
			Type typeFromHandle191 = typeof(IProvideValueTarget);
			object[] array96 = new object[0 + 9];
			array96[0] = label94;
			array96[1] = grid58;
			array96[2] = frame39;
			array96[3] = grid62;
			array96[4] = stackLayout2;
			array96[5] = scrollView;
			array96[6] = stackLayout3;
			array96[7] = stackLayout4;
			array96[8] = graphPage;
			object service96;
			xamlServiceProvider96.Add(typeFromHandle191, service96 = new SimpleValueTargetProvider(array96, Label.FontSizeProperty, nameScope));
			xamlServiceProvider96.Add(typeof(IReferenceProvider), service96);
			Type typeFromHandle192 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver96 = new XmlNamespaceResolver();
			xmlNamespaceResolver96.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver96.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver96.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider96.Add(typeFromHandle192, new XamlTypeResolver(xmlNamespaceResolver96, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider96.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(823, 31)));
			label94.SetValue(fontSizeProperty96, ((IExtendedTypeConverter)fontSizeConverter96).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider96));
			label94.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label94.SetValue(Grid.RowProperty, 0);
			label94.SetValue(Grid.ColumnProperty, 0);
			grid58.Children.Add(label94);
			label95.SetValue(Label.TextProperty, "0.000V/0.000A");
			label95.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty97 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter97 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider97 = new XamlServiceProvider();
			Type typeFromHandle193 = typeof(IProvideValueTarget);
			object[] array97 = new object[0 + 9];
			array97[0] = label95;
			array97[1] = grid58;
			array97[2] = frame39;
			array97[3] = grid62;
			array97[4] = stackLayout2;
			array97[5] = scrollView;
			array97[6] = stackLayout3;
			array97[7] = stackLayout4;
			array97[8] = graphPage;
			object service97;
			xamlServiceProvider97.Add(typeFromHandle193, service97 = new SimpleValueTargetProvider(array97, Label.FontSizeProperty, nameScope));
			xamlServiceProvider97.Add(typeof(IReferenceProvider), service97);
			Type typeFromHandle194 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver97 = new XmlNamespaceResolver();
			xmlNamespaceResolver97.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver97.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver97.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider97.Add(typeFromHandle194, new XamlTypeResolver(xmlNamespaceResolver97, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider97.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(826, 31)));
			label95.SetValue(fontSizeProperty97, ((IExtendedTypeConverter)fontSizeConverter97).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider97));
			label95.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label95.SetValue(Grid.RowProperty, 0);
			label95.SetValue(Grid.ColumnProperty, 1);
			grid58.Children.Add(label95);
			frame39.SetValue(ContentView.ContentProperty, grid58);
			grid62.Children.Add(frame39);
			frame40.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame40.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame40.SetValue(Grid.RowProperty, 10);
			frame40.SetValue(Grid.ColumnProperty, 1);
			columnDefinition114.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid59.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition114);
			columnDefinition115.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid59.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition115);
			boxView22.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView22.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView22.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView22.SetValue(Grid.RowProperty, 0);
			boxView22.SetValue(Grid.ColumnProperty, 0);
			grid59.Children.Add(boxView22);
			label96.SetValue(Label.TextProperty, "22");
			label96.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label96.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty98 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter98 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider98 = new XamlServiceProvider();
			Type typeFromHandle195 = typeof(IProvideValueTarget);
			object[] array98 = new object[0 + 9];
			array98[0] = label96;
			array98[1] = grid59;
			array98[2] = frame40;
			array98[3] = grid62;
			array98[4] = stackLayout2;
			array98[5] = scrollView;
			array98[6] = stackLayout3;
			array98[7] = stackLayout4;
			array98[8] = graphPage;
			object service98;
			xamlServiceProvider98.Add(typeFromHandle195, service98 = new SimpleValueTargetProvider(array98, Label.FontSizeProperty, nameScope));
			xamlServiceProvider98.Add(typeof(IReferenceProvider), service98);
			Type typeFromHandle196 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver98 = new XmlNamespaceResolver();
			xmlNamespaceResolver98.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver98.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver98.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider98.Add(typeFromHandle196, new XamlTypeResolver(xmlNamespaceResolver98, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider98.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(838, 29)));
			label96.SetValue(fontSizeProperty98, ((IExtendedTypeConverter)fontSizeConverter98).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider98));
			label96.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label96.SetValue(Grid.RowProperty, 0);
			label96.SetValue(Grid.ColumnProperty, 0);
			grid59.Children.Add(label96);
			label97.SetValue(Label.TextProperty, "0.000V/0.000A");
			label97.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty99 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter99 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider99 = new XamlServiceProvider();
			Type typeFromHandle197 = typeof(IProvideValueTarget);
			object[] array99 = new object[0 + 9];
			array99[0] = label97;
			array99[1] = grid59;
			array99[2] = frame40;
			array99[3] = grid62;
			array99[4] = stackLayout2;
			array99[5] = scrollView;
			array99[6] = stackLayout3;
			array99[7] = stackLayout4;
			array99[8] = graphPage;
			object service99;
			xamlServiceProvider99.Add(typeFromHandle197, service99 = new SimpleValueTargetProvider(array99, Label.FontSizeProperty, nameScope));
			xamlServiceProvider99.Add(typeof(IReferenceProvider), service99);
			Type typeFromHandle198 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver99 = new XmlNamespaceResolver();
			xmlNamespaceResolver99.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver99.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver99.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider99.Add(typeFromHandle198, new XamlTypeResolver(xmlNamespaceResolver99, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider99.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(841, 29)));
			label97.SetValue(fontSizeProperty99, ((IExtendedTypeConverter)fontSizeConverter99).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider99));
			label97.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label97.SetValue(Grid.RowProperty, 0);
			label97.SetValue(Grid.ColumnProperty, 1);
			grid59.Children.Add(label97);
			frame40.SetValue(ContentView.ContentProperty, grid59);
			grid62.Children.Add(frame40);
			frame41.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame41.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame41.SetValue(Grid.RowProperty, 11);
			frame41.SetValue(Grid.ColumnProperty, 0);
			columnDefinition116.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid60.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition116);
			columnDefinition117.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid60.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition117);
			boxView23.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView23.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView23.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView23.SetValue(Grid.RowProperty, 0);
			boxView23.SetValue(Grid.ColumnProperty, 0);
			grid60.Children.Add(boxView23);
			label98.SetValue(Label.TextProperty, "23");
			label98.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label98.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty100 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter100 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider100 = new XamlServiceProvider();
			Type typeFromHandle199 = typeof(IProvideValueTarget);
			object[] array100 = new object[0 + 9];
			array100[0] = label98;
			array100[1] = grid60;
			array100[2] = frame41;
			array100[3] = grid62;
			array100[4] = stackLayout2;
			array100[5] = scrollView;
			array100[6] = stackLayout3;
			array100[7] = stackLayout4;
			array100[8] = graphPage;
			object service100;
			xamlServiceProvider100.Add(typeFromHandle199, service100 = new SimpleValueTargetProvider(array100, Label.FontSizeProperty, nameScope));
			xamlServiceProvider100.Add(typeof(IReferenceProvider), service100);
			Type typeFromHandle200 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver100 = new XmlNamespaceResolver();
			xmlNamespaceResolver100.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver100.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver100.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider100.Add(typeFromHandle200, new XamlTypeResolver(xmlNamespaceResolver100, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider100.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(853, 31)));
			label98.SetValue(fontSizeProperty100, ((IExtendedTypeConverter)fontSizeConverter100).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider100));
			label98.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label98.SetValue(Grid.RowProperty, 0);
			label98.SetValue(Grid.ColumnProperty, 0);
			grid60.Children.Add(label98);
			label99.SetValue(Label.TextProperty, "0.000V/0.000A");
			label99.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty101 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter101 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider101 = new XamlServiceProvider();
			Type typeFromHandle201 = typeof(IProvideValueTarget);
			object[] array101 = new object[0 + 9];
			array101[0] = label99;
			array101[1] = grid60;
			array101[2] = frame41;
			array101[3] = grid62;
			array101[4] = stackLayout2;
			array101[5] = scrollView;
			array101[6] = stackLayout3;
			array101[7] = stackLayout4;
			array101[8] = graphPage;
			object service101;
			xamlServiceProvider101.Add(typeFromHandle201, service101 = new SimpleValueTargetProvider(array101, Label.FontSizeProperty, nameScope));
			xamlServiceProvider101.Add(typeof(IReferenceProvider), service101);
			Type typeFromHandle202 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver101 = new XmlNamespaceResolver();
			xmlNamespaceResolver101.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver101.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver101.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider101.Add(typeFromHandle202, new XamlTypeResolver(xmlNamespaceResolver101, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider101.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(856, 31)));
			label99.SetValue(fontSizeProperty101, ((IExtendedTypeConverter)fontSizeConverter101).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider101));
			label99.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label99.SetValue(Grid.RowProperty, 0);
			label99.SetValue(Grid.ColumnProperty, 1);
			grid60.Children.Add(label99);
			frame41.SetValue(ContentView.ContentProperty, grid60);
			grid62.Children.Add(frame41);
			frame42.SetValue(Frame.BorderColorProperty, Color.Gray);
			frame42.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
			frame42.SetValue(Grid.RowProperty, 11);
			frame42.SetValue(Grid.ColumnProperty, 1);
			columnDefinition118.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("1*"));
			((DefinitionCollection<ColumnDefinition>)grid61.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition118);
			columnDefinition119.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("3*"));
			((DefinitionCollection<ColumnDefinition>)grid61.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition119);
			boxView24.SetValue(BoxView.ColorProperty, Color.LightGreen);
			boxView24.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 4.0);
			boxView24.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 10.0);
			boxView24.SetValue(Grid.RowProperty, 0);
			boxView24.SetValue(Grid.ColumnProperty, 0);
			grid61.Children.Add(boxView24);
			label100.SetValue(Label.TextProperty, "24");
			label100.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label100.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty102 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter102 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider102 = new XamlServiceProvider();
			Type typeFromHandle203 = typeof(IProvideValueTarget);
			object[] array102 = new object[0 + 9];
			array102[0] = label100;
			array102[1] = grid61;
			array102[2] = frame42;
			array102[3] = grid62;
			array102[4] = stackLayout2;
			array102[5] = scrollView;
			array102[6] = stackLayout3;
			array102[7] = stackLayout4;
			array102[8] = graphPage;
			object service102;
			xamlServiceProvider102.Add(typeFromHandle203, service102 = new SimpleValueTargetProvider(array102, Label.FontSizeProperty, nameScope));
			xamlServiceProvider102.Add(typeof(IReferenceProvider), service102);
			Type typeFromHandle204 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver102 = new XmlNamespaceResolver();
			xmlNamespaceResolver102.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver102.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver102.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider102.Add(typeFromHandle204, new XamlTypeResolver(xmlNamespaceResolver102, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider102.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(868, 29)));
			label100.SetValue(fontSizeProperty102, ((IExtendedTypeConverter)fontSizeConverter102).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider102));
			label100.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label100.SetValue(Grid.RowProperty, 0);
			label100.SetValue(Grid.ColumnProperty, 0);
			grid61.Children.Add(label100);
			label101.SetValue(Label.TextProperty, "0.000V/0.000A");
			label101.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty103 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter103 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider103 = new XamlServiceProvider();
			Type typeFromHandle205 = typeof(IProvideValueTarget);
			object[] array103 = new object[0 + 9];
			array103[0] = label101;
			array103[1] = grid61;
			array103[2] = frame42;
			array103[3] = grid62;
			array103[4] = stackLayout2;
			array103[5] = scrollView;
			array103[6] = stackLayout3;
			array103[7] = stackLayout4;
			array103[8] = graphPage;
			object service103;
			xamlServiceProvider103.Add(typeFromHandle205, service103 = new SimpleValueTargetProvider(array103, Label.FontSizeProperty, nameScope));
			xamlServiceProvider103.Add(typeof(IReferenceProvider), service103);
			Type typeFromHandle206 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver103 = new XmlNamespaceResolver();
			xmlNamespaceResolver103.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver103.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver103.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider103.Add(typeFromHandle206, new XamlTypeResolver(xmlNamespaceResolver103, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider103.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(871, 29)));
			label101.SetValue(fontSizeProperty103, ((IExtendedTypeConverter)fontSizeConverter103).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider103));
			label101.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label101.SetValue(Grid.RowProperty, 0);
			label101.SetValue(Grid.ColumnProperty, 1);
			grid61.Children.Add(label101);
			frame42.SetValue(ContentView.ContentProperty, grid61);
			grid62.Children.Add(frame42);
			stackLayout2.Children.Add(grid62);
			scrollView.Content = stackLayout2;
			stackLayout3.Children.Add(scrollView);
			grid63.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 35.0);
			grid63.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid63.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition120.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("2*"));
			((DefinitionCollection<ColumnDefinition>)grid63.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition120);
			columnDefinition121.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid63.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition121);
			label102.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty104 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter104 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider104 = new XamlServiceProvider();
			Type typeFromHandle207 = typeof(IProvideValueTarget);
			object[] array104 = new object[0 + 5];
			array104[0] = label102;
			array104[1] = grid63;
			array104[2] = stackLayout3;
			array104[3] = stackLayout4;
			array104[4] = graphPage;
			object service104;
			xamlServiceProvider104.Add(typeFromHandle207, service104 = new SimpleValueTargetProvider(array104, Label.FontSizeProperty, nameScope));
			xamlServiceProvider104.Add(typeof(IReferenceProvider), service104);
			Type typeFromHandle208 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver104 = new XmlNamespaceResolver();
			xmlNamespaceResolver104.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver104.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver104.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider104.Add(typeFromHandle208, new XamlTypeResolver(xmlNamespaceResolver104, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider104.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(885, 26)));
			label102.SetValue(fontSizeProperty104, ((IExtendedTypeConverter)fontSizeConverter104).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider104));
			label102.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label102.SetValue(Grid.RowProperty, 0);
			label102.SetValue(Grid.ColumnProperty, 0);
			grid63.Children.Add(label102);
			label103.SetValue(Label.TextColorProperty, Color.Red);
			BindableProperty fontSizeProperty105 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter105 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider105 = new XamlServiceProvider();
			Type typeFromHandle209 = typeof(IProvideValueTarget);
			object[] array105 = new object[0 + 5];
			array105[0] = label103;
			array105[1] = grid63;
			array105[2] = stackLayout3;
			array105[3] = stackLayout4;
			array105[4] = graphPage;
			object service105;
			xamlServiceProvider105.Add(typeFromHandle209, service105 = new SimpleValueTargetProvider(array105, Label.FontSizeProperty, nameScope));
			xamlServiceProvider105.Add(typeof(IReferenceProvider), service105);
			Type typeFromHandle210 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver105 = new XmlNamespaceResolver();
			xmlNamespaceResolver105.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver105.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver105.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider105.Add(typeFromHandle210, new XamlTypeResolver(xmlNamespaceResolver105, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider105.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(888, 25)));
			label103.SetValue(fontSizeProperty105, ((IExtendedTypeConverter)fontSizeConverter105).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider105));
			label103.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label103.SetValue(Grid.RowProperty, 0);
			label103.SetValue(Grid.ColumnProperty, 1);
			grid63.Children.Add(label103);
			stackLayout3.Children.Add(grid63);
			grid64.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 80.0);
			columnDefinition122.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25*"));
			((DefinitionCollection<ColumnDefinition>)grid64.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition122);
			columnDefinition123.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25*"));
			((DefinitionCollection<ColumnDefinition>)grid64.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition123);
			columnDefinition124.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25*"));
			((DefinitionCollection<ColumnDefinition>)grid64.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition124);
			columnDefinition125.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25*"));
			((DefinitionCollection<ColumnDefinition>)grid64.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition125);
			button3.SetValue(Xamarin.Forms.Button.TextProperty, "¥Úø™∑≈µÁ");
			button3.SetValue(Grid.RowProperty, 0);
			button3.SetValue(Grid.ColumnProperty, 0);
			button3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button3.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty106 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter106 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider106 = new XamlServiceProvider();
			Type typeFromHandle211 = typeof(IProvideValueTarget);
			object[] array106 = new object[0 + 5];
			array106[0] = button3;
			array106[1] = grid64;
			array106[2] = stackLayout3;
			array106[3] = stackLayout4;
			array106[4] = graphPage;
			object service106;
			xamlServiceProvider106.Add(typeFromHandle211, service106 = new SimpleValueTargetProvider(array106, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider106.Add(typeof(IReferenceProvider), service106);
			Type typeFromHandle212 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver106 = new XmlNamespaceResolver();
			xmlNamespaceResolver106.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver106.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver106.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider106.Add(typeFromHandle212, new XamlTypeResolver(xmlNamespaceResolver106, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider106.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(898, 135)));
			button3.SetValue(fontSizeProperty106, ((IExtendedTypeConverter)fontSizeConverter106).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider106));
			button3.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button3.Clicked += graphPage.OpenDSG_Clicked;
			grid64.Children.Add(button3);
			button4.SetValue(Xamarin.Forms.Button.TextProperty, "πÿ±’∑≈µÁ");
			button4.SetValue(Grid.RowProperty, 0);
			button4.SetValue(Grid.ColumnProperty, 1);
			button4.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button4.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty107 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter107 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider107 = new XamlServiceProvider();
			Type typeFromHandle213 = typeof(IProvideValueTarget);
			object[] array107 = new object[0 + 5];
			array107[0] = button4;
			array107[1] = grid64;
			array107[2] = stackLayout3;
			array107[3] = stackLayout4;
			array107[4] = graphPage;
			object service107;
			xamlServiceProvider107.Add(typeFromHandle213, service107 = new SimpleValueTargetProvider(array107, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider107.Add(typeof(IReferenceProvider), service107);
			Type typeFromHandle214 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver107 = new XmlNamespaceResolver();
			xmlNamespaceResolver107.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver107.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver107.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider107.Add(typeFromHandle214, new XamlTypeResolver(xmlNamespaceResolver107, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider107.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(901, 137)));
			button4.SetValue(fontSizeProperty107, ((IExtendedTypeConverter)fontSizeConverter107).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider107));
			button4.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button4.Clicked += graphPage.CloseDSG_Clicked;
			grid64.Children.Add(button4);
			button5.SetValue(Xamarin.Forms.Button.TextProperty, "¥Úø™≥‰µÁ");
			button5.SetValue(Grid.RowProperty, 0);
			button5.SetValue(Grid.ColumnProperty, 2);
			button5.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button5.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty108 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter108 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider108 = new XamlServiceProvider();
			Type typeFromHandle215 = typeof(IProvideValueTarget);
			object[] array108 = new object[0 + 5];
			array108[0] = button5;
			array108[1] = grid64;
			array108[2] = stackLayout3;
			array108[3] = stackLayout4;
			array108[4] = graphPage;
			object service108;
			xamlServiceProvider108.Add(typeFromHandle215, service108 = new SimpleValueTargetProvider(array108, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider108.Add(typeof(IReferenceProvider), service108);
			Type typeFromHandle216 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver108 = new XmlNamespaceResolver();
			xmlNamespaceResolver108.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver108.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver108.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider108.Add(typeFromHandle216, new XamlTypeResolver(xmlNamespaceResolver108, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider108.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(904, 136)));
			button5.SetValue(fontSizeProperty108, ((IExtendedTypeConverter)fontSizeConverter108).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider108));
			button5.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button5.Clicked += graphPage.OpenCHG_Clicked;
			grid64.Children.Add(button5);
			button6.SetValue(Xamarin.Forms.Button.TextProperty, "πÿ±’≥‰µÁ");
			button6.SetValue(Grid.RowProperty, 0);
			button6.SetValue(Grid.ColumnProperty, 3);
			button6.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button6.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty109 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter109 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider109 = new XamlServiceProvider();
			Type typeFromHandle217 = typeof(IProvideValueTarget);
			object[] array109 = new object[0 + 5];
			array109[0] = button6;
			array109[1] = grid64;
			array109[2] = stackLayout3;
			array109[3] = stackLayout4;
			array109[4] = graphPage;
			object service109;
			xamlServiceProvider109.Add(typeFromHandle217, service109 = new SimpleValueTargetProvider(array109, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider109.Add(typeof(IReferenceProvider), service109);
			Type typeFromHandle218 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver109 = new XmlNamespaceResolver();
			xmlNamespaceResolver109.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver109.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver109.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider109.Add(typeFromHandle218, new XamlTypeResolver(xmlNamespaceResolver109, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider109.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(907, 137)));
			button6.SetValue(fontSizeProperty109, ((IExtendedTypeConverter)fontSizeConverter109).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider109));
			button6.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button6.Clicked += graphPage.CloseCHG_Clicked;
			grid64.Children.Add(button6);
			stackLayout3.Children.Add(grid64);
			grid65.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 80.0);
			columnDefinition126.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25*"));
			((DefinitionCollection<ColumnDefinition>)grid65.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition126);
			columnDefinition127.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25*"));
			((DefinitionCollection<ColumnDefinition>)grid65.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition127);
			columnDefinition128.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25*"));
			((DefinitionCollection<ColumnDefinition>)grid65.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition128);
			columnDefinition129.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25*"));
			((DefinitionCollection<ColumnDefinition>)grid65.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition129);
			button7.SetValue(Xamarin.Forms.Button.TextProperty, "πÿ±’œµÕ≥");
			button7.SetValue(Grid.RowProperty, 0);
			button7.SetValue(Grid.ColumnProperty, 0);
			button7.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button7.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty110 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter110 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider110 = new XamlServiceProvider();
			Type typeFromHandle219 = typeof(IProvideValueTarget);
			object[] array110 = new object[0 + 5];
			array110[0] = button7;
			array110[1] = grid65;
			array110[2] = stackLayout3;
			array110[3] = stackLayout4;
			array110[4] = graphPage;
			object service110;
			xamlServiceProvider110.Add(typeFromHandle219, service110 = new SimpleValueTargetProvider(array110, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider110.Add(typeof(IReferenceProvider), service110);
			Type typeFromHandle220 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver110 = new XmlNamespaceResolver();
			xmlNamespaceResolver110.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver110.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver110.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider110.Add(typeFromHandle220, new XamlTypeResolver(xmlNamespaceResolver110, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider110.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(918, 139)));
			button7.SetValue(fontSizeProperty110, ((IExtendedTypeConverter)fontSizeConverter110).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider110));
			button7.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button7.Clicked += graphPage.CloseSystem_Clicked;
			grid65.Children.Add(button7);
			button8.SetValue(Xamarin.Forms.Button.TextProperty, "πÿ±’æ˘∫‚");
			button8.SetValue(Grid.RowProperty, 0);
			button8.SetValue(Grid.ColumnProperty, 1);
			button8.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button8.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty111 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter111 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider111 = new XamlServiceProvider();
			Type typeFromHandle221 = typeof(IProvideValueTarget);
			object[] array111 = new object[0 + 5];
			array111[0] = button8;
			array111[1] = grid65;
			array111[2] = stackLayout3;
			array111[3] = stackLayout4;
			array111[4] = graphPage;
			object service111;
			xamlServiceProvider111.Add(typeFromHandle221, service111 = new SimpleValueTargetProvider(array111, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider111.Add(typeof(IReferenceProvider), service111);
			Type typeFromHandle222 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver111 = new XmlNamespaceResolver();
			xmlNamespaceResolver111.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver111.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver111.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider111.Add(typeFromHandle222, new XamlTypeResolver(xmlNamespaceResolver111, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider111.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(921, 137)));
			button8.SetValue(fontSizeProperty111, ((IExtendedTypeConverter)fontSizeConverter111).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider111));
			button8.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button8.Clicked += graphPage.CloseBallance_Clicked;
			grid65.Children.Add(button8);
			button9.SetValue(Xamarin.Forms.Button.TextProperty, "∆Ù∂Øæ˘∫‚");
			button9.SetValue(Grid.RowProperty, 0);
			button9.SetValue(Grid.ColumnProperty, 2);
			button9.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button9.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty112 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter112 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider112 = new XamlServiceProvider();
			Type typeFromHandle223 = typeof(IProvideValueTarget);
			object[] array112 = new object[0 + 5];
			array112[0] = button9;
			array112[1] = grid65;
			array112[2] = stackLayout3;
			array112[3] = stackLayout4;
			array112[4] = graphPage;
			object service112;
			xamlServiceProvider112.Add(typeFromHandle223, service112 = new SimpleValueTargetProvider(array112, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider112.Add(typeof(IReferenceProvider), service112);
			Type typeFromHandle224 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver112 = new XmlNamespaceResolver();
			xmlNamespaceResolver112.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver112.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver112.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider112.Add(typeFromHandle224, new XamlTypeResolver(xmlNamespaceResolver112, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider112.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(924, 136)));
			button9.SetValue(fontSizeProperty112, ((IExtendedTypeConverter)fontSizeConverter112).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider112));
			button9.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button9.Clicked += graphPage.ButtonAutoBallance_Clicked;
			grid65.Children.Add(button9);
			button10.SetValue(Xamarin.Forms.Button.TextProperty, "≤‚ ‘æ˘∫‚");
			button10.SetValue(Grid.RowProperty, 0);
			button10.SetValue(Grid.ColumnProperty, 3);
			button10.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button10.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty113 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter113 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider113 = new XamlServiceProvider();
			Type typeFromHandle225 = typeof(IProvideValueTarget);
			object[] array113 = new object[0 + 5];
			array113[0] = button10;
			array113[1] = grid65;
			array113[2] = stackLayout3;
			array113[3] = stackLayout4;
			array113[4] = graphPage;
			object service113;
			xamlServiceProvider113.Add(typeFromHandle225, service113 = new SimpleValueTargetProvider(array113, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider113.Add(typeof(IReferenceProvider), service113);
			Type typeFromHandle226 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver113 = new XmlNamespaceResolver();
			xmlNamespaceResolver113.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver113.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver113.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider113.Add(typeFromHandle226, new XamlTypeResolver(xmlNamespaceResolver113, typeof(GraphPage).GetTypeInfo().Assembly));
			xamlServiceProvider113.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(927, 138)));
			button10.SetValue(fontSizeProperty113, ((IExtendedTypeConverter)fontSizeConverter113).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider113));
			button10.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button10.Clicked += graphPage.TestBallance_Clicked;
			grid65.Children.Add(button10);
			stackLayout3.Children.Add(grid65);
			stackLayout4.Children.Add(stackLayout3);
			graphPage.SetValue(ContentPage.ContentProperty, stackLayout4);
		}

		private void __InitComponentRuntime()
		{
			this.LoadFromXaml(typeof(GraphPage));
			ControllerFoc = this.FindByName<StackLayout>("ControllerFoc");
			powerView = this.FindByName<SKCanvasView>("powerView");
			gearView = this.FindByName<SKCanvasView>("gearView");
			stopView = this.FindByName<SKCanvasView>("stopView");
			runView = this.FindByName<SKCanvasView>("runView");
			speedView = this.FindByName<SKCanvasView>("speedView");
			TempGrid = this.FindByName<Grid>("TempGrid");
			battCapView = this.FindByName<SKCanvasView>("battCapView");
			mosTempView = this.FindByName<SKCanvasView>("mosTempView");
			motorTempView = this.FindByName<SKCanvasView>("motorTempView");
			ThrottleGrid = this.FindByName<Grid>("ThrottleGrid");
			motorStat = this.FindByName<Label>("motorStat");
			throttleVol = this.FindByName<Label>("throttleVol");
			throttleView = this.FindByName<SKCanvasView>("throttleView");
			learnStat = this.FindByName<Label>("learnStat");
			weakStatus = this.FindByName<Label>("weakStatus");
			alarmView = this.FindByName<SKCanvasView>("alarmView");
			lineVoltage = this.FindByName<Label>("lineVoltage");
			lineCurr = this.FindByName<Label>("lineCurr");
			lineCurrView = this.FindByName<SKCanvasView>("lineCurrView");
			PhaseGrid = this.FindByName<Grid>("PhaseGrid");
			phaseA = this.FindByName<Label>("phaseA");
			phaseAView = this.FindByName<SKCanvasView>("phaseAView");
			AVGPOWERT = this.FindByName<Label>("AVGPOWERT");
			AVGPower = this.FindByName<Label>("AVGPower");
			AVGSPEEDT = this.FindByName<Label>("AVGSPEEDT");
			AVGSpeed = this.FindByName<Label>("AVGSpeed");
			phaseC = this.FindByName<Label>("phaseC");
			phaseCView = this.FindByName<SKCanvasView>("phaseCView");
			AlarmGrid = this.FindByName<Grid>("AlarmGrid");
			AlarmRecord = this.FindByName<Label>("AlarmRecord");
			FrameGrid = this.FindByName<Grid>("FrameGrid");
			frameCnt = this.FindByName<Label>("frameCnt");
			alarmMessage = this.FindByName<Label>("alarmMessage");
			CmdAngle = this.FindByName<Xamarin.Forms.Button>("CmdAngle");
			CmdLearn = this.FindByName<Xamarin.Forms.Button>("CmdLearn");
			Distance = this.FindByName<Label>("Distance");
			TotalTime = this.FindByName<Label>("TotalTime");
			ControllerBMS = this.FindByName<StackLayout>("ControllerBMS");
			bmsVoltageView = this.FindByName<SKCanvasView>("bmsVoltageView");
			bmsCapView = this.FindByName<SKCanvasView>("bmsCapView");
			bmsCurrentView = this.FindByName<SKCanvasView>("bmsCurrentView");
			SystemStatName = this.FindByName<Label>("SystemStatName");
			WorkStat = this.FindByName<Label>("WorkStat");
			BalStatName = this.FindByName<Label>("BalStatName");
			BalStat = this.FindByName<Label>("BalStat");
			TotalVolName = this.FindByName<Label>("TotalVolName");
			TotalVol = this.FindByName<Label>("TotalVol");
			TotalCurrName = this.FindByName<Label>("TotalCurrName");
			TotalCurrent = this.FindByName<Label>("TotalCurrent");
			TotalCapName = this.FindByName<Label>("TotalCapName");
			FullCap = this.FindByName<Label>("FullCap");
			RestCapName = this.FindByName<Label>("RestCapName");
			RestCap = this.FindByName<Label>("RestCap");
			MOSTempName = this.FindByName<Label>("MOSTempName");
			MosTemp = this.FindByName<Label>("MosTemp");
			BalTempName = this.FindByName<Label>("BalTempName");
			BalT = this.FindByName<Label>("BalT");
			T1 = this.FindByName<Label>("T1");
			T2 = this.FindByName<Label>("T2");
			T3 = this.FindByName<Label>("T3");
			T4 = this.FindByName<Label>("T4");
			SingleMaxVolName = this.FindByName<Label>("SingleMaxVolName");
			MaxVol = this.FindByName<Label>("MaxVol");
			SingleMinVolName = this.FindByName<Label>("SingleMinVolName");
			MinVol = this.FindByName<Label>("MinVol");
			AvgVolName = this.FindByName<Label>("AvgVolName");
			AvgVol = this.FindByName<Label>("AvgVol");
			MaxDeltaVolName = this.FindByName<Label>("MaxDeltaVolName");
			DeltaVol = this.FindByName<Label>("DeltaVol");
			BatteryName = this.FindByName<Label>("BatteryName");
			VolCurrentName = this.FindByName<Label>("VolCurrentName");
			BatteryName2 = this.FindByName<Label>("BatteryName2");
			VolCurrentName2 = this.FindByName<Label>("VolCurrentName2");
			VC1 = this.FindByName<Label>("VC1");
			VC2 = this.FindByName<Label>("VC2");
			VC3 = this.FindByName<Label>("VC3");
			VC4 = this.FindByName<Label>("VC4");
			VC5 = this.FindByName<Label>("VC5");
			VC6 = this.FindByName<Label>("VC6");
			VC7 = this.FindByName<Label>("VC7");
			VC8 = this.FindByName<Label>("VC8");
			VC9 = this.FindByName<Label>("VC9");
			VC10 = this.FindByName<Label>("VC10");
			VC11 = this.FindByName<Label>("VC11");
			VC12 = this.FindByName<Label>("VC12");
			VC13 = this.FindByName<Label>("VC13");
			VC14 = this.FindByName<Label>("VC14");
			VC15 = this.FindByName<Label>("VC15");
			VC16 = this.FindByName<Label>("VC16");
			VC17 = this.FindByName<Label>("VC17");
			VC18 = this.FindByName<Label>("VC18");
			VC19 = this.FindByName<Label>("VC19");
			VC20 = this.FindByName<Label>("VC20");
			VC21 = this.FindByName<Label>("VC21");
			VC22 = this.FindByName<Label>("VC22");
			VC23 = this.FindByName<Label>("VC23");
			VC24 = this.FindByName<Label>("VC24");
			frameCnt2 = this.FindByName<Label>("frameCnt2");
			alarmMessage2 = this.FindByName<Label>("alarmMessage2");
			DSGOnName = this.FindByName<Xamarin.Forms.Button>("DSGOnName");
			DSGOffName = this.FindByName<Xamarin.Forms.Button>("DSGOffName");
			CHGOnName = this.FindByName<Xamarin.Forms.Button>("CHGOnName");
			CHGOffName = this.FindByName<Xamarin.Forms.Button>("CHGOffName");
			SystemOffName = this.FindByName<Xamarin.Forms.Button>("SystemOffName");
			BalOffName = this.FindByName<Xamarin.Forms.Button>("BalOffName");
			BalOnName = this.FindByName<Xamarin.Forms.Button>("BalOnName");
			BalTestName = this.FindByName<Xamarin.Forms.Button>("BalTestName");
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	[XamlFilePath("LoginPage2.xaml")]
	public class LoginPage2 : Popup
	{
		private int timecnt = 60;

		private int validtimecnt = 310;

		private bool quicklogin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label QuickLogin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Switch InputUserSwitch;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label InputUserName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Entry UserName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PasswordName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Entry Password;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ConfirmPasswordName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Entry ConfirmPassword;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label InputValidCode;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Entry ValidCode;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button VerifyCmd;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Switch DisplaySwitch;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button LogCommand;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button ExitCommand;

		public LoginPage2()
		{
			InitializeComponent();
			if (quicklogin)
			{
				ValidCode.IsVisible = true;
				InputValidCode.IsVisible = true;
				VerifyCmd.IsVisible = true;
				Password.IsVisible = true;
				ConfirmPassword.IsVisible = false;
				PasswordName.IsVisible = false;
				ConfirmPasswordName.IsVisible = false;
			}
			else
			{
				ValidCode.IsVisible = false;
				InputValidCode.IsVisible = false;
				VerifyCmd.IsVisible = false;
				Password.IsVisible = true;
				ConfirmPassword.IsVisible = true;
				PasswordName.IsVisible = true;
				ConfirmPasswordName.IsVisible = true;
				Password.Text = App.password;
				ConfirmPassword.Text = App.password;
			}
			InputUserSwitch.IsToggled = false;
			UserName.Text = App.username;
			ValidCode.Text = "";
			if (App.CN)
			{
				InputUserName.Text = " ÷ª˙∫≈¬ÎªÚ’ﬂEmail";
				QuickLogin.Text = "—È÷§¬ÎøÏÀŸ◊¢≤·";
				LogCommand.Text = "µ«¬º";
				ExitCommand.Text = "∑µªÿ";
				VerifyCmd.Text = "ªÒ»°—È÷§¬Î";
				InputValidCode.Text = " ‰»Î—È÷§¬Î";
				PasswordName.Text = " ‰»Î√‹¬Î";
				ConfirmPasswordName.Text = "‘Ÿ¥Œ ‰»Î√‹¬Î";
			}
			else
			{
				ExitCommand.Text = "Return";
				InputUserName.Text = "PhoneNumber or Email";
				QuickLogin.Text = "Verify Code Quick Register";
				InputValidCode.Text = "Input Verify Code";
				LogCommand.Text = "Registering";
				VerifyCmd.Text = "Get Verify Code";
				PasswordName.Text = "Input  Password";
				ConfirmPasswordName.Text = "Repeat Password";
			}
			Device.StartTimer(TimeSpan.FromSeconds(1.0), delegate
			{
				if (timecnt < 60)
				{
					timecnt++;
					if (App.CN)
					{
						VerifyCmd.Text = $"ªÒ»°—È÷§¬Î({60 - timecnt})";
					}
					else
					{
						VerifyCmd.Text = $"Get Verify Code({60 - timecnt})";
					}
					VerifyCmd.IsEnabled = false;
				}
				else
				{
					if (App.CN)
					{
						VerifyCmd.Text = "ªÒ»°—È÷§¬Î";
					}
					else
					{
						VerifyCmd.Text = "Get Verify Code";
					}
					VerifyCmd.IsEnabled = true;
				}
				if (validtimecnt < 300)
				{
					validtimecnt++;
				}
				return true;
			});
		}

		private void ButtonVerify_Clicked(object sender, EventArgs e)
		{
			if (UserName.Text != null)
			{
				if (Password.Text.Length < 8 || Password.Text.Length > 16)
				{
					if (App.CN)
					{
						UserDialogs.Instance.Alert("√‹¬Î≥§∂»8~16");
					}
					else
					{
						UserDialogs.Instance.Alert("Password length shoud be 8~16.");
					}
				}
				else if (UserName.Text.Contains("@") && UserName.Text.Contains("."))
				{
					App.username = UserName.Text.Trim();
					timecnt = 0;
					validtimecnt = 0;
					VerifyCmd.IsEnabled = false;
					App.loginstat = 1;
					if (App.CN)
					{
						UserDialogs.Instance.Alert("«Î¥Úø™Email ’º˛œ‰£¨∏˘æ›” œ‰ ’µΩµƒ–≈œ¢ ‰»Î—È÷§¬Î");
					}
					else
					{
						UserDialogs.Instance.Alert("Please open your Email, and enter the Verify Code based on the information you received in your email.");
					}
				}
				else if (Regex.IsMatch(UserName.Text, "^((\\(\\d{3}\\))|(\\d{3}\\-))?1[3|4|5|6|7|8|9][0-9]\\d{8}"))
				{
					App.username = UserName.Text.Trim();
					timecnt = 0;
					validtimecnt = 0;
					App.loginstat = 1;
					VerifyCmd.IsEnabled = false;
				}
				else if (App.CN)
				{
					UserDialogs.Instance.Alert("«Î ‰»Î’˝»∑µƒ ÷ª˙∫≈¬Î ªÚ Emailµÿ÷∑");
				}
				else
				{
					UserDialogs.Instance.Alert("Please Input Correct Phone Number or Email Address.");
				}
			}
			else if (App.CN)
			{
				UserDialogs.Instance.Alert("«Î ‰»Î”√ªß√˚");
			}
			else
			{
				UserDialogs.Instance.Alert("Please Input User Name");
			}
		}

		private void Command_Clicked(object sender, EventArgs e)
		{
			if (UserName.Text == null)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("«Î ‰»Î”√ªß√˚");
				}
				else
				{
					UserDialogs.Instance.Alert("Please Input User Name.");
				}
			}
			else if (quicklogin)
			{
				if (ValidCode.Text == null)
				{
					if (App.CN)
					{
						UserDialogs.Instance.Alert("«Î ‰»Î—È÷§¬Î");
					}
					else
					{
						UserDialogs.Instance.Alert("Please Input Varify Code.");
					}
					return;
				}
				int num = 0;
				try
				{
					num = Convert.ToInt32(ValidCode.Text);
					if (num > 999999 || num < 100000)
					{
						if (App.CN)
						{
							UserDialogs.Instance.Alert("«Î ‰»Î—È÷§¬Î");
						}
						else
						{
							UserDialogs.Instance.Alert("Please Input Varify Code.");
						}
						return;
					}
				}
				catch (Exception)
				{
					if (App.CN)
					{
						UserDialogs.Instance.Alert("«Î ‰»Î—È÷§¬Î");
					}
					else
					{
						UserDialogs.Instance.Alert("Please Input Varify Code.");
					}
					return;
				}
				if ((!UserName.Text.Contains("@") || !UserName.Text.Contains(".")) && !Regex.IsMatch(UserName.Text, "^((\\(\\d{3}\\))|(\\d{3}\\-))?1[3|4|5|6|7|8|9][0-9]\\d{8}"))
				{
					if (App.CN)
					{
						UserDialogs.Instance.Alert("«Î ‰»Î’˝»∑µƒ ÷ª˙∫≈¬Î ªÚ Emailµÿ÷∑");
					}
					else
					{
						UserDialogs.Instance.Alert("Please Input Correct Phone Number or Email Address.");
					}
				}
				else
				{
					App.username = UserName.Text.Trim();
					App.password = Password.Text;
					App.verify = num.ToString("000000");
					App.loginstat = 2;
					Dismiss(null);
				}
			}
			else if (App.localAgent == "None")
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("«Î¥Úø™GPS");
				}
				else
				{
					UserDialogs.Instance.Alert("Pleae Open GPS");
				}
			}
			else if (UserName.Text.Contains(" "))
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("”√ªß√˚≤ªƒ‹”–ø’∏Ò");
				}
				else
				{
					UserDialogs.Instance.Alert("Username contains space.");
				}
			}
			else if (Password.Text == null)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("«Î ‰»Î√‹¬Î");
				}
				else
				{
					UserDialogs.Instance.Alert("Please Input Password.");
				}
			}
			else if (ConfirmPassword.Text == null)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("«Î‘Ÿ¥Œ ‰»Î√‹¬Î");
				}
				else
				{
					UserDialogs.Instance.Alert("Please Input Password again.");
				}
			}
			else if (Password.Text.Length < 8 || ConfirmPassword.Text.Length > 16)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("√‹¬Î≥§∂»8~16");
				}
				else
				{
					UserDialogs.Instance.Alert("Password length shoud be 8~16.");
				}
			}
			else if (Password.Text != ConfirmPassword.Text)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("¡Ω¥Œ ‰»Îµƒ√‹¬Î±ÿ–Îœ‡Õ¨");
				}
				else
				{
					UserDialogs.Instance.Alert("Both input Passwords must be same.");
				}
			}
			else if ((!UserName.Text.Contains("@") || !UserName.Text.Contains(".")) && !Regex.IsMatch(UserName.Text, "^((\\(\\d{3}\\))|(\\d{3}\\-))?1[3|4|5|6|7|8|9][0-9]\\d{8}"))
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("«Î ‰»Î’˝»∑µƒ ÷ª˙∫≈¬Î ªÚ Emailµÿ÷∑");
				}
				else
				{
					UserDialogs.Instance.Alert("Please Input Correct Phone Number or Email Address.");
				}
			}
			else
			{
				App.username = UserName.Text.Trim();
				App.password = Password.Text;
				App.loginstat = 20;
				Dismiss(null);
			}
		}

		private void ExitCommand_Clicked(object sender, EventArgs e)
		{
			App.NeedLogin = false;
			Dismiss(null);
		}

		private void DisplaySwitch_Switched(object sender, ToggledEventArgs e)
		{
			if (!e.Value)
			{
				Password.IsPassword = true;
				ConfirmPassword.IsPassword = true;
			}
			else
			{
				ConfirmPassword.IsPassword = false;
				Password.IsPassword = false;
			}
		}

		private void IputUserSwitch_Switched(object sender, ToggledEventArgs e)
		{
			quicklogin = e.Value;
			if (quicklogin)
			{
				ValidCode.IsVisible = true;
				InputValidCode.IsVisible = true;
				VerifyCmd.IsVisible = true;
				Password.IsVisible = true;
				ConfirmPassword.IsVisible = false;
				PasswordName.IsVisible = true;
				ConfirmPasswordName.IsVisible = false;
			}
			else
			{
				ValidCode.IsVisible = false;
				InputValidCode.IsVisible = false;
				VerifyCmd.IsVisible = false;
				Password.IsVisible = true;
				ConfirmPassword.IsVisible = true;
				PasswordName.IsVisible = true;
				ConfirmPasswordName.IsVisible = true;
			}
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			if (ResourceLoader.IsEnabled && ResourceLoader.CanProvideContentFor(new ResourceLoader.ResourceLoadingQuery
			{
				AssemblyName = typeof(LoginPage2).GetTypeInfo().Assembly.GetName(),
				ResourcePath = "LoginPage2.xaml",
				Instance = this
			}))
			{
				__InitComponentRuntime();
				return;
			}
			if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
			{
				__InitComponentRuntime();
				return;
			}
			Image image;
			VisualDiagnostics.RegisterSourceInfo(image = new Image(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 9, 10);
			Label label;
			VisualDiagnostics.RegisterSourceInfo(label = new Label(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 11, 14);
			Xamarin.Forms.Switch obj;
			VisualDiagnostics.RegisterSourceInfo(obj = new Xamarin.Forms.Switch(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 12, 14);
			StackLayout stackLayout;
			VisualDiagnostics.RegisterSourceInfo(stackLayout = new StackLayout(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 10, 10);
			Label label2;
			VisualDiagnostics.RegisterSourceInfo(label2 = new Label(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 15, 14);
			Xamarin.Forms.Entry entry;
			VisualDiagnostics.RegisterSourceInfo(entry = new Xamarin.Forms.Entry(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 16, 14);
			StackLayout stackLayout2;
			VisualDiagnostics.RegisterSourceInfo(stackLayout2 = new StackLayout(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 14, 10);
			Label label3;
			VisualDiagnostics.RegisterSourceInfo(label3 = new Label(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 19, 14);
			Xamarin.Forms.Entry entry2;
			VisualDiagnostics.RegisterSourceInfo(entry2 = new Xamarin.Forms.Entry(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 20, 14);
			StackLayout stackLayout3;
			VisualDiagnostics.RegisterSourceInfo(stackLayout3 = new StackLayout(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 18, 10);
			Label label4;
			VisualDiagnostics.RegisterSourceInfo(label4 = new Label(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 23, 14);
			Xamarin.Forms.Entry entry3;
			VisualDiagnostics.RegisterSourceInfo(entry3 = new Xamarin.Forms.Entry(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 24, 14);
			StackLayout stackLayout4;
			VisualDiagnostics.RegisterSourceInfo(stackLayout4 = new StackLayout(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 22, 10);
			ColumnDefinition columnDefinition;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition = new ColumnDefinition(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 29, 18);
			ColumnDefinition columnDefinition2;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition2 = new ColumnDefinition(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 30, 18);
			ColumnDefinition columnDefinition3;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition3 = new ColumnDefinition(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 31, 18);
			Label label5;
			VisualDiagnostics.RegisterSourceInfo(label5 = new Label(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 33, 14);
			Xamarin.Forms.Entry entry4;
			VisualDiagnostics.RegisterSourceInfo(entry4 = new Xamarin.Forms.Entry(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 34, 14);
			Xamarin.Forms.Button button;
			VisualDiagnostics.RegisterSourceInfo(button = new Xamarin.Forms.Button(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 35, 14);
			Grid grid;
			VisualDiagnostics.RegisterSourceInfo(grid = new Grid(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 27, 10);
			ColumnDefinition columnDefinition4;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition4 = new ColumnDefinition(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 40, 18);
			ColumnDefinition columnDefinition5;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition5 = new ColumnDefinition(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 41, 18);
			ColumnDefinition columnDefinition6;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition6 = new ColumnDefinition(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 42, 18);
			Xamarin.Forms.Switch obj2;
			VisualDiagnostics.RegisterSourceInfo(obj2 = new Xamarin.Forms.Switch(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 44, 14);
			Xamarin.Forms.Button button2;
			VisualDiagnostics.RegisterSourceInfo(button2 = new Xamarin.Forms.Button(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 45, 14);
			Xamarin.Forms.Button button3;
			VisualDiagnostics.RegisterSourceInfo(button3 = new Xamarin.Forms.Button(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 46, 14);
			Grid grid2;
			VisualDiagnostics.RegisterSourceInfo(grid2 = new Grid(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 38, 10);
			StackLayout stackLayout5;
			VisualDiagnostics.RegisterSourceInfo(stackLayout5 = new StackLayout(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 8, 6);
			Frame frame;
			VisualDiagnostics.RegisterSourceInfo(frame = new Frame(), new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 7, 2);
			LoginPage2 loginPage;
			VisualDiagnostics.RegisterSourceInfo(loginPage = this, new Uri("LoginPage2.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 2, 2);
			NameScope nameScope = (NameScope)(NameScope.GetNameScope(loginPage) ?? new NameScope());
			NameScope.SetNameScope(loginPage, nameScope);
			((INameScope)nameScope).RegisterName("QuickLogin", (object)label);
			if (label.StyleId == null)
			{
				label.StyleId = "QuickLogin";
			}
			((INameScope)nameScope).RegisterName("InputUserSwitch", (object)obj);
			if (obj.StyleId == null)
			{
				obj.StyleId = "InputUserSwitch";
			}
			((INameScope)nameScope).RegisterName("InputUserName", (object)label2);
			if (label2.StyleId == null)
			{
				label2.StyleId = "InputUserName";
			}
			((INameScope)nameScope).RegisterName("UserName", (object)entry);
			if (entry.StyleId == null)
			{
				entry.StyleId = "UserName";
			}
			((INameScope)nameScope).RegisterName("PasswordName", (object)label3);
			if (label3.StyleId == null)
			{
				label3.StyleId = "PasswordName";
			}
			((INameScope)nameScope).RegisterName("Password", (object)entry2);
			if (entry2.StyleId == null)
			{
				entry2.StyleId = "Password";
			}
			((INameScope)nameScope).RegisterName("ConfirmPasswordName", (object)label4);
			if (label4.StyleId == null)
			{
				label4.StyleId = "ConfirmPasswordName";
			}
			((INameScope)nameScope).RegisterName("ConfirmPassword", (object)entry3);
			if (entry3.StyleId == null)
			{
				entry3.StyleId = "ConfirmPassword";
			}
			((INameScope)nameScope).RegisterName("InputValidCode", (object)label5);
			if (label5.StyleId == null)
			{
				label5.StyleId = "InputValidCode";
			}
			((INameScope)nameScope).RegisterName("ValidCode", (object)entry4);
			if (entry4.StyleId == null)
			{
				entry4.StyleId = "ValidCode";
			}
			((INameScope)nameScope).RegisterName("VerifyCmd", (object)button);
			if (button.StyleId == null)
			{
				button.StyleId = "VerifyCmd";
			}
			((INameScope)nameScope).RegisterName("DisplaySwitch", (object)obj2);
			if (obj2.StyleId == null)
			{
				obj2.StyleId = "DisplaySwitch";
			}
			((INameScope)nameScope).RegisterName("LogCommand", (object)button2);
			if (button2.StyleId == null)
			{
				button2.StyleId = "LogCommand";
			}
			((INameScope)nameScope).RegisterName("ExitCommand", (object)button3);
			if (button3.StyleId == null)
			{
				button3.StyleId = "ExitCommand";
			}
			QuickLogin = label;
			InputUserSwitch = obj;
			InputUserName = label2;
			UserName = entry;
			PasswordName = label3;
			Password = entry2;
			ConfirmPasswordName = label4;
			ConfirmPassword = entry3;
			InputValidCode = label5;
			ValidCode = entry4;
			VerifyCmd = button;
			DisplaySwitch = obj2;
			LogCommand = button2;
			ExitCommand = button3;
			loginPage.SetValue(BasePopup.SizeProperty, new SizeTypeConverter().ConvertFromInvariantString("330,400"));
			loginPage.IsLightDismissEnabled = false;
			frame.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 400.0);
			frame.SetValue(Frame.BorderColorProperty, new Color(0.8117647171020508, 0.886274516582489, 0.9529411792755127, 1.0));
			frame.SetValue(Frame.CornerRadiusProperty, 20f);
			frame.SetValue(Frame.HasShadowProperty, true);
			image.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("http://182.92.233.85:6868/image/Register.jpg"));
			image.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 120.0);
			stackLayout5.Children.Add(image);
			stackLayout.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			label.SetValue(Label.TextProperty, "inputname");
			BindableProperty fontSizeProperty = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
			Type typeFromHandle = typeof(IProvideValueTarget);
			object[] array = new object[0 + 5];
			array[0] = label;
			array[1] = stackLayout;
			array[2] = stackLayout5;
			array[3] = frame;
			array[4] = loginPage;
			object service;
			xamlServiceProvider.Add(typeFromHandle, service = new SimpleValueTargetProvider(array, Label.FontSizeProperty, nameScope));
			xamlServiceProvider.Add(typeof(IReferenceProvider), service);
			Type typeFromHandle2 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
			xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver.Add("tk", "clr-namespace:Xamarin.CommunityToolkit.UI.Views;assembly=Xamarin.CommunityToolkit");
			xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(LoginPage2).GetTypeInfo().Assembly));
			xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(11, 58)));
			label.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider));
			stackLayout.Children.Add(label);
			obj.Toggled += loginPage.IputUserSwitch_Switched;
			obj.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout.Children.Add(obj);
			stackLayout5.Children.Add(stackLayout);
			stackLayout2.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			label2.SetValue(Label.TextProperty, "inputname");
			label2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
			Type typeFromHandle3 = typeof(IProvideValueTarget);
			object[] array2 = new object[0 + 5];
			array2[0] = label2;
			array2[1] = stackLayout2;
			array2[2] = stackLayout5;
			array2[3] = frame;
			array2[4] = loginPage;
			object service2;
			xamlServiceProvider2.Add(typeFromHandle3, service2 = new SimpleValueTargetProvider(array2, Label.FontSizeProperty, nameScope));
			xamlServiceProvider2.Add(typeof(IReferenceProvider), service2);
			Type typeFromHandle4 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
			xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver2.Add("tk", "clr-namespace:Xamarin.CommunityToolkit.UI.Views;assembly=Xamarin.CommunityToolkit");
			xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(LoginPage2).GetTypeInfo().Assembly));
			xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(15, 87)));
			label2.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider2));
			stackLayout2.Children.Add(label2);
			entry.SetValue(Xamarin.Forms.Entry.PlaceholderProperty, "");
			entry.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
			BindableProperty fontSizeProperty3 = Xamarin.Forms.Entry.FontSizeProperty;
			FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
			Type typeFromHandle5 = typeof(IProvideValueTarget);
			object[] array3 = new object[0 + 5];
			array3[0] = entry;
			array3[1] = stackLayout2;
			array3[2] = stackLayout5;
			array3[3] = frame;
			array3[4] = loginPage;
			object service3;
			xamlServiceProvider3.Add(typeFromHandle5, service3 = new SimpleValueTargetProvider(array3, Xamarin.Forms.Entry.FontSizeProperty, nameScope));
			xamlServiceProvider3.Add(typeof(IReferenceProvider), service3);
			Type typeFromHandle6 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
			xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver3.Add("tk", "clr-namespace:Xamarin.CommunityToolkit.UI.Views;assembly=Xamarin.CommunityToolkit");
			xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(LoginPage2).GetTypeInfo().Assembly));
			xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(16, 88)));
			entry.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider3));
			stackLayout2.Children.Add(entry);
			stackLayout5.Children.Add(stackLayout2);
			stackLayout3.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			label3.SetValue(Label.TextProperty, "inputvc");
			label3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
			Type typeFromHandle7 = typeof(IProvideValueTarget);
			object[] array4 = new object[0 + 5];
			array4[0] = label3;
			array4[1] = stackLayout3;
			array4[2] = stackLayout5;
			array4[3] = frame;
			array4[4] = loginPage;
			object service4;
			xamlServiceProvider4.Add(typeFromHandle7, service4 = new SimpleValueTargetProvider(array4, Label.FontSizeProperty, nameScope));
			xamlServiceProvider4.Add(typeof(IReferenceProvider), service4);
			Type typeFromHandle8 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
			xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver4.Add("tk", "clr-namespace:Xamarin.CommunityToolkit.UI.Views;assembly=Xamarin.CommunityToolkit");
			xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(LoginPage2).GetTypeInfo().Assembly));
			xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(19, 83)));
			label3.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider4));
			stackLayout3.Children.Add(label3);
			entry2.SetValue(Xamarin.Forms.Entry.PlaceholderProperty, "");
			entry2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
			entry2.SetValue(Xamarin.Forms.Entry.IsPasswordProperty, true);
			BindableProperty fontSizeProperty5 = Xamarin.Forms.Entry.FontSizeProperty;
			FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
			Type typeFromHandle9 = typeof(IProvideValueTarget);
			object[] array5 = new object[0 + 5];
			array5[0] = entry2;
			array5[1] = stackLayout3;
			array5[2] = stackLayout5;
			array5[3] = frame;
			array5[4] = loginPage;
			object service5;
			xamlServiceProvider5.Add(typeFromHandle9, service5 = new SimpleValueTargetProvider(array5, Xamarin.Forms.Entry.FontSizeProperty, nameScope));
			xamlServiceProvider5.Add(typeof(IReferenceProvider), service5);
			Type typeFromHandle10 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
			xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver5.Add("tk", "clr-namespace:Xamarin.CommunityToolkit.UI.Views;assembly=Xamarin.CommunityToolkit");
			xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(LoginPage2).GetTypeInfo().Assembly));
			xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(20, 106)));
			entry2.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider5));
			stackLayout3.Children.Add(entry2);
			stackLayout5.Children.Add(stackLayout3);
			stackLayout4.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			label4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			label4.SetValue(Label.TextProperty, "inputvc");
			BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
			Type typeFromHandle11 = typeof(IProvideValueTarget);
			object[] array6 = new object[0 + 5];
			array6[0] = label4;
			array6[1] = stackLayout4;
			array6[2] = stackLayout5;
			array6[3] = frame;
			array6[4] = loginPage;
			object service6;
			xamlServiceProvider6.Add(typeFromHandle11, service6 = new SimpleValueTargetProvider(array6, Label.FontSizeProperty, nameScope));
			xamlServiceProvider6.Add(typeof(IReferenceProvider), service6);
			Type typeFromHandle12 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
			xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver6.Add("tk", "clr-namespace:Xamarin.CommunityToolkit.UI.Views;assembly=Xamarin.CommunityToolkit");
			xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(LoginPage2).GetTypeInfo().Assembly));
			xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(23, 91)));
			label4.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider6));
			stackLayout4.Children.Add(label4);
			entry3.SetValue(Xamarin.Forms.Entry.PlaceholderProperty, "");
			entry3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
			entry3.SetValue(Xamarin.Forms.Entry.IsPasswordProperty, true);
			BindableProperty fontSizeProperty7 = Xamarin.Forms.Entry.FontSizeProperty;
			FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
			Type typeFromHandle13 = typeof(IProvideValueTarget);
			object[] array7 = new object[0 + 5];
			array7[0] = entry3;
			array7[1] = stackLayout4;
			array7[2] = stackLayout5;
			array7[3] = frame;
			array7[4] = loginPage;
			object service7;
			xamlServiceProvider7.Add(typeFromHandle13, service7 = new SimpleValueTargetProvider(array7, Xamarin.Forms.Entry.FontSizeProperty, nameScope));
			xamlServiceProvider7.Add(typeof(IReferenceProvider), service7);
			Type typeFromHandle14 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
			xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver7.Add("tk", "clr-namespace:Xamarin.CommunityToolkit.UI.Views;assembly=Xamarin.CommunityToolkit");
			xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(LoginPage2).GetTypeInfo().Assembly));
			xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(24, 112)));
			entry3.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider7));
			stackLayout4.Children.Add(entry3);
			stackLayout5.Children.Add(stackLayout4);
			columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("30*"));
			((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
			columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("30*"));
			((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
			columnDefinition3.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("40*"));
			((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition3);
			label5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			label5.SetValue(Label.TextProperty, "inputvc");
			BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
			Type typeFromHandle15 = typeof(IProvideValueTarget);
			object[] array8 = new object[0 + 5];
			array8[0] = label5;
			array8[1] = grid;
			array8[2] = stackLayout5;
			array8[3] = frame;
			array8[4] = loginPage;
			object service8;
			xamlServiceProvider8.Add(typeFromHandle15, service8 = new SimpleValueTargetProvider(array8, Label.FontSizeProperty, nameScope));
			xamlServiceProvider8.Add(typeof(IReferenceProvider), service8);
			Type typeFromHandle16 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
			xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver8.Add("tk", "clr-namespace:Xamarin.CommunityToolkit.UI.Views;assembly=Xamarin.CommunityToolkit");
			xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(LoginPage2).GetTypeInfo().Assembly));
			xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(33, 85)));
			label5.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider8));
			label5.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			label5.SetValue(Grid.RowProperty, 0);
			label5.SetValue(Grid.ColumnProperty, 0);
			grid.Children.Add(label5);
			entry4.SetValue(Xamarin.Forms.Entry.IsPasswordProperty, true);
			BindableProperty fontSizeProperty9 = Xamarin.Forms.Entry.FontSizeProperty;
			FontSizeConverter fontSizeConverter9 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
			Type typeFromHandle17 = typeof(IProvideValueTarget);
			object[] array9 = new object[0 + 5];
			array9[0] = entry4;
			array9[1] = grid;
			array9[2] = stackLayout5;
			array9[3] = frame;
			array9[4] = loginPage;
			object service9;
			xamlServiceProvider9.Add(typeFromHandle17, service9 = new SimpleValueTargetProvider(array9, Xamarin.Forms.Entry.FontSizeProperty, nameScope));
			xamlServiceProvider9.Add(typeof(IReferenceProvider), service9);
			Type typeFromHandle18 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
			xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver9.Add("tk", "clr-namespace:Xamarin.CommunityToolkit.UI.Views;assembly=Xamarin.CommunityToolkit");
			xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(LoginPage2).GetTypeInfo().Assembly));
			xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(34, 58)));
			entry4.SetValue(fontSizeProperty9, ((IExtendedTypeConverter)fontSizeConverter9).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider9));
			entry4.SetValue(Grid.RowProperty, 0);
			entry4.SetValue(Grid.ColumnProperty, 1);
			grid.Children.Add(entry4);
			button.Clicked += loginPage.ButtonVerify_Clicked;
			BindableProperty fontSizeProperty10 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter10 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
			Type typeFromHandle19 = typeof(IProvideValueTarget);
			object[] array10 = new object[0 + 5];
			array10[0] = button;
			array10[1] = grid;
			array10[2] = stackLayout5;
			array10[3] = frame;
			array10[4] = loginPage;
			object service10;
			xamlServiceProvider10.Add(typeFromHandle19, service10 = new SimpleValueTargetProvider(array10, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider10.Add(typeof(IReferenceProvider), service10);
			Type typeFromHandle20 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
			xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver10.Add("tk", "clr-namespace:Xamarin.CommunityToolkit.UI.Views;assembly=Xamarin.CommunityToolkit");
			xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(LoginPage2).GetTypeInfo().Assembly));
			xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(35, 71)));
			button.SetValue(fontSizeProperty10, ((IExtendedTypeConverter)fontSizeConverter10).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider10));
			button.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightSkyBlue);
			button.SetValue(Grid.RowProperty, 0);
			button.SetValue(Grid.ColumnProperty, 2);
			grid.Children.Add(button);
			stackLayout5.Children.Add(grid);
			columnDefinition4.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("30*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition4);
			columnDefinition5.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("35*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition5);
			columnDefinition6.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("35*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition6);
			obj2.Toggled += loginPage.DisplaySwitch_Switched;
			obj2.SetValue(Grid.ColumnProperty, 0);
			obj2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid2.Children.Add(obj2);
			button2.SetValue(Xamarin.Forms.Button.TextProperty, "√‚√‹◊¢≤·");
			button2.Clicked += loginPage.Command_Clicked;
			button2.SetValue(Grid.RowProperty, 0);
			button2.SetValue(Grid.ColumnProperty, 1);
			button2.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.White);
			BindableProperty fontSizeProperty11 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter11 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
			Type typeFromHandle21 = typeof(IProvideValueTarget);
			object[] array11 = new object[0 + 5];
			array11[0] = button2;
			array11[1] = grid2;
			array11[2] = stackLayout5;
			array11[3] = frame;
			array11[4] = loginPage;
			object service11;
			xamlServiceProvider11.Add(typeFromHandle21, service11 = new SimpleValueTargetProvider(array11, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider11.Add(typeof(IReferenceProvider), service11);
			Type typeFromHandle22 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
			xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver11.Add("tk", "clr-namespace:Xamarin.CommunityToolkit.UI.Views;assembly=Xamarin.CommunityToolkit");
			xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(LoginPage2).GetTypeInfo().Assembly));
			xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(45, 130)));
			button2.SetValue(fontSizeProperty11, ((IExtendedTypeConverter)fontSizeConverter11).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider11));
			button2.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			grid2.Children.Add(button2);
			button3.SetValue(Xamarin.Forms.Button.TextProperty, "∑µªÿ");
			button3.Clicked += loginPage.ExitCommand_Clicked;
			button3.SetValue(Grid.RowProperty, 0);
			button3.SetValue(Grid.ColumnProperty, 2);
			button3.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.White);
			BindableProperty fontSizeProperty12 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter12 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
			Type typeFromHandle23 = typeof(IProvideValueTarget);
			object[] array12 = new object[0 + 5];
			array12[0] = button3;
			array12[1] = grid2;
			array12[2] = stackLayout5;
			array12[3] = frame;
			array12[4] = loginPage;
			object service12;
			xamlServiceProvider12.Add(typeFromHandle23, service12 = new SimpleValueTargetProvider(array12, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider12.Add(typeof(IReferenceProvider), service12);
			Type typeFromHandle24 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
			xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver12.Add("tk", "clr-namespace:Xamarin.CommunityToolkit.UI.Views;assembly=Xamarin.CommunityToolkit");
			xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(LoginPage2).GetTypeInfo().Assembly));
			xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(46, 131)));
			button3.SetValue(fontSizeProperty12, ((IExtendedTypeConverter)fontSizeConverter12).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider12));
			button3.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			grid2.Children.Add(button3);
			stackLayout5.Children.Add(grid2);
			frame.SetValue(ContentView.ContentProperty, stackLayout5);
			loginPage.SetValue(BasePopup.ContentProperty, frame);
		}

		private void __InitComponentRuntime()
		{
			this.LoadFromXaml(typeof(LoginPage2));
			QuickLogin = this.FindByName<Label>("QuickLogin");
			InputUserSwitch = this.FindByName<Xamarin.Forms.Switch>("InputUserSwitch");
			InputUserName = this.FindByName<Label>("InputUserName");
			UserName = this.FindByName<Xamarin.Forms.Entry>("UserName");
			PasswordName = this.FindByName<Label>("PasswordName");
			Password = this.FindByName<Xamarin.Forms.Entry>("Password");
			ConfirmPasswordName = this.FindByName<Label>("ConfirmPasswordName");
			ConfirmPassword = this.FindByName<Xamarin.Forms.Entry>("ConfirmPassword");
			InputValidCode = this.FindByName<Label>("InputValidCode");
			ValidCode = this.FindByName<Xamarin.Forms.Entry>("ValidCode");
			VerifyCmd = this.FindByName<Xamarin.Forms.Button>("VerifyCmd");
			DisplaySwitch = this.FindByName<Xamarin.Forms.Switch>("DisplaySwitch");
			LogCommand = this.FindByName<Xamarin.Forms.Button>("LogCommand");
			ExitCommand = this.FindByName<Xamarin.Forms.Button>("ExitCommand");
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	[XamlFilePath("MapPage.xaml")]
	public class MapPage : ContentPage
	{
		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.WebView webView;

		public MapPage()
		{
			MapPage mapPage = this;
			InitializeComponent();
			double vculng = 0.0;
			double vculat = 0.0;
			double lng = 0.0;
			double lat = 0.0;
			GetCurrentMap();
			Device.StartTimer(TimeSpan.FromMilliseconds(500.0), delegate
			{
				if (App.vculng != vculng || App.vculat != vculat || App.userlng != lng || App.userlat != lat)
				{
					vculat = App.vculat;
					vculng = App.vculng;
					lng = App.userlng;
					lat = App.userlat;
					mapPage.webView.Eval("javascript:callJS(" + vculng + "," + vculat + "," + lng + "," + lat + ")");
				}
				return true;
			});
		}

		private async void OnBackButtonClicked(object sender, EventArgs e)
		{
			await base.Navigation.PopModalAsync();
		}

		private async void OnForwardButtonClicked(object sender, EventArgs e)
		{
			await base.Navigation.PopModalAsync();
		}

		private void GetCurrentMap()
		{
			HtmlWebViewSource htmlWebViewSource = new HtmlWebViewSource();
			htmlWebViewSource.Html = "<html>\n<head>\n<meta charset = \"utf-8\" >\n<meta http - equiv = \"X-UA-Compatible\" content = \"IE=edge\" >\n<meta name = \"viewport\" content = \"initial-scale=1.0, user-scalable=no, width=device-width\" >\n<title> AMap JSAPI Loader</title>\n    <style>\n        html, body, #container\n        {\n        height: 100%;\n        width: 100%;\n        margin: 0;\n        }\n    </style>\n</head>\n<body>\n<div id=\"container\" tabindex=\"0\"></div>\n<script type=\"text/javascript\" src=\"https://webapi.amap.com/maps?v=1.4.15&key=704bffe66e6cefd4502224883cce8817\"></script>\n<script  type=\"text/javascript\">\nvar map;\n    map = new AMap.Map(\"container\", {\n      resizeEnable: true,\n      center: [" + App.vculng + "," + App.vculat + "],\n      zoom: 17\n    });\n    var markvcu=new AMap.Marker({position:map.getCenter(),icon:'http://182.92.233.85:6868/image/MAPICO.ico'});\n    var markuser=new AMap.Marker({position:map.getCenter(),icon:'http://182.92.233.85:6868/image/MAN.ico',offset: new AMap.Pixel(0, 0)});\n    markvcu.setMap(map);\n    markuser.setMap(map);\n    function callJS(lng,lat,userlng,userlat){\n        map.panTo([lng,lat]);\n        markvcu.setPosition([lng,lat]);\n        markuser.setPosition([userlng,userlat]);\n    }\n</script>\n</body>\n</html>";
			webView.Source = htmlWebViewSource;
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			if (ResourceLoader.IsEnabled && ResourceLoader.CanProvideContentFor(new ResourceLoader.ResourceLoadingQuery
			{
				AssemblyName = typeof(MapPage).GetTypeInfo().Assembly.GetName(),
				ResourcePath = "MapPage.xaml",
				Instance = this
			}))
			{
				__InitComponentRuntime();
				return;
			}
			if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
			{
				__InitComponentRuntime();
				return;
			}
			Xamarin.Forms.WebView webView;
			VisualDiagnostics.RegisterSourceInfo(webView = new Xamarin.Forms.WebView(), new Uri("MapPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 8, 14);
			ColumnDefinition columnDefinition;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition = new ColumnDefinition(), new Uri("MapPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 11, 22);
			ColumnDefinition columnDefinition2;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition2 = new ColumnDefinition(), new Uri("MapPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 12, 22);
			Xamarin.Forms.Button button;
			VisualDiagnostics.RegisterSourceInfo(button = new Xamarin.Forms.Button(), new Uri("MapPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 15, 18);
			Xamarin.Forms.Button button2;
			VisualDiagnostics.RegisterSourceInfo(button2 = new Xamarin.Forms.Button(), new Uri("MapPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 16, 18);
			Grid grid;
			VisualDiagnostics.RegisterSourceInfo(grid = new Grid(), new Uri("MapPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 9, 14);
			StackLayout stackLayout;
			VisualDiagnostics.RegisterSourceInfo(stackLayout = new StackLayout(), new Uri("MapPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 7, 12);
			MapPage mapPage;
			VisualDiagnostics.RegisterSourceInfo(mapPage = this, new Uri("MapPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 2, 2);
			NameScope nameScope = (NameScope)(NameScope.GetNameScope(mapPage) ?? new NameScope());
			NameScope.SetNameScope(mapPage, nameScope);
			((INameScope)nameScope).RegisterName("webView", (object)webView);
			if (webView.StyleId == null)
			{
				webView.StyleId = "webView";
			}
			this.webView = webView;
			stackLayout.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
			stackLayout.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
			webView.SetValue(Xamarin.Forms.WebView.SourceProperty, new WebViewSourceTypeConverter().ConvertFromInvariantString("https://dotnet.microsoft.com/zh-cn/apps/xamarin"));
			webView.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 1000.0);
			webView.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 1000.0);
			stackLayout.Children.Add(webView);
			columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
			columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
			button.SetValue(Xamarin.Forms.Button.TextProperty, "<<");
			button.Clicked += mapPage.OnBackButtonClicked;
			button.SetValue(Grid.ColumnProperty, 0);
			grid.Children.Add(button);
			button2.SetValue(Xamarin.Forms.Button.TextProperty, ">>");
			button2.Clicked += mapPage.OnForwardButtonClicked;
			button2.SetValue(Grid.ColumnProperty, 1);
			grid.Children.Add(button2);
			stackLayout.Children.Add(grid);
			mapPage.SetValue(ContentPage.ContentProperty, stackLayout);
		}

		private void __InitComponentRuntime()
		{
			this.LoadFromXaml(typeof(MapPage));
			webView = this.FindByName<Xamarin.Forms.WebView>("webView");
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	public class Record
	{
		public float Speed { get; set; }

		public double Lng { get; set; }

		public double Lat { get; set; }

		public float Mileage { get; set; }

		public int Consumepower { get; set; }
	}
	public class RecordData
	{
		public string DriveDay { get; set; }

		public string DriveTime { get; set; }

		public float DriveMaxSpeed { get; set; }

		public int TotalTimes { get; set; }

		public int TotalConsumePower { get; set; }

		public float TotalDistance { get; set; }

		public List<Record> Records { get; set; }
	}
	public class DayGroup : List<RecordData>
	{
		public string Day { get; private set; }

		public DayGroup(string day, List<RecordData> animals)
			: base((IEnumerable<RecordData>)animals)
		{
			Day = day;
		}
	}
	[XamlFilePath("MonthRecordPage.xaml")]
	public class MonthRecordPage : ContentPage
	{
		public MonthData month;

		public string drivingrecordfile;

		public int timecount = 100;

		public int status;

		public string[] rcvfiles;

		public string[] files;

		public int havefiles;

		public int fileindex;

		public string monthstr = "";

		public bool ComListIsRefreshing;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TrackRecord;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.ListView listViewDay;

		public List<DayGroup> DayRecords { get; private set; } = new List<DayGroup>();

		public bool ReadRecord(string filename)
		{
			if (!File.Exists(filename))
			{
				return false;
			}
			try
			{
				StreamReader streamReader = File.OpenText(filename);
				RecordData recordData = new RecordData();
				recordData.Records = new List<Record>();
				float num = 0f;
				float num2 = 0f;
				int num3 = 0;
				bool flag = false;
				string text;
				while ((text = streamReader.ReadLine()) != null)
				{
					flag = true;
					string[] array = text.Split(new char[1] { ',' });
					if (array.Length < 5)
					{
						continue;
					}
					try
					{
						Record record = new Record();
						record.Speed = Convert.ToInt32(array[0]) / 10;
						if (num2 < record.Speed)
						{
							num2 = record.Speed;
						}
						record.Lat = Convert.ToDouble(array[1]);
						record.Lng = Convert.ToDouble(array[2]);
						Convert.ToDouble(array[3]);
						if (record.Lat != 0.0 && record.Lng != 0.0 && !(record.Lat > 90.0) && !(record.Lat < -90.0))
						{
							record.Mileage = record.Speed * 4f / 3600f;
							num += record.Mileage;
							record.Consumepower = Convert.ToInt32(array[4]);
							num3 += record.Consumepower;
							recordData.Records.Add(record);
						}
					}
					catch (Exception)
					{
					}
				}
				if (recordData.Records.Count > 0)
				{
					recordData.TotalDistance = num;
					recordData.DriveMaxSpeed = num2;
					text = filename.Substring(filename.LastIndexOf('/') + 9, 6);
					recordData.DriveTime = text.Substring(0, 2) + ":" + text.Substring(2, 2) + ":" + text.Substring(4, 2);
					recordData.TotalTimes = recordData.Records.Count / 15;
					if (recordData.Records.Count % 15 > 0)
					{
						recordData.TotalTimes++;
					}
					recordData.TotalConsumePower = num3 / 40;
					text = filename.Substring(filename.LastIndexOf('/') + 1, 8);
					string text2 = (recordData.DriveDay = text.Substring(0, 4) + "-" + text.Substring(4, 2) + "-" + text.Substring(6, 2));
					bool flag2 = false;
					foreach (DayGroup dayRecord in DayRecords)
					{
						if (dayRecord.Day == text2)
						{
							flag2 = true;
							dayRecord.Add(recordData);
						}
					}
					if (!flag2)
					{
						DayGroup dayGroup = new DayGroup(text2, new List<RecordData>());
						dayGroup.Add(recordData);
						DayRecords.Add(dayGroup);
					}
				}
				else if (!flag)
				{
					File.Delete(filename);
				}
			}
			catch (Exception)
			{
			}
			return true;
		}

		public MonthRecordPage(MonthData a)
		{
			InitializeComponent();
			month = a;
			if (App.CN)
			{
				TrackRecord.Text = "VCU " + App.currentvcudeviceid + " " + a.yearmonth + " ∆Ô––º«¬º";
			}
			else
			{
				TrackRecord.Text = "VCU " + App.currentvcudeviceid + " " + a.yearmonth + " Driving Record";
			}
			if (App.currentvcudeviceid == "00000000")
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("Œ¥∞Û∂®÷–øÿ");
				}
				else
				{
					UserDialogs.Instance.Alert("No VCU bound");
				}
				return;
			}
			monthstr = a.yy + a.mm.ToString("00");
			string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), App.currentvcudeviceid + monthstr);
			if (!Directory.Exists(path))
			{
				Directory.CreateDirectory(path);
			}
			else
			{
				files = Directory.GetFiles(path, "*.txt");
				Array.Sort(files);
				for (int num = files.Length - 1; num >= 0; num--)
				{
					ReadRecord(files[num]);
				}
			}
			MessagingCenter.Send(this, "SendMqttlistss", monthstr);
			timecount = 0;
			listViewDay.ItemsSource = DayRecords;
			MessagingCenter.Subscribe(this, "RecvMqttlistss", delegate(ConnectPage sender, string arg)
			{
				if (arg.Length >= 8)
				{
					rcvfiles = arg.Substring(1).Split(new char[1] { '/' });
					havefiles = rcvfiles.Length;
				}
			});
			MessagingCenter.Subscribe(this, "RecvMqttfile", delegate(ConnectPage sender, string arg)
			{
				ReadRecord(arg);
				timecount = 100;
			});
			Device.StartTimer(TimeSpan.FromMilliseconds(400.0), delegate
			{
				switch (status)
				{
				case 0:
					if (havefiles > 0)
					{
						status = 1;
					}
					break;
				case 1:
					if (files == null)
					{
						MessagingCenter.Send(this, "SendMqttrecord", monthstr + "/" + rcvfiles[fileindex++]);
						if (fileindex >= rcvfiles.Length)
						{
							status = 3;
						}
						else
						{
							status = 2;
						}
					}
					else
					{
						do
						{
							string text = rcvfiles[fileindex++];
							bool flag = false;
							for (int i = 0; i < files.Length; i++)
							{
								if (files[i].Contains(text))
								{
									flag = true;
									break;
								}
							}
							if (!flag)
							{
								MessagingCenter.Send(this, "SendMqttrecord", monthstr + "/" + text);
								if (fileindex >= rcvfiles.Length)
								{
									status = 3;
								}
								else
								{
									status = 2;
								}
							}
							else if (fileindex >= rcvfiles.Length)
							{
								status = 4;
							}
							else
							{
								status = 1;
							}
						}
						while (status == 1);
					}
					timecount = 0;
					break;
				case 2:
					if (timecount < 2)
					{
						timecount++;
					}
					else
					{
						listViewDay.ItemsSource = DayRecords;
						status = 1;
					}
					break;
				case 3:
					if (timecount < 25)
					{
						timecount++;
					}
					else
					{
						status = 4;
					}
					break;
				case 4:
					listViewDay.ItemsSource = DayRecords;
					havefiles = 0;
					status = 5;
					break;
				}
				return true;
			});
		}

		private async void OnBackButtonClicked(object sender, EventArgs e)
		{
			await base.Navigation.PopModalAsync();
		}

		private async void OnForwardButtonClicked(object sender, EventArgs e)
		{
			await base.Navigation.PopModalAsync();
		}

		private async void listViewDay_ItemTapped(object sender, ItemTappedEventArgs e)
		{
			RecordData a = (RecordData)e.Item;
			await base.Navigation.PushModalAsync(new SegRecordPage(a));
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			this.LoadFromXaml(typeof(MonthRecordPage));
			TrackRecord = this.FindByName<Label>("TrackRecord");
			listViewDay = this.FindByName<Xamarin.Forms.ListView>("listViewDay");
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	[XamlFilePath("MyWebPage.xaml")]
	public class MyWebPage : ContentPage
	{
		public int index;

		public int deviceid;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.WebView webView;

		public MyWebPage(string URL)
		{
			InitializeComponent();
			webView.Source = URL;
		}

		private async void OnBackButtonClicked(object sender, EventArgs e)
		{
			if (webView.CanGoBack)
			{
				webView.GoBack();
			}
			else
			{
				await base.Navigation.PopModalAsync();
			}
		}

		private void OnForwardButtonClicked(object sender, EventArgs e)
		{
			if (webView.CanGoForward)
			{
				webView.GoForward();
			}
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			if (ResourceLoader.IsEnabled && ResourceLoader.CanProvideContentFor(new ResourceLoader.ResourceLoadingQuery
			{
				AssemblyName = typeof(MyWebPage).GetTypeInfo().Assembly.GetName(),
				ResourcePath = "MyWebPage.xaml",
				Instance = this
			}))
			{
				__InitComponentRuntime();
				return;
			}
			if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
			{
				__InitComponentRuntime();
				return;
			}
			Xamarin.Forms.WebView webView;
			VisualDiagnostics.RegisterSourceInfo(webView = new Xamarin.Forms.WebView(), new Uri("MyWebPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 8, 14);
			ColumnDefinition columnDefinition;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition = new ColumnDefinition(), new Uri("MyWebPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 11, 22);
			ColumnDefinition columnDefinition2;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition2 = new ColumnDefinition(), new Uri("MyWebPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 12, 22);
			Xamarin.Forms.Button button;
			VisualDiagnostics.RegisterSourceInfo(button = new Xamarin.Forms.Button(), new Uri("MyWebPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 15, 18);
			Xamarin.Forms.Button button2;
			VisualDiagnostics.RegisterSourceInfo(button2 = new Xamarin.Forms.Button(), new Uri("MyWebPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 16, 18);
			Grid grid;
			VisualDiagnostics.RegisterSourceInfo(grid = new Grid(), new Uri("MyWebPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 9, 14);
			StackLayout stackLayout;
			VisualDiagnostics.RegisterSourceInfo(stackLayout = new StackLayout(), new Uri("MyWebPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 7, 10);
			MyWebPage myWebPage;
			VisualDiagnostics.RegisterSourceInfo(myWebPage = this, new Uri("MyWebPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 2, 2);
			NameScope nameScope = (NameScope)(NameScope.GetNameScope(myWebPage) ?? new NameScope());
			NameScope.SetNameScope(myWebPage, nameScope);
			((INameScope)nameScope).RegisterName("webView", (object)webView);
			if (webView.StyleId == null)
			{
				webView.StyleId = "webView";
			}
			this.webView = webView;
			webView.SetValue(Xamarin.Forms.WebView.SourceProperty, new WebViewSourceTypeConverter().ConvertFromInvariantString("https://dotnet.microsoft.com/zh-cn/apps/xamarin"));
			webView.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 1000.0);
			webView.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 1000.0);
			stackLayout.Children.Add(webView);
			columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
			columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
			button.SetValue(Xamarin.Forms.Button.TextProperty, "<<");
			button.Clicked += myWebPage.OnBackButtonClicked;
			button.SetValue(Grid.ColumnProperty, 0);
			grid.Children.Add(button);
			button2.SetValue(Xamarin.Forms.Button.TextProperty, ">>");
			button2.Clicked += myWebPage.OnForwardButtonClicked;
			button2.SetValue(Grid.ColumnProperty, 1);
			grid.Children.Add(button2);
			stackLayout.Children.Add(grid);
			myWebPage.SetValue(ContentPage.ContentProperty, stackLayout);
		}

		private void __InitComponentRuntime()
		{
			this.LoadFromXaml(typeof(MyWebPage));
			webView = this.FindByName<Xamarin.Forms.WebView>("webView");
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	[XamlFilePath("ParaPage.xaml")]
	public class ParaPage : ContentPage
	{
		private SKPaint blackFillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Black
		};

		private SKPaint whiteStrokePaint = new SKPaint
		{
			Style = SKPaintStyle.Stroke,
			Color = SKColors.White,
			StrokeWidth = 2f,
			StrokeCap = SKStrokeCap.Round,
			IsAntialias = true
		};

		private SKPaint whiteTextPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.White,
			StrokeWidth = 1f,
			TextSize = 16f,
			StrokeCap = SKStrokeCap.Round,
			IsAntialias = true
		};

		private SKPaint yellowTextPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Yellow,
			StrokeWidth = 1f,
			TextSize = 20f,
			StrokeCap = SKStrokeCap.Round,
			IsAntialias = true
		};

		private SKPaint backgroundFillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill
		};

		private IProgressDialog progress;

		private SKBitmap controller_bitmap;

		private SKBitmap controller2_bitmap;

		private SKBitmap controller3_bitmap;

		private SKBitmap controller4_bitmap;

		private SKBitmap controller5_bitmap;

		private SKBitmap ewm_bitmap;

		private int rcv_LowSpeedPhaseCurr;

		private int rcv_MidSpeedPhaseCurr;

		private int serialrcvstat;

		private int rcv_FollowConfig;

		private int rcv_ENMaxLineCurr;

		private int rcv_ENMaxPhaseCurr;

		private byte[] bstr = new byte[20];

		private char rcv_kzqVersion0 = '1';

		private char rcv_kzqVersion1 = '0';

		private int rcv_SoftVer = 1;

		private int rcv_RatedVoltage = 144;

		private int rcv_RatedPower = 20000;

		private int rcv_RatedPower100;

		private int rcv_MOTORDIA = 88;

		private int rcv_ParaIndex = 51;

		private int rcv_Bmq_Hall;

		private int rcv_LowSpeed;

		private int rcv_MidSpeed;

		private int rcv_MaxSpeed;

		private int rcv_MaxLineCurr = 999;

		private int rcv_MaxPhaseCurr = 9999;

		private byte cfg11h = 64;

		private byte cfg11l;

		private byte cfg50l;

		private byte cfg50h;

		private byte cfg51l;

		private byte cfg51h;

		private byte cfg26l;

		private byte cfg26h;

		private int rcv_BstXhBcP;

		private int rcv_FwReSdhSdl;

		private int rcv_ChgFdSeatVol;

		private int rcv_SpdLmt_sel;

		private int rcv_OneKey_sel;

		private int rcv_anglelearn;

		private char rcv_SpecialCode;

		private int rcv_LowSpeedLineCurr;

		private int rcv_MidSpeedLineCurr;

		private float rcv_LowVolProtect;

		private float rcv_LowVolRestore;

		private int rcv_Series;

		private int rcv_OverChargeCurrent;

		private int rcv_OverDisChargeCurrent;

		private int min;

		private int hour;

		private byte cfg190l;

		private byte cfg190h;

		private int rcv_PolePairs = 4;

		private int rcv_StopBackCurr;

		private int[] FlashReadAddr = new int[55]
		{
			226, 232, 238, 0, 6, 12, 18, 226, 232, 238,
			24, 30, 36, 42, 226, 232, 238, 48, 93, 99,
			105, 226, 232, 238, 124, 130, 136, 142, 226, 232,
			238, 148, 154, 160, 166, 226, 232, 238, 172, 178,
			184, 190, 226, 232, 238, 196, 202, 208, 226, 232,
			238, 214, 220, 244, 250
		};

		private byte[] crctablelo = new byte[256]
		{
			0, 192, 193, 1, 195, 3, 2, 194, 198, 6,
			7, 199, 5, 197, 196, 4, 204, 12, 13, 205,
			15, 207, 206, 14, 10, 202, 203, 11, 201, 9,
			8, 200, 216, 24, 25, 217, 27, 219, 218, 26,
			30, 222, 223, 31, 221, 29, 28, 220, 20, 212,
			213, 21, 215, 23, 22, 214, 210, 18, 19, 211,
			17, 209, 208, 16, 240, 48, 49, 241, 51, 243,
			242, 50, 54, 246, 247, 55, 245, 53, 52, 244,
			60, 252, 253, 61, 255, 63, 62, 254, 250, 58,
			59, 251, 57, 249, 248, 56, 40, 232, 233, 41,
			235, 43, 42, 234, 238, 46, 47, 239, 45, 237,
			236, 44, 228, 36, 37, 229, 39, 231, 230, 38,
			34, 226, 227, 35, 225, 33, 32, 224, 160, 96,
			97, 161, 99, 163, 162, 98, 102, 166, 167, 103,
			165, 101, 100, 164, 108, 172, 173, 109, 175, 111,
			110, 174, 170, 106, 107, 171, 105, 169, 168, 104,
			120, 184, 185, 121, 187, 123, 122, 186, 190, 126,
			127, 191, 125, 189, 188, 124, 180, 116, 117, 181,
			119, 183, 182, 118, 114, 178, 179, 115, 177, 113,
			112, 176, 80, 144, 145, 81, 147, 83, 82, 146,
			150, 86, 87, 151, 85, 149, 148, 84, 156, 92,
			93, 157, 95, 159, 158, 94, 90, 154, 155, 91,
			153, 89, 88, 152, 136, 72, 73, 137, 75, 139,
			138, 74, 78, 142, 143, 79, 141, 77, 76, 140,
			68, 132, 133, 69, 135, 71, 70, 134, 130, 66,
			67, 131, 65, 129, 128, 64
		};

		private byte[] crctablehi = new byte[256]
		{
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 0, 193, 129, 64, 1, 192,
			128, 65, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 0, 193,
			129, 64, 1, 192, 128, 65, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 0, 193,
			129, 64, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 1, 192, 128, 65, 0, 193,
			129, 64, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 0, 193, 129, 64, 1, 192,
			128, 65, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 0, 193, 129, 64, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			1, 192, 128, 65, 0, 193, 129, 64, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 1, 192, 128, 65, 0, 193,
			129, 64, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64
		};

		private int rcv_GPara0;

		private string prints;

		private string m_prints;

		private int buffsize = 256;

		private byte[] recvBuff = new byte[256];

		private char rcv_CustomCode0;

		private char rcv_CustomCode1;

		private int rcv_BattRatedCap;

		private byte keystat0;

		private byte keystat1;

		private int rcv_ParkConfig;

		private int controlviewStat;

		private int controlviewDelaycnt;

		private char m_ParaIndex2;

		private char m_ParaIndex3;

		private float mx;

		private float mr;

		private int[] invpintable = new int[16]
		{
			0, 10, 7, 3, 8, 6, 2, 4, 12, 13,
			1, 9, 5, 11, 13, 13
		};

		private int rcv_MorseCode;

		private int rcv_AccCoeff;

		private int rcv_ThrottleInsert;

		private int rcv_RatedSpeed;

		private int rcv_CustomMaxLineCurr = 999;

		private int rcv_CustomMaxPhaseCurr = 9999;

		private int stageDH = 1;

		private int stageDM;

		private int stageDL;

		private int stageDHSpeed;

		private int stageDMSpeed;

		private int stageDLSpeed;

		private int rcv_RelayDelay;

		private string[] PINNameCN = new string[16]
		{
			" ∂± ≥£±’", " ∂± PIN2", " ∂± PIN3", " ∂± PIN5", " ∂± PIN8", " ∂± PIN9", " ∂± PIN14", " ∂±  PIN15", " ∂± PIN17", " ∂± PIN18",
			" ∂± PIN24", " ∂± PD1", " ∂± PB4", " ∂± Œﬁ–ß", " ∂± –≠“È", " ∂± Œﬁ–ß"
		};

		private string[] PINNameEN = new string[16]
		{
			"Discover NC", "Discover PIN2", "Discover PIN3", "Discover PIN5", "Discover PIN8", "Discover PIN9", "Discover PIN14", "Discover PIN15", "Discover PIN17", "Discover PIN18",
			"Discover PIN24", "Discover PD1", "Discover PB4", "Discover None", "Discover  PRO", "Discover None"
		};

		private string[] SPModeNameCN = new string[16]
		{
			" 0-Ωˆ∏ﬂÀŸ", " 1-º”ºıµµ", " 2-µ„∂Ø∏ﬂµÕÀŸ", " 3-µ„∂ØµÕ÷–ÀŸ", " 4-µ„∂Ø»˝ÀŸµÕ", " 5-µ„∂Ø»˝ÀŸ÷–", " 6-µ„∂Ø»˝ÀŸ∏ﬂ", " 7-µ„∂ØÀƒÀŸµÕ", " 8-µ„∂ØÀƒÀŸ2", " 9-µ„∂ØÀƒÀŸ3",
			"10-µ„∂ØÀƒÀŸ∏ﬂ", "11-≤¶∂Ø»˝ÀŸ", "12-¥Æø⁄µ≤Œª", "13-CANµ≤Œª", "14-Œﬁ–ß", "15-Œﬁ–ß"
		};

		private string[] SPModeNameEN = new string[16]
		{
			" 0-HighOnly", " 1-AddDec", " 2-ButtonHighLow", " 3-ButtonLowMid", " 4-Button3SpeedLow", " 5-Button3SpeedMid", " 6-Button3SpeedHigh", " 7-Button4SpeedLow", " 8-Button4Speed2", " 9-Button4Speed3",
			"10-Button4SpeedHigh", "11-Line3Speed", "12-CommGear", "13-CANGear", "14-Invalid", "14-Invalid"
		};

		private int rcv_NoCanCnt;

		private int rcv_TaRlB9D0SP;

		private byte rcv_Arg2;

		private string[] dispstrCN = new string[8] { "Pµµ", "±ﬂ≥≈", "∫ÛÕÀ", "∏ﬂÀŸµµ+µµ", "µÕÀŸµµ-µµ", "—≤∫Ω", "◊¯Õ∞", "◊§≥µ" };

		private string[] dispstrEN = new string[8] { "P", "BC", "RE", "SDH Acc Gear", "SDL Dec Gear", "Cruise", "Seat", "◊§≥µ" };

		private string[] strvalidCN = new string[2] { "À…ø™:Œﬁ–ß", "∞¥œ¬:”––ß" };

		private string[] strvalidEN = new string[2] { "Off:Invalid", "ON:Valid" };

		private int analyzetype;

		private int analyzet;

		private int analyzenum;

		private bool hasprogess;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid girdall;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.ScrollView DetailView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView controllerView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RowText0;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelFactoryName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelTypeName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelType;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelPowerName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelPower;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelCurrName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView ewmView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelNumber;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CustomCode;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MorseCodeName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowDateTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid DateTimeGrid;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelDate;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BasePara;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DIRName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DIRDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Switch DIRStat;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RatedVolName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RatedVolDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LimitWayName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LimitWayDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label EnergyBackName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label EnergyBackDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SpeedPara;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DHName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Slider DHNameS;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DMName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Slider DMNameS;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DLName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Slider DLNameS;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DHSpeedName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Slider DHSpeedNameS;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DMSpeedName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Slider DMSpeedNameS;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DLSpeedName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Slider DLSpeedNameS;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BaseFunction;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label XHPIN;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label XHName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label XHDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Switch XHStat;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PPIN;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PGearName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PGearDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Switch PGear;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AutoBackPName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AutoBackPDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Switch AutoBackPStat;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SDHPIN;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SDHName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SDHDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SDLPIN;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SDLName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SDLDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label REPIN;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label REGearName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label REGearDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Switch REGear;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ZuotongPIN;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ZuotongName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ZuotongDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Switch Zuotong;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TuixingName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TuixingDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Switch TuixingS;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BCPIN;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BCName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BCDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Switch BCStat;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label GearRememberName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label GearRememberDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Switch GearRememberS;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ParkName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ParkDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TCSName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TCSDsName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button ResetName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button SaveName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button ParaMode;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RcvFrames;

		private void LoadSimpleXAML()
		{
			Grid grid = new Grid
			{
				VerticalOptions = LayoutOptions.FillAndExpand,
				BackgroundColor = Color.White,
				RowDefinitions = 
				{
					new RowDefinition
					{
						Height = new GridLength(93.0, GridUnitType.Star)
					},
					new RowDefinition
					{
						Height = new GridLength(7.0, GridUnitType.Star)
					}
				}
			};
			Grid view = new Grid
			{
				BackgroundColor = Color.White,
				ColumnDefinitions = 
				{
					new ColumnDefinition
					{
						Width = new GridLength(18.0, GridUnitType.Star)
					},
					new ColumnDefinition
					{
						Width = new GridLength(18.0, GridUnitType.Star)
					},
					new ColumnDefinition
					{
						Width = new GridLength(40.0, GridUnitType.Star)
					},
					new ColumnDefinition
					{
						Width = new GridLength(24.0, GridUnitType.Star)
					}
				}
			};
			SKCanvasView sKCanvasView = new SKCanvasView
			{
				HeightRequest = 120.0,
				WidthRequest = 180.0
			};
			sKCanvasView.PaintSurface += controllerView_PaintSurface;
			StackLayout stackLayout = new StackLayout();
			stackLayout.Children.Add(sKCanvasView);
			Label item = new Label
			{
				TextColor = Color.SaddleBrown,
				BackgroundColor = Color.LightGray,
				HorizontalTextAlignment = TextAlignment.Center,
				FontSize = Device.GetNamedSize(NamedSize.Medium, typeof(Label)),
				VerticalTextAlignment = TextAlignment.Center
			};
			stackLayout.Children.Add(item);
			Xamarin.Forms.ScrollView view2 = new Xamarin.Forms.ScrollView
			{
				Content = stackLayout
			};
			grid.Children.Add(view2, 0, 0);
			grid.Children.Add(view, 1, 0);
			base.Content = grid;
		}

		public ParaPage()
		{
			InitializeComponent();
			controlviewDelaycnt = 0;
			controlviewDelaycnt = 0;
			rcv_CustomCode0 = 'Y';
			rcv_CustomCode1 = 'Q';
			rcv_RatedVoltage = 144;
			mx = 200f;
			mr = 0f;
			cfg190l = 0;
			cfg190h = 0;
			rcv_AccCoeff = 0;
			int rcvframe = 0;
			rcv_GPara0 = 8192;
			if (App.CN)
			{
				ModelDate.Text = "»’∆⁄";
				ModelTime.Text = " ±º‰";
				RatedVolName.Text = "∂Ó∂®µÁ—π";
				DIRName.Text = "µÁª˙∑ΩœÚ∑≠◊™";
				LimitWayName.Text = "ø˜µÁøÿ÷∆ƒ£ Ω";
				EnergyBackName.Text = "ƒ‹¡øªÿ¿°";
				BasePara.Text = "ª˘±æ≤Œ ˝";
				SpeedPara.Text = "»˝µµÀŸ∂»≤Œ ˝";
				BaseFunction.Text = "π¶ƒ‹ø™πÿ";
				XHName.Text = "—≤∫Ωπ¶ƒ‹";
				SDHName.Text = "∏ﬂÀŸΩ≈µ„∂Øº”µµ";
				SDLName.Text = "µÕÀŸΩ≈µ„∂Øºıµµ";
				PGearName.Text = "Pµµπ¶ƒ‹";
				REGearName.Text = "∫ÛÕÀµµπ¶ƒ‹";
				REGearDsName.Text = "∫ÛÕÀµµπ¶ƒ‹ø™∆Ù◊¥Ã¨";
				AutoBackPName.Text = "◊‘∂ØªÿPµµπ¶ƒ‹";
				ZuotongName.Text = "◊¯Õ∞π¶ƒ‹";
				TuixingName.Text = "÷˙¡¶Õ∆––π¶ƒ‹";
				BCName.Text = "±ﬂ≥≈π¶ƒ‹";
				GearRememberName.Text = "µµŒªº«“‰π¶ƒ‹";
				ParkName.Text = "◊§≥µπ¶ƒ‹";
				XHDsName.Text = "—≤∫Ωπ¶ƒ‹ø™∆Ù◊¥Ã¨";
				PGearDsName.Text = "Pµµπ¶ƒ‹ø™∆Ù◊¥Ã¨";
				AutoBackPDsName.Text = "Õ£≥µø’œ– ±◊‘∂ØªÿPµµπ¶ƒ‹ø™∆Ù◊¥Ã¨";
				ZuotongDsName.Text = "◊¯Õ∞∏–”¶π¶ƒ‹ø™∆Ù◊¥Ã¨";
				TuixingDsName.Text = "÷˙¡¶Õ∆––π¶ƒ‹ø™∆Ù◊¥Ã¨";
				BCDsName.Text = "±ﬂ≥≈ºÏ≤‚π¶ƒ‹ø™∆Ù◊¥Ã¨";
				GearRememberDsName.Text = "µµŒªº«“‰π¶ƒ‹ø™∆Ù◊¥Ã¨";
				TCSName.Text = "TCSπ¶ƒ‹";
			}
			else
			{
				XHName.Text = "Cruise Function";
				PGearName.Text = "P Function";
				AutoBackPName.Text = "Auto return to P Function";
				ZuotongName.Text = "Seat Function";
				TuixingName.Text = "Assist roll Function";
				BCName.Text = "SideStand Function";
				GearRememberName.Text = "Gear Remember Function";
				ParkName.Text = "Park Function";
				SDHName.Text = "HighSpeed Push Acc";
				SDLName.Text = "LowSpeed Push Dec";
				BaseFunction.Text = "Functions";
				SpeedPara.Text = "Three speed parameters";
				BasePara.Text = "Base Paramteters";
				ModelDate.Text = "Date";
				ModelTime.Text = "Time";
				ParaMode.Text = "Nomal";
				RcvFrames.Text = "RcvFrames0";
				RatedVolName.Text = "RatedVoltage";
				DIRName.Text = "Motor Reverse Direction";
				LimitWayName.Text = "Low Power Control Mode";
				EnergyBackName.Text = "Energy feedback";
				TCSName.Text = "TCS Function";
			}
			Device.StartTimer(TimeSpan.FromMilliseconds(200.0), delegate
			{
				try
				{
					if (App.CN)
					{
						base.Title = "≤Œ ˝";
					}
					else
					{
						base.Title = "Paras";
					}
					ewmView.InvalidateSurface();
					if (App.CN)
					{
						if (App.isConnected)
						{
							if (App.rcv_NewBlueKey)
							{
								ParaMode.Text = "¥Úø™◊®“µƒ£ Ω –¬¿∂—¿";
							}
							else
							{
								ParaMode.Text = "¥Úø™◊®“µƒ£ Ω æ…¿∂—¿";
							}
						}
						else if (App.CAT1_Loggined)
						{
							ParaMode.Text = "¥Úø™◊®“µƒ£ Ω ‘⁄œﬂ";
						}
						else
						{
							ParaMode.Text = "¥Úø™◊®“µƒ£ Ω";
						}
					}
					else if (App.isConnected)
					{
						if (App.rcv_NewBlueKey)
						{
							ParaMode.Text = "Open Pro NBLE";
						}
						else
						{
							ParaMode.Text = "Open Pro OBLE";
						}
					}
					else if (App.CAT1_Loggined)
					{
						ParaMode.Text = "Open Pro Online";
					}
					else
					{
						ParaMode.Text = "Open Pro";
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Alert("ParaPage " + ex.ToString());
				}
				return true;
			});
			Device.StartTimer(TimeSpan.FromMilliseconds(40.0), delegate
			{
				try
				{
					controllerView.InvalidateSurface();
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Alert("ParaPageView " + ex.ToString());
				}
				return true;
			});
			Assembly assembly = GetType().GetTypeInfo().Assembly;
			using (Stream stream = assembly.GetManifestResourceStream("MotorNet6.images.ws2.png"))
			{
				controller_bitmap = SKBitmap.Decode(stream);
			}
			using (Stream stream2 = assembly.GetManifestResourceStream("MotorNet6.images.ws1.png"))
			{
				controller2_bitmap = SKBitmap.Decode(stream2);
			}
			using (Stream stream3 = assembly.GetManifestResourceStream("MotorNet6.images.yq.png"))
			{
				controller3_bitmap = SKBitmap.Decode(stream3);
			}
			using (Stream stream4 = assembly.GetManifestResourceStream("MotorNet6.images.kzq24.png"))
			{
				controller4_bitmap = SKBitmap.Decode(stream4);
			}
			using (Stream stream5 = assembly.GetManifestResourceStream("MotorNet6.images.curve.png"))
			{
				controller5_bitmap = SKBitmap.Decode(stream5);
			}
			using (Stream stream6 = assembly.GetManifestResourceStream("MotorNet6.images.Ewm.png"))
			{
				ewm_bitmap = SKBitmap.Decode(stream6);
			}
			MessagingCenter.Subscribe(this, "ReadParaMeter", delegate(ConnectPage sender, byte[] arg)
			{
				try
				{
					if (arg[0] == 170 && arg.Length == 16)
					{
						if ((arg[1] & 0xC0) == 128)
						{
							int num = arg[1] & 0x7F;
							if (num < 55)
							{
								int num2 = FlashReadAddr[num];
								rcvframe++;
								if (App.CN)
								{
									if (rcv_kzqVersion0 > '6')
									{
										RcvFrames.Text = rcvframe.ToString("Ω” ’÷°0");
									}
									else
									{
										RcvFrames.Text = rcvframe.ToString(" ˝æ›Ω” ’≤ªÕÍ’˚");
									}
								}
								else if (rcv_kzqVersion0 > '6')
								{
									RcvFrames.Text = rcvframe.ToString("RcvFrames0");
								}
								else
								{
									RcvFrames.Text = rcvframe.ToString("Receiving...");
								}
								switch (num2)
								{
								case 226:
									GenName();
									App.bms = false;
									rcv_Bmq_Hall = (arg[3] >> 5) & 1;
									App.rotation = (ushort)(arg[9] * 256 + arg[8]);
									break;
								case 238:
									if (hasprogess)
									{
										Analyze(arg[2], arg[3]);
									}
									break;
								case 0:
									App.gflash[0] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[1] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[2] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[3] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[4] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[5] = (ushort)(arg[13] * 256 + arg[12]);
									break;
								case 6:
								{
									App.gflash[6] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[7] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[8] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[9] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[10] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[11] = (ushort)(arg[13] * 256 + arg[12]);
									rcv_Arg2 = arg[2];
									int num3 = (arg[13] & 0x80) >> 7;
									DIRStat.IsToggled = num3 != 0;
									if (App.CN)
									{
										DIRDsName.Text = "µÁª˙∑ΩœÚ£∫" + num3;
									}
									else
									{
										DIRDsName.Text = "Motor Direction:" + num3;
									}
									cfg11l = arg[12];
									cfg11h = arg[13];
									rcv_ParkConfig = (cfg11h >> 5) & 3;
									break;
								}
								case 12:
									App.gflash[12] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[13] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[14] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[15] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[16] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[17] = (ushort)(arg[13] * 256 + arg[12]);
									break;
								case 18:
									App.gflash[18] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[19] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[20] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[21] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[22] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[23] = (ushort)(arg[13] * 256 + arg[12]);
									rcv_PolePairs = arg[6];
									rcv_MaxSpeed = arg[9] * 256 + arg[8];
									DHSpeedNameS.Value = rcv_MaxSpeed * 100 / 12000;
									rcv_RatedVoltage = (arg[13] * 256 + arg[12]) / 10;
									rcv_RatedPower = arg[11] * 256 + arg[10];
									rcv_RatedPower100 = rcv_RatedPower / 100;
									if (App.CN)
									{
										RatedVolDsName.Text = "µÁ≥ÿµƒ∂Ó∂®µÁ—π£∫" + rcv_RatedVoltage + "V";
									}
									else
									{
										RatedVolDsName.Text = "Battery's RatedVoltage:" + rcv_RatedVoltage + "V";
									}
									break;
								case 24:
									App.gflash[24] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[25] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[26] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[27] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[28] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[29] = (ushort)(arg[13] * 256 + arg[12]);
									rcv_RatedSpeed = arg[3] * 256 + arg[2];
									rcv_BattRatedCap = arg[11] * 256 + arg[10];
									rcv_MaxLineCurr = (arg[5] * 256 + arg[4]) / 4;
									cfg26l = arg[6];
									cfg26h = arg[7];
									rcv_FollowConfig = arg[6] & 3;
									break;
								case 30:
									App.gflash[30] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[31] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[32] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[33] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[34] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[35] = (ushort)(arg[13] * 256 + arg[12]);
									rcv_CustomCode0 = (char)arg[6];
									rcv_CustomCode1 = (char)arg[7];
									App.custom = rcv_CustomCode0.ToString() + rcv_CustomCode1;
									rcv_RelayDelay = arg[9] * 256 + arg[8];
									XHStat.IsToggled = ((rcv_RelayDelay >> 4) & 1) == 1;
									Zuotong.IsToggled = ((rcv_RelayDelay >> 1) & 1) == 1;
									PGear.IsToggled = ((rcv_RelayDelay >> 2) & 1) == 1;
									REGear.IsToggled = ((rcv_RelayDelay >> 14) & 1) == 1;
									BCStat.IsToggled = (rcv_RelayDelay & 1) == 1;
									AutoBackPStat.IsToggled = ((rcv_RelayDelay >> 3) & 1) == 1;
									TuixingS.IsToggled = ((rcv_RelayDelay >> 6) & 1) == 1;
									GearRememberS.IsToggled = ((rcv_RelayDelay >> 10) & 1) == 1;
									if (App.CN)
									{
										ModelDate.Text = $"»’∆⁄£∫{arg[10] + 2000}-{arg[11]}-{arg[12]}";
										ModelTime.Text = $" ±º‰£∫{arg[13]}:{min}:{hour}";
									}
									else
									{
										ModelDate.Text = $"Date:{arg[10] + 2000}-{arg[11]}-{arg[12]}";
										ModelTime.Text = $"Time:{arg[13]}:{min}:{hour}";
									}
									break;
								case 36:
									App.gflash[36] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[37] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[38] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[39] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[40] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[41] = (ushort)(arg[13] * 256 + arg[12]);
									min = arg[2];
									hour = arg[3];
									rcv_CustomMaxLineCurr = (arg[7] * 256 + arg[6]) / 4;
									rcv_CustomMaxPhaseCurr = (arg[9] * 256 + arg[8]) / 4;
									rcv_LowSpeed = arg[11] * 256 + arg[10];
									DLSpeedNameS.Value = rcv_LowSpeed * 100 / 12000;
									break;
								case 42:
									App.gflash[42] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[43] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[44] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[45] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[46] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[47] = (ushort)(arg[13] * 256 + arg[12]);
									rcv_MidSpeed = arg[3] * 256 + arg[2];
									rcv_MaxPhaseCurr = (arg[9] * 256 + arg[8]) / 4;
									DMSpeedNameS.Value = rcv_MidSpeed * 100 / 12000;
									if (rcv_CustomMaxPhaseCurr > 0)
									{
										DHNameS.Value = rcv_MaxPhaseCurr * 100 / rcv_CustomMaxPhaseCurr;
									}
									else
									{
										DHNameS.Value = 100.0;
									}
									break;
								case 48:
									App.gflash[48] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[49] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[50] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[51] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[52] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[53] = (ushort)(arg[13] * 256 + arg[12]);
									rcv_LowSpeedLineCurr = (int)((float)(arg[6] * 100) / 128f + 0.5f);
									rcv_MidSpeedLineCurr = (int)((float)(arg[7] * 100) / 128f + 0.5f);
									rcv_LowSpeedPhaseCurr = (int)((float)(arg[8] * 100) / 128f + 0.5f);
									rcv_MidSpeedPhaseCurr = (int)((float)(arg[9] * 100) / 128f + 0.5f);
									rcv_StopBackCurr = arg[3] * 256 + arg[2];
									DMNameS.Value = rcv_MidSpeedLineCurr;
									DLNameS.Value = rcv_LowSpeedLineCurr;
									cfg50l = arg[6];
									cfg50h = arg[7];
									cfg51l = arg[8];
									cfg51h = arg[9];
									break;
								case 99:
									App.gflash[54] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[55] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[56] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[57] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[58] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[59] = (ushort)(arg[13] * 256 + arg[12]);
									rcv_ENMaxLineCurr = arg[3] * 256 + arg[2];
									rcv_ENMaxPhaseCurr = arg[5] * 256 + arg[4];
									rcv_MOTORDIA = arg[6];
									break;
								case 105:
									App.gflash[60] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[61] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[62] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[63] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[64] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[65] = (ushort)(arg[13] * 256 + arg[12]);
									rcv_BstXhBcP = arg[3] * 256 + arg[2];
									rcv_FwReSdhSdl = arg[5] * 256 + arg[4];
									rcv_ChgFdSeatVol = arg[7] * 256 + arg[6];
									rcv_ParaIndex = arg[12];
									rcv_SpecialCode = (char)arg[13];
									if (rcv_SpecialCode >= '0' && rcv_SpecialCode < '\u007f')
									{
										m_ParaIndex3 = rcv_SpecialCode;
									}
									else
									{
										m_ParaIndex3 = '_';
									}
									if (rcv_ParaIndex < 10)
									{
										m_ParaIndex2 = (char)(rcv_ParaIndex + 48);
									}
									else if (rcv_ParaIndex < 20)
									{
										m_ParaIndex2 = (char)(rcv_ParaIndex + 48 - 10);
									}
									else
									{
										m_ParaIndex2 = (char)rcv_ParaIndex;
									}
									break;
								case 124:
									App.gflash[66] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[67] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[68] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[69] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[70] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[71] = (ushort)(arg[13] * 256 + arg[12]);
									break;
								case 130:
									App.gflash[72] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[73] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[74] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[75] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[76] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[77] = (ushort)(arg[13] * 256 + arg[12]);
									rcv_kzqVersion0 = (char)arg[11];
									rcv_kzqVersion1 = (char)arg[12];
									rcv_SoftVer = arg[13];
									App.HardVer = rcv_kzqVersion0;
									App.SoftVer0 = rcv_kzqVersion1;
									App.Softver1 = rcv_SoftVer;
									break;
								case 136:
									App.gflash[78] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[79] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[80] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[81] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[82] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[83] = (ushort)(arg[13] * 256 + arg[12]);
									break;
								case 142:
									App.gflash[84] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[85] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[86] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[87] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[88] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[89] = (ushort)(arg[13] * 256 + arg[12]);
									break;
								case 148:
									App.gflash[90] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[91] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[92] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[93] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[94] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[95] = (ushort)(arg[13] * 256 + arg[12]);
									break;
								case 154:
									App.gflash[96] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[97] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[98] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[99] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[100] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[101] = (ushort)(arg[13] * 256 + arg[12]);
									break;
								case 160:
								{
									App.gflash[102] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[103] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[104] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[105] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[106] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[107] = (ushort)(arg[13] * 256 + arg[12]);
									for (int j = 4; j < 14; j++)
									{
										if (arg[j] > 32 && arg[j] <= 126)
										{
											bstr[j - 4] = arg[j];
										}
										else
										{
											bstr[j - 4] = 32;
										}
									}
									serialrcvstat = 1;
									break;
								}
								case 166:
								{
									App.gflash[108] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[109] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[110] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[111] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[112] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[113] = (ushort)(arg[13] * 256 + arg[12]);
									for (int i = 2; i < 12; i++)
									{
										if (arg[i] > 32 && arg[i] <= 126)
										{
											bstr[i + 8] = arg[i];
										}
										else
										{
											bstr[i + 8] = 32;
										}
									}
									string text = Encoding.Default.GetString(bstr);
									if (serialrcvstat == 1)
									{
										App.rcv_serialNumberfoc = text.Trim();
										if (!App.ReceivedVCUFrame)
										{
											App.rcv_serialNumber = App.rcv_serialNumberfoc;
										}
										serialrcvstat = 2;
										App.hasserialnumber = 2;
									}
									break;
								}
								case 172:
									App.gflash[114] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[115] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[116] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[117] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[118] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[119] = (ushort)(arg[13] * 256 + arg[12]);
									break;
								case 178:
									App.gflash[120] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[121] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[122] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[123] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[124] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[125] = (ushort)(arg[13] * 256 + arg[12]);
									break;
								case 184:
									App.gflash[126] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[127] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[128] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[129] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[130] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[131] = (ushort)(arg[13] * 256 + arg[12]);
									rcv_GPara0 = arg[11] * 256 + arg[10];
									App.EnModify = (rcv_GPara0 >> 12) & 3;
									if ((arg[11] & 0x80) != 0)
									{
										if (!App.rcv_NewBlueKey)
										{
											App.rcv_NewBlueKey = true;
										}
									}
									else if (App.rcv_NewBlueKey)
									{
										byte[] data = new byte[8]
										{
											0,
											0,
											0,
											0,
											(byte)rcv_GPara0,
											(byte)((rcv_GPara0 >> 8) | 0x80),
											0,
											0
										};
										WriteAddr(data, 188, 2);
									}
									break;
								case 190:
									App.gflash[132] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[133] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[134] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[135] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[136] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[137] = (ushort)(arg[13] * 256 + arg[12]);
									cfg190l = arg[2];
									cfg190h = arg[3];
									rcv_AccCoeff = arg[3] >> 4;
									break;
								case 196:
									App.gflash[138] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[139] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[140] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[141] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[142] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[143] = (ushort)(arg[13] * 256 + arg[12]);
									rcv_ThrottleInsert = arg[11] * 256 + arg[10];
									break;
								case 202:
									App.gflash[144] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[145] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[146] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[147] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[148] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[149] = (ushort)(arg[13] * 256 + arg[12]);
									rcv_anglelearn = arg[2];
									rcv_SpdLmt_sel = arg[3] & 0xF;
									rcv_OneKey_sel = arg[3] >> 4;
									rcv_NoCanCnt = arg[4];
									rcv_TaRlB9D0SP = arg[5];
									break;
								case 208:
									App.gflash[150] = (ushort)(arg[3] * 256 + arg[2]);
									App.gflash[151] = (ushort)(arg[5] * 256 + arg[4]);
									App.gflash[152] = (ushort)(arg[7] * 256 + arg[6]);
									App.gflash[153] = (ushort)(arg[9] * 256 + arg[8]);
									App.gflash[154] = (ushort)(arg[11] * 256 + arg[10]);
									App.gflash[155] = (ushort)(arg[13] * 256 + arg[12]);
									break;
								}
							}
						}
						else
						{
							int num4 = 0;
							for (int k = 0; k < 14; k++)
							{
								num4 += arg[k];
							}
							if (arg[14] * 256 + arg[15] == num4)
							{
								rcvframe++;
								if (App.CN)
								{
									if (App.bms)
									{
										RcvFrames.Text = rcvframe.ToString("Ω” ’÷°0");
									}
									else if (rcv_ENMaxPhaseCurr == 401)
									{
										RcvFrames.Text = rcvframe.ToString("µ¡∞Êøÿ÷∆∆˜");
									}
									else if (rcv_kzqVersion0 > '6')
									{
										RcvFrames.Text = rcvframe.ToString("Ω” ’÷°0");
									}
									else
									{
										RcvFrames.Text = rcvframe.ToString(" ˝æ›Ω” ’≤ªÕÍ’˚");
									}
								}
								else if (App.bms)
								{
									RcvFrames.Text = rcvframe.ToString("RcvFrames0");
								}
								else if (rcv_ENMaxPhaseCurr == 401)
								{
									RcvFrames.Text = rcvframe.ToString("Piracy Controller");
								}
								else if (rcv_kzqVersion0 > '6')
								{
									RcvFrames.Text = rcvframe.ToString("RcvFrames0");
								}
								else
								{
									RcvFrames.Text = rcvframe.ToString("Receiving...");
								}
								switch (arg[1])
								{
								case 0:
									GenName();
									App.bms = false;
									rcv_FollowConfig = arg[5] & 3;
									break;
								case 8:
								{
									rcv_PolePairs = arg[10];
									int num5 = arg[11];
									DIRStat.IsToggled = num5 != 0;
									rcv_RatedVoltage = (arg[12] * 256 + arg[13]) / 10;
									if (App.CN)
									{
										DIRDsName.Text = "µÁª˙∑ΩœÚ£∫" + num5;
										RatedVolDsName.Text = "µÁ≥ÿµƒRatedVoltage:" + rcv_RatedVoltage + "V";
									}
									else
									{
										DIRDsName.Text = "MotorDirection:" + num5;
										RatedVolDsName.Text = "Battery's RatedVoltage:" + rcv_RatedVoltage + "V";
									}
									break;
								}
								case 9:
									rcv_RatedSpeed = arg[4] * 256 + arg[5];
									rcv_MaxSpeed = arg[6] * 256 + arg[7];
									rcv_MidSpeed = arg[8] * 256 + arg[9];
									DHSpeedNameS.Value = rcv_MaxSpeed * 100 / 12000;
									DMSpeedNameS.Value = rcv_MidSpeed * 100 / 12000;
									break;
								case 10:
									rcv_MaxLineCurr = (arg[2] * 256 + arg[3]) / 4;
									rcv_ParaIndex = arg[5];
									if (rcv_ParaIndex < 10)
									{
										m_ParaIndex2 = (char)(rcv_ParaIndex + 48);
										m_ParaIndex3 = '_';
									}
									else if (rcv_ParaIndex < 20)
									{
										m_ParaIndex2 = (char)(rcv_ParaIndex + 48 - 10);
										m_ParaIndex3 = 'R';
									}
									else if (rcv_ParaIndex < 58)
									{
										m_ParaIndex2 = (char)rcv_ParaIndex;
										if (rcv_SpecialCode == '\0')
										{
											m_ParaIndex3 = '_';
										}
										else
										{
											m_ParaIndex3 = rcv_SpecialCode;
										}
									}
									else if (rcv_ParaIndex < 91)
									{
										m_ParaIndex2 = (char)rcv_ParaIndex;
										m_ParaIndex3 = '_';
									}
									else
									{
										m_ParaIndex2 = (char)(rcv_ParaIndex - 32);
										m_ParaIndex3 = 'R';
									}
									rcv_MOTORDIA = arg[6];
									rcv_RatedPower100 = arg[7];
									rcv_RatedPower = arg[7] * 100;
									rcv_MaxPhaseCurr = (arg[8] * 256 + arg[9]) / 4;
									if (rcv_CustomMaxPhaseCurr > 0)
									{
										DHNameS.Value = rcv_MaxPhaseCurr * 100 / rcv_CustomMaxPhaseCurr;
									}
									else
									{
										DHNameS.Value = 100.0;
									}
									rcv_CustomMaxLineCurr = rcv_MaxLineCurr;
									rcv_CustomMaxPhaseCurr = rcv_MaxPhaseCurr;
									break;
								case 11:
									rcv_LowVolRestore = (float)(arg[8] * 256 + arg[9]) / 10f;
									rcv_LowVolProtect = (float)(arg[6] * 256 + arg[7]) / 10f;
									rcv_StopBackCurr = (arg[10] * 256 + arg[11]) / 4;
									break;
								case 12:
									rcv_SoftVer = arg[13];
									App.Softver1 = rcv_SoftVer;
									break;
								case 13:
									rcv_kzqVersion0 = (char)arg[10];
									rcv_kzqVersion1 = (char)arg[11];
									rcv_BattRatedCap = arg[7];
									App.HardVer = rcv_kzqVersion0;
									App.SoftVer0 = rcv_kzqVersion1;
									break;
								case 14:
									rcv_CustomCode0 = (char)arg[2];
									rcv_CustomCode1 = (char)arg[3];
									App.custom = rcv_CustomCode0.ToString() + rcv_CustomCode1;
									rcv_Bmq_Hall = (arg[11] >> 2) & 1;
									if (App.CN)
									{
										ModelDate.Text = $"»’∆⁄£∫{arg[5] + 2000}-{arg[6]}-{arg[7]}";
										ModelTime.Text = $" ±º‰£∫{arg[8]}:{arg[9]}:{arg[10]}";
									}
									else
									{
										ModelDate.Text = $"Date:{arg[5] + 2000}-{arg[6]}-{arg[7]}";
										ModelTime.Text = $"Time:{arg[8]}:{arg[9]}:{arg[10]}";
									}
									rcv_ParkConfig = ((arg[11] >> 1) & 1) << 1;
									rcv_LowSpeed = arg[12] * 256 + arg[13];
									DLSpeedNameS.Value = rcv_LowSpeed * 100 / 12000;
									break;
								case 15:
									if ((arg[4] & 1) != 0 && !App.rcv_NewBlueKey)
									{
										App.rcv_NewBlueKey = true;
									}
									break;
								case 18:
									if (App.bms)
									{
										m_ParaIndex2 = (char)arg[2];
										m_ParaIndex3 = (char)arg[9];
										rcv_Series = arg[8];
									}
									else
									{
										rcv_LowSpeedLineCurr = (int)((float)(arg[7] * 100) / 128f + 0.5f);
										rcv_MidSpeedLineCurr = (int)((float)(arg[8] * 100) / 128f + 0.5f);
										rcv_LowSpeedPhaseCurr = (int)((float)(arg[9] * 100) / 128f + 0.5f);
										rcv_MidSpeedPhaseCurr = (int)((float)(arg[10] * 100) / 128f + 0.5f);
										DMNameS.Value = rcv_MidSpeedLineCurr;
										DLNameS.Value = rcv_LowSpeedLineCurr;
									}
									break;
								case 19:
								{
									for (int m = 2; m < 10; m++)
									{
										if (arg[m] > 32 && arg[m] <= 126)
										{
											bstr[m - 2] = arg[m];
										}
										else
										{
											bstr[m - 2] = 32;
										}
									}
									serialrcvstat = 1;
									break;
								}
								case 20:
								{
									for (int l = 2; l < 14; l++)
									{
										if (arg[l] > 32 && arg[l] <= 126)
										{
											bstr[l + 6] = arg[l];
										}
										else
										{
											bstr[l + 6] = 32;
										}
									}
									if (serialrcvstat == 1)
									{
										App.rcv_serialNumberfoc = Encoding.Default.GetString(bstr).Trim();
										if (!App.ReceivedVCUFrame)
										{
											App.rcv_serialNumber = App.rcv_serialNumberfoc;
										}
										serialrcvstat = 2;
										App.hasserialnumber = 2;
									}
									break;
								}
								case 21:
									rcv_ENMaxLineCurr = arg[2] * 256 + arg[3];
									rcv_ENMaxPhaseCurr = arg[4] * 256 + arg[5];
									cfg190l = arg[6];
									cfg190h = arg[7];
									rcv_MorseCode = arg[8];
									break;
								case 32:
									App.bms = true;
									GenName();
									break;
								case 41:
									rcv_RatedVoltage = (arg[9] * 256 + arg[10]) / 10;
									rcv_kzqVersion0 = (char)arg[11];
									rcv_kzqVersion1 = (char)arg[12];
									rcv_SoftVer = arg[13];
									App.Softver1 = rcv_SoftVer;
									break;
								case 43:
									rcv_OverChargeCurrent = (arg[6] * 256 + arg[7]) / 10;
									rcv_OverDisChargeCurrent = (arg[8] * 256 + arg[9]) / 10;
									break;
								case 47:
									rcv_CustomCode0 = (char)arg[12];
									rcv_CustomCode1 = (char)arg[13];
									App.custom = rcv_CustomCode0.ToString() + rcv_CustomCode1;
									break;
								case 1:
								case 2:
								case 3:
								case 4:
								case 5:
								case 6:
								case 7:
								case 16:
								case 17:
								case 22:
								case 23:
								case 24:
								case 25:
								case 26:
								case 27:
								case 28:
								case 29:
								case 30:
								case 31:
								case 33:
								case 34:
								case 35:
								case 36:
								case 37:
								case 38:
								case 39:
								case 40:
								case 42:
								case 44:
								case 45:
								case 46:
								case 48:
								case 49:
								case 50:
								case 51:
								case 52:
									break;
								}
							}
						}
					}
					void GenName()
					{
						if (App.bms)
						{
							App.Mark2Old = false;
							string text2 = ((rcv_RatedVoltage >= 100) ? $"{rcv_RatedVoltage}" : $"0{rcv_RatedVoltage}");
							int num6 = rcv_ENMaxLineCurr / 4;
							string text3 = ((num6 >= 100) ? $"{num6}" : $"0{num6}");
							App.ModelName = "BMS" + rcv_CustomCode0 + rcv_CustomCode1 + text2 + text3 + m_ParaIndex2 + m_ParaIndex3 + rcv_kzqVersion0 + rcv_kzqVersion1 + rcv_SoftVer;
						}
						else
						{
							int num7 = cfg190h & 0xF;
							num7 = ((!App.NewVersion) ? rcv_MOTORDIA : ((num7 < 2) ? (rcv_MOTORDIA + 10) : ((num7 < 10) ? (rcv_MOTORDIA + num7 * 10) : 0)));
							App.MaxPower = rcv_RatedPower * 4;
							if (App.NewVersion)
							{
								App.Mark2Old = false;
							}
							else if (rcv_ENMaxPhaseCurr >= 240)
							{
								App.Mark2Old = true;
							}
							else
							{
								App.Mark2Old = false;
							}
							if (rcv_MOTORDIA % 10 == 3 || rcv_MOTORDIA % 10 == 4 || rcv_MOTORDIA % 10 == 0 || rcv_MOTORDIA % 10 == 2)
							{
								int num8 = rcv_ENMaxPhaseCurr / 4;
								if (rcv_Bmq_Hall >= 8)
								{
									App.ModelName = rcv_CustomCode0.ToString() + rcv_CustomCode1 + rcv_RatedVoltage + num8 + "P_" + num7 + "_" + m_ParaIndex2 + m_ParaIndex3 + rcv_kzqVersion0 + rcv_kzqVersion1 + rcv_SoftVer;
								}
								else if (rcv_Bmq_Hall >= 4)
								{
									App.ModelName = rcv_CustomCode0.ToString() + rcv_CustomCode1 + rcv_RatedVoltage + num8 + "Q_" + num7 + "_" + m_ParaIndex2 + m_ParaIndex3 + rcv_kzqVersion0 + rcv_kzqVersion1 + rcv_SoftVer;
								}
								else if (rcv_Bmq_Hall > 0)
								{
									App.ModelName = rcv_CustomCode0.ToString() + rcv_CustomCode1 + rcv_RatedVoltage + num8 + "B_" + num7 + "_" + m_ParaIndex2 + m_ParaIndex3 + rcv_kzqVersion0 + rcv_kzqVersion1 + rcv_SoftVer;
								}
								else
								{
									App.ModelName = rcv_CustomCode0.ToString() + rcv_CustomCode1 + rcv_RatedVoltage + num8 + "_" + num7 + "_" + m_ParaIndex2 + m_ParaIndex3 + rcv_kzqVersion0 + rcv_kzqVersion1 + rcv_SoftVer;
								}
							}
							else if (rcv_CustomCode0 == 'Y' && rcv_CustomCode1 == 'C')
							{
								string text4 = ((rcv_RatedVoltage >= 100) ? $"{rcv_RatedVoltage}" : $"0{rcv_RatedVoltage}");
								int num9 = rcv_ENMaxLineCurr / 4;
								string text5 = ((num9 >= 100) ? $"{num9}" : $"0{num9}");
								App.ModelName = rcv_CustomCode0.ToString() + rcv_CustomCode1 + "K" + text4 + text5 + m_ParaIndex2 + m_ParaIndex3 + rcv_kzqVersion0 + rcv_kzqVersion1 + rcv_SoftVer;
							}
							else if (rcv_ParaIndex > 47)
							{
								int num10 = rcv_ENMaxLineCurr / 4;
								if (rcv_Bmq_Hall >= 8)
								{
									App.ModelName = rcv_CustomCode0.ToString() + rcv_CustomCode1 + rcv_RatedVoltage + "V" + num10 + "AP_" + num7 + "_" + m_ParaIndex2 + m_ParaIndex3 + rcv_kzqVersion0 + rcv_kzqVersion1 + rcv_SoftVer;
								}
								else if (rcv_Bmq_Hall >= 4)
								{
									App.ModelName = rcv_CustomCode0.ToString() + rcv_CustomCode1 + rcv_RatedVoltage + "V" + num10 + "AQ_" + num7 + "_" + m_ParaIndex2 + m_ParaIndex3 + rcv_kzqVersion0 + rcv_kzqVersion1 + rcv_SoftVer;
								}
								else if (rcv_Bmq_Hall > 0)
								{
									App.ModelName = rcv_CustomCode0.ToString() + rcv_CustomCode1 + rcv_RatedVoltage + "V" + num10 + "AB_" + num7 + "_" + m_ParaIndex2 + m_ParaIndex3 + rcv_kzqVersion0 + rcv_kzqVersion1 + rcv_SoftVer;
								}
								else
								{
									App.ModelName = rcv_CustomCode0.ToString() + rcv_CustomCode1 + rcv_RatedVoltage + "V" + num10 + "A_" + num7 + "_" + m_ParaIndex2 + m_ParaIndex3 + rcv_kzqVersion0 + rcv_kzqVersion1 + rcv_SoftVer;
								}
							}
							else if (rcv_Bmq_Hall > 0)
							{
								App.ModelName = rcv_CustomCode0.ToString() + rcv_CustomCode1 + rcv_RatedVoltage + "V" + rcv_RatedPower100 + "_" + rcv_PolePairs + num7 + "_" + m_ParaIndex2 + m_ParaIndex3 + rcv_kzqVersion0 + rcv_kzqVersion1 + rcv_SoftVer;
							}
							else
							{
								App.ModelName = rcv_CustomCode0.ToString() + rcv_CustomCode1 + rcv_RatedVoltage + "V" + rcv_RatedPower100 + "H_" + rcv_PolePairs + num7 + "_" + m_ParaIndex2 + m_ParaIndex3 + rcv_kzqVersion0 + rcv_kzqVersion1 + rcv_SoftVer;
							}
						}
					}
				}
				catch (Exception ex)
				{
					UserDialogs.Instance.Alert("ParasS " + ex.ToString());
				}
			});
		}

		private void controllerView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			int width = e.Info.Width;
			int height = e.Info.Height;
			switch (controlviewStat)
			{
			case 0:
				if (controlviewDelaycnt == 0)
				{
					float num = Math.Min((float)info.Width / (float)controller_bitmap.Width, (float)info.Height / (float)controller_bitmap.Height);
					float num2 = (0f - num) * (float)controller_bitmap.Width / 2f;
					float num3 = (0f - num) * (float)controller_bitmap.Height / 2f;
					SKRect dest = new SKRect(num2, num3, num2 + num * (float)controller_bitmap.Width, num3 + num * (float)controller_bitmap.Height);
					canvas.Translate(width / 2, height / 2);
					canvas.DrawBitmap(controller_bitmap, dest);
					canvas.Scale((float)width / 200f);
				}
				if (controlviewDelaycnt < 100)
				{
					controlviewDelaycnt++;
					break;
				}
				controlviewDelaycnt = 0;
				controlviewStat++;
				break;
			case 1:
				if (controlviewDelaycnt == 0)
				{
					canvas.Clear();
					float num = Math.Min((float)info.Width / (float)controller2_bitmap.Width, (float)info.Height / (float)controller2_bitmap.Height);
					float num2 = (0f - num) * (float)controller2_bitmap.Width / 2f;
					float num3 = (0f - num) * (float)controller2_bitmap.Height / 2f;
					SKRect dest = new SKRect(num2, num3, num2 + num * (float)controller2_bitmap.Width, num3 + num * (float)controller2_bitmap.Height);
					canvas.Translate(width / 2, height / 2);
					canvas.DrawBitmap(controller2_bitmap, dest);
					canvas.Scale((float)width / 200f);
					mx = width / 2;
				}
				if (controlviewDelaycnt < 100)
				{
					controlviewDelaycnt++;
					break;
				}
				controlviewDelaycnt = 0;
				controlviewStat++;
				break;
			case 2:
			{
				if (controlviewDelaycnt < 50)
				{
					controlviewDelaycnt++;
				}
				else
				{
					controlviewDelaycnt = 0;
					controlviewStat++;
				}
				canvas.Clear();
				float num = Math.Min((float)info.Width / (float)controller3_bitmap.Width, (float)info.Height / (float)controller3_bitmap.Height);
				float num2 = (0f - num) * (float)controller3_bitmap.Width / 2f;
				float num3 = (0f - num) * (float)controller3_bitmap.Height / 2f;
				if (mx > (float)(width / 80))
				{
					mx -= width / 80;
				}
				else
				{
					mx = 0f;
				}
				SKRect dest = new SKRect(mx + num2, num3, mx + num2 + num * (float)controller3_bitmap.Width, num3 + num * (float)controller3_bitmap.Height);
				canvas.Translate(width / 2, height / 2);
				canvas.DrawBitmap(controller3_bitmap, dest);
				canvas.Scale((float)width / 200f);
				mr = 180f;
				break;
			}
			case 3:
			{
				if (controlviewDelaycnt < 50)
				{
					controlviewDelaycnt++;
				}
				else
				{
					controlviewDelaycnt = 0;
					controlviewStat++;
				}
				canvas.Clear();
				float num = Math.Min((float)info.Width / (float)controller3_bitmap.Width, (float)info.Height / (float)controller3_bitmap.Height);
				float num2 = (0f - num) * (float)controller3_bitmap.Width / 2f;
				float num3 = (0f - num) * (float)controller3_bitmap.Height / 2f;
				SKRect dest = new SKRect(num2, num3, num2 + num * (float)controller3_bitmap.Width, num3 + num * (float)controller3_bitmap.Height);
				canvas.Translate(width / 2, height / 2);
				canvas.Save();
				canvas.RotateDegrees(mr);
				canvas.DrawBitmap(controller3_bitmap, dest);
				if (mr > 0f)
				{
					mr -= 5f;
				}
				canvas.Restore();
				canvas.Scale((float)width / 200f);
				mx = 0f;
				break;
			}
			case 4:
			{
				if (controlviewDelaycnt < 50)
				{
					controlviewDelaycnt++;
				}
				else
				{
					controlviewDelaycnt = 0;
					controlviewStat++;
				}
				canvas.Clear();
				float num = Math.Min((float)info.Width / (float)controller3_bitmap.Width, (float)info.Height / (float)controller3_bitmap.Height);
				float num2 = (0f - num) * (float)controller3_bitmap.Width / 2f;
				float num3 = (0f - num) * (float)controller3_bitmap.Height / 2f;
				mx -= width / 80;
				SKRect dest = new SKRect(mx + num2, num3, mx + num2 + num * (float)controller3_bitmap.Width, num3 + num * (float)controller3_bitmap.Height);
				canvas.Translate(width / 2, height / 2);
				canvas.Save();
				canvas.DrawBitmap(controller3_bitmap, dest);
				canvas.Restore();
				canvas.Scale((float)width / 200f);
				break;
			}
			case 5:
				if (controlviewDelaycnt == 0)
				{
					float num = Math.Min((float)info.Width / (float)controller4_bitmap.Width, (float)info.Height / (float)controller4_bitmap.Height);
					float num2 = (0f - num) * (float)controller4_bitmap.Width / 2f;
					float num3 = (0f - num) * (float)controller4_bitmap.Height / 2f;
					SKRect dest = new SKRect(num2, num3, num2 + num * (float)controller4_bitmap.Width, num3 + num * (float)controller4_bitmap.Height);
					canvas.Translate(width / 2, height / 2);
					canvas.DrawBitmap(controller4_bitmap, dest);
					canvas.Scale((float)width / 200f);
				}
				if (controlviewDelaycnt < 50)
				{
					controlviewDelaycnt++;
					break;
				}
				controlviewDelaycnt = 0;
				controlviewStat++;
				break;
			default:
				if (controlviewDelaycnt == 0)
				{
					canvas.Clear();
					float num = Math.Min((float)info.Width / (float)controller5_bitmap.Width, (float)info.Height / (float)controller5_bitmap.Height);
					float num2 = (0f - num) * (float)controller5_bitmap.Width / 2f;
					float num3 = (0f - num) * (float)controller5_bitmap.Height / 2f;
					SKRect dest = new SKRect(num2, num3, num2 + num * (float)controller5_bitmap.Width, num3 + num * (float)controller5_bitmap.Height);
					canvas.Translate(width / 2, height / 2);
					canvas.DrawBitmap(controller5_bitmap, dest);
					canvas.Scale((float)width / 200f);
				}
				if (controlviewDelaycnt < 50)
				{
					controlviewDelaycnt++;
					break;
				}
				controlviewDelaycnt = 0;
				controlviewStat = 0;
				break;
			}
		}

		private void ewmView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			SKImageInfo info = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			canvas.Clear();
			float num = Math.Min((float)info.Width / (float)ewm_bitmap.Width, (float)info.Height / (float)ewm_bitmap.Height);
			float num2 = ((float)info.Width - num * (float)ewm_bitmap.Width) / 2f;
			float num3 = ((float)info.Height - num * (float)ewm_bitmap.Height) / 2f;
			canvas.DrawBitmap(dest: new SKRect(num2, num3, num2 + num * (float)ewm_bitmap.Width, num3 + num * (float)ewm_bitmap.Height), bitmap: ewm_bitmap);
			int width = e.Info.Width;
			canvas.Translate(dy: e.Info.Height / 2, dx: width / 2);
			canvas.Scale((float)width / 200f);
			DateTime now = DateTime.Now;
			if (App.RcvRemoteCount > 0)
			{
				ResetName.BackgroundColor = Color.Orange;
				SaveName.BackgroundColor = Color.Orange;
				ParaMode.BackgroundColor = Color.Orange;
			}
			else if (App.CAT1_Loggined)
			{
				if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
				{
					ResetName.BackgroundColor = Color.LightBlue;
					SaveName.BackgroundColor = Color.LightBlue;
					ParaMode.BackgroundColor = Color.LightBlue;
				}
				else if (App.isConnected)
				{
					ResetName.BackgroundColor = Color.LightCyan;
					SaveName.BackgroundColor = Color.LightCyan;
					ParaMode.BackgroundColor = Color.LightCyan;
				}
				else
				{
					ResetName.BackgroundColor = Color.LightGreen;
					SaveName.BackgroundColor = Color.LightGreen;
					ParaMode.BackgroundColor = Color.LightGreen;
				}
			}
			else
			{
				ResetName.BackgroundColor = Color.LightGray;
				SaveName.BackgroundColor = Color.LightGray;
				ParaMode.BackgroundColor = Color.LightGray;
			}
			if (App.CN)
			{
				if (App.PassOk == 0 && now.Year >= 2020 && now.Month >= 1)
				{
					ModelNumber.Text = "≤˙∆∑±‡∫≈£∫" + App.rcv_serialNumberfoc.Substring(0, 1) + "..." + App.rcv_serialNumberfoc.Substring(8, 4) + "...";
				}
				else
				{
					ModelNumber.Text = "≤˙∆∑±‡∫≈" + App.rcv_serialNumberfoc;
				}
			}
			else if (App.PassOk == 0 && now.Year >= 2020 && now.Month >= 1)
			{
				ModelNumber.Text = "ProductCode:" + App.rcv_serialNumberfoc.Substring(0, 1) + "..." + App.rcv_serialNumberfoc.Substring(8, 4) + "..." + App.rcv_serialNumberfoc.Substring(16);
			}
			else
			{
				ModelNumber.Text = "ProductCode:" + App.rcv_serialNumberfoc;
			}
			if (App.CN)
			{
				SDHDsName.Text = SPModeNameCN[rcv_TaRlB9D0SP & 0xF];
				SDLDsName.Text = SPModeNameCN[rcv_TaRlB9D0SP & 0xF];
				SDLPIN.Text = PINNameCN[invpintable[rcv_FwReSdhSdl & 0xF]];
				SDHPIN.Text = PINNameCN[invpintable[(rcv_FwReSdhSdl >> 4) & 0xF]];
				REPIN.Text = PINNameCN[invpintable[(rcv_FwReSdhSdl >> 8) & 0xF]];
				ZuotongPIN.Text = PINNameCN[invpintable[(rcv_ChgFdSeatVol >> 4) & 0xF]];
				BCPIN.Text = PINNameCN[invpintable[(rcv_BstXhBcP >> 4) & 0xF]];
				PPIN.Text = PINNameCN[invpintable[rcv_BstXhBcP & 0xF]];
				XHPIN.Text = PINNameCN[invpintable[(rcv_BstXhBcP >> 8) & 0xF]];
			}
			else
			{
				SDHDsName.Text = SPModeNameEN[rcv_TaRlB9D0SP & 0xF];
				SDLDsName.Text = SPModeNameEN[rcv_TaRlB9D0SP & 0xF];
				SDLPIN.Text = PINNameEN[invpintable[rcv_FwReSdhSdl & 0xF]];
				SDHPIN.Text = PINNameEN[invpintable[(rcv_FwReSdhSdl >> 4) & 0xF]];
				REPIN.Text = PINNameEN[invpintable[(rcv_FwReSdhSdl >> 8) & 0xF]];
				ZuotongPIN.Text = PINNameEN[invpintable[(rcv_ChgFdSeatVol >> 4) & 0xF]];
				BCPIN.Text = PINNameEN[invpintable[(rcv_BstXhBcP >> 4) & 0xF]];
				PPIN.Text = PINNameEN[invpintable[rcv_BstXhBcP & 0xF]];
				XHPIN.Text = PINNameEN[invpintable[(rcv_BstXhBcP >> 8) & 0xF]];
			}
			if ((rcv_ThrottleInsert & 0x20) == 32 && (App.gflash[9] & 0x2000) == 0)
			{
				if (cfg190h >> 4 >= 6)
				{
					if (App.CN)
					{
						TCSDsName.Text = "TCS: ƒ‡≈¢¬∑√Ê";
					}
					else
					{
						TCSDsName.Text = "TCS: Muddy Road";
					}
				}
				else if (App.CN)
				{
					TCSDsName.Text = "TCS: ±˘—©¬∑√Ê";
				}
				else
				{
					TCSDsName.Text = "TCS: IceSnow Road";
				}
			}
			else
			{
				int num4 = cfg190h >> 4;
				if (num4 >= 8)
				{
					if (App.CN)
					{
						TCSDsName.Text = "TCS πÿ±’: ¡§«‡¬∑√Ê";
					}
					else
					{
						TCSDsName.Text = "TCS Closed: Asphalt Road";
					}
				}
				else if (num4 >= 4)
				{
					if (App.CN)
					{
						TCSDsName.Text = "TCS πÿ±’: »Ìº”ÀŸ";
					}
					else
					{
						TCSDsName.Text = "TCS Closed: Soft Acceleration";
					}
				}
				else if (App.CN)
				{
					TCSDsName.Text = "TCS πÿ±’: ¬˝º”ÀŸ";
				}
				else
				{
					TCSDsName.Text = "TCS Closed: Slow Acceleration";
				}
			}
			if (App.CN)
			{
				RowText0.Text = "–Õ∫≈";
				if (DateTimeGrid.IsVisible)
				{
					RowDateTime.Text = "- »’∆⁄ ±º‰";
				}
				else
				{
					RowDateTime.Text = "+ »’∆⁄ ±º‰";
				}
				ModelTypeName.Text = "–Õ∫≈";
				ModelFactoryName.Text = "ƒœæ©‘∂«˝";
				ModelPowerName.Text = "µÁ—π/π¶¬ ";
				int num5 = 100;
				if (rcv_CustomMaxPhaseCurr > 0)
				{
					num5 = (rcv_MaxPhaseCurr * 100 + 99) / rcv_CustomMaxPhaseCurr;
				}
				DHName.Text = "∏ﬂÀŸµµ∂Ø¡¶«ø∂»: " + num5 + "%";
				DMName.Text = "÷–ÀŸµµœ‡∂‘∂Ø¡¶: " + rcv_MidSpeedLineCurr + "%";
				DLName.Text = "µÕÀŸµµœ‡∂‘∂Ø¡¶: " + rcv_LowSpeedLineCurr + "%";
				DHSpeedName.Text = "∏ﬂÀŸµµÀŸ∂»: " + (rcv_MaxSpeed * 100 + 99) / 12000 + "%";
				DMSpeedName.Text = "÷–ÀŸµµÀŸ∂»: " + (rcv_MidSpeed * 100 + 99) / 12000 + "%";
				DLSpeedName.Text = "µÕÀŸµµÀŸ∂»: " + (rcv_LowSpeed * 100 + 99) / 12000 + "%";
				CustomCode.Text = "øÕªß¥˙¬Î:" + rcv_CustomCode0 + rcv_CustomCode1;
				ResetName.Text = "ª÷∏¥";
				if (((rcv_GPara0 >> 12) & 3) == 2)
				{
					SaveName.Text = "±£¥Ê";
				}
				else
				{
					SaveName.Text = "ø⁄¡Ó";
				}
				LimitWayDsName.Text = "µÁ≥ÿø˜µÁ ±≤…”√µƒøÿ÷∆∑Ω Ω£∫";
				switch (cfg190l)
				{
				case 0:
					LimitWayDsName.Text += " 0-µÁ—π2V";
					break;
				case 1:
					LimitWayDsName.Text += " 1-µÁ—π4V";
					break;
				case 2:
					LimitWayDsName.Text += " 2-µÁ—π8V";
					break;
				case 3:
					LimitWayDsName.Text += " 3-µÁ—π12V";
					break;
				case 4:
					LimitWayDsName.Text += " 4-µÁ—π16V";
					break;
				case 5:
					LimitWayDsName.Text += " 5-πÍÀŸµÁ¡ø5%";
					break;
				case 6:
					LimitWayDsName.Text += " 6-πÍÀŸµÁ¡ø6%";
					break;
				case 7:
					LimitWayDsName.Text += " 7-πÍÀŸµÁ¡ø7%";
					break;
				case 8:
					LimitWayDsName.Text += " 8-πÍÀŸµÁ¡ø8%";
					break;
				case 9:
					LimitWayDsName.Text += " 9-πÍÀŸµÁ¡ø9%";
					break;
				case 10:
					LimitWayDsName.Text += "10-πÍÀŸµÁ¡ø10%";
					break;
				case 11:
					LimitWayDsName.Text += "11-SOP÷µ";
					break;
				default:
					LimitWayDsName.Text += "12-∆‰À˚";
					break;
				}
				switch (rcv_ParkConfig)
				{
				case 0:
					ParkDsName.Text = "◊§∆¬∑Ω Ω:∑¿÷πÕ˘∫Û¡Ô∆¬,‘ –Ì«∞Ω¯¡Ô∆¬";
					break;
				case 1:
					ParkDsName.Text = "◊§∆¬∑Ω Ω:ƒÛ…≤≥µ2√Î◊§∆¬,º””Õ√≈Ω‚≥˝◊§∆¬";
					break;
				case 3:
					ParkDsName.Text = "◊§∆¬∑Ω Ω:∂∏∆¬ª∫Ωµ+ƒÛ…≤≥µ2√Î◊§∆¬,º””Õ√≈Ω‚≥˝◊§∆¬";
					break;
				default:
					ParkDsName.Text = "◊§∆¬∑Ω Ω:ƒø«∞¥¶”⁄Œﬁ–ß◊¥Ã¨";
					break;
				}
				switch (rcv_FollowConfig)
				{
				case 0:
					EnergyBackDsName.Text = " Ê  µƒ∏˙ÀÊƒ£ Ω";
					break;
				case 1:
					EnergyBackDsName.Text = "ƒ‹¡øªÿ¿°≤ª∆◊˜”√";
					break;
				case 2:
					EnergyBackDsName.Text = "ƒ‹¡øªÿ¿°Œ™µÁ◊”…≤≥µƒ£ Ω£¨«ø∂»";
					if (rcv_StopBackCurr <= 9)
					{
						EnergyBackDsName.Text += "«·Œ¢";
					}
					else if (rcv_StopBackCurr <= 18)
					{
						EnergyBackDsName.Text += "÷–µ»";
					}
					else
					{
						EnergyBackDsName.Text += "◊Ó«ø";
					}
					break;
				default:
					EnergyBackDsName.Text = "ƒ‹¡øªÿ¿°Œ™ªÿ”Õ√≈…≤≥µƒ£ Ω£¨«ø∂»";
					if (rcv_StopBackCurr <= 9)
					{
						EnergyBackDsName.Text += "«·Œ¢";
					}
					else if (rcv_StopBackCurr <= 18)
					{
						EnergyBackDsName.Text += "÷–µ»";
					}
					else
					{
						EnergyBackDsName.Text += "◊Ó«ø";
					}
					break;
				}
			}
			else
			{
				RowText0.Text = "ModelType";
				if (DateTimeGrid.IsVisible)
				{
					RowDateTime.Text = "- DateTime";
				}
				else
				{
					RowDateTime.Text = "+ DateTime";
				}
				ModelTypeName.Text = "ModelType";
				ModelFactoryName.Text = "FarDriver";
				ModelPowerName.Text = "Voltage/Power";
				int num6 = 100;
				if (rcv_CustomMaxPhaseCurr > 0)
				{
					num6 = (rcv_MaxPhaseCurr * 100 + 99) / rcv_CustomMaxPhaseCurr;
				}
				DHName.Text = "GearHigh Power Output " + num6 + "%";
				DMName.Text = "GearMiddle Power Output " + rcv_MidSpeedLineCurr + "%";
				DLName.Text = "GearLow Power Output " + rcv_LowSpeedPhaseCurr + "%";
				DHSpeedName.Text = "GearHigh Speed " + (rcv_MaxSpeed * 100 + 99) / 12000 + "%";
				DMSpeedName.Text = "GearMiddle Speed " + (rcv_MidSpeed * 100 + 99) / 12000 + "%";
				DLSpeedName.Text = "GearLow Speed " + (rcv_LowSpeed * 100 + 99) / 12000 + "%";
				CustomCode.Text = "CostumCode:" + rcv_CustomCode0 + rcv_CustomCode1;
				ResetName.Text = "Restore";
				if (((rcv_GPara0 >> 12) & 3) == 2)
				{
					SaveName.Text = "Save";
				}
				else
				{
					SaveName.Text = "PWP";
				}
				LimitWayDsName.Text = "Control mode when low power: ";
				switch (cfg190l)
				{
				case 0:
					LimitWayDsName.Text += " 0-Vol2V";
					break;
				case 1:
					LimitWayDsName.Text += " 1-Vol4V";
					break;
				case 2:
					LimitWayDsName.Text += " 2-Vol8V";
					break;
				case 3:
					LimitWayDsName.Text += " 3-Vol12V";
					break;
				case 4:
					LimitWayDsName.Text += " 4-Vol16V";
					break;
				case 5:
					LimitWayDsName.Text += " 5-Soc5%";
					break;
				case 6:
					LimitWayDsName.Text += " 6-Soc6%";
					break;
				case 7:
					LimitWayDsName.Text += " 7-Soc7%";
					break;
				case 8:
					LimitWayDsName.Text += " 8-Soc8%";
					break;
				case 9:
					LimitWayDsName.Text += " 9-Soc9%";
					break;
				case 10:
					LimitWayDsName.Text += "10-Soc10%";
					break;
				case 11:
					LimitWayDsName.Text += "11-SOP";
					break;
				default:
					LimitWayDsName.Text += "12-Other";
					break;
				}
				switch (rcv_ParkConfig)
				{
				case 0:
					ParkDsName.Text = "Prevent backward sliding and allow forward sliding";
					break;
				case 1:
					ParkDsName.Text = "Pinch the brake 2s to park,release by throttle";
					break;
				case 3:
					ParkDsName.Text = "Slow down  and pinch the brake 2s to park,release by throttle";
					break;
				default:
					ParkDsName.Text = "Park function is disabled";
					break;
				}
				switch (rcv_FollowConfig)
				{
				case 0:
					EnergyBackDsName.Text = "Suitable follow mode";
					break;
				case 1:
					EnergyBackDsName.Text = "Energy feedback Disabled";
					break;
				case 2:
					EnergyBackDsName.Text = "EABS Mode, Energy feedback ";
					if (rcv_StopBackCurr <= 9)
					{
						EnergyBackDsName.Text += "slightly";
					}
					else if (rcv_StopBackCurr <= 18)
					{
						EnergyBackDsName.Text += "medium";
					}
					else
					{
						EnergyBackDsName.Text += "Strong";
					}
					break;
				default:
					EnergyBackDsName.Text = "EABS Mode, Energy feedback ";
					if (rcv_StopBackCurr <= 9)
					{
						EnergyBackDsName.Text += "slightly";
					}
					else if (rcv_StopBackCurr <= 18)
					{
						EnergyBackDsName.Text += "medium";
					}
					else
					{
						EnergyBackDsName.Text += "Strong";
					}
					break;
				}
			}
			if (App.bms)
			{
				if (App.CN)
				{
					ModelName.Text = "µÁ≥ÿπ‹¿ÌœµÕ≥BMS";
					if (rcv_RatedVoltage < 100)
					{
						_ = $"0{rcv_RatedVoltage}";
					}
					else
					{
						_ = $"{rcv_RatedVoltage}";
					}
					int num7 = rcv_ENMaxLineCurr / 4;
					if (num7 < 100)
					{
						_ = $"0{num7}";
					}
					else
					{
						_ = $"{num7}";
					}
					ModelPowerName.Text = "µÁ—π/¥Æ ˝";
					ModelPower.Text = rcv_RatedVoltage + "V" + rcv_Series + "¥Æ";
					ModelCurr.Text = rcv_OverChargeCurrent + "A/" + rcv_OverDisChargeCurrent + "A";
					ModelCurrName.Text = "≥‰µÁµÁ¡˜/∑≈µÁµÁ¡˜";
				}
				else
				{
					ModelName.Text = "Battery Manage System";
					ModelPowerName.Text = "Voltage/Series";
					ModelPower.Text = rcv_RatedVoltage + "V" + rcv_Series + "s";
					ModelCurr.Text = rcv_OverChargeCurrent + "A/" + rcv_OverDisChargeCurrent + "A";
					ModelCurrName.Text = "Charge/Discharge";
				}
			}
			else
			{
				if (App.CN)
				{
					ModelCurrName.Text = "œﬂµÁ¡˜/œ‡µÁ¡˜";
					ModelName.Text = "”¿¥≈Õ¨≤Ωøÿ÷∆∆˜";
				}
				else
				{
					ModelCurrName.Text = "LineCurr/PhaseCurr";
					ModelName.Text = "Motor FOC Controller";
				}
				ModelPower.Text = rcv_RatedVoltage + "V" + rcv_RatedPower + "W";
				ModelCurr.Text = rcv_MaxLineCurr + "A/" + rcv_MaxPhaseCurr + "A";
			}
			App.RestDistance = (float)(rcv_BattRatedCap * App.SOC * (rcv_RatedPower % 100 + 6)) / 256f;
			ModelType.Text = App.ModelName;
		}

		private void SendRs232Data(byte mcmd, byte scmd, byte va1, byte va2)
		{
			byte[] array = new byte[8];
			array[0] = 170;
			array[1] = mcmd;
			array[2] = (byte)(~array[1]);
			array[3] = scmd;
			array[4] = va1;
			array[5] = va2;
			array[6] = (byte)(array[0] + array[1] + array[2] + array[3] + array[4] + array[5]);
			array[7] = (byte)(~array[6]);
			MessagingCenter.Send(this, "WriteParaMeter", array);
		}

		private void WriteAddr(byte[] data, byte addr, byte len)
		{
			data[0] = 170;
			len += 4;
			data[1] = (byte)(192 + len);
			data[2] = addr;
			data[3] = addr;
			byte b = 60;
			byte b2 = 127;
			byte b3;
			for (b3 = 0; b3 < len; b3++)
			{
				int num = b ^ data[b3];
				b = (byte)(b2 ^ crctablehi[num]);
				b2 = crctablelo[num];
			}
			data[b3] = b;
			data[b3 + 1] = b2;
			MessagingCenter.Send(this, "WriteParaMeter", data);
		}

		private async void CustomCode_TextChanged(object sender, EventArgs e)
		{
			await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = CustomCode.Text
			});
		}

		private void RowText1_Clicked_1(object sender, EventArgs e)
		{
			DateTimeGrid.IsVisible = !DateTimeGrid.IsVisible;
		}

		private void DIR_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && !NotOwnerStat())
			{
				int num = 1;
				if (DIRStat.IsToggled)
				{
					num = 0;
				}
				int num2 = num + 1;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						cfg11l,
						(byte)((cfg11h & 0x7F) + (num << 7)),
						0,
						0
					}, 11, 2);
				}
				else
				{
					SendRs232Data(18, 7, (byte)num2, (byte)(num2 >> 8));
				}
			}
		}

		private void DIR_Switched(object sender, ToggledEventArgs e)
		{
		}

		private async void RatedVol_Clicked(object sender, EventArgs e)
		{
			string title = ((!App.CN) ? "RatedVoltage" : "∂Ó∂®µÁ—π");
			title = await DisplayActionSheet(title, "cancel", " 48V", " 60V", " 64V", " 72V", " 75V", " 84V", " 96V", "100V", "108V", "120V", "144V");
			if (NotBindingStat() || NotOwnerStat() || !(title != "cancel") || string.IsNullOrWhiteSpace(title))
			{
				return;
			}
			title = title.Substring(0, 3);
			int num = Convert.ToInt16(title);
			try
			{
				num *= 10;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 23, 2);
				}
				else
				{
					num++;
					SendRs232Data(18, 4, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LimitWay_Clicked(object sender, EventArgs e)
		{
			string text = ((!App.CN) ? (await DisplayActionSheet("LowVol Way:", "cancel", " 0-Vol2V", " 1-Vol4V", " 2-Vol8V", " 3-Vol12V", " 4-Vol16V", " 5-Soc5%", " 6-Soc6%", " 7-Soc7%", " 8-Soc8%", " 9-Soc9%", "10-Soc10%", "11-SOP", "12-Other")) : (await DisplayActionSheet("«∑—π∑Ω Ω:", "cancel", " 0-µÁ—π2V", " 1-µÁ—π4V", " 2-µÁ—π8V", " 3-µÁ—π12V", " 4-µÁ—π16V", " 5-πÍÀŸµÁ¡ø5%", " 6-πÍÀŸµÁ¡ø6%", " 7-πÍÀŸµÁ¡ø7%", " 8-πÍÀŸµÁ¡ø8%", " 9-πÍÀŸµÁ¡ø9%", "10-πÍÀŸµÁ¡ø10%", "11-SOP÷µ", "12-∆‰À˚")));
			if (!NotBindingStat() && !NotOwnerStat() && text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				if (App.NewVersion && rcv_AccCoeff != 0)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						cfg190h,
						0,
						0
					}, 190, 2);
				}
			}
		}

		private void SetEnergeCoeff(int value)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			try
			{
				for (int i = 0; i < 10; i++)
				{
					int num = rcv_RatedSpeed * rcv_RatedVoltage * 11 / 648000;
					int num2 = value;
					int num3 = value;
					if (i > num)
					{
						num2 = value * 3 / 4;
						num3 = value / 2;
					}
					if (i > num + 1)
					{
						num2 = value / 4;
						num3 = value / 8;
					}
					if (i > num + 2)
					{
						num2 = 0;
						num3 = 0;
					}
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num2,
							(byte)num3,
							0,
							0
						}, (byte)(146 + i), 2);
					}
					else
					{
						SendRs232Data(16, 1, (byte)value, (byte)(value >> 8));
					}
					Thread.Sleep(10);
				}
				for (int j = 0; j < 10; j++)
				{
					int num4 = rcv_RatedSpeed * rcv_RatedVoltage * 11 / 648000;
					int num5 = value;
					int num6 = value;
					if (j > num4)
					{
						num5 = value * 3 / 4;
						num6 = value / 2;
					}
					if (j > num4 + 1)
					{
						num5 = value / 4;
						num6 = value / 8;
					}
					if (j > num4 + 2)
					{
						num5 = 0;
						num6 = 0;
					}
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num5,
							(byte)num6,
							0,
							0
						}, (byte)(146 + j), 2);
					}
					else
					{
						SendRs232Data(16, 1, (byte)value, (byte)(value >> 8));
					}
					Thread.Sleep(10);
				}
				for (int k = 0; k < 10; k++)
				{
					int num7 = rcv_RatedSpeed * rcv_RatedVoltage * 11 / 648000;
					int num8 = value;
					int num9 = value;
					if (k > num7)
					{
						num8 = value * 3 / 4;
						num9 = value / 2;
					}
					if (k > num7 + 1)
					{
						num8 = value / 4;
						num9 = value / 8;
					}
					if (k > num7 + 2)
					{
						num8 = 0;
						num9 = 0;
					}
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num8,
							(byte)num9,
							0,
							0
						}, (byte)(146 + k), 2);
					}
					else
					{
						SendRs232Data(16, 1, (byte)value, (byte)(value >> 8));
					}
					Thread.Sleep(10);
				}
			}
			catch (FormatException)
			{
			}
		}

		private async void EnergyBack_Clicked(object sender, EventArgs e)
		{
			string text = ((!App.CN) ? (await DisplayActionSheet("Energy feedback:", "cancel", " 0-follow", " 1-Œﬁ", " 2-EABS slightly", " 3-EABS dedium", " 4-EABS Strong", " 5-LoseThrottle EABS slightly", " 6-LoseThrottle EABS medium", " 7-LoseThrottle EABS strong")) : (await DisplayActionSheet("ƒ‹¡øªÿ¿°«ø∂»:", "cancel", " 0-∏˙ÀÊ", " 1-Œﬁ", " 2-µÁ◊”…≤≥µ«·", " 3-µÁ◊”…≤≥µ÷–", " 4-µÁ◊”…≤≥µ«ø", " 5-ªÿ”Õ√≈…≤≥µ«·", " 6-ªÿ”Õ√≈…≤≥µ÷–", " 7-ªÿ”Õ√≈…≤≥µ«ø")));
			if (NotBindingStat() || NotOwnerStat() || !(text != "cancel") || string.IsNullOrWhiteSpace(text))
			{
				return;
			}
			text = text.Substring(0, 2);
			int num = Convert.ToInt16(text);
			if (!App.NewVersion)
			{
				return;
			}
			int num2 = 0;
			int num3 = 0;
			switch (num)
			{
			case 5:
				num2 = 6;
				num3 = 20;
				num = 3;
				SetEnergeCoeff(-12);
				break;
			case 6:
				num2 = 12;
				num = 3;
				num3 = 40;
				if (!App.rcv_NewBlueKey)
				{
					if (App.CN)
					{
						UserDialogs.Instance.Alert("«Î π”√’˝∞Ê–¬¿∂—¿£°");
					}
					else
					{
						UserDialogs.Instance.Alert("Please use new BLE Module.");
					}
					return;
				}
				SetEnergeCoeff(-25);
				break;
			case 7:
				num2 = 24;
				num = 3;
				num3 = 80;
				if (!App.rcv_NewBlueKey)
				{
					if (App.CN)
					{
						UserDialogs.Instance.Alert("«Î π”√’˝∞Ê–¬¿∂—¿£°");
					}
					else
					{
						UserDialogs.Instance.Alert("Please use new BLE Module.");
					}
					return;
				}
				SetEnergeCoeff(-50);
				break;
			case 2:
				num2 = 6;
				num = 2;
				num3 = 20;
				SetEnergeCoeff(-12);
				break;
			case 3:
				num2 = 12;
				num = 2;
				num3 = 40;
				if (!App.rcv_NewBlueKey)
				{
					if (App.CN)
					{
						UserDialogs.Instance.Alert("«Î π”√’˝∞Ê–¬¿∂—¿£°");
					}
					else
					{
						UserDialogs.Instance.Alert("Please use new BLE Module.");
					}
					return;
				}
				SetEnergeCoeff(-25);
				break;
			case 4:
				num2 = 24;
				num = 2;
				num3 = 80;
				if (!App.rcv_NewBlueKey)
				{
					if (App.CN)
					{
						UserDialogs.Instance.Alert("«Î π”√’˝∞Ê–¬¿∂—¿£°");
					}
					else
					{
						UserDialogs.Instance.Alert("Please use new BLE Module.");
					}
					return;
				}
				SetEnergeCoeff(-50);
				break;
			case 0:
			case 1:
				num2 = 0;
				break;
			}
			Thread.Sleep(10);
			if (App.NewVersion)
			{
				WriteAddr(new byte[8]
				{
					0,
					0,
					0,
					0,
					(byte)num2,
					(byte)(num2 >> 8),
					0,
					0
				}, 48, 2);
			}
			else
			{
				SendRs232Data(18, 24, (byte)num2, (byte)(num2 >> 8));
			}
			Thread.Sleep(20);
			if (App.NewVersion)
			{
				WriteAddr(new byte[8]
				{
					0,
					0,
					0,
					0,
					(byte)num3,
					(byte)(num3 >> 8),
					0,
					0
				}, 49, 2);
			}
			else
			{
				SendRs232Data(18, 25, (byte)num3, (byte)(num3 >> 8));
			}
			Thread.Sleep(20);
			if (App.NewVersion)
			{
				WriteAddr(new byte[8]
				{
					0,
					0,
					0,
					0,
					(byte)((cfg26l & 0xFC) + num),
					cfg26h,
					0,
					0
				}, 26, 2);
			}
			else
			{
				num++;
				SendRs232Data(18, 13, (byte)num, (byte)(num >> 8));
			}
		}

		private void OnSliderDHDragCompleted(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			stageDH = (int)DHNameS.Value;
			if (App.CN)
			{
				DHName.Text = "∏ﬂÀŸµµ∂Ø¡¶«ø∂»: " + stageDH + "%";
			}
			else
			{
				DHName.Text = "GearHigh Power Output " + stageDH + "%";
			}
			try
			{
				int num = rcv_CustomMaxLineCurr * stageDH / 25;
				num++;
				if (App.NewVersion)
				{
					num--;
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 25, 2);
				}
				else
				{
					SendRs232Data(18, 27, (byte)num, (byte)(num >> 8));
				}
				Thread.Sleep(10);
				num = rcv_CustomMaxPhaseCurr * stageDH / 25;
				num++;
				if (App.NewVersion)
				{
					num--;
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 45, 2);
				}
				else
				{
					SendRs232Data(18, 26, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private void OnSliderDHValueChanged(object sender, ValueChangedEventArgs e)
		{
			if (App.CN)
			{
				DHName.Text = "∏ﬂÀŸµµ∂Ø¡¶«ø∂»: " + (int)e.NewValue + "%";
			}
			else
			{
				DHName.Text = "GearHigh Power Output " + (int)e.NewValue + "%";
			}
		}

		private void OnSliderDMDragCompleted(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			stageDM = (int)DMNameS.Value;
			if (App.CN)
			{
				DMName.Text = "÷–ÀŸµµœ‡∂‘∂Ø¡¶: " + stageDM + "%";
			}
			else
			{
				DMName.Text = "GearMiddle Power Output " + stageDM + "%";
			}
			try
			{
				int num = stageDM;
				num = (int)((float)(num * 128) / 100f + 0.5f);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						cfg50l,
						(byte)num,
						0,
						0
					}, 50, 2);
				}
				else
				{
					SendRs232Data(14, 2, (byte)num, (byte)(num >> 8));
				}
				Thread.Sleep(10);
				num = (300 + stageDM * 7) / 10;
				num = (int)((float)(num * 128) / 100f + 0.5f);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						cfg51l,
						(byte)num,
						0,
						0
					}, 51, 2);
				}
				else
				{
					SendRs232Data(14, 4, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private void OnSliderDMValueChanged(object sender, ValueChangedEventArgs e)
		{
			if (App.CN)
			{
				DMName.Text = "÷–ÀŸµµœ‡∂‘∂Ø¡¶: " + (int)e.NewValue + "%";
			}
			else
			{
				DMName.Text = "GearMiddle Power Output " + (int)e.NewValue + "%";
			}
		}

		private void OnSliderDLDragCompleted(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			stageDL = (int)DLNameS.Value;
			if (App.CN)
			{
				DLName.Text = "µÕÀŸµµœ‡∂‘∂Ø¡¶: " + stageDL + "%";
			}
			else
			{
				DLName.Text = "GearLow Power Output " + stageDL + "%";
			}
			try
			{
				int num = (int)((float)(stageDL * 128) / 100f + 0.5f);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						cfg50h,
						0,
						0
					}, 50, 2);
				}
				else
				{
					SendRs232Data(14, 1, (byte)num, (byte)(num >> 8));
				}
				Thread.Sleep(10);
				num = (300 + stageDL * 7) / 10;
				num = (int)((float)(num * 128) / 100f + 0.5f);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						cfg51h,
						0,
						0
					}, 51, 2);
				}
				else
				{
					SendRs232Data(14, 3, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private void OnSliderDLValueChanged(object sender, ValueChangedEventArgs e)
		{
			if (App.CN)
			{
				DLName.Text = "µÕÀŸµµœ‡∂‘∂Ø¡¶: " + (int)e.NewValue + "%";
			}
			else
			{
				DLName.Text = "GearLow Power Output " + (int)e.NewValue + "%";
			}
		}

		private void OnSliderDHSpeedDragCompleted(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			stageDHSpeed = (int)DHSpeedNameS.Value;
			if (App.CN)
			{
				DHSpeedName.Text = "∏ﬂÀŸµµÀŸ∂»: " + stageDHSpeed + "%";
			}
			else
			{
				DHSpeedName.Text = "GearHigh Speed " + stageDHSpeed + "%";
			}
			try
			{
				int num = 12000 * stageDHSpeed / 100;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 21, 2);
				}
				else
				{
					num++;
					SendRs232Data(18, 2, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private void OnSliderDHSpeedValueChanged(object sender, ValueChangedEventArgs e)
		{
			if (App.CN)
			{
				DHSpeedName.Text = "∏ﬂÀŸµµÀŸ∂»: " + (int)e.NewValue + "%";
			}
			else
			{
				DHSpeedName.Text = "GearHigh Speed " + (int)e.NewValue + "%";
			}
		}

		private void OnSliderDMSpeedDragCompleted(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			stageDMSpeed = (int)DMSpeedNameS.Value;
			if (App.CN)
			{
				DMSpeedName.Text = "÷–ÀŸµµÀŸ∂»: " + stageDMSpeed + "%";
			}
			else
			{
				DMSpeedName.Text = "GearMiddle Speed " + stageDMSpeed + "%";
			}
			try
			{
				int num = 12000 * stageDMSpeed / 100;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 42, 2);
				}
				else
				{
					SendRs232Data(17, 6, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private void OnSliderDMSpeedValueChanged(object sender, ValueChangedEventArgs e)
		{
			if (App.CN)
			{
				DMSpeedName.Text = "÷–ÀŸµµÀŸ∂»: " + (int)e.NewValue + "%";
			}
			else
			{
				DMSpeedName.Text = "GearMiddle Speed " + (int)e.NewValue + "%";
			}
		}

		private void OnSliderDLSpeedDragCompleted(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			stageDLSpeed = (int)DLSpeedNameS.Value;
			if (App.CN)
			{
				DLSpeedName.Text = "µÕÀŸµµÀŸ∂»: " + stageDLSpeed + "%";
			}
			else
			{
				DLSpeedName.Text = "GearLow Speed " + stageDLSpeed + "%";
			}
			try
			{
				int num = 12000 * stageDLSpeed / 100;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 40, 2);
				}
				else
				{
					num++;
					SendRs232Data(17, 2, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private void OnSliderDLSpeedValueChanged(object sender, ValueChangedEventArgs e)
		{
			if (App.CN)
			{
				DLSpeedName.Text = "µÕÀŸµµÀŸ∂»: " + (int)e.NewValue + "%";
			}
			else
			{
				DLSpeedName.Text = "GearLow Speed " + (int)e.NewValue + "%";
			}
		}

		private void XH_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && !NotOwnerStat())
			{
				int num = 1;
				if (XHStat.IsToggled)
				{
					num = 0;
				}
				if (App.NewVersion)
				{
					byte[] array = new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_RelayDelay & 0xEF) + (num << 4)),
						(byte)(rcv_RelayDelay >> 8),
						0,
						0
					};
					rcv_RelayDelay = (array[5] << 8) + array[4];
					WriteAddr(array, 33, 2);
				}
			}
		}

		private void AutoBackP_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && !NotOwnerStat())
			{
				int num = 1;
				if (AutoBackPStat.IsToggled)
				{
					num = 0;
				}
				if (App.NewVersion)
				{
					byte[] array = new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_RelayDelay & 0xF7) + (num << 3)),
						(byte)(rcv_RelayDelay >> 8),
						0,
						0
					};
					rcv_RelayDelay = (array[5] << 8) + array[4];
					WriteAddr(array, 33, 2);
				}
			}
		}

		private void PGear_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && !NotOwnerStat())
			{
				int num = 1;
				if (PGear.IsToggled)
				{
					num = 0;
				}
				if (App.NewVersion)
				{
					byte[] array = new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_RelayDelay & 0xFB) + (num << 2)),
						(byte)(rcv_RelayDelay >> 8),
						0,
						0
					};
					rcv_RelayDelay = (array[5] << 8) + array[4];
					WriteAddr(array, 33, 2);
				}
			}
		}

		private void REGear_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && !NotOwnerStat())
			{
				int num = 1;
				if (REGear.IsToggled)
				{
					num = 0;
				}
				if (App.NewVersion)
				{
					byte[] array = new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_RelayDelay,
						(byte)(((rcv_RelayDelay >> 8) & 0xBF) + (num << 6)),
						0,
						0
					};
					rcv_RelayDelay = (array[5] << 8) + array[4];
					WriteAddr(array, 33, 2);
				}
			}
		}

		private void Zuotong_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && !NotOwnerStat())
			{
				int num = 1;
				if (Zuotong.IsToggled)
				{
					num = 0;
				}
				if (App.NewVersion)
				{
					byte[] array = new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_RelayDelay & 0xFD) + (num << 1)),
						(byte)(rcv_RelayDelay >> 8),
						0,
						0
					};
					rcv_RelayDelay = (array[5] << 8) + array[4];
					WriteAddr(array, 33, 2);
				}
			}
		}

		private async void SelectSPMode()
		{
			string text = ((!App.CN) ? (await DisplayActionSheet("HighLowSpeed:", "cancel", " 0-HighOnly", " 1-AddDec", " 2-ButtonHighLow", " 3-ButtonLowMid", " 4-Button3SpeedLow", " 5-Button3SpeedMid", " 6-Button3SpeedHigh", " 7-Button4SpeedLow", " 8-Button4Speed2", " 9-Button4Speed3", "10-Button4SpeedHigh", "11-Line3Speed", "12-CommGear", "13-CANGear", "14-Invalid")) : (await DisplayActionSheet("∏ﬂµÕÀŸ:", "cancel", " 0-Ωˆ∏ﬂÀŸ", " 1-º”ºıµµ", " 2-µ„∂Ø∏ﬂµÕÀŸ", " 3-µ„∂ØµÕ÷–ÀŸ", " 4-µ„∂Ø»˝ÀŸµÕ", " 5-µ„∂Ø»˝ÀŸ÷–", " 6-µ„∂Ø»˝ÀŸ∏ﬂ", " 7-µ„∂ØÀƒÀŸµÕ", " 8-µ„∂ØÀƒÀŸ2", " 9-µ„∂ØÀƒÀŸ3", "10-µ„∂ØÀƒÀŸ∏ﬂ", "11-≤¶∂Ø»˝ÀŸ", "12-¥Æø⁄µ≤Œª", "13-CANµ≤Œª", "14-Œﬁ–ß")));
			if (!NotBindingStat() && !NotOwnerStat() && text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					byte[] array = new byte[8];
					num = (rcv_TaRlB9D0SP & 0xF0) + num;
					array[4] = (byte)rcv_NoCanCnt;
					array[5] = (byte)num;
					WriteAddr(array, 203, 2);
				}
			}
		}

		private void SDH_Clicked(object sender, EventArgs e)
		{
			SelectSPMode();
		}

		private void SDL_Clicked(object sender, EventArgs e)
		{
			SelectSPMode();
		}

		private void BC_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && !NotOwnerStat())
			{
				int num = 1;
				if (BCStat.IsToggled)
				{
					num = 0;
				}
				if (App.NewVersion)
				{
					byte[] array = new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_RelayDelay & 0xFE) + num),
						(byte)(rcv_RelayDelay >> 8),
						0,
						0
					};
					rcv_RelayDelay = (array[5] << 8) + array[4];
					WriteAddr(array, 33, 2);
				}
			}
		}

		private void Tuixing_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && !NotOwnerStat())
			{
				int num = 1;
				if (TuixingS.IsToggled)
				{
					num = 0;
				}
				if (App.NewVersion)
				{
					byte[] array = new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_RelayDelay & 0xBF) + (num << 6)),
						(byte)(rcv_RelayDelay >> 8),
						0,
						0
					};
					rcv_RelayDelay = (array[5] << 8) + array[4];
					WriteAddr(array, 33, 2);
				}
			}
		}

		private void GearRemember_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && !NotOwnerStat())
			{
				int num = 1;
				if (GearRememberS.IsToggled)
				{
					num = 0;
				}
				if (App.NewVersion)
				{
					byte[] array = new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_RelayDelay,
						(byte)(((rcv_RelayDelay >> 8) & 0xFB) + (num << 2)),
						0,
						0
					};
					rcv_RelayDelay = (array[5] << 8) + array[4];
					WriteAddr(array, 33, 2);
				}
			}
		}

		private async void Park_Clicked(object sender, EventArgs e)
		{
			string text = ((!App.CN) ? (await DisplayActionSheet("Park:", "cancel", "0-ReversePark", "1-SwitchPark", "3-SlowDownPark", "2-Disabled")) : (await DisplayActionSheet("◊§∆¬:", "cancel", "0-∑¿∫Û¡Ô", "1-ø™πÿ◊§∆¬", "3-ª∫Ωµ◊§∆¬", "2-Œﬁ–ß")));
			if (NotBindingStat() || NotOwnerStat() || !(text != "cancel") || string.IsNullOrWhiteSpace(text))
			{
				return;
			}
			text = text.Substring(0, 1);
			int num = Convert.ToInt16(text);
			if (App.NewVersion)
			{
				byte[] array = new byte[8] { 0, 0, 0, 0, cfg11l, 0, 0, 0 };
				if (num == 1)
				{
					array[5] = (byte)((cfg11h & 0x88) + 36);
					WriteAddr(array, 11, 2);
					Thread.Sleep(10);
					array[4] = (byte)rcv_anglelearn;
					array[5] = (byte)rcv_SpdLmt_sel;
					WriteAddr(array, 202, 2);
				}
				else
				{
					array[5] = (byte)((cfg11h & 0x9F) + (num << 5));
					WriteAddr(array, 11, 2);
				}
			}
			else
			{
				num = ((num == 0) ? 1 : 2);
				SendRs232Data(18, 14, (byte)num, (byte)(num >> 8));
			}
		}

		private async void OnButtonMorseCodeClicked(object sender, EventArgs e)
		{
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MorseCodeName.Text
			});
			if (NotBindingStat() || NotOwnerStat() || !promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			int num = 0;
			for (int i = 0; i < text.Length; i++)
			{
				num <<= 1;
				if (text[i] == '1')
				{
					num |= 1;
				}
			}
			num &= 0x7F;
			if (App.NewVersion)
			{
				WriteAddr(new byte[8]
				{
					0,
					0,
					0,
					0,
					rcv_Arg2,
					(byte)num,
					0,
					0
				}, 6, 2);
			}
			else
			{
				SendRs232Data(11, 2, (byte)num, (byte)(num >> 8));
			}
		}

		private async void OnButtonResetClicked(object sender, EventArgs e)
		{
			if (App.NewVersion)
			{
				string text = ((!App.CN) ? (await DisplayActionSheet("Restore Way:", "0-cancel", "1-Restore Product Config", "2-Use PIN10 Key Function Config", "3-Use PIN11 Key Function Config", "4-Use Auto Learn Default Config", "5-Use BackThrottle EABS Config", "6-Use Non-EABS Config", "7-Use XM Config", "8-Reset")) : (await DisplayActionSheet("ª÷∏¥∑Ω Ω:", "0-»°œ˚", "1-ª÷∏¥≥ˆ≥ß…Ë÷√", "2- π”√10Ω≈µÁ√≈π¶ƒ‹Ω≈≈‰÷√", "3- π”√11Ω≈µÁ√≈π¶ƒ‹Ω≈≈‰÷√", "4- π”√◊‘—ßœ∞ƒ¨»œ≤Œ ˝", "5- π”√ªÿ”Õ√≈…≤≥µƒ£ Ω≤Œ ˝", "6- π”√◊‘”…ª¨––ƒ¨»œ≤Œ ˝", "7- π”√XM…Ë÷√", "8-∏¥Œª")));
				if (NotBindingStat() || NotOwnerStat() || string.IsNullOrWhiteSpace(text))
				{
					return;
				}
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				byte[] SendRS232L = new byte[8];
				switch (num)
				{
				case 1:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Restore Prouct Config", null, "Restore", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ª÷∏¥≥ˆ≥ß…Ë÷√£¨ª÷∏¥∫Û“™µ„±£¥Ê±®æØ≤≈ª·œ˚ ß", null, "ª÷∏¥", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						SendRS232L[5] = 8;
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				case 2:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Use PIN10 Key Function Config", null, "Confirm", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ π”√10Ω≈µÁ√≈π¶ƒ‹Ω≈≈‰÷√", null, " π”√", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						SendRS232L[5] = 9;
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				case 3:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Use PIN11 Key Function Config", null, "Confirm", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ π”√11Ω≈µÁ√≈π¶ƒ‹Ω≈≈‰÷√", null, " π”√", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						SendRS232L[5] = 10;
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				case 4:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Use Auto Learn Default Config", null, "Confirm", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ π”√◊‘—ßœ∞ƒ¨»œ≤Œ ˝", null, " π”√", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						SendRS232L[5] = 11;
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				case 5:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Use BackThrottle EABS Config", null, "Confirm", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ π”√ªÿ”Õ√≈…≤≥µƒ£ Ω≤Œ ˝", null, " π”√", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						SendRS232L[5] = 12;
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				case 6:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Use Non-EABS Config", null, "Confirm", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ π”√◊‘”…ª¨––ƒ¨»œ≤Œ ˝", null, " π”√", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						SendRS232L[5] = 13;
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				case 7:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Use XM Config", null, "Confirm", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ π”√XM≤Œ ˝", null, " π”√", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						SendRS232L[5] = 14;
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				case 8:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Reset Controller Data", null, "Reset", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´∏¥Œªøÿ÷∆∆˜", null, "∏¥Œª", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						if (rcv_kzqVersion0 == 'I' || rcv_kzqVersion0 == 'J' || rcv_kzqVersion0 == 'K' || rcv_kzqVersion0 == 'U' || rcv_kzqVersion0 == 'V' || rcv_kzqVersion0 == 'W')
						{
							SendRS232L[5] = 15;
						}
						else
						{
							SendRS232L[5] = 5;
						}
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				}
			}
			else
			{
				bool flag = ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Reset Controller Data", null, "Reset", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´∏¥Œªøÿ÷∆∆˜", null, "∏¥Œª", "»°œ˚")));
				if (!NotBindingStat() && !NotOwnerStat() && flag)
				{
					SendRs232Data(4, 1, 0, 0);
				}
			}
		}

		private async void BindA()
		{
			if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Controller is not bound or login, Please bind or login the controller.", null, "Bind", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("øÿ÷∆∆˜Œ¥∞Û∂®µ«¬º£¨«Îœ»∞Û∂®µ«¬ºøÿ÷∆∆˜°£", null, "∞Û∂®", "»°œ˚")))
			{
				App.NotBindStat = 99;
			}
		}

		private bool NotBindingStat()
		{
			if (App.RcvRemoteCount > 0 && !App.isConnected)
			{
				return false;
			}
			if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
			{
				BindA();
				return true;
			}
			return false;
		}

		private async void BindC()
		{
			if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Controller is not bound, to protect parameters from being modified by others, it is recommended to bind the controller.", null, "Bind", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("øÿ÷∆∆˜Œ¥∞Û∂®£¨Œ™¡À±£ª§≤Œ ˝≤ª±ªÀ˚»À–ﬁ∏ƒ£¨Ω®“È∞Û∂®øÿ÷∆∆˜°£", null, "∞Û∂®", "»°œ˚")))
			{
				App.NotBindStat = 99;
			}
		}

		private bool NotOwnerStat()
		{
			if (App.RcvRemoteCount > 0 && !App.isConnected)
			{
				return false;
			}
			if (App.ownertype <= 0)
			{
				if (App.PassOk == 2)
				{
					if (App.NotBindStat >= 1 && App.NotBindStat < 100)
					{
						App.NotBindStat++;
						BindC();
						return true;
					}
					return false;
				}
				if (App.CN)
				{
					UserDialogs.Instance.Alert("÷ª”–∞Û∂®◊¥Ã¨≤≈ƒ‹–ﬁ∏ƒ’‚∏ˆ≤Œ ˝£°");
				}
				else
				{
					UserDialogs.Instance.Alert("Only bound stat can modify this parameter.");
				}
				return true;
			}
			return false;
		}

		private async void ButtonSaveName_Clicked(object sender, EventArgs e)
		{
			bool flag;
			if (App.CN)
			{
				if (((rcv_GPara0 >> 12) & 3) != 2)
				{
					string text = await DisplayPromptAsync("√‹¬Î±£ª§", "øÿ÷∆∆˜ ‹«ø√‹¬Î±£ª§£¨«Î ‰»Î√‹¬Î", "»∑»œ", "»°œ˚", null, 30);
					if (text != null)
					{
						MessagingCenter.Send(this, "InputPassword", Encoding.UTF8.GetBytes(text));
					}
					return;
				}
				flag = await UserDialogs.Instance.ConfirmAsync("º¥Ω´±£¥Êøÿ÷∆∆˜ ˝æ›", null, "±£¥Ê", "»°œ˚");
			}
			else
			{
				if (((rcv_GPara0 >> 12) & 3) != 2)
				{
					string text2 = await DisplayPromptAsync("Password Protect", "Device password protected,please input password", "OK", "CANCEL", null, 30);
					if (text2 != null)
					{
						MessagingCenter.Send(this, "InputPassword", Encoding.UTF8.GetBytes(text2));
					}
					return;
				}
				flag = await UserDialogs.Instance.ConfirmAsync("Will Save Controller Data", null, "Save", "Cancel");
			}
			if (NotBindingStat() || NotOwnerStat() || !flag)
			{
				return;
			}
			DateTime now = DateTime.Now;
			if (App.NewVersion)
			{
				if (App.NewData == uint.MaxValue)
				{
					int num = 0;
					for (int i = 0; i < 156; i++)
					{
						App.wflash[num] = (byte)App.gflash[i];
						num++;
						App.wflash[num] = (byte)(App.gflash[i] >> 8);
						num++;
					}
					num = 0;
					for (int j = 0; j < 192; j++)
					{
						App.cflash[num] = (byte)App.gcflash[j];
						num++;
						App.cflash[num] = (byte)(App.gcflash[j] >> 8);
						num++;
					}
					if (App.autosave != "0")
					{
						try
						{
							App.recordtime = now.ToString("yyyyMMdd_HH:mm:ss");
							string path = App.ModelName + "_" + App.recordtime + ".heb";
							string path2 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), path);
							byte[] array = new byte[696];
							App.wflash.CopyTo(array, 0);
							App.cflash.CopyTo(array, 312);
							File.WriteAllBytes(path2, array);
						}
						catch (Exception)
						{
							if (App.CN)
							{
								UserDialogs.Instance.Alert("º«¬º≤ªƒ‹◊‘∂Ø±£¥Ê£¨«ÎºÏ≤ÈŒƒº˛¥Ê¥¢»®œﬁ£°");
							}
							else
							{
								UserDialogs.Instance.Alert("Can not save record,Please check App file storage permission.");
							}
						}
					}
					App.HasParaFile = 0;
					App.NewData = 0u;
				}
				byte[] array2 = new byte[12];
				byte[] array3 = new byte[8];
				array2[4] = (byte)(now.Year - 2000);
				array2[5] = (byte)now.Month;
				array2[6] = (byte)now.Day;
				array2[7] = (byte)now.Hour;
				array2[8] = (byte)now.Minute;
				array2[9] = (byte)now.Second;
				WriteAddr(array2, 34, 6);
				Thread.Sleep(10);
				array3[4] = 136;
				array3[5] = 4;
				WriteAddr(array3, 160, 2);
			}
			else if (!App.OldPassed && App.Mark2Old && now.Month < 9 && rcv_kzqVersion0 != 'B')
			{
				string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
				string source = App.ModelName.Substring(0, 8);
				source = ((!Enumerable.Contains(source, '_')) ? (App.ModelName.Substring(0, 13) + ".hex") : (App.ModelName.Substring(0, 12) + ".hex"));
				string destinationPath = $"{folderPath}/{source}";
				if (File.Exists(destinationPath))
				{
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Convtroller version is too low, update or not?", null, "Update", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("øÿ÷∆∆˜∞Ê±æπ˝µÕ£¨ «∑Ò…˝º∂◊Ó–¬∞Ê±æ£ø", null, "…˝º∂", "»°œ˚")))
					{
						App.fileName = destinationPath;
						App.UpdateNum = 8;
					}
				}
				else
				{
					App.UpdateNum = 1;
					if (App.CN)
					{
						UserDialogs.Instance.Alert("øÿ÷∆∆˜∞Ê±æπ˝µÕ£¨»±…Ÿ–¬∞ÊŒƒº˛£¨«Î¡™œµ≥ßº“°£");
					}
					else
					{
						UserDialogs.Instance.Alert("Convtroller version is too low, no update file, please contact manufacturer.");
					}
				}
			}
			else
			{
				SendRs232Data(21, (byte)(now.Hour + 1), (byte)(now.Minute + 1), (byte)(now.Second + 1));
				Thread.Sleep(10);
				SendRs232Data(20, (byte)(now.Year - 2000), (byte)now.Month, (byte)now.Day);
				Thread.Sleep(10);
				SendRs232Data(5, 1, 95, 95);
			}
		}

		private async void ButtonMode_Clicked(object sender, EventArgs e)
		{
			if (App.bms)
			{
				await base.Navigation.PushModalAsync(new ProBmsPage());
			}
			else
			{
				await base.Navigation.PushModalAsync(new ProControlPage());
			}
		}

		private void RESRH_Clicked(object sender, EventArgs e)
		{
			ProGressOn();
			progress.PercentComplete = 0;
			analyzetype = 2;
			analyzet = 1;
			ProGressSet();
		}

		private void SEATSRH_Clicked(object sender, EventArgs e)
		{
			ProGressOn();
			progress.PercentComplete = 0;
			analyzetype = 6;
			analyzet = 1;
			ProGressSet();
		}

		private void XHSRH_Clicked(object sender, EventArgs e)
		{
			ProGressOn();
			progress.PercentComplete = 0;
			analyzetype = 5;
			analyzet = 1;
			ProGressSet();
		}

		private void SDLSRH_Clicked(object sender, EventArgs e)
		{
			ProGressOn();
			progress.PercentComplete = 0;
			analyzetype = 4;
			analyzet = 1;
			ProGressSet();
		}

		private void SDHSRH_Clicked(object sender, EventArgs e)
		{
			ProGressOn();
			progress.PercentComplete = 0;
			analyzetype = 3;
			analyzet = 1;
			ProGressSet();
		}

		private void PSRH_Clicked(object sender, EventArgs e)
		{
			ProGressOn();
			progress.PercentComplete = 0;
			analyzetype = 0;
			analyzet = 1;
			ProGressSet();
		}

		private void Analyze(byte a, byte b)
		{
			analyzenum = 0;
			if (keystat0 != a)
			{
				for (int i = 0; i < 8; i++)
				{
					byte num = (byte)((keystat0 >> i) & 1);
					byte b2 = (byte)((a >> i) & 1);
					if (num != b2)
					{
						analyzenum = i;
						break;
					}
				}
				progress.PercentComplete += 10;
				keystat0 = a;
			}
			if (keystat1 != b)
			{
				for (int j = 0; j < 8; j++)
				{
					byte num2 = (byte)((keystat1 >> j) & 1);
					byte b3 = (byte)((b >> j) & 1);
					if (num2 != b3)
					{
						analyzenum = j + 8;
						break;
					}
				}
				progress.PercentComplete += 10;
				keystat1 = b;
			}
			if (progress.PercentComplete >= 100)
			{
				onCancelProgess();
				ConfirmProgess(analyzenum);
			}
		}

		private void ProGressSet()
		{
			if (App.CN)
			{
				progress.Title = " ∂±" + dispstrCN[analyzetype] + "π¶ƒ‹Ω≈£∫«Î«–ªªπ¶ƒ‹Ω≈◊¥Ã¨";
			}
			else
			{
				progress.Title = "Discover " + dispstrEN[analyzetype] + " function pin: Please change pin status.";
			}
		}

		private void ProGressOn()
		{
			if (App.CN)
			{
				progress = UserDialogs.Instance.Progress("", onCancelProgess, "»°œ˚", show: true, MaskType.Black);
			}
			else
			{
				progress = UserDialogs.Instance.Progress("", onCancelProgess, "Cancel", show: true, MaskType.Black);
			}
			hasprogess = true;
		}

		private async void ConfirmProgess(int num)
		{
			bool flag;
			if (App.CN)
			{
				string text = ((num <= 15) ? PINNameCN[invpintable[num]] : ("Protocol " + num));
				flag = await UserDialogs.Instance.ConfirmAsync(" ∂±µΩ" + dispstrCN[analyzetype] + ": " + text + " H97∫Û–¯∞Ê±æ÷ß≥÷", null, "»∑»œ–ﬁ∏ƒ", "»°œ˚");
			}
			else
			{
				string text = ((num <= 15) ? PINNameEN[invpintable[num]] : ("Protocol " + num));
				flag = await UserDialogs.Instance.ConfirmAsync("Discoverd " + dispstrEN[analyzetype] + ": " + text + " H97 Later support", null, "Confirm Modify", "Cancel");
			}
			if (flag)
			{
				WriteAddr(new byte[8]
				{
					0,
					0,
					0,
					0,
					(byte)analyzetype,
					(byte)num,
					0,
					0
				}, 238, 2);
			}
		}

		private void BCSRH_Clicked(object sender, EventArgs e)
		{
			ProGressOn();
			progress.PercentComplete = 0;
			analyzetype = 1;
			analyzet = 1;
			ProGressSet();
		}

		private void onCancelProgess()
		{
			progress.PercentComplete = 0;
			progress.Dispose();
			hasprogess = false;
		}

		private async void TCS_Clicked(object sender, EventArgs e)
		{
			string text = ((!App.CN) ? (await DisplayActionSheet("TCS:", "cancel", "0-TCS Off: Asphalt Road", "1-TCS On: IceSnow Road", "2-TCS On: Muddy Road", "3-TCS Off: Slow Acceleration", "4-TCS Off: Soft Acceleration")) : (await DisplayActionSheet("TCS:", "cancel", "0-TCSπÿ±’: ¡§«‡¬∑√Ê", "1-TCSø™∆Ù:±˘—©¬∑√Ê", "2-TCSø™∆Ù:ƒ‡≈¢¬∑√Ê", "3-TCSπÿ±’:¬˝º”ÀŸ", "4-TCSπÿ±’:»Ìº”ÀŸ")));
			if (NotBindingStat() || NotOwnerStat() || !(text != "cancel") || string.IsNullOrWhiteSpace(text))
			{
				return;
			}
			text = text.Substring(0, 1);
			int num = Convert.ToInt16(text);
			if (App.NewVersion && rcv_ThrottleInsert != 0)
			{
				byte[] array = new byte[8];
				switch (num)
				{
				case 0:
					array[4] = cfg190l;
					array[5] = (byte)((cfg190h & 0xF) + 128);
					WriteAddr(array, 190, 2);
					Thread.Sleep(10);
					array[4] = (byte)(rcv_ThrottleInsert & 0xDF);
					array[5] = (byte)(rcv_ThrottleInsert >> 8);
					WriteAddr(array, 200, 2);
					Thread.Sleep(10);
					array[4] = (byte)App.gflash[9];
					array[5] = (byte)((App.gflash[9] >> 8) | 0x20);
					WriteAddr(array, 9, 2);
					break;
				case 1:
					array[4] = cfg190l;
					array[5] = (byte)((cfg190h & 0xF) + 64);
					WriteAddr(array, 190, 2);
					Thread.Sleep(10);
					array[4] = (byte)(rcv_ThrottleInsert | 0x20);
					array[5] = (byte)(rcv_ThrottleInsert >> 8);
					WriteAddr(array, 200, 2);
					Thread.Sleep(10);
					array[4] = (byte)App.gflash[9];
					array[5] = (byte)((App.gflash[9] >> 8) & 0xDF);
					WriteAddr(array, 9, 2);
					break;
				case 2:
					array[4] = cfg190l;
					array[5] = (byte)((cfg190h & 0xF) + 96);
					WriteAddr(array, 190, 2);
					Thread.Sleep(10);
					array[4] = (byte)(rcv_ThrottleInsert | 0x20);
					array[5] = (byte)(rcv_ThrottleInsert >> 8);
					WriteAddr(array, 200, 2);
					Thread.Sleep(10);
					array[4] = (byte)App.gflash[9];
					array[5] = (byte)((App.gflash[9] >> 8) & 0xDF);
					WriteAddr(array, 9, 2);
					break;
				case 3:
					array[4] = cfg190l;
					array[5] = (byte)((cfg190h & 0xF) + 32);
					WriteAddr(array, 190, 2);
					Thread.Sleep(10);
					array[4] = (byte)(rcv_ThrottleInsert & 0xDF);
					array[5] = (byte)(rcv_ThrottleInsert >> 8);
					WriteAddr(array, 200, 2);
					Thread.Sleep(10);
					array[4] = (byte)App.gflash[9];
					array[5] = (byte)((App.gflash[9] >> 8) & 0xDF);
					WriteAddr(array, 9, 2);
					Thread.Sleep(10);
					array[4] = (byte)App.gflash[9];
					array[5] = (byte)((App.gflash[9] >> 8) | 0x20);
					WriteAddr(array, 9, 2);
					break;
				case 4:
					array[4] = cfg190l;
					array[5] = (byte)((cfg190h & 0xF) + 64);
					WriteAddr(array, 190, 2);
					Thread.Sleep(10);
					array[4] = (byte)(rcv_ThrottleInsert & 0xDF);
					array[5] = (byte)(rcv_ThrottleInsert >> 8);
					WriteAddr(array, 200, 2);
					Thread.Sleep(10);
					array[4] = (byte)App.gflash[9];
					array[5] = (byte)((App.gflash[9] >> 8) | 0x20);
					WriteAddr(array, 9, 2);
					break;
				}
			}
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			if (ResourceLoader.IsEnabled && ResourceLoader.CanProvideContentFor(new ResourceLoader.ResourceLoadingQuery
			{
				AssemblyName = typeof(ParaPage).GetTypeInfo().Assembly.GetName(),
				ResourcePath = "ParaPage.xaml",
				Instance = this
			}))
			{
				__InitComponentRuntime();
				return;
			}
			if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
			{
				__InitComponentRuntime();
				return;
			}
			RowDefinition rowDefinition;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 11, 18);
			RowDefinition rowDefinition2;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition2 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 12, 18);
			SKCanvasView sKCanvasView;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView = new SKCanvasView(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 16, 22);
			Label label;
			VisualDiagnostics.RegisterSourceInfo(label = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 20, 22);
			ColumnDefinition columnDefinition;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 23, 30);
			ColumnDefinition columnDefinition2;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition2 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 24, 30);
			RowDefinition rowDefinition3;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition3 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 28, 34);
			RowDefinition rowDefinition4;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition4 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 29, 34);
			RowDefinition rowDefinition5;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition5 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 30, 34);
			RowDefinition rowDefinition6;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition6 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 31, 34);
			Label label2;
			VisualDiagnostics.RegisterSourceInfo(label2 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 34, 34);
			Label label3;
			VisualDiagnostics.RegisterSourceInfo(label3 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 35, 34);
			StackLayout stackLayout;
			VisualDiagnostics.RegisterSourceInfo(stackLayout = new StackLayout(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 33, 30);
			Label label4;
			VisualDiagnostics.RegisterSourceInfo(label4 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 38, 34);
			Label label5;
			VisualDiagnostics.RegisterSourceInfo(label5 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 39, 34);
			StackLayout stackLayout2;
			VisualDiagnostics.RegisterSourceInfo(stackLayout2 = new StackLayout(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 37, 30);
			Label label6;
			VisualDiagnostics.RegisterSourceInfo(label6 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 42, 34);
			Label label7;
			VisualDiagnostics.RegisterSourceInfo(label7 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 43, 34);
			StackLayout stackLayout3;
			VisualDiagnostics.RegisterSourceInfo(stackLayout3 = new StackLayout(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 41, 30);
			Label label8;
			VisualDiagnostics.RegisterSourceInfo(label8 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 46, 34);
			Label label9;
			VisualDiagnostics.RegisterSourceInfo(label9 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 47, 34);
			StackLayout stackLayout4;
			VisualDiagnostics.RegisterSourceInfo(stackLayout4 = new StackLayout(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 45, 30);
			Grid grid;
			VisualDiagnostics.RegisterSourceInfo(grid = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 26, 26);
			SKCanvasView sKCanvasView2;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView2 = new SKCanvasView(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 50, 26);
			Grid grid2;
			VisualDiagnostics.RegisterSourceInfo(grid2 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 21, 22);
			Label label10;
			VisualDiagnostics.RegisterSourceInfo(label10 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 56, 26);
			StackLayout stackLayout5;
			VisualDiagnostics.RegisterSourceInfo(stackLayout5 = new StackLayout(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 55, 22);
			ColumnDefinition columnDefinition3;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition3 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 60, 30);
			ColumnDefinition columnDefinition4;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition4 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 61, 30);
			Label label11;
			VisualDiagnostics.RegisterSourceInfo(label11 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 63, 26);
			Label label12;
			VisualDiagnostics.RegisterSourceInfo(label12 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 64, 26);
			Xamarin.Forms.Button button;
			VisualDiagnostics.RegisterSourceInfo(button = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 65, 26);
			Xamarin.Forms.Button button2;
			VisualDiagnostics.RegisterSourceInfo(button2 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 66, 26);
			Grid grid3;
			VisualDiagnostics.RegisterSourceInfo(grid3 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 58, 22);
			Xamarin.Forms.Button button3;
			VisualDiagnostics.RegisterSourceInfo(button3 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 68, 22);
			ColumnDefinition columnDefinition5;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition5 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 71, 30);
			ColumnDefinition columnDefinition6;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition6 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 72, 30);
			Label label13;
			VisualDiagnostics.RegisterSourceInfo(label13 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 74, 26);
			Label label14;
			VisualDiagnostics.RegisterSourceInfo(label14 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 75, 26);
			Grid grid4;
			VisualDiagnostics.RegisterSourceInfo(grid4 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 69, 22);
			Label label15;
			VisualDiagnostics.RegisterSourceInfo(label15 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 78, 26);
			ColumnDefinition columnDefinition7;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition7 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 81, 34);
			ColumnDefinition columnDefinition8;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition8 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 82, 34);
			ColumnDefinition columnDefinition9;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition9 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 83, 34);
			ColumnDefinition columnDefinition10;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition10 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 84, 34);
			RowDefinition rowDefinition7;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition7 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 88, 38);
			RowDefinition rowDefinition8;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition8 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 89, 38);
			Label label16;
			VisualDiagnostics.RegisterSourceInfo(label16 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 91, 34);
			Label label17;
			VisualDiagnostics.RegisterSourceInfo(label17 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 92, 34);
			Grid grid5;
			VisualDiagnostics.RegisterSourceInfo(grid5 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 86, 30);
			Xamarin.Forms.Switch obj;
			VisualDiagnostics.RegisterSourceInfo(obj = new Xamarin.Forms.Switch(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 94, 30);
			Xamarin.Forms.Button button4;
			VisualDiagnostics.RegisterSourceInfo(button4 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 95, 31);
			Grid grid6;
			VisualDiagnostics.RegisterSourceInfo(grid6 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 79, 26);
			ColumnDefinition columnDefinition11;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition11 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 99, 18);
			ColumnDefinition columnDefinition12;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition12 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 100, 18);
			ColumnDefinition columnDefinition13;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition13 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 101, 18);
			RowDefinition rowDefinition9;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition9 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 105, 22);
			RowDefinition rowDefinition10;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition10 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 106, 22);
			Label label18;
			VisualDiagnostics.RegisterSourceInfo(label18 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 108, 18);
			Label label19;
			VisualDiagnostics.RegisterSourceInfo(label19 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 109, 18);
			Grid grid7;
			VisualDiagnostics.RegisterSourceInfo(grid7 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 103, 14);
			Xamarin.Forms.Button button5;
			VisualDiagnostics.RegisterSourceInfo(button5 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 111, 13);
			Label label20;
			VisualDiagnostics.RegisterSourceInfo(label20 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 112, 14);
			Grid grid8;
			VisualDiagnostics.RegisterSourceInfo(grid8 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 97, 10);
			ColumnDefinition columnDefinition14;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition14 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 117, 18);
			ColumnDefinition columnDefinition15;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition15 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 118, 18);
			ColumnDefinition columnDefinition16;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition16 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 119, 18);
			RowDefinition rowDefinition11;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition11 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 123, 22);
			RowDefinition rowDefinition12;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition12 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 124, 22);
			Label label21;
			VisualDiagnostics.RegisterSourceInfo(label21 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 126, 18);
			Label label22;
			VisualDiagnostics.RegisterSourceInfo(label22 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 127, 18);
			Grid grid9;
			VisualDiagnostics.RegisterSourceInfo(grid9 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 121, 14);
			Xamarin.Forms.Button button6;
			VisualDiagnostics.RegisterSourceInfo(button6 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 129, 13);
			Label label23;
			VisualDiagnostics.RegisterSourceInfo(label23 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 130, 14);
			Grid grid10;
			VisualDiagnostics.RegisterSourceInfo(grid10 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 115, 10);
			ColumnDefinition columnDefinition17;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition17 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 134, 18);
			ColumnDefinition columnDefinition18;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition18 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 135, 18);
			ColumnDefinition columnDefinition19;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition19 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 136, 18);
			RowDefinition rowDefinition13;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition13 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 140, 22);
			RowDefinition rowDefinition14;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition14 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 141, 22);
			Label label24;
			VisualDiagnostics.RegisterSourceInfo(label24 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 143, 18);
			Label label25;
			VisualDiagnostics.RegisterSourceInfo(label25 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 144, 18);
			Grid grid11;
			VisualDiagnostics.RegisterSourceInfo(grid11 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 138, 14);
			Xamarin.Forms.Button button7;
			VisualDiagnostics.RegisterSourceInfo(button7 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 146, 13);
			Label label26;
			VisualDiagnostics.RegisterSourceInfo(label26 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 147, 14);
			Grid grid12;
			VisualDiagnostics.RegisterSourceInfo(grid12 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 132, 10);
			Label label27;
			VisualDiagnostics.RegisterSourceInfo(label27 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 149, 10);
			ColumnDefinition columnDefinition20;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition20 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 152, 18);
			ColumnDefinition columnDefinition21;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition21 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 153, 18);
			ColumnDefinition columnDefinition22;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition22 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 154, 18);
			RowDefinition rowDefinition15;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition15 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 158, 22);
			RowDefinition rowDefinition16;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition16 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 159, 22);
			Label label28;
			VisualDiagnostics.RegisterSourceInfo(label28 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 161, 18);
			Xamarin.Forms.Slider slider;
			VisualDiagnostics.RegisterSourceInfo(slider = new Xamarin.Forms.Slider(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 162, 18);
			Grid grid13;
			VisualDiagnostics.RegisterSourceInfo(grid13 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 156, 14);
			Label label29;
			VisualDiagnostics.RegisterSourceInfo(label29 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 164, 14);
			Grid grid14;
			VisualDiagnostics.RegisterSourceInfo(grid14 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 150, 10);
			ColumnDefinition columnDefinition23;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition23 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 168, 18);
			ColumnDefinition columnDefinition24;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition24 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 169, 18);
			ColumnDefinition columnDefinition25;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition25 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 170, 18);
			RowDefinition rowDefinition17;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition17 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 174, 22);
			RowDefinition rowDefinition18;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition18 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 175, 22);
			Label label30;
			VisualDiagnostics.RegisterSourceInfo(label30 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 177, 18);
			Xamarin.Forms.Slider slider2;
			VisualDiagnostics.RegisterSourceInfo(slider2 = new Xamarin.Forms.Slider(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 178, 18);
			Grid grid15;
			VisualDiagnostics.RegisterSourceInfo(grid15 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 172, 14);
			Label label31;
			VisualDiagnostics.RegisterSourceInfo(label31 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 180, 14);
			Grid grid16;
			VisualDiagnostics.RegisterSourceInfo(grid16 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 166, 10);
			ColumnDefinition columnDefinition26;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition26 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 184, 18);
			ColumnDefinition columnDefinition27;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition27 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 185, 18);
			ColumnDefinition columnDefinition28;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition28 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 186, 18);
			RowDefinition rowDefinition19;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition19 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 190, 22);
			RowDefinition rowDefinition20;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition20 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 191, 22);
			Label label32;
			VisualDiagnostics.RegisterSourceInfo(label32 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 193, 18);
			Xamarin.Forms.Slider slider3;
			VisualDiagnostics.RegisterSourceInfo(slider3 = new Xamarin.Forms.Slider(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 194, 18);
			Grid grid17;
			VisualDiagnostics.RegisterSourceInfo(grid17 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 188, 14);
			Label label33;
			VisualDiagnostics.RegisterSourceInfo(label33 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 196, 14);
			Grid grid18;
			VisualDiagnostics.RegisterSourceInfo(grid18 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 182, 10);
			ColumnDefinition columnDefinition29;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition29 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 200, 18);
			ColumnDefinition columnDefinition30;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition30 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 201, 18);
			ColumnDefinition columnDefinition31;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition31 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 202, 18);
			RowDefinition rowDefinition21;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition21 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 206, 22);
			RowDefinition rowDefinition22;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition22 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 207, 22);
			Label label34;
			VisualDiagnostics.RegisterSourceInfo(label34 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 209, 18);
			Xamarin.Forms.Slider slider4;
			VisualDiagnostics.RegisterSourceInfo(slider4 = new Xamarin.Forms.Slider(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 210, 18);
			Grid grid19;
			VisualDiagnostics.RegisterSourceInfo(grid19 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 204, 14);
			Label label35;
			VisualDiagnostics.RegisterSourceInfo(label35 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 212, 14);
			Grid grid20;
			VisualDiagnostics.RegisterSourceInfo(grid20 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 198, 10);
			ColumnDefinition columnDefinition32;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition32 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 216, 18);
			ColumnDefinition columnDefinition33;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition33 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 217, 18);
			ColumnDefinition columnDefinition34;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition34 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 218, 18);
			RowDefinition rowDefinition23;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition23 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 222, 22);
			RowDefinition rowDefinition24;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition24 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 223, 22);
			Label label36;
			VisualDiagnostics.RegisterSourceInfo(label36 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 225, 18);
			Xamarin.Forms.Slider slider5;
			VisualDiagnostics.RegisterSourceInfo(slider5 = new Xamarin.Forms.Slider(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 226, 18);
			Grid grid21;
			VisualDiagnostics.RegisterSourceInfo(grid21 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 220, 14);
			Label label37;
			VisualDiagnostics.RegisterSourceInfo(label37 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 228, 14);
			Grid grid22;
			VisualDiagnostics.RegisterSourceInfo(grid22 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 214, 10);
			ColumnDefinition columnDefinition35;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition35 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 232, 18);
			ColumnDefinition columnDefinition36;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition36 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 233, 18);
			ColumnDefinition columnDefinition37;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition37 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 234, 18);
			RowDefinition rowDefinition25;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition25 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 238, 22);
			RowDefinition rowDefinition26;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition26 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 239, 22);
			Label label38;
			VisualDiagnostics.RegisterSourceInfo(label38 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 241, 18);
			Xamarin.Forms.Slider slider6;
			VisualDiagnostics.RegisterSourceInfo(slider6 = new Xamarin.Forms.Slider(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 242, 18);
			Grid grid23;
			VisualDiagnostics.RegisterSourceInfo(grid23 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 236, 14);
			Label label39;
			VisualDiagnostics.RegisterSourceInfo(label39 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 244, 14);
			Grid grid24;
			VisualDiagnostics.RegisterSourceInfo(grid24 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 230, 10);
			Label label40;
			VisualDiagnostics.RegisterSourceInfo(label40 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 246, 10);
			ColumnDefinition columnDefinition38;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition38 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 249, 18);
			ColumnDefinition columnDefinition39;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition39 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 250, 18);
			ColumnDefinition columnDefinition40;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition40 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 251, 18);
			ColumnDefinition columnDefinition41;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition41 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 252, 18);
			Label label41;
			VisualDiagnostics.RegisterSourceInfo(label41 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 254, 14);
			Xamarin.Forms.Button button8;
			VisualDiagnostics.RegisterSourceInfo(button8 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 255, 14);
			RowDefinition rowDefinition27;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition27 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 258, 22);
			RowDefinition rowDefinition28;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition28 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 259, 22);
			Label label42;
			VisualDiagnostics.RegisterSourceInfo(label42 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 261, 18);
			Label label43;
			VisualDiagnostics.RegisterSourceInfo(label43 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 262, 18);
			Grid grid25;
			VisualDiagnostics.RegisterSourceInfo(grid25 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 256, 14);
			Xamarin.Forms.Switch obj2;
			VisualDiagnostics.RegisterSourceInfo(obj2 = new Xamarin.Forms.Switch(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 264, 14);
			Xamarin.Forms.Button button9;
			VisualDiagnostics.RegisterSourceInfo(button9 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 265, 14);
			Grid grid26;
			VisualDiagnostics.RegisterSourceInfo(grid26 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 247, 10);
			ColumnDefinition columnDefinition42;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition42 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 269, 18);
			ColumnDefinition columnDefinition43;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition43 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 270, 18);
			ColumnDefinition columnDefinition44;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition44 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 271, 18);
			ColumnDefinition columnDefinition45;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition45 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 272, 18);
			Label label44;
			VisualDiagnostics.RegisterSourceInfo(label44 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 274, 14);
			Xamarin.Forms.Button button10;
			VisualDiagnostics.RegisterSourceInfo(button10 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 275, 14);
			RowDefinition rowDefinition29;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition29 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 278, 22);
			RowDefinition rowDefinition30;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition30 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 279, 22);
			Label label45;
			VisualDiagnostics.RegisterSourceInfo(label45 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 281, 18);
			Label label46;
			VisualDiagnostics.RegisterSourceInfo(label46 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 282, 18);
			Grid grid27;
			VisualDiagnostics.RegisterSourceInfo(grid27 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 276, 14);
			Xamarin.Forms.Switch obj3;
			VisualDiagnostics.RegisterSourceInfo(obj3 = new Xamarin.Forms.Switch(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 284, 14);
			Xamarin.Forms.Button button11;
			VisualDiagnostics.RegisterSourceInfo(button11 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 285, 14);
			Grid grid28;
			VisualDiagnostics.RegisterSourceInfo(grid28 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 267, 10);
			ColumnDefinition columnDefinition46;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition46 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 289, 18);
			ColumnDefinition columnDefinition47;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition47 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 290, 18);
			ColumnDefinition columnDefinition48;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition48 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 291, 18);
			ColumnDefinition columnDefinition49;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition49 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 292, 18);
			RowDefinition rowDefinition31;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition31 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 296, 22);
			RowDefinition rowDefinition32;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition32 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 297, 22);
			Label label47;
			VisualDiagnostics.RegisterSourceInfo(label47 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 299, 18);
			Label label48;
			VisualDiagnostics.RegisterSourceInfo(label48 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 300, 18);
			Grid grid29;
			VisualDiagnostics.RegisterSourceInfo(grid29 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 294, 14);
			Xamarin.Forms.Switch obj4;
			VisualDiagnostics.RegisterSourceInfo(obj4 = new Xamarin.Forms.Switch(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 302, 14);
			Xamarin.Forms.Button button12;
			VisualDiagnostics.RegisterSourceInfo(button12 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 303, 14);
			Grid grid30;
			VisualDiagnostics.RegisterSourceInfo(grid30 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 287, 10);
			ColumnDefinition columnDefinition50;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition50 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 307, 18);
			ColumnDefinition columnDefinition51;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition51 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 308, 18);
			ColumnDefinition columnDefinition52;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition52 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 309, 18);
			ColumnDefinition columnDefinition53;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition53 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 310, 18);
			Label label49;
			VisualDiagnostics.RegisterSourceInfo(label49 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 312, 14);
			Xamarin.Forms.Button button13;
			VisualDiagnostics.RegisterSourceInfo(button13 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 313, 14);
			RowDefinition rowDefinition33;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition33 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 316, 22);
			RowDefinition rowDefinition34;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition34 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 317, 22);
			Label label50;
			VisualDiagnostics.RegisterSourceInfo(label50 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 319, 18);
			Label label51;
			VisualDiagnostics.RegisterSourceInfo(label51 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 320, 18);
			Grid grid31;
			VisualDiagnostics.RegisterSourceInfo(grid31 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 314, 14);
			Xamarin.Forms.Button button14;
			VisualDiagnostics.RegisterSourceInfo(button14 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 322, 13);
			Label label52;
			VisualDiagnostics.RegisterSourceInfo(label52 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 323, 14);
			Grid grid32;
			VisualDiagnostics.RegisterSourceInfo(grid32 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 305, 10);
			ColumnDefinition columnDefinition54;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition54 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 327, 18);
			ColumnDefinition columnDefinition55;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition55 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 328, 18);
			ColumnDefinition columnDefinition56;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition56 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 329, 18);
			ColumnDefinition columnDefinition57;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition57 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 330, 18);
			Label label53;
			VisualDiagnostics.RegisterSourceInfo(label53 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 332, 14);
			Xamarin.Forms.Button button15;
			VisualDiagnostics.RegisterSourceInfo(button15 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 333, 14);
			RowDefinition rowDefinition35;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition35 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 336, 22);
			RowDefinition rowDefinition36;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition36 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 337, 22);
			Label label54;
			VisualDiagnostics.RegisterSourceInfo(label54 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 339, 18);
			Label label55;
			VisualDiagnostics.RegisterSourceInfo(label55 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 340, 18);
			Grid grid33;
			VisualDiagnostics.RegisterSourceInfo(grid33 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 334, 14);
			Xamarin.Forms.Button button16;
			VisualDiagnostics.RegisterSourceInfo(button16 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 342, 13);
			Label label56;
			VisualDiagnostics.RegisterSourceInfo(label56 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 343, 14);
			Grid grid34;
			VisualDiagnostics.RegisterSourceInfo(grid34 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 325, 10);
			ColumnDefinition columnDefinition58;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition58 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 347, 18);
			ColumnDefinition columnDefinition59;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition59 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 348, 18);
			ColumnDefinition columnDefinition60;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition60 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 349, 18);
			ColumnDefinition columnDefinition61;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition61 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 350, 18);
			Label label57;
			VisualDiagnostics.RegisterSourceInfo(label57 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 352, 14);
			Xamarin.Forms.Button button17;
			VisualDiagnostics.RegisterSourceInfo(button17 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 353, 14);
			RowDefinition rowDefinition37;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition37 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 356, 22);
			RowDefinition rowDefinition38;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition38 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 357, 22);
			Label label58;
			VisualDiagnostics.RegisterSourceInfo(label58 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 359, 18);
			Label label59;
			VisualDiagnostics.RegisterSourceInfo(label59 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 360, 18);
			Grid grid35;
			VisualDiagnostics.RegisterSourceInfo(grid35 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 354, 14);
			Xamarin.Forms.Switch obj5;
			VisualDiagnostics.RegisterSourceInfo(obj5 = new Xamarin.Forms.Switch(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 362, 14);
			Xamarin.Forms.Button button18;
			VisualDiagnostics.RegisterSourceInfo(button18 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 363, 14);
			Grid grid36;
			VisualDiagnostics.RegisterSourceInfo(grid36 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 345, 10);
			ColumnDefinition columnDefinition62;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition62 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 367, 18);
			ColumnDefinition columnDefinition63;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition63 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 368, 18);
			ColumnDefinition columnDefinition64;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition64 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 369, 18);
			ColumnDefinition columnDefinition65;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition65 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 370, 18);
			Label label60;
			VisualDiagnostics.RegisterSourceInfo(label60 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 372, 14);
			Xamarin.Forms.Button button19;
			VisualDiagnostics.RegisterSourceInfo(button19 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 373, 14);
			RowDefinition rowDefinition39;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition39 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 376, 22);
			RowDefinition rowDefinition40;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition40 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 377, 22);
			Label label61;
			VisualDiagnostics.RegisterSourceInfo(label61 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 379, 18);
			Label label62;
			VisualDiagnostics.RegisterSourceInfo(label62 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 380, 18);
			Grid grid37;
			VisualDiagnostics.RegisterSourceInfo(grid37 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 374, 14);
			Xamarin.Forms.Switch obj6;
			VisualDiagnostics.RegisterSourceInfo(obj6 = new Xamarin.Forms.Switch(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 382, 14);
			Xamarin.Forms.Button button20;
			VisualDiagnostics.RegisterSourceInfo(button20 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 383, 14);
			Grid grid38;
			VisualDiagnostics.RegisterSourceInfo(grid38 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 365, 10);
			ColumnDefinition columnDefinition66;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition66 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 387, 18);
			ColumnDefinition columnDefinition67;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition67 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 388, 18);
			ColumnDefinition columnDefinition68;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition68 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 389, 18);
			ColumnDefinition columnDefinition69;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition69 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 390, 18);
			RowDefinition rowDefinition41;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition41 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 394, 22);
			RowDefinition rowDefinition42;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition42 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 395, 22);
			Label label63;
			VisualDiagnostics.RegisterSourceInfo(label63 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 397, 18);
			Label label64;
			VisualDiagnostics.RegisterSourceInfo(label64 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 398, 18);
			Grid grid39;
			VisualDiagnostics.RegisterSourceInfo(grid39 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 392, 14);
			Xamarin.Forms.Switch obj7;
			VisualDiagnostics.RegisterSourceInfo(obj7 = new Xamarin.Forms.Switch(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 400, 14);
			Xamarin.Forms.Button button21;
			VisualDiagnostics.RegisterSourceInfo(button21 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 401, 14);
			Grid grid40;
			VisualDiagnostics.RegisterSourceInfo(grid40 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 385, 10);
			ColumnDefinition columnDefinition70;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition70 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 405, 18);
			ColumnDefinition columnDefinition71;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition71 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 406, 18);
			ColumnDefinition columnDefinition72;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition72 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 407, 18);
			ColumnDefinition columnDefinition73;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition73 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 408, 18);
			Label label65;
			VisualDiagnostics.RegisterSourceInfo(label65 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 410, 14);
			Xamarin.Forms.Button button22;
			VisualDiagnostics.RegisterSourceInfo(button22 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 411, 14);
			RowDefinition rowDefinition43;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition43 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 414, 22);
			RowDefinition rowDefinition44;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition44 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 415, 22);
			Label label66;
			VisualDiagnostics.RegisterSourceInfo(label66 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 417, 18);
			Label label67;
			VisualDiagnostics.RegisterSourceInfo(label67 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 418, 18);
			Grid grid41;
			VisualDiagnostics.RegisterSourceInfo(grid41 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 412, 14);
			Xamarin.Forms.Switch obj8;
			VisualDiagnostics.RegisterSourceInfo(obj8 = new Xamarin.Forms.Switch(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 420, 14);
			Xamarin.Forms.Button button23;
			VisualDiagnostics.RegisterSourceInfo(button23 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 421, 14);
			Grid grid42;
			VisualDiagnostics.RegisterSourceInfo(grid42 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 403, 10);
			ColumnDefinition columnDefinition74;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition74 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 425, 18);
			ColumnDefinition columnDefinition75;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition75 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 426, 18);
			ColumnDefinition columnDefinition76;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition76 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 427, 18);
			ColumnDefinition columnDefinition77;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition77 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 428, 18);
			RowDefinition rowDefinition45;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition45 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 432, 22);
			RowDefinition rowDefinition46;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition46 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 433, 22);
			Label label68;
			VisualDiagnostics.RegisterSourceInfo(label68 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 435, 18);
			Label label69;
			VisualDiagnostics.RegisterSourceInfo(label69 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 436, 18);
			Grid grid43;
			VisualDiagnostics.RegisterSourceInfo(grid43 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 430, 14);
			Xamarin.Forms.Switch obj9;
			VisualDiagnostics.RegisterSourceInfo(obj9 = new Xamarin.Forms.Switch(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 438, 14);
			Xamarin.Forms.Button button24;
			VisualDiagnostics.RegisterSourceInfo(button24 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 439, 14);
			Grid grid44;
			VisualDiagnostics.RegisterSourceInfo(grid44 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 423, 10);
			ColumnDefinition columnDefinition78;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition78 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 443, 18);
			ColumnDefinition columnDefinition79;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition79 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 444, 18);
			ColumnDefinition columnDefinition80;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition80 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 445, 18);
			ColumnDefinition columnDefinition81;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition81 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 446, 18);
			RowDefinition rowDefinition47;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition47 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 450, 22);
			RowDefinition rowDefinition48;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition48 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 451, 22);
			Label label70;
			VisualDiagnostics.RegisterSourceInfo(label70 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 453, 18);
			Label label71;
			VisualDiagnostics.RegisterSourceInfo(label71 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 454, 18);
			Grid grid45;
			VisualDiagnostics.RegisterSourceInfo(grid45 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 448, 14);
			Xamarin.Forms.Button button25;
			VisualDiagnostics.RegisterSourceInfo(button25 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 456, 13);
			Label label72;
			VisualDiagnostics.RegisterSourceInfo(label72 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 457, 14);
			Grid grid46;
			VisualDiagnostics.RegisterSourceInfo(grid46 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 441, 10);
			ColumnDefinition columnDefinition82;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition82 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 461, 18);
			ColumnDefinition columnDefinition83;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition83 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 462, 18);
			ColumnDefinition columnDefinition84;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition84 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 463, 18);
			ColumnDefinition columnDefinition85;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition85 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 464, 18);
			RowDefinition rowDefinition49;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition49 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 468, 22);
			RowDefinition rowDefinition50;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition50 = new RowDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 469, 22);
			Label label73;
			VisualDiagnostics.RegisterSourceInfo(label73 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 471, 18);
			Label label74;
			VisualDiagnostics.RegisterSourceInfo(label74 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 472, 18);
			Grid grid47;
			VisualDiagnostics.RegisterSourceInfo(grid47 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 466, 14);
			Xamarin.Forms.Button button26;
			VisualDiagnostics.RegisterSourceInfo(button26 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 474, 13);
			Label label75;
			VisualDiagnostics.RegisterSourceInfo(label75 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 475, 14);
			Grid grid48;
			VisualDiagnostics.RegisterSourceInfo(grid48 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 459, 10);
			StackLayout stackLayout6;
			VisualDiagnostics.RegisterSourceInfo(stackLayout6 = new StackLayout(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 77, 22);
			StackLayout stackLayout7;
			VisualDiagnostics.RegisterSourceInfo(stackLayout7 = new StackLayout(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 15, 18);
			Xamarin.Forms.ScrollView scrollView;
			VisualDiagnostics.RegisterSourceInfo(scrollView = new Xamarin.Forms.ScrollView(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 14, 14);
			ColumnDefinition columnDefinition86;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition86 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 1366, 22);
			ColumnDefinition columnDefinition87;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition87 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 1367, 22);
			ColumnDefinition columnDefinition88;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition88 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 1368, 22);
			ColumnDefinition columnDefinition89;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition89 = new ColumnDefinition(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 1369, 22);
			Xamarin.Forms.Button button27;
			VisualDiagnostics.RegisterSourceInfo(button27 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 1371, 18);
			Xamarin.Forms.Button button28;
			VisualDiagnostics.RegisterSourceInfo(button28 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 1374, 18);
			Xamarin.Forms.Button button29;
			VisualDiagnostics.RegisterSourceInfo(button29 = new Xamarin.Forms.Button(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 1377, 18);
			Label label76;
			VisualDiagnostics.RegisterSourceInfo(label76 = new Label(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 1380, 18);
			Grid grid49;
			VisualDiagnostics.RegisterSourceInfo(grid49 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 1364, 14);
			Grid grid50;
			VisualDiagnostics.RegisterSourceInfo(grid50 = new Grid(), new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 9, 10);
			ParaPage paraPage;
			VisualDiagnostics.RegisterSourceInfo(paraPage = this, new Uri("ParaPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 2, 2);
			NameScope nameScope = (NameScope)(NameScope.GetNameScope(paraPage) ?? new NameScope());
			NameScope.SetNameScope(paraPage, nameScope);
			((INameScope)nameScope).RegisterName("girdall", (object)grid50);
			if (grid50.StyleId == null)
			{
				grid50.StyleId = "girdall";
			}
			((INameScope)nameScope).RegisterName("DetailView", (object)scrollView);
			if (scrollView.StyleId == null)
			{
				scrollView.StyleId = "DetailView";
			}
			((INameScope)nameScope).RegisterName("controllerView", (object)sKCanvasView);
			if (sKCanvasView.StyleId == null)
			{
				sKCanvasView.StyleId = "controllerView";
			}
			((INameScope)nameScope).RegisterName("RowText0", (object)label);
			if (label.StyleId == null)
			{
				label.StyleId = "RowText0";
			}
			((INameScope)nameScope).RegisterName("ModelFactoryName", (object)label2);
			if (label2.StyleId == null)
			{
				label2.StyleId = "ModelFactoryName";
			}
			((INameScope)nameScope).RegisterName("ModelName", (object)label3);
			if (label3.StyleId == null)
			{
				label3.StyleId = "ModelName";
			}
			((INameScope)nameScope).RegisterName("ModelTypeName", (object)label4);
			if (label4.StyleId == null)
			{
				label4.StyleId = "ModelTypeName";
			}
			((INameScope)nameScope).RegisterName("ModelType", (object)label5);
			if (label5.StyleId == null)
			{
				label5.StyleId = "ModelType";
			}
			((INameScope)nameScope).RegisterName("ModelPowerName", (object)label6);
			if (label6.StyleId == null)
			{
				label6.StyleId = "ModelPowerName";
			}
			((INameScope)nameScope).RegisterName("ModelPower", (object)label7);
			if (label7.StyleId == null)
			{
				label7.StyleId = "ModelPower";
			}
			((INameScope)nameScope).RegisterName("ModelCurrName", (object)label8);
			if (label8.StyleId == null)
			{
				label8.StyleId = "ModelCurrName";
			}
			((INameScope)nameScope).RegisterName("ModelCurr", (object)label9);
			if (label9.StyleId == null)
			{
				label9.StyleId = "ModelCurr";
			}
			((INameScope)nameScope).RegisterName("ewmView", (object)sKCanvasView2);
			if (sKCanvasView2.StyleId == null)
			{
				sKCanvasView2.StyleId = "ewmView";
			}
			((INameScope)nameScope).RegisterName("ModelNumber", (object)label10);
			if (label10.StyleId == null)
			{
				label10.StyleId = "ModelNumber";
			}
			((INameScope)nameScope).RegisterName("CustomCode", (object)label11);
			if (label11.StyleId == null)
			{
				label11.StyleId = "CustomCode";
			}
			((INameScope)nameScope).RegisterName("MorseCodeName", (object)label12);
			if (label12.StyleId == null)
			{
				label12.StyleId = "MorseCodeName";
			}
			((INameScope)nameScope).RegisterName("RowDateTime", (object)button3);
			if (button3.StyleId == null)
			{
				button3.StyleId = "RowDateTime";
			}
			((INameScope)nameScope).RegisterName("DateTimeGrid", (object)grid4);
			if (grid4.StyleId == null)
			{
				grid4.StyleId = "DateTimeGrid";
			}
			((INameScope)nameScope).RegisterName("ModelDate", (object)label13);
			if (label13.StyleId == null)
			{
				label13.StyleId = "ModelDate";
			}
			((INameScope)nameScope).RegisterName("ModelTime", (object)label14);
			if (label14.StyleId == null)
			{
				label14.StyleId = "ModelTime";
			}
			((INameScope)nameScope).RegisterName("BasePara", (object)label15);
			if (label15.StyleId == null)
			{
				label15.StyleId = "BasePara";
			}
			((INameScope)nameScope).RegisterName("DIRName", (object)label16);
			if (label16.StyleId == null)
			{
				label16.StyleId = "DIRName";
			}
			((INameScope)nameScope).RegisterName("DIRDsName", (object)label17);
			if (label17.StyleId == null)
			{
				label17.StyleId = "DIRDsName";
			}
			((INameScope)nameScope).RegisterName("DIRStat", (object)obj);
			if (obj.StyleId == null)
			{
				obj.StyleId = "DIRStat";
			}
			((INameScope)nameScope).RegisterName("RatedVolName", (object)label18);
			if (label18.StyleId == null)
			{
				label18.StyleId = "RatedVolName";
			}
			((INameScope)nameScope).RegisterName("RatedVolDsName", (object)label19);
			if (label19.StyleId == null)
			{
				label19.StyleId = "RatedVolDsName";
			}
			((INameScope)nameScope).RegisterName("LimitWayName", (object)label21);
			if (label21.StyleId == null)
			{
				label21.StyleId = "LimitWayName";
			}
			((INameScope)nameScope).RegisterName("LimitWayDsName", (object)label22);
			if (label22.StyleId == null)
			{
				label22.StyleId = "LimitWayDsName";
			}
			((INameScope)nameScope).RegisterName("EnergyBackName", (object)label24);
			if (label24.StyleId == null)
			{
				label24.StyleId = "EnergyBackName";
			}
			((INameScope)nameScope).RegisterName("EnergyBackDsName", (object)label25);
			if (label25.StyleId == null)
			{
				label25.StyleId = "EnergyBackDsName";
			}
			((INameScope)nameScope).RegisterName("SpeedPara", (object)label27);
			if (label27.StyleId == null)
			{
				label27.StyleId = "SpeedPara";
			}
			((INameScope)nameScope).RegisterName("DHName", (object)label28);
			if (label28.StyleId == null)
			{
				label28.StyleId = "DHName";
			}
			((INameScope)nameScope).RegisterName("DHNameS", (object)slider);
			if (slider.StyleId == null)
			{
				slider.StyleId = "DHNameS";
			}
			((INameScope)nameScope).RegisterName("DMName", (object)label30);
			if (label30.StyleId == null)
			{
				label30.StyleId = "DMName";
			}
			((INameScope)nameScope).RegisterName("DMNameS", (object)slider2);
			if (slider2.StyleId == null)
			{
				slider2.StyleId = "DMNameS";
			}
			((INameScope)nameScope).RegisterName("DLName", (object)label32);
			if (label32.StyleId == null)
			{
				label32.StyleId = "DLName";
			}
			((INameScope)nameScope).RegisterName("DLNameS", (object)slider3);
			if (slider3.StyleId == null)
			{
				slider3.StyleId = "DLNameS";
			}
			((INameScope)nameScope).RegisterName("DHSpeedName", (object)label34);
			if (label34.StyleId == null)
			{
				label34.StyleId = "DHSpeedName";
			}
			((INameScope)nameScope).RegisterName("DHSpeedNameS", (object)slider4);
			if (slider4.StyleId == null)
			{
				slider4.StyleId = "DHSpeedNameS";
			}
			((INameScope)nameScope).RegisterName("DMSpeedName", (object)label36);
			if (label36.StyleId == null)
			{
				label36.StyleId = "DMSpeedName";
			}
			((INameScope)nameScope).RegisterName("DMSpeedNameS", (object)slider5);
			if (slider5.StyleId == null)
			{
				slider5.StyleId = "DMSpeedNameS";
			}
			((INameScope)nameScope).RegisterName("DLSpeedName", (object)label38);
			if (label38.StyleId == null)
			{
				label38.StyleId = "DLSpeedName";
			}
			((INameScope)nameScope).RegisterName("DLSpeedNameS", (object)slider6);
			if (slider6.StyleId == null)
			{
				slider6.StyleId = "DLSpeedNameS";
			}
			((INameScope)nameScope).RegisterName("BaseFunction", (object)label40);
			if (label40.StyleId == null)
			{
				label40.StyleId = "BaseFunction";
			}
			((INameScope)nameScope).RegisterName("XHPIN", (object)label41);
			if (label41.StyleId == null)
			{
				label41.StyleId = "XHPIN";
			}
			((INameScope)nameScope).RegisterName("XHName", (object)label42);
			if (label42.StyleId == null)
			{
				label42.StyleId = "XHName";
			}
			((INameScope)nameScope).RegisterName("XHDsName", (object)label43);
			if (label43.StyleId == null)
			{
				label43.StyleId = "XHDsName";
			}
			((INameScope)nameScope).RegisterName("XHStat", (object)obj2);
			if (obj2.StyleId == null)
			{
				obj2.StyleId = "XHStat";
			}
			((INameScope)nameScope).RegisterName("PPIN", (object)label44);
			if (label44.StyleId == null)
			{
				label44.StyleId = "PPIN";
			}
			((INameScope)nameScope).RegisterName("PGearName", (object)label45);
			if (label45.StyleId == null)
			{
				label45.StyleId = "PGearName";
			}
			((INameScope)nameScope).RegisterName("PGearDsName", (object)label46);
			if (label46.StyleId == null)
			{
				label46.StyleId = "PGearDsName";
			}
			((INameScope)nameScope).RegisterName("PGear", (object)obj3);
			if (obj3.StyleId == null)
			{
				obj3.StyleId = "PGear";
			}
			((INameScope)nameScope).RegisterName("AutoBackPName", (object)label47);
			if (label47.StyleId == null)
			{
				label47.StyleId = "AutoBackPName";
			}
			((INameScope)nameScope).RegisterName("AutoBackPDsName", (object)label48);
			if (label48.StyleId == null)
			{
				label48.StyleId = "AutoBackPDsName";
			}
			((INameScope)nameScope).RegisterName("AutoBackPStat", (object)obj4);
			if (obj4.StyleId == null)
			{
				obj4.StyleId = "AutoBackPStat";
			}
			((INameScope)nameScope).RegisterName("SDHPIN", (object)label49);
			if (label49.StyleId == null)
			{
				label49.StyleId = "SDHPIN";
			}
			((INameScope)nameScope).RegisterName("SDHName", (object)label50);
			if (label50.StyleId == null)
			{
				label50.StyleId = "SDHName";
			}
			((INameScope)nameScope).RegisterName("SDHDsName", (object)label51);
			if (label51.StyleId == null)
			{
				label51.StyleId = "SDHDsName";
			}
			((INameScope)nameScope).RegisterName("SDLPIN", (object)label53);
			if (label53.StyleId == null)
			{
				label53.StyleId = "SDLPIN";
			}
			((INameScope)nameScope).RegisterName("SDLName", (object)label54);
			if (label54.StyleId == null)
			{
				label54.StyleId = "SDLName";
			}
			((INameScope)nameScope).RegisterName("SDLDsName", (object)label55);
			if (label55.StyleId == null)
			{
				label55.StyleId = "SDLDsName";
			}
			((INameScope)nameScope).RegisterName("REPIN", (object)label57);
			if (label57.StyleId == null)
			{
				label57.StyleId = "REPIN";
			}
			((INameScope)nameScope).RegisterName("REGearName", (object)label58);
			if (label58.StyleId == null)
			{
				label58.StyleId = "REGearName";
			}
			((INameScope)nameScope).RegisterName("REGearDsName", (object)label59);
			if (label59.StyleId == null)
			{
				label59.StyleId = "REGearDsName";
			}
			((INameScope)nameScope).RegisterName("REGear", (object)obj5);
			if (obj5.StyleId == null)
			{
				obj5.StyleId = "REGear";
			}
			((INameScope)nameScope).RegisterName("ZuotongPIN", (object)label60);
			if (label60.StyleId == null)
			{
				label60.StyleId = "ZuotongPIN";
			}
			((INameScope)nameScope).RegisterName("ZuotongName", (object)label61);
			if (label61.StyleId == null)
			{
				label61.StyleId = "ZuotongName";
			}
			((INameScope)nameScope).RegisterName("ZuotongDsName", (object)label62);
			if (label62.StyleId == null)
			{
				label62.StyleId = "ZuotongDsName";
			}
			((INameScope)nameScope).RegisterName("Zuotong", (object)obj6);
			if (obj6.StyleId == null)
			{
				obj6.StyleId = "Zuotong";
			}
			((INameScope)nameScope).RegisterName("TuixingName", (object)label63);
			if (label63.StyleId == null)
			{
				label63.StyleId = "TuixingName";
			}
			((INameScope)nameScope).RegisterName("TuixingDsName", (object)label64);
			if (label64.StyleId == null)
			{
				label64.StyleId = "TuixingDsName";
			}
			((INameScope)nameScope).RegisterName("TuixingS", (object)obj7);
			if (obj7.StyleId == null)
			{
				obj7.StyleId = "TuixingS";
			}
			((INameScope)nameScope).RegisterName("BCPIN", (object)label65);
			if (label65.StyleId == null)
			{
				label65.StyleId = "BCPIN";
			}
			((INameScope)nameScope).RegisterName("BCName", (object)label66);
			if (label66.StyleId == null)
			{
				label66.StyleId = "BCName";
			}
			((INameScope)nameScope).RegisterName("BCDsName", (object)label67);
			if (label67.StyleId == null)
			{
				label67.StyleId = "BCDsName";
			}
			((INameScope)nameScope).RegisterName("BCStat", (object)obj8);
			if (obj8.StyleId == null)
			{
				obj8.StyleId = "BCStat";
			}
			((INameScope)nameScope).RegisterName("GearRememberName", (object)label68);
			if (label68.StyleId == null)
			{
				label68.StyleId = "GearRememberName";
			}
			((INameScope)nameScope).RegisterName("GearRememberDsName", (object)label69);
			if (label69.StyleId == null)
			{
				label69.StyleId = "GearRememberDsName";
			}
			((INameScope)nameScope).RegisterName("GearRememberS", (object)obj9);
			if (obj9.StyleId == null)
			{
				obj9.StyleId = "GearRememberS";
			}
			((INameScope)nameScope).RegisterName("ParkName", (object)label70);
			if (label70.StyleId == null)
			{
				label70.StyleId = "ParkName";
			}
			((INameScope)nameScope).RegisterName("ParkDsName", (object)label71);
			if (label71.StyleId == null)
			{
				label71.StyleId = "ParkDsName";
			}
			((INameScope)nameScope).RegisterName("TCSName", (object)label73);
			if (label73.StyleId == null)
			{
				label73.StyleId = "TCSName";
			}
			((INameScope)nameScope).RegisterName("TCSDsName", (object)label74);
			if (label74.StyleId == null)
			{
				label74.StyleId = "TCSDsName";
			}
			((INameScope)nameScope).RegisterName("ResetName", (object)button27);
			if (button27.StyleId == null)
			{
				button27.StyleId = "ResetName";
			}
			((INameScope)nameScope).RegisterName("SaveName", (object)button28);
			if (button28.StyleId == null)
			{
				button28.StyleId = "SaveName";
			}
			((INameScope)nameScope).RegisterName("ParaMode", (object)button29);
			if (button29.StyleId == null)
			{
				button29.StyleId = "ParaMode";
			}
			((INameScope)nameScope).RegisterName("RcvFrames", (object)label76);
			if (label76.StyleId == null)
			{
				label76.StyleId = "RcvFrames";
			}
			girdall = grid50;
			DetailView = scrollView;
			controllerView = sKCanvasView;
			RowText0 = label;
			ModelFactoryName = label2;
			ModelName = label3;
			ModelTypeName = label4;
			ModelType = label5;
			ModelPowerName = label6;
			ModelPower = label7;
			ModelCurrName = label8;
			ModelCurr = label9;
			ewmView = sKCanvasView2;
			ModelNumber = label10;
			CustomCode = label11;
			MorseCodeName = label12;
			RowDateTime = button3;
			DateTimeGrid = grid4;
			ModelDate = label13;
			ModelTime = label14;
			BasePara = label15;
			DIRName = label16;
			DIRDsName = label17;
			DIRStat = obj;
			RatedVolName = label18;
			RatedVolDsName = label19;
			LimitWayName = label21;
			LimitWayDsName = label22;
			EnergyBackName = label24;
			EnergyBackDsName = label25;
			SpeedPara = label27;
			DHName = label28;
			DHNameS = slider;
			DMName = label30;
			DMNameS = slider2;
			DLName = label32;
			DLNameS = slider3;
			DHSpeedName = label34;
			DHSpeedNameS = slider4;
			DMSpeedName = label36;
			DMSpeedNameS = slider5;
			DLSpeedName = label38;
			DLSpeedNameS = slider6;
			BaseFunction = label40;
			XHPIN = label41;
			XHName = label42;
			XHDsName = label43;
			XHStat = obj2;
			PPIN = label44;
			PGearName = label45;
			PGearDsName = label46;
			PGear = obj3;
			AutoBackPName = label47;
			AutoBackPDsName = label48;
			AutoBackPStat = obj4;
			SDHPIN = label49;
			SDHName = label50;
			SDHDsName = label51;
			SDLPIN = label53;
			SDLName = label54;
			SDLDsName = label55;
			REPIN = label57;
			REGearName = label58;
			REGearDsName = label59;
			REGear = obj5;
			ZuotongPIN = label60;
			ZuotongName = label61;
			ZuotongDsName = label62;
			Zuotong = obj6;
			TuixingName = label63;
			TuixingDsName = label64;
			TuixingS = obj7;
			BCPIN = label65;
			BCName = label66;
			BCDsName = label67;
			BCStat = obj8;
			GearRememberName = label68;
			GearRememberDsName = label69;
			GearRememberS = obj9;
			ParkName = label70;
			ParkDsName = label71;
			TCSName = label73;
			TCSDsName = label74;
			ResetName = button27;
			SaveName = button28;
			ParaMode = button29;
			RcvFrames = label76;
			paraPage.SetValue(Xamarin.Forms.Page.TitleProperty, "Para");
			grid50.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid50.SetValue(CompressedLayout.IsHeadlessProperty, true);
			rowDefinition.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("93*"));
			((DefinitionCollection<RowDefinition>)grid50.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition);
			rowDefinition2.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("7*"));
			((DefinitionCollection<RowDefinition>)grid50.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition2);
			scrollView.SetValue(Grid.RowProperty, 0);
			scrollView.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 120.0);
			sKCanvasView.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 180.0);
			sKCanvasView.SetValue(Grid.RowProperty, 0);
			sKCanvasView.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView.PaintSurface += paraPage.controllerView_PaintSurface;
			stackLayout7.Children.Add(sKCanvasView);
			label.SetValue(Label.TextProperty, "–Õ∫≈");
			label.SetValue(Label.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
			Type typeFromHandle = typeof(IProvideValueTarget);
			object[] array = new object[0 + 5];
			array[0] = label;
			array[1] = stackLayout7;
			array[2] = scrollView;
			array[3] = grid50;
			array[4] = paraPage;
			object service;
			xamlServiceProvider.Add(typeFromHandle, service = new SimpleValueTargetProvider(array, Label.FontSizeProperty, nameScope));
			xamlServiceProvider.Add(typeof(IReferenceProvider), service);
			Type typeFromHandle2 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
			xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(20, 81)));
			label.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider));
			label.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			label.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout7.Children.Add(label);
			grid2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid2.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid2.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("65*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
			columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("35*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
			grid.SetValue(Grid.RowProperty, 0);
			grid.SetValue(Grid.ColumnProperty, 0);
			grid.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid.SetValue(Grid.RowSpacingProperty, 0.0);
			rowDefinition3.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition3);
			rowDefinition4.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition4);
			rowDefinition5.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition5);
			rowDefinition6.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition6);
			stackLayout.SetValue(Grid.RowProperty, 0);
			stackLayout.SetValue(Grid.ColumnProperty, 0);
			stackLayout.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout.SetValue(StackLayout.SpacingProperty, 0.0);
			stackLayout.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			stackLayout.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label2.SetValue(Label.TextProperty, "ƒœæ©‘∂«˝");
			label2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Black);
			label2.SetValue(Label.TextColorProperty, Color.White);
			BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
			Type typeFromHandle3 = typeof(IProvideValueTarget);
			object[] array2 = new object[0 + 8];
			array2[0] = label2;
			array2[1] = stackLayout;
			array2[2] = grid;
			array2[3] = grid2;
			array2[4] = stackLayout7;
			array2[5] = scrollView;
			array2[6] = grid50;
			array2[7] = paraPage;
			object service2;
			xamlServiceProvider2.Add(typeFromHandle3, service2 = new SimpleValueTargetProvider(array2, Label.FontSizeProperty, nameScope));
			xamlServiceProvider2.Add(typeof(IReferenceProvider), service2);
			Type typeFromHandle4 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
			xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver2.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(34, 120)));
			label2.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("Large", (IServiceProvider)xamlServiceProvider2));
			label2.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout.Children.Add(label2);
			label3.SetValue(Label.TextProperty, "”¿¥≈Õ¨≤Ωøÿ÷∆∆˜");
			label3.SetValue(Grid.RowProperty, 0);
			label3.SetValue(Grid.ColumnProperty, 0);
			label3.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
			Type typeFromHandle5 = typeof(IProvideValueTarget);
			object[] array3 = new object[0 + 8];
			array3[0] = label3;
			array3[1] = stackLayout;
			array3[2] = grid;
			array3[3] = grid2;
			array3[4] = stackLayout7;
			array3[5] = scrollView;
			array3[6] = grid50;
			array3[7] = paraPage;
			object service3;
			xamlServiceProvider3.Add(typeFromHandle5, service3 = new SimpleValueTargetProvider(array3, Label.FontSizeProperty, nameScope));
			xamlServiceProvider3.Add(typeof(IReferenceProvider), service3);
			Type typeFromHandle6 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
			xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver3.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(35, 121)));
			label3.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider3));
			label3.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout.Children.Add(label3);
			grid.Children.Add(stackLayout);
			stackLayout2.SetValue(Grid.RowProperty, 1);
			stackLayout2.SetValue(Grid.ColumnProperty, 0);
			stackLayout2.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout2.SetValue(StackLayout.SpacingProperty, 10.0);
			stackLayout2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			stackLayout2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label4.SetValue(Label.TextProperty, "–Õ∫≈");
			label4.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
			Type typeFromHandle7 = typeof(IProvideValueTarget);
			object[] array4 = new object[0 + 8];
			array4[0] = label4;
			array4[1] = stackLayout2;
			array4[2] = grid;
			array4[3] = grid2;
			array4[4] = stackLayout7;
			array4[5] = scrollView;
			array4[6] = grid50;
			array4[7] = paraPage;
			object service4;
			xamlServiceProvider4.Add(typeFromHandle7, service4 = new SimpleValueTargetProvider(array4, Label.FontSizeProperty, nameScope));
			xamlServiceProvider4.Add(typeof(IReferenceProvider), service4);
			Type typeFromHandle8 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
			xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver4.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(38, 91)));
			label4.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider4));
			label4.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout2.Children.Add(label4);
			label5.SetValue(Label.TextProperty, "SA72V150_418_1_697");
			label5.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			label5.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty5 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
			Type typeFromHandle9 = typeof(IProvideValueTarget);
			object[] array5 = new object[0 + 8];
			array5[0] = label5;
			array5[1] = stackLayout2;
			array5[2] = grid;
			array5[3] = grid2;
			array5[4] = stackLayout7;
			array5[5] = scrollView;
			array5[6] = grid50;
			array5[7] = paraPage;
			object service5;
			xamlServiceProvider5.Add(typeFromHandle9, service5 = new SimpleValueTargetProvider(array5, Label.FontSizeProperty, nameScope));
			xamlServiceProvider5.Add(typeof(IReferenceProvider), service5);
			Type typeFromHandle10 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
			xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver5.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(39, 125)));
			label5.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider5));
			label5.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout2.Children.Add(label5);
			grid.Children.Add(stackLayout2);
			stackLayout3.SetValue(Grid.RowProperty, 2);
			stackLayout3.SetValue(Grid.ColumnProperty, 0);
			stackLayout3.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout3.SetValue(StackLayout.SpacingProperty, 10.0);
			stackLayout3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			stackLayout3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label6.SetValue(Label.TextProperty, "µÁ—π/π¶¬ ");
			label6.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
			Type typeFromHandle11 = typeof(IProvideValueTarget);
			object[] array6 = new object[0 + 8];
			array6[0] = label6;
			array6[1] = stackLayout3;
			array6[2] = grid;
			array6[3] = grid2;
			array6[4] = stackLayout7;
			array6[5] = scrollView;
			array6[6] = grid50;
			array6[7] = paraPage;
			object service6;
			xamlServiceProvider6.Add(typeFromHandle11, service6 = new SimpleValueTargetProvider(array6, Label.FontSizeProperty, nameScope));
			xamlServiceProvider6.Add(typeof(IReferenceProvider), service6);
			Type typeFromHandle12 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
			xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver6.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(42, 95)));
			label6.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider6));
			label6.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label6.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout3.Children.Add(label6);
			label7.SetValue(Label.TextProperty, "72V/5KW");
			label7.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty7 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
			Type typeFromHandle13 = typeof(IProvideValueTarget);
			object[] array7 = new object[0 + 8];
			array7[0] = label7;
			array7[1] = stackLayout3;
			array7[2] = grid;
			array7[3] = grid2;
			array7[4] = stackLayout7;
			array7[5] = scrollView;
			array7[6] = grid50;
			array7[7] = paraPage;
			object service7;
			xamlServiceProvider7.Add(typeFromHandle13, service7 = new SimpleValueTargetProvider(array7, Label.FontSizeProperty, nameScope));
			xamlServiceProvider7.Add(typeof(IReferenceProvider), service7);
			Type typeFromHandle14 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
			xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver7.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(43, 93)));
			label7.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider7));
			label7.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label7.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout3.Children.Add(label7);
			grid.Children.Add(stackLayout3);
			stackLayout4.SetValue(Grid.RowProperty, 3);
			stackLayout4.SetValue(Grid.ColumnProperty, 0);
			stackLayout4.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout4.SetValue(StackLayout.SpacingProperty, 10.0);
			stackLayout4.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			stackLayout4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label8.SetValue(Label.TextProperty, "œﬂµÁ¡˜/œ‡µÁ¡˜");
			label8.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
			Type typeFromHandle15 = typeof(IProvideValueTarget);
			object[] array8 = new object[0 + 8];
			array8[0] = label8;
			array8[1] = stackLayout4;
			array8[2] = grid;
			array8[3] = grid2;
			array8[4] = stackLayout7;
			array8[5] = scrollView;
			array8[6] = grid50;
			array8[7] = paraPage;
			object service8;
			xamlServiceProvider8.Add(typeFromHandle15, service8 = new SimpleValueTargetProvider(array8, Label.FontSizeProperty, nameScope));
			xamlServiceProvider8.Add(typeof(IReferenceProvider), service8);
			Type typeFromHandle16 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
			xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver8.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(46, 96)));
			label8.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider8));
			label8.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label8.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label8.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout4.Children.Add(label8);
			label9.SetValue(Label.TextProperty, "100A/300A");
			label9.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty9 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter9 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
			Type typeFromHandle17 = typeof(IProvideValueTarget);
			object[] array9 = new object[0 + 8];
			array9[0] = label9;
			array9[1] = stackLayout4;
			array9[2] = grid;
			array9[3] = grid2;
			array9[4] = stackLayout7;
			array9[5] = scrollView;
			array9[6] = grid50;
			array9[7] = paraPage;
			object service9;
			xamlServiceProvider9.Add(typeFromHandle17, service9 = new SimpleValueTargetProvider(array9, Label.FontSizeProperty, nameScope));
			xamlServiceProvider9.Add(typeof(IReferenceProvider), service9);
			Type typeFromHandle18 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
			xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver9.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(47, 94)));
			label9.SetValue(fontSizeProperty9, ((IExtendedTypeConverter)fontSizeConverter9).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider9));
			label9.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label9.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label9.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout4.Children.Add(label9);
			grid.Children.Add(stackLayout4);
			grid2.Children.Add(grid);
			sKCanvasView2.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 129.0);
			sKCanvasView2.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 129.0);
			sKCanvasView2.SetValue(Grid.RowProperty, 0);
			sKCanvasView2.SetValue(Grid.ColumnProperty, 1);
			sKCanvasView2.PaintSurface += paraPage.ewmView_PaintSurface;
			grid2.Children.Add(sKCanvasView2);
			stackLayout7.Children.Add(grid2);
			stackLayout5.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout5.SetValue(StackLayout.SpacingProperty, 10.0);
			stackLayout5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label10.SetValue(Label.TextProperty, "±‡∫≈");
			label10.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty10 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter10 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
			Type typeFromHandle19 = typeof(IProvideValueTarget);
			object[] array10 = new object[0 + 6];
			array10[0] = label10;
			array10[1] = stackLayout5;
			array10[2] = stackLayout7;
			array10[3] = scrollView;
			array10[4] = grid50;
			array10[5] = paraPage;
			object service10;
			xamlServiceProvider10.Add(typeFromHandle19, service10 = new SimpleValueTargetProvider(array10, Label.FontSizeProperty, nameScope));
			xamlServiceProvider10.Add(typeof(IReferenceProvider), service10);
			Type typeFromHandle20 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
			xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver10.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(56, 88)));
			label10.SetValue(fontSizeProperty10, ((IExtendedTypeConverter)fontSizeConverter10).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider10));
			label10.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label10.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label10.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout5.Children.Add(label10);
			stackLayout7.Children.Add(stackLayout5);
			columnDefinition3.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition3);
			columnDefinition4.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition4);
			label11.SetValue(Grid.RowProperty, 0);
			label11.SetValue(Grid.ColumnProperty, 0);
			label11.SetValue(Label.TextProperty, "øÕªß¥˙¬Î");
			label11.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label11.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label11.SetValue(Label.TextColorProperty, Color.DeepSkyBlue);
			BindableProperty fontSizeProperty11 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter11 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
			Type typeFromHandle21 = typeof(IProvideValueTarget);
			object[] array11 = new object[0 + 6];
			array11[0] = label11;
			array11[1] = grid3;
			array11[2] = stackLayout7;
			array11[3] = scrollView;
			array11[4] = grid50;
			array11[5] = paraPage;
			object service11;
			xamlServiceProvider11.Add(typeFromHandle21, service11 = new SimpleValueTargetProvider(array11, Label.FontSizeProperty, nameScope));
			xamlServiceProvider11.Add(typeof(IReferenceProvider), service11);
			Type typeFromHandle22 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
			xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver11.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(63, 171)));
			label11.SetValue(fontSizeProperty11, ((IExtendedTypeConverter)fontSizeConverter11).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider11));
			label11.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label11.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
			label11.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid3.Children.Add(label11);
			label12.SetValue(Grid.RowProperty, 0);
			label12.SetValue(Grid.ColumnProperty, 1);
			label12.SetValue(Label.TextProperty, "000000");
			label12.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label12.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label12.SetValue(Label.TextColorProperty, Color.DeepSkyBlue);
			BindableProperty fontSizeProperty12 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter12 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
			Type typeFromHandle23 = typeof(IProvideValueTarget);
			object[] array12 = new object[0 + 6];
			array12[0] = label12;
			array12[1] = grid3;
			array12[2] = stackLayout7;
			array12[3] = scrollView;
			array12[4] = grid50;
			array12[5] = paraPage;
			object service12;
			xamlServiceProvider12.Add(typeFromHandle23, service12 = new SimpleValueTargetProvider(array12, Label.FontSizeProperty, nameScope));
			xamlServiceProvider12.Add(typeof(IReferenceProvider), service12);
			Type typeFromHandle24 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
			xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver12.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(64, 175)));
			label12.SetValue(fontSizeProperty12, ((IExtendedTypeConverter)fontSizeConverter12).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider12));
			label12.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label12.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
			label12.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid3.Children.Add(label12);
			button.SetValue(Grid.RowProperty, 0);
			button.SetValue(Grid.ColumnProperty, 0);
			button.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 30.0);
			button.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button.Clicked += paraPage.CustomCode_TextChanged;
			button.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty13 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter13 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
			Type typeFromHandle25 = typeof(IProvideValueTarget);
			object[] array13 = new object[0 + 6];
			array13[0] = button;
			array13[1] = grid3;
			array13[2] = stackLayout7;
			array13[3] = scrollView;
			array13[4] = grid50;
			array13[5] = paraPage;
			object service13;
			xamlServiceProvider13.Add(typeFromHandle25, service13 = new SimpleValueTargetProvider(array13, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider13.Add(typeof(IReferenceProvider), service13);
			Type typeFromHandle26 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
			xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver13.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(65, 188)));
			button.SetValue(fontSizeProperty13, ((IExtendedTypeConverter)fontSizeConverter13).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider13));
			button.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
			button.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid3.Children.Add(button);
			button2.SetValue(Grid.RowProperty, 0);
			button2.SetValue(Grid.ColumnProperty, 1);
			button2.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 30.0);
			button2.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button2.Clicked += paraPage.OnButtonMorseCodeClicked;
			button2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button2.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty14 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter14 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
			Type typeFromHandle27 = typeof(IProvideValueTarget);
			object[] array14 = new object[0 + 6];
			array14[0] = button2;
			array14[1] = grid3;
			array14[2] = stackLayout7;
			array14[3] = scrollView;
			array14[4] = grid50;
			array14[5] = paraPage;
			object service14;
			xamlServiceProvider14.Add(typeFromHandle27, service14 = new SimpleValueTargetProvider(array14, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider14.Add(typeof(IReferenceProvider), service14);
			Type typeFromHandle28 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
			xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver14.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(66, 188)));
			button2.SetValue(fontSizeProperty14, ((IExtendedTypeConverter)fontSizeConverter14).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider14));
			button2.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
			button2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid3.Children.Add(button2);
			stackLayout7.Children.Add(grid3);
			button3.Clicked += paraPage.RowText1_Clicked_1;
			button3.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 4000.0);
			button3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button3.SetValue(Xamarin.Forms.Button.TextProperty, "»’∆⁄ ±º‰");
			button3.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty15 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter15 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider15 = new XamlServiceProvider();
			Type typeFromHandle29 = typeof(IProvideValueTarget);
			object[] array15 = new object[0 + 5];
			array15[0] = button3;
			array15[1] = stackLayout7;
			array15[2] = scrollView;
			array15[3] = grid50;
			array15[4] = paraPage;
			object service15;
			xamlServiceProvider15.Add(typeFromHandle29, service15 = new SimpleValueTargetProvider(array15, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider15.Add(typeof(IReferenceProvider), service15);
			Type typeFromHandle30 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver15 = new XmlNamespaceResolver();
			xmlNamespaceResolver15.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver15.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver15.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider15.Add(typeFromHandle30, new XamlTypeResolver(xmlNamespaceResolver15, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider15.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(68, 189)));
			button3.SetValue(fontSizeProperty15, ((IExtendedTypeConverter)fontSizeConverter15).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider15));
			button3.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			stackLayout7.Children.Add(button3);
			columnDefinition5.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid4.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition5);
			columnDefinition6.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid4.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition6);
			label13.SetValue(Label.TextProperty, "»’∆⁄");
			label13.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label13.SetValue(Grid.RowProperty, 0);
			label13.SetValue(Grid.ColumnProperty, 0);
			label13.SetValue(Label.TextColorProperty, Color.DarkGray);
			BindableProperty fontSizeProperty16 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter16 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider16 = new XamlServiceProvider();
			Type typeFromHandle31 = typeof(IProvideValueTarget);
			object[] array16 = new object[0 + 6];
			array16[0] = label13;
			array16[1] = grid4;
			array16[2] = stackLayout7;
			array16[3] = scrollView;
			array16[4] = grid50;
			array16[5] = paraPage;
			object service16;
			xamlServiceProvider16.Add(typeFromHandle31, service16 = new SimpleValueTargetProvider(array16, Label.FontSizeProperty, nameScope));
			xamlServiceProvider16.Add(typeof(IReferenceProvider), service16);
			Type typeFromHandle32 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver16 = new XmlNamespaceResolver();
			xmlNamespaceResolver16.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver16.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver16.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider16.Add(typeFromHandle32, new XamlTypeResolver(xmlNamespaceResolver16, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider16.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(74, 133)));
			label13.SetValue(fontSizeProperty16, ((IExtendedTypeConverter)fontSizeConverter16).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider16));
			label13.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label13.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label13.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label13);
			label14.SetValue(Label.TextProperty, " ±º‰");
			label14.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label14.SetValue(Grid.RowProperty, 0);
			label14.SetValue(Grid.ColumnProperty, 1);
			label14.SetValue(Label.TextColorProperty, Color.DarkGray);
			BindableProperty fontSizeProperty17 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter17 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider17 = new XamlServiceProvider();
			Type typeFromHandle33 = typeof(IProvideValueTarget);
			object[] array17 = new object[0 + 6];
			array17[0] = label14;
			array17[1] = grid4;
			array17[2] = stackLayout7;
			array17[3] = scrollView;
			array17[4] = grid50;
			array17[5] = paraPage;
			object service17;
			xamlServiceProvider17.Add(typeFromHandle33, service17 = new SimpleValueTargetProvider(array17, Label.FontSizeProperty, nameScope));
			xamlServiceProvider17.Add(typeof(IReferenceProvider), service17);
			Type typeFromHandle34 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver17 = new XmlNamespaceResolver();
			xmlNamespaceResolver17.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver17.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver17.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider17.Add(typeFromHandle34, new XamlTypeResolver(xmlNamespaceResolver17, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider17.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(75, 133)));
			label14.SetValue(fontSizeProperty17, ((IExtendedTypeConverter)fontSizeConverter17).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider17));
			label14.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label14.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label14.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label14);
			stackLayout7.Children.Add(grid4);
			label15.SetValue(Label.TextProperty, "ª˘±æ≤Œ ˝");
			label15.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightBlue);
			label15.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			BindableProperty fontSizeProperty18 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter18 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider18 = new XamlServiceProvider();
			Type typeFromHandle35 = typeof(IProvideValueTarget);
			object[] array18 = new object[0 + 6];
			array18[0] = label15;
			array18[1] = stackLayout6;
			array18[2] = stackLayout7;
			array18[3] = scrollView;
			array18[4] = grid50;
			array18[5] = paraPage;
			object service18;
			xamlServiceProvider18.Add(typeFromHandle35, service18 = new SimpleValueTargetProvider(array18, Label.FontSizeProperty, nameScope));
			xamlServiceProvider18.Add(typeof(IReferenceProvider), service18);
			Type typeFromHandle36 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver18 = new XmlNamespaceResolver();
			xmlNamespaceResolver18.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver18.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver18.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider18.Add(typeFromHandle36, new XamlTypeResolver(xmlNamespaceResolver18, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider18.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(78, 123)));
			label15.SetValue(fontSizeProperty18, ((IExtendedTypeConverter)fontSizeConverter18).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider18));
			label15.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			stackLayout6.Children.Add(label15);
			grid6.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition7.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("75*"));
			((DefinitionCollection<ColumnDefinition>)grid6.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition7);
			columnDefinition8.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid6.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition8);
			columnDefinition9.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid6.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition9);
			columnDefinition10.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid6.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition10);
			grid5.SetValue(Grid.ColumnProperty, 0);
			rowDefinition7.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition7);
			rowDefinition8.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition8);
			label16.SetValue(Label.TextProperty, "µÁª˙∑ΩœÚ∑≠◊™");
			label16.SetValue(Grid.RowProperty, 0);
			label16.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty19 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter19 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider19 = new XamlServiceProvider();
			Type typeFromHandle37 = typeof(IProvideValueTarget);
			object[] array19 = new object[0 + 8];
			array19[0] = label16;
			array19[1] = grid5;
			array19[2] = grid6;
			array19[3] = stackLayout6;
			array19[4] = stackLayout7;
			array19[5] = scrollView;
			array19[6] = grid50;
			array19[7] = paraPage;
			object service19;
			xamlServiceProvider19.Add(typeFromHandle37, service19 = new SimpleValueTargetProvider(array19, Label.FontSizeProperty, nameScope));
			xamlServiceProvider19.Add(typeof(IReferenceProvider), service19);
			Type typeFromHandle38 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver19 = new XmlNamespaceResolver();
			xmlNamespaceResolver19.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver19.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver19.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider19.Add(typeFromHandle38, new XamlTypeResolver(xmlNamespaceResolver19, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider19.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(91, 108)));
			label16.SetValue(fontSizeProperty19, ((IExtendedTypeConverter)fontSizeConverter19).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider19));
			label16.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid5.Children.Add(label16);
			label17.SetValue(Label.TextProperty, "Reverse Motor Roll Direction");
			label17.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty20 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter20 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider20 = new XamlServiceProvider();
			Type typeFromHandle39 = typeof(IProvideValueTarget);
			object[] array20 = new object[0 + 8];
			array20[0] = label17;
			array20[1] = grid5;
			array20[2] = grid6;
			array20[3] = stackLayout6;
			array20[4] = stackLayout7;
			array20[5] = scrollView;
			array20[6] = grid50;
			array20[7] = paraPage;
			object service20;
			xamlServiceProvider20.Add(typeFromHandle39, service20 = new SimpleValueTargetProvider(array20, Label.FontSizeProperty, nameScope));
			xamlServiceProvider20.Add(typeof(IReferenceProvider), service20);
			Type typeFromHandle40 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver20 = new XmlNamespaceResolver();
			xmlNamespaceResolver20.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver20.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver20.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider20.Add(typeFromHandle40, new XamlTypeResolver(xmlNamespaceResolver20, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider20.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(92, 110)));
			label17.SetValue(fontSizeProperty20, ((IExtendedTypeConverter)fontSizeConverter20).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider20));
			label17.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid5.Children.Add(label17);
			grid6.Children.Add(grid5);
			obj.SetValue(Grid.ColumnProperty, 2);
			obj.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(obj);
			button4.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button4.Clicked += paraPage.DIR_Clicked;
			button4.SetValue(Grid.ColumnProperty, 2);
			button4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button4);
			stackLayout6.Children.Add(grid6);
			grid8.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition11.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid8.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition11);
			columnDefinition12.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid8.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition12);
			columnDefinition13.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid8.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition13);
			grid7.SetValue(Grid.ColumnProperty, 0);
			rowDefinition9.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition9);
			rowDefinition10.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition10);
			label18.SetValue(Label.TextProperty, "∂Ó∂®µÁ—π");
			label18.SetValue(Grid.RowProperty, 0);
			label18.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty21 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter21 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider21 = new XamlServiceProvider();
			Type typeFromHandle41 = typeof(IProvideValueTarget);
			object[] array21 = new object[0 + 8];
			array21[0] = label18;
			array21[1] = grid7;
			array21[2] = grid8;
			array21[3] = stackLayout6;
			array21[4] = stackLayout7;
			array21[5] = scrollView;
			array21[6] = grid50;
			array21[7] = paraPage;
			object service21;
			xamlServiceProvider21.Add(typeFromHandle41, service21 = new SimpleValueTargetProvider(array21, Label.FontSizeProperty, nameScope));
			xamlServiceProvider21.Add(typeof(IReferenceProvider), service21);
			Type typeFromHandle42 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver21 = new XmlNamespaceResolver();
			xmlNamespaceResolver21.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver21.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver21.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider21.Add(typeFromHandle42, new XamlTypeResolver(xmlNamespaceResolver21, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider21.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(108, 94)));
			label18.SetValue(fontSizeProperty21, ((IExtendedTypeConverter)fontSizeConverter21).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider21));
			label18.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid7.Children.Add(label18);
			label19.SetValue(Label.TextProperty, "Battary Rated Voltage");
			label19.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty22 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter22 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider22 = new XamlServiceProvider();
			Type typeFromHandle43 = typeof(IProvideValueTarget);
			object[] array22 = new object[0 + 8];
			array22[0] = label19;
			array22[1] = grid7;
			array22[2] = grid8;
			array22[3] = stackLayout6;
			array22[4] = stackLayout7;
			array22[5] = scrollView;
			array22[6] = grid50;
			array22[7] = paraPage;
			object service22;
			xamlServiceProvider22.Add(typeFromHandle43, service22 = new SimpleValueTargetProvider(array22, Label.FontSizeProperty, nameScope));
			xamlServiceProvider22.Add(typeof(IReferenceProvider), service22);
			Type typeFromHandle44 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver22 = new XmlNamespaceResolver();
			xmlNamespaceResolver22.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver22.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver22.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider22.Add(typeFromHandle44, new XamlTypeResolver(xmlNamespaceResolver22, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider22.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(109, 92)));
			label19.SetValue(fontSizeProperty22, ((IExtendedTypeConverter)fontSizeConverter22).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider22));
			label19.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid7.Children.Add(label19);
			grid8.Children.Add(grid7);
			button5.SetValue(Grid.ColumnProperty, 0);
			button5.Clicked += paraPage.RatedVol_Clicked;
			button5.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid8.Children.Add(button5);
			label20.SetValue(Label.TextProperty, "-");
			BindableProperty fontSizeProperty23 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter23 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider23 = new XamlServiceProvider();
			Type typeFromHandle45 = typeof(IProvideValueTarget);
			object[] array23 = new object[0 + 7];
			array23[0] = label20;
			array23[1] = grid8;
			array23[2] = stackLayout6;
			array23[3] = stackLayout7;
			array23[4] = scrollView;
			array23[5] = grid50;
			array23[6] = paraPage;
			object service23;
			xamlServiceProvider23.Add(typeFromHandle45, service23 = new SimpleValueTargetProvider(array23, Label.FontSizeProperty, nameScope));
			xamlServiceProvider23.Add(typeof(IReferenceProvider), service23);
			Type typeFromHandle46 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver23 = new XmlNamespaceResolver();
			xmlNamespaceResolver23.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver23.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver23.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider23.Add(typeFromHandle46, new XamlTypeResolver(xmlNamespaceResolver23, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider23.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(112, 31)));
			label20.SetValue(fontSizeProperty23, ((IExtendedTypeConverter)fontSizeConverter23).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider23));
			label20.SetValue(Grid.ColumnProperty, 2);
			label20.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid8.Children.Add(label20);
			stackLayout6.Children.Add(grid8);
			grid10.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition14.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid10.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition14);
			columnDefinition15.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid10.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition15);
			columnDefinition16.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid10.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition16);
			grid9.SetValue(Grid.ColumnProperty, 0);
			rowDefinition11.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid9.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition11);
			rowDefinition12.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid9.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition12);
			label21.SetValue(Label.TextProperty, "ø˜µÁøÿ÷∆ƒ£ Ω");
			label21.SetValue(Grid.RowProperty, 0);
			label21.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty24 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter24 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider24 = new XamlServiceProvider();
			Type typeFromHandle47 = typeof(IProvideValueTarget);
			object[] array24 = new object[0 + 8];
			array24[0] = label21;
			array24[1] = grid9;
			array24[2] = grid10;
			array24[3] = stackLayout6;
			array24[4] = stackLayout7;
			array24[5] = scrollView;
			array24[6] = grid50;
			array24[7] = paraPage;
			object service24;
			xamlServiceProvider24.Add(typeFromHandle47, service24 = new SimpleValueTargetProvider(array24, Label.FontSizeProperty, nameScope));
			xamlServiceProvider24.Add(typeof(IReferenceProvider), service24);
			Type typeFromHandle48 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver24 = new XmlNamespaceResolver();
			xmlNamespaceResolver24.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver24.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver24.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider24.Add(typeFromHandle48, new XamlTypeResolver(xmlNamespaceResolver24, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider24.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(126, 97)));
			label21.SetValue(fontSizeProperty24, ((IExtendedTypeConverter)fontSizeConverter24).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider24));
			label21.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid9.Children.Add(label21);
			label22.SetValue(Label.TextProperty, "µÁ≥ÿø˜µÁøÿ÷∆ƒ£ Ω£∫µÁ¡ø‘§æØµƒÀŸ∂»°¢¡¶∂»µ»º∂£∫0%°´20%");
			label22.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty25 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter25 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider25 = new XamlServiceProvider();
			Type typeFromHandle49 = typeof(IProvideValueTarget);
			object[] array25 = new object[0 + 8];
			array25[0] = label22;
			array25[1] = grid9;
			array25[2] = grid10;
			array25[3] = stackLayout6;
			array25[4] = stackLayout7;
			array25[5] = scrollView;
			array25[6] = grid50;
			array25[7] = paraPage;
			object service25;
			xamlServiceProvider25.Add(typeFromHandle49, service25 = new SimpleValueTargetProvider(array25, Label.FontSizeProperty, nameScope));
			xamlServiceProvider25.Add(typeof(IReferenceProvider), service25);
			Type typeFromHandle50 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver25 = new XmlNamespaceResolver();
			xmlNamespaceResolver25.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver25.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver25.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider25.Add(typeFromHandle50, new XamlTypeResolver(xmlNamespaceResolver25, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider25.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(127, 98)));
			label22.SetValue(fontSizeProperty25, ((IExtendedTypeConverter)fontSizeConverter25).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider25));
			label22.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid9.Children.Add(label22);
			grid10.Children.Add(grid9);
			button6.SetValue(Grid.ColumnProperty, 0);
			button6.Clicked += paraPage.LimitWay_Clicked;
			button6.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid10.Children.Add(button6);
			label23.SetValue(Label.TextProperty, "-");
			BindableProperty fontSizeProperty26 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter26 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider26 = new XamlServiceProvider();
			Type typeFromHandle51 = typeof(IProvideValueTarget);
			object[] array26 = new object[0 + 7];
			array26[0] = label23;
			array26[1] = grid10;
			array26[2] = stackLayout6;
			array26[3] = stackLayout7;
			array26[4] = scrollView;
			array26[5] = grid50;
			array26[6] = paraPage;
			object service26;
			xamlServiceProvider26.Add(typeFromHandle51, service26 = new SimpleValueTargetProvider(array26, Label.FontSizeProperty, nameScope));
			xamlServiceProvider26.Add(typeof(IReferenceProvider), service26);
			Type typeFromHandle52 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver26 = new XmlNamespaceResolver();
			xmlNamespaceResolver26.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver26.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver26.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider26.Add(typeFromHandle52, new XamlTypeResolver(xmlNamespaceResolver26, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider26.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(130, 30)));
			label23.SetValue(fontSizeProperty26, ((IExtendedTypeConverter)fontSizeConverter26).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider26));
			label23.SetValue(Grid.ColumnProperty, 2);
			label23.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid10.Children.Add(label23);
			stackLayout6.Children.Add(grid10);
			grid12.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition17.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid12.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition17);
			columnDefinition18.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid12.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition18);
			columnDefinition19.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid12.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition19);
			grid11.SetValue(Grid.ColumnProperty, 0);
			rowDefinition13.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid11.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition13);
			rowDefinition14.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid11.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition14);
			label24.SetValue(Label.TextProperty, "ƒ‹¡øªÿ¿°");
			label24.SetValue(Grid.RowProperty, 0);
			label24.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty27 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter27 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider27 = new XamlServiceProvider();
			Type typeFromHandle53 = typeof(IProvideValueTarget);
			object[] array27 = new object[0 + 8];
			array27[0] = label24;
			array27[1] = grid11;
			array27[2] = grid12;
			array27[3] = stackLayout6;
			array27[4] = stackLayout7;
			array27[5] = scrollView;
			array27[6] = grid50;
			array27[7] = paraPage;
			object service27;
			xamlServiceProvider27.Add(typeFromHandle53, service27 = new SimpleValueTargetProvider(array27, Label.FontSizeProperty, nameScope));
			xamlServiceProvider27.Add(typeof(IReferenceProvider), service27);
			Type typeFromHandle54 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver27 = new XmlNamespaceResolver();
			xmlNamespaceResolver27.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver27.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver27.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider27.Add(typeFromHandle54, new XamlTypeResolver(xmlNamespaceResolver27, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider27.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(143, 96)));
			label24.SetValue(fontSizeProperty27, ((IExtendedTypeConverter)fontSizeConverter27).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider27));
			label24.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid11.Children.Add(label24);
			label25.SetValue(Label.TextProperty, "ƒ‹¡øªÿ¿°«ø∂»");
			label25.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty28 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter28 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider28 = new XamlServiceProvider();
			Type typeFromHandle55 = typeof(IProvideValueTarget);
			object[] array28 = new object[0 + 8];
			array28[0] = label25;
			array28[1] = grid11;
			array28[2] = grid12;
			array28[3] = stackLayout6;
			array28[4] = stackLayout7;
			array28[5] = scrollView;
			array28[6] = grid50;
			array28[7] = paraPage;
			object service28;
			xamlServiceProvider28.Add(typeFromHandle55, service28 = new SimpleValueTargetProvider(array28, Label.FontSizeProperty, nameScope));
			xamlServiceProvider28.Add(typeof(IReferenceProvider), service28);
			Type typeFromHandle56 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver28 = new XmlNamespaceResolver();
			xmlNamespaceResolver28.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver28.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver28.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider28.Add(typeFromHandle56, new XamlTypeResolver(xmlNamespaceResolver28, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider28.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(144, 79)));
			label25.SetValue(fontSizeProperty28, ((IExtendedTypeConverter)fontSizeConverter28).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider28));
			label25.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid11.Children.Add(label25);
			grid12.Children.Add(grid11);
			button7.SetValue(Grid.ColumnProperty, 0);
			button7.Clicked += paraPage.EnergyBack_Clicked;
			button7.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid12.Children.Add(button7);
			label26.SetValue(Label.TextProperty, "-");
			BindableProperty fontSizeProperty29 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter29 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider29 = new XamlServiceProvider();
			Type typeFromHandle57 = typeof(IProvideValueTarget);
			object[] array29 = new object[0 + 7];
			array29[0] = label26;
			array29[1] = grid12;
			array29[2] = stackLayout6;
			array29[3] = stackLayout7;
			array29[4] = scrollView;
			array29[5] = grid50;
			array29[6] = paraPage;
			object service29;
			xamlServiceProvider29.Add(typeFromHandle57, service29 = new SimpleValueTargetProvider(array29, Label.FontSizeProperty, nameScope));
			xamlServiceProvider29.Add(typeof(IReferenceProvider), service29);
			Type typeFromHandle58 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver29 = new XmlNamespaceResolver();
			xmlNamespaceResolver29.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver29.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver29.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider29.Add(typeFromHandle58, new XamlTypeResolver(xmlNamespaceResolver29, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider29.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(147, 30)));
			label26.SetValue(fontSizeProperty29, ((IExtendedTypeConverter)fontSizeConverter29).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider29));
			label26.SetValue(Grid.ColumnProperty, 2);
			label26.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid12.Children.Add(label26);
			stackLayout6.Children.Add(grid12);
			label27.SetValue(Label.TextProperty, "ÀŸ∂»µ»º∂");
			BindableProperty fontSizeProperty30 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter30 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider30 = new XamlServiceProvider();
			Type typeFromHandle59 = typeof(IProvideValueTarget);
			object[] array30 = new object[0 + 6];
			array30[0] = label27;
			array30[1] = stackLayout6;
			array30[2] = stackLayout7;
			array30[3] = scrollView;
			array30[4] = grid50;
			array30[5] = paraPage;
			object service30;
			xamlServiceProvider30.Add(typeFromHandle59, service30 = new SimpleValueTargetProvider(array30, Label.FontSizeProperty, nameScope));
			xamlServiceProvider30.Add(typeof(IReferenceProvider), service30);
			Type typeFromHandle60 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver30 = new XmlNamespaceResolver();
			xmlNamespaceResolver30.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver30.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver30.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider30.Add(typeFromHandle60, new XamlTypeResolver(xmlNamespaceResolver30, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider30.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(149, 47)));
			label27.SetValue(fontSizeProperty30, ((IExtendedTypeConverter)fontSizeConverter30).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider30));
			label27.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label27.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightBlue);
			label27.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			stackLayout6.Children.Add(label27);
			grid14.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition20.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid14.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition20);
			columnDefinition21.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid14.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition21);
			columnDefinition22.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid14.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition22);
			grid13.SetValue(Grid.ColumnProperty, 0);
			rowDefinition15.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid13.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition15);
			rowDefinition16.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid13.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition16);
			label28.SetValue(Label.TextProperty, "∏ﬂÀŸµµ¡¶∂»");
			label28.SetValue(Grid.RowProperty, 0);
			label28.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty31 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter31 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider31 = new XamlServiceProvider();
			Type typeFromHandle61 = typeof(IProvideValueTarget);
			object[] array31 = new object[0 + 8];
			array31[0] = label28;
			array31[1] = grid13;
			array31[2] = grid14;
			array31[3] = stackLayout6;
			array31[4] = stackLayout7;
			array31[5] = scrollView;
			array31[6] = grid50;
			array31[7] = paraPage;
			object service31;
			xamlServiceProvider31.Add(typeFromHandle61, service31 = new SimpleValueTargetProvider(array31, Label.FontSizeProperty, nameScope));
			xamlServiceProvider31.Add(typeof(IReferenceProvider), service31);
			Type typeFromHandle62 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver31 = new XmlNamespaceResolver();
			xmlNamespaceResolver31.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver31.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver31.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider31.Add(typeFromHandle62, new XamlTypeResolver(xmlNamespaceResolver31, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider31.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(161, 88)));
			label28.SetValue(fontSizeProperty31, ((IExtendedTypeConverter)fontSizeConverter31).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider31));
			label28.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid13.Children.Add(label28);
			slider.SetValue(Xamarin.Forms.Slider.MinimumTrackColorProperty, Color.OrangeRed);
			slider.SetValue(Xamarin.Forms.Slider.MaximumTrackColorProperty, Color.LightGray);
			slider.SetValue(Xamarin.Forms.Slider.ThumbColorProperty, Color.Green);
			slider.SetValue(Grid.RowProperty, 1);
			slider.SetValue(Xamarin.Forms.Slider.ValueProperty, 5.0);
			slider.SetValue(Xamarin.Forms.Slider.MaximumProperty, 100.0);
			slider.SetValue(Xamarin.Forms.Slider.MinimumProperty, 1.0);
			slider.DragCompleted += paraPage.OnSliderDHDragCompleted;
			slider.ValueChanged += paraPage.OnSliderDHValueChanged;
			grid13.Children.Add(slider);
			grid14.Children.Add(grid13);
			label29.SetValue(Label.TextProperty, "-");
			BindableProperty fontSizeProperty32 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter32 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider32 = new XamlServiceProvider();
			Type typeFromHandle63 = typeof(IProvideValueTarget);
			object[] array32 = new object[0 + 7];
			array32[0] = label29;
			array32[1] = grid14;
			array32[2] = stackLayout6;
			array32[3] = stackLayout7;
			array32[4] = scrollView;
			array32[5] = grid50;
			array32[6] = paraPage;
			object service32;
			xamlServiceProvider32.Add(typeFromHandle63, service32 = new SimpleValueTargetProvider(array32, Label.FontSizeProperty, nameScope));
			xamlServiceProvider32.Add(typeof(IReferenceProvider), service32);
			Type typeFromHandle64 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver32 = new XmlNamespaceResolver();
			xmlNamespaceResolver32.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver32.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver32.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider32.Add(typeFromHandle64, new XamlTypeResolver(xmlNamespaceResolver32, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider32.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(164, 30)));
			label29.SetValue(fontSizeProperty32, ((IExtendedTypeConverter)fontSizeConverter32).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider32));
			label29.SetValue(Grid.ColumnProperty, 2);
			label29.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid14.Children.Add(label29);
			stackLayout6.Children.Add(grid14);
			grid16.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition23.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid16.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition23);
			columnDefinition24.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid16.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition24);
			columnDefinition25.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid16.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition25);
			grid15.SetValue(Grid.ColumnProperty, 0);
			rowDefinition17.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid15.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition17);
			rowDefinition18.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid15.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition18);
			label30.SetValue(Label.TextProperty, "÷–ÀŸµµ¡¶∂»");
			label30.SetValue(Grid.RowProperty, 0);
			label30.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty33 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter33 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider33 = new XamlServiceProvider();
			Type typeFromHandle65 = typeof(IProvideValueTarget);
			object[] array33 = new object[0 + 8];
			array33[0] = label30;
			array33[1] = grid15;
			array33[2] = grid16;
			array33[3] = stackLayout6;
			array33[4] = stackLayout7;
			array33[5] = scrollView;
			array33[6] = grid50;
			array33[7] = paraPage;
			object service33;
			xamlServiceProvider33.Add(typeFromHandle65, service33 = new SimpleValueTargetProvider(array33, Label.FontSizeProperty, nameScope));
			xamlServiceProvider33.Add(typeof(IReferenceProvider), service33);
			Type typeFromHandle66 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver33 = new XmlNamespaceResolver();
			xmlNamespaceResolver33.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver33.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver33.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider33.Add(typeFromHandle66, new XamlTypeResolver(xmlNamespaceResolver33, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider33.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(177, 89)));
			label30.SetValue(fontSizeProperty33, ((IExtendedTypeConverter)fontSizeConverter33).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider33));
			label30.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid15.Children.Add(label30);
			slider2.SetValue(Xamarin.Forms.Slider.MinimumTrackColorProperty, Color.OrangeRed);
			slider2.SetValue(Xamarin.Forms.Slider.MaximumTrackColorProperty, Color.LightGray);
			slider2.SetValue(Xamarin.Forms.Slider.ThumbColorProperty, Color.Green);
			slider2.SetValue(Grid.RowProperty, 1);
			slider2.SetValue(Xamarin.Forms.Slider.ValueProperty, 5.0);
			slider2.SetValue(Xamarin.Forms.Slider.MaximumProperty, 100.0);
			slider2.SetValue(Xamarin.Forms.Slider.MinimumProperty, 1.0);
			slider2.DragCompleted += paraPage.OnSliderDMDragCompleted;
			slider2.ValueChanged += paraPage.OnSliderDMValueChanged;
			grid15.Children.Add(slider2);
			grid16.Children.Add(grid15);
			label31.SetValue(Label.TextProperty, "-");
			BindableProperty fontSizeProperty34 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter34 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider34 = new XamlServiceProvider();
			Type typeFromHandle67 = typeof(IProvideValueTarget);
			object[] array34 = new object[0 + 7];
			array34[0] = label31;
			array34[1] = grid16;
			array34[2] = stackLayout6;
			array34[3] = stackLayout7;
			array34[4] = scrollView;
			array34[5] = grid50;
			array34[6] = paraPage;
			object service34;
			xamlServiceProvider34.Add(typeFromHandle67, service34 = new SimpleValueTargetProvider(array34, Label.FontSizeProperty, nameScope));
			xamlServiceProvider34.Add(typeof(IReferenceProvider), service34);
			Type typeFromHandle68 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver34 = new XmlNamespaceResolver();
			xmlNamespaceResolver34.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver34.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver34.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider34.Add(typeFromHandle68, new XamlTypeResolver(xmlNamespaceResolver34, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider34.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(180, 30)));
			label31.SetValue(fontSizeProperty34, ((IExtendedTypeConverter)fontSizeConverter34).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider34));
			label31.SetValue(Grid.ColumnProperty, 2);
			label31.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid16.Children.Add(label31);
			stackLayout6.Children.Add(grid16);
			grid18.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition26.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid18.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition26);
			columnDefinition27.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid18.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition27);
			columnDefinition28.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid18.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition28);
			grid17.SetValue(Grid.ColumnProperty, 0);
			rowDefinition19.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid17.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition19);
			rowDefinition20.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid17.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition20);
			label32.SetValue(Label.TextProperty, "µÕÀŸµµ¡¶∂»");
			label32.SetValue(Grid.RowProperty, 0);
			label32.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty35 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter35 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider35 = new XamlServiceProvider();
			Type typeFromHandle69 = typeof(IProvideValueTarget);
			object[] array35 = new object[0 + 8];
			array35[0] = label32;
			array35[1] = grid17;
			array35[2] = grid18;
			array35[3] = stackLayout6;
			array35[4] = stackLayout7;
			array35[5] = scrollView;
			array35[6] = grid50;
			array35[7] = paraPage;
			object service35;
			xamlServiceProvider35.Add(typeFromHandle69, service35 = new SimpleValueTargetProvider(array35, Label.FontSizeProperty, nameScope));
			xamlServiceProvider35.Add(typeof(IReferenceProvider), service35);
			Type typeFromHandle70 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver35 = new XmlNamespaceResolver();
			xmlNamespaceResolver35.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver35.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver35.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider35.Add(typeFromHandle70, new XamlTypeResolver(xmlNamespaceResolver35, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider35.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(193, 88)));
			label32.SetValue(fontSizeProperty35, ((IExtendedTypeConverter)fontSizeConverter35).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider35));
			label32.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid17.Children.Add(label32);
			slider3.SetValue(Xamarin.Forms.Slider.MinimumTrackColorProperty, Color.OrangeRed);
			slider3.SetValue(Xamarin.Forms.Slider.MaximumTrackColorProperty, Color.LightGray);
			slider3.SetValue(Xamarin.Forms.Slider.ThumbColorProperty, Color.Green);
			slider3.SetValue(Grid.RowProperty, 1);
			slider3.SetValue(Xamarin.Forms.Slider.ValueProperty, 5.0);
			slider3.SetValue(Xamarin.Forms.Slider.MaximumProperty, 100.0);
			slider3.SetValue(Xamarin.Forms.Slider.MinimumProperty, 1.0);
			slider3.DragCompleted += paraPage.OnSliderDLDragCompleted;
			slider3.ValueChanged += paraPage.OnSliderDLValueChanged;
			grid17.Children.Add(slider3);
			grid18.Children.Add(grid17);
			label33.SetValue(Label.TextProperty, "-");
			BindableProperty fontSizeProperty36 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter36 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider36 = new XamlServiceProvider();
			Type typeFromHandle71 = typeof(IProvideValueTarget);
			object[] array36 = new object[0 + 7];
			array36[0] = label33;
			array36[1] = grid18;
			array36[2] = stackLayout6;
			array36[3] = stackLayout7;
			array36[4] = scrollView;
			array36[5] = grid50;
			array36[6] = paraPage;
			object service36;
			xamlServiceProvider36.Add(typeFromHandle71, service36 = new SimpleValueTargetProvider(array36, Label.FontSizeProperty, nameScope));
			xamlServiceProvider36.Add(typeof(IReferenceProvider), service36);
			Type typeFromHandle72 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver36 = new XmlNamespaceResolver();
			xmlNamespaceResolver36.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver36.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver36.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider36.Add(typeFromHandle72, new XamlTypeResolver(xmlNamespaceResolver36, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider36.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(196, 30)));
			label33.SetValue(fontSizeProperty36, ((IExtendedTypeConverter)fontSizeConverter36).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider36));
			label33.SetValue(Grid.ColumnProperty, 2);
			label33.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid18.Children.Add(label33);
			stackLayout6.Children.Add(grid18);
			grid20.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition29.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid20.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition29);
			columnDefinition30.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid20.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition30);
			columnDefinition31.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid20.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition31);
			grid19.SetValue(Grid.ColumnProperty, 0);
			rowDefinition21.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid19.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition21);
			rowDefinition22.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid19.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition22);
			label34.SetValue(Label.TextProperty, "∏ﬂÀŸµµÀŸ∂»");
			label34.SetValue(Grid.RowProperty, 0);
			label34.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty37 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter37 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider37 = new XamlServiceProvider();
			Type typeFromHandle73 = typeof(IProvideValueTarget);
			object[] array37 = new object[0 + 8];
			array37[0] = label34;
			array37[1] = grid19;
			array37[2] = grid20;
			array37[3] = stackLayout6;
			array37[4] = stackLayout7;
			array37[5] = scrollView;
			array37[6] = grid50;
			array37[7] = paraPage;
			object service37;
			xamlServiceProvider37.Add(typeFromHandle73, service37 = new SimpleValueTargetProvider(array37, Label.FontSizeProperty, nameScope));
			xamlServiceProvider37.Add(typeof(IReferenceProvider), service37);
			Type typeFromHandle74 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver37 = new XmlNamespaceResolver();
			xmlNamespaceResolver37.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver37.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver37.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider37.Add(typeFromHandle74, new XamlTypeResolver(xmlNamespaceResolver37, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider37.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(209, 94)));
			label34.SetValue(fontSizeProperty37, ((IExtendedTypeConverter)fontSizeConverter37).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider37));
			label34.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid19.Children.Add(label34);
			slider4.SetValue(Xamarin.Forms.Slider.MinimumTrackColorProperty, Color.SkyBlue);
			slider4.SetValue(Xamarin.Forms.Slider.MaximumTrackColorProperty, Color.LightGray);
			slider4.SetValue(Xamarin.Forms.Slider.ThumbColorProperty, Color.Green);
			slider4.SetValue(Grid.RowProperty, 1);
			slider4.SetValue(Xamarin.Forms.Slider.ValueProperty, 5.0);
			slider4.SetValue(Xamarin.Forms.Slider.MaximumProperty, 100.0);
			slider4.SetValue(Xamarin.Forms.Slider.MinimumProperty, 1.0);
			slider4.DragCompleted += paraPage.OnSliderDHSpeedDragCompleted;
			slider4.ValueChanged += paraPage.OnSliderDHSpeedValueChanged;
			grid19.Children.Add(slider4);
			grid20.Children.Add(grid19);
			label35.SetValue(Label.TextProperty, ">");
			BindableProperty fontSizeProperty38 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter38 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider38 = new XamlServiceProvider();
			Type typeFromHandle75 = typeof(IProvideValueTarget);
			object[] array38 = new object[0 + 7];
			array38[0] = label35;
			array38[1] = grid20;
			array38[2] = stackLayout6;
			array38[3] = stackLayout7;
			array38[4] = scrollView;
			array38[5] = grid50;
			array38[6] = paraPage;
			object service38;
			xamlServiceProvider38.Add(typeFromHandle75, service38 = new SimpleValueTargetProvider(array38, Label.FontSizeProperty, nameScope));
			xamlServiceProvider38.Add(typeof(IReferenceProvider), service38);
			Type typeFromHandle76 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver38 = new XmlNamespaceResolver();
			xmlNamespaceResolver38.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver38.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver38.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider38.Add(typeFromHandle76, new XamlTypeResolver(xmlNamespaceResolver38, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider38.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(212, 30)));
			label35.SetValue(fontSizeProperty38, ((IExtendedTypeConverter)fontSizeConverter38).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider38));
			label35.SetValue(Grid.ColumnProperty, 2);
			label35.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid20.Children.Add(label35);
			stackLayout6.Children.Add(grid20);
			grid22.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition32.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid22.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition32);
			columnDefinition33.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid22.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition33);
			columnDefinition34.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid22.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition34);
			grid21.SetValue(Grid.ColumnProperty, 0);
			rowDefinition23.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid21.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition23);
			rowDefinition24.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid21.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition24);
			label36.SetValue(Label.TextProperty, "÷–ÀŸµµÀŸ∂»");
			label36.SetValue(Grid.RowProperty, 0);
			label36.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty39 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter39 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider39 = new XamlServiceProvider();
			Type typeFromHandle77 = typeof(IProvideValueTarget);
			object[] array39 = new object[0 + 8];
			array39[0] = label36;
			array39[1] = grid21;
			array39[2] = grid22;
			array39[3] = stackLayout6;
			array39[4] = stackLayout7;
			array39[5] = scrollView;
			array39[6] = grid50;
			array39[7] = paraPage;
			object service39;
			xamlServiceProvider39.Add(typeFromHandle77, service39 = new SimpleValueTargetProvider(array39, Label.FontSizeProperty, nameScope));
			xamlServiceProvider39.Add(typeof(IReferenceProvider), service39);
			Type typeFromHandle78 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver39 = new XmlNamespaceResolver();
			xmlNamespaceResolver39.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver39.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver39.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider39.Add(typeFromHandle78, new XamlTypeResolver(xmlNamespaceResolver39, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider39.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(225, 94)));
			label36.SetValue(fontSizeProperty39, ((IExtendedTypeConverter)fontSizeConverter39).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider39));
			label36.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid21.Children.Add(label36);
			slider5.SetValue(Xamarin.Forms.Slider.MinimumTrackColorProperty, Color.SkyBlue);
			slider5.SetValue(Xamarin.Forms.Slider.MaximumTrackColorProperty, Color.LightGray);
			slider5.SetValue(Xamarin.Forms.Slider.ThumbColorProperty, Color.Green);
			slider5.SetValue(Grid.RowProperty, 1);
			slider5.SetValue(Xamarin.Forms.Slider.ValueProperty, 5.0);
			slider5.SetValue(Xamarin.Forms.Slider.MaximumProperty, 100.0);
			slider5.SetValue(Xamarin.Forms.Slider.MinimumProperty, 1.0);
			slider5.DragCompleted += paraPage.OnSliderDMSpeedDragCompleted;
			slider5.ValueChanged += paraPage.OnSliderDMSpeedValueChanged;
			grid21.Children.Add(slider5);
			grid22.Children.Add(grid21);
			label37.SetValue(Label.TextProperty, "-");
			BindableProperty fontSizeProperty40 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter40 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider40 = new XamlServiceProvider();
			Type typeFromHandle79 = typeof(IProvideValueTarget);
			object[] array40 = new object[0 + 7];
			array40[0] = label37;
			array40[1] = grid22;
			array40[2] = stackLayout6;
			array40[3] = stackLayout7;
			array40[4] = scrollView;
			array40[5] = grid50;
			array40[6] = paraPage;
			object service40;
			xamlServiceProvider40.Add(typeFromHandle79, service40 = new SimpleValueTargetProvider(array40, Label.FontSizeProperty, nameScope));
			xamlServiceProvider40.Add(typeof(IReferenceProvider), service40);
			Type typeFromHandle80 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver40 = new XmlNamespaceResolver();
			xmlNamespaceResolver40.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver40.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver40.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider40.Add(typeFromHandle80, new XamlTypeResolver(xmlNamespaceResolver40, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider40.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(228, 30)));
			label37.SetValue(fontSizeProperty40, ((IExtendedTypeConverter)fontSizeConverter40).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider40));
			label37.SetValue(Grid.ColumnProperty, 2);
			label37.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid22.Children.Add(label37);
			stackLayout6.Children.Add(grid22);
			grid24.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition35.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("80*"));
			((DefinitionCollection<ColumnDefinition>)grid24.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition35);
			columnDefinition36.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid24.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition36);
			columnDefinition37.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid24.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition37);
			grid23.SetValue(Grid.ColumnProperty, 0);
			rowDefinition25.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid23.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition25);
			rowDefinition26.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid23.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition26);
			label38.SetValue(Label.TextProperty, "µÕÀŸµµÀŸ∂»");
			label38.SetValue(Grid.RowProperty, 0);
			label38.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty41 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter41 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider41 = new XamlServiceProvider();
			Type typeFromHandle81 = typeof(IProvideValueTarget);
			object[] array41 = new object[0 + 8];
			array41[0] = label38;
			array41[1] = grid23;
			array41[2] = grid24;
			array41[3] = stackLayout6;
			array41[4] = stackLayout7;
			array41[5] = scrollView;
			array41[6] = grid50;
			array41[7] = paraPage;
			object service41;
			xamlServiceProvider41.Add(typeFromHandle81, service41 = new SimpleValueTargetProvider(array41, Label.FontSizeProperty, nameScope));
			xamlServiceProvider41.Add(typeof(IReferenceProvider), service41);
			Type typeFromHandle82 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver41 = new XmlNamespaceResolver();
			xmlNamespaceResolver41.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver41.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver41.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider41.Add(typeFromHandle82, new XamlTypeResolver(xmlNamespaceResolver41, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider41.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(241, 93)));
			label38.SetValue(fontSizeProperty41, ((IExtendedTypeConverter)fontSizeConverter41).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider41));
			label38.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid23.Children.Add(label38);
			slider6.SetValue(Xamarin.Forms.Slider.MinimumTrackColorProperty, Color.SkyBlue);
			slider6.SetValue(Xamarin.Forms.Slider.MaximumTrackColorProperty, Color.LightGray);
			slider6.SetValue(Xamarin.Forms.Slider.ThumbColorProperty, Color.Green);
			slider6.SetValue(Grid.RowProperty, 1);
			slider6.SetValue(Xamarin.Forms.Slider.ValueProperty, 5.0);
			slider6.SetValue(Xamarin.Forms.Slider.MaximumProperty, 100.0);
			slider6.SetValue(Xamarin.Forms.Slider.MinimumProperty, 1.0);
			slider6.DragCompleted += paraPage.OnSliderDLSpeedDragCompleted;
			slider6.ValueChanged += paraPage.OnSliderDLSpeedValueChanged;
			grid23.Children.Add(slider6);
			grid24.Children.Add(grid23);
			label39.SetValue(Label.TextProperty, ">");
			BindableProperty fontSizeProperty42 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter42 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider42 = new XamlServiceProvider();
			Type typeFromHandle83 = typeof(IProvideValueTarget);
			object[] array42 = new object[0 + 7];
			array42[0] = label39;
			array42[1] = grid24;
			array42[2] = stackLayout6;
			array42[3] = stackLayout7;
			array42[4] = scrollView;
			array42[5] = grid50;
			array42[6] = paraPage;
			object service42;
			xamlServiceProvider42.Add(typeFromHandle83, service42 = new SimpleValueTargetProvider(array42, Label.FontSizeProperty, nameScope));
			xamlServiceProvider42.Add(typeof(IReferenceProvider), service42);
			Type typeFromHandle84 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver42 = new XmlNamespaceResolver();
			xmlNamespaceResolver42.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver42.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver42.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider42.Add(typeFromHandle84, new XamlTypeResolver(xmlNamespaceResolver42, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider42.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(244, 31)));
			label39.SetValue(fontSizeProperty42, ((IExtendedTypeConverter)fontSizeConverter42).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider42));
			label39.SetValue(Grid.ColumnProperty, 2);
			label39.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid24.Children.Add(label39);
			stackLayout6.Children.Add(grid24);
			label40.SetValue(Label.TextProperty, "π¶ƒ‹ø™πÿ");
			label40.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label40.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightBlue);
			label40.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			stackLayout6.Children.Add(label40);
			grid26.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition38.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("70*"));
			((DefinitionCollection<ColumnDefinition>)grid26.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition38);
			columnDefinition39.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("15*"));
			((DefinitionCollection<ColumnDefinition>)grid26.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition39);
			columnDefinition40.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid26.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition40);
			columnDefinition41.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid26.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition41);
			label41.SetValue(Label.TextProperty, "PIN  ");
			label41.SetValue(Grid.ColumnProperty, 1);
			BindableProperty fontSizeProperty43 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter43 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider43 = new XamlServiceProvider();
			Type typeFromHandle85 = typeof(IProvideValueTarget);
			object[] array43 = new object[0 + 7];
			array43[0] = label41;
			array43[1] = grid26;
			array43[2] = stackLayout6;
			array43[3] = stackLayout7;
			array43[4] = scrollView;
			array43[5] = grid50;
			array43[6] = paraPage;
			object service43;
			xamlServiceProvider43.Add(typeFromHandle85, service43 = new SimpleValueTargetProvider(array43, Label.FontSizeProperty, nameScope));
			xamlServiceProvider43.Add(typeof(IReferenceProvider), service43);
			Type typeFromHandle86 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver43 = new XmlNamespaceResolver();
			xmlNamespaceResolver43.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver43.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver43.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider43.Add(typeFromHandle86, new XamlTypeResolver(xmlNamespaceResolver43, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider43.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(254, 66)));
			label41.SetValue(fontSizeProperty43, ((IExtendedTypeConverter)fontSizeConverter43).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider43));
			label41.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid26.Children.Add(label41);
			button8.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button8.Clicked += paraPage.XHSRH_Clicked;
			button8.SetValue(Grid.ColumnProperty, 1);
			button8.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid26.Children.Add(button8);
			grid25.SetValue(Grid.ColumnProperty, 0);
			rowDefinition27.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid25.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition27);
			rowDefinition28.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid25.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition28);
			label42.SetValue(Label.TextProperty, "—≤∫Ωπ¶ƒ‹1ø™πÿ");
			label42.SetValue(Grid.RowProperty, 0);
			label42.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty44 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter44 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider44 = new XamlServiceProvider();
			Type typeFromHandle87 = typeof(IProvideValueTarget);
			object[] array44 = new object[0 + 8];
			array44[0] = label42;
			array44[1] = grid25;
			array44[2] = grid26;
			array44[3] = stackLayout6;
			array44[4] = stackLayout7;
			array44[5] = scrollView;
			array44[6] = grid50;
			array44[7] = paraPage;
			object service44;
			xamlServiceProvider44.Add(typeFromHandle87, service44 = new SimpleValueTargetProvider(array44, Label.FontSizeProperty, nameScope));
			xamlServiceProvider44.Add(typeof(IReferenceProvider), service44);
			Type typeFromHandle88 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver44 = new XmlNamespaceResolver();
			xmlNamespaceResolver44.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver44.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver44.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider44.Add(typeFromHandle88, new XamlTypeResolver(xmlNamespaceResolver44, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider44.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(261, 91)));
			label42.SetValue(fontSizeProperty44, ((IExtendedTypeConverter)fontSizeConverter44).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider44));
			label42.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid25.Children.Add(label42);
			label43.SetValue(Label.TextProperty, "Cruise Function Enable");
			label43.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty45 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter45 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider45 = new XamlServiceProvider();
			Type typeFromHandle89 = typeof(IProvideValueTarget);
			object[] array45 = new object[0 + 8];
			array45[0] = label43;
			array45[1] = grid25;
			array45[2] = grid26;
			array45[3] = stackLayout6;
			array45[4] = stackLayout7;
			array45[5] = scrollView;
			array45[6] = grid50;
			array45[7] = paraPage;
			object service45;
			xamlServiceProvider45.Add(typeFromHandle89, service45 = new SimpleValueTargetProvider(array45, Label.FontSizeProperty, nameScope));
			xamlServiceProvider45.Add(typeof(IReferenceProvider), service45);
			Type typeFromHandle90 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver45 = new XmlNamespaceResolver();
			xmlNamespaceResolver45.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver45.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver45.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider45.Add(typeFromHandle90, new XamlTypeResolver(xmlNamespaceResolver45, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider45.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(262, 86)));
			label43.SetValue(fontSizeProperty45, ((IExtendedTypeConverter)fontSizeConverter45).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider45));
			label43.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid25.Children.Add(label43);
			grid26.Children.Add(grid25);
			obj2.SetValue(Grid.ColumnProperty, 2);
			obj2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid26.Children.Add(obj2);
			button9.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button9.Clicked += paraPage.XH_Clicked;
			button9.SetValue(Grid.ColumnProperty, 2);
			button9.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid26.Children.Add(button9);
			stackLayout6.Children.Add(grid26);
			grid28.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition42.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("70*"));
			((DefinitionCollection<ColumnDefinition>)grid28.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition42);
			columnDefinition43.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("15*"));
			((DefinitionCollection<ColumnDefinition>)grid28.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition43);
			columnDefinition44.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid28.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition44);
			columnDefinition45.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid28.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition45);
			label44.SetValue(Label.TextProperty, "PIN  ");
			label44.SetValue(Grid.ColumnProperty, 1);
			BindableProperty fontSizeProperty46 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter46 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider46 = new XamlServiceProvider();
			Type typeFromHandle91 = typeof(IProvideValueTarget);
			object[] array46 = new object[0 + 7];
			array46[0] = label44;
			array46[1] = grid28;
			array46[2] = stackLayout6;
			array46[3] = stackLayout7;
			array46[4] = scrollView;
			array46[5] = grid50;
			array46[6] = paraPage;
			object service46;
			xamlServiceProvider46.Add(typeFromHandle91, service46 = new SimpleValueTargetProvider(array46, Label.FontSizeProperty, nameScope));
			xamlServiceProvider46.Add(typeof(IReferenceProvider), service46);
			Type typeFromHandle92 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver46 = new XmlNamespaceResolver();
			xmlNamespaceResolver46.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver46.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver46.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider46.Add(typeFromHandle92, new XamlTypeResolver(xmlNamespaceResolver46, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider46.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(274, 66)));
			label44.SetValue(fontSizeProperty46, ((IExtendedTypeConverter)fontSizeConverter46).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider46));
			label44.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid28.Children.Add(label44);
			button10.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button10.Clicked += paraPage.PSRH_Clicked;
			button10.SetValue(Grid.ColumnProperty, 1);
			button10.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid28.Children.Add(button10);
			grid27.SetValue(Grid.ColumnProperty, 0);
			rowDefinition29.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid27.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition29);
			rowDefinition30.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid27.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition30);
			label45.SetValue(Label.TextProperty, "Pµµ1π¶ƒ‹");
			label45.SetValue(Grid.RowProperty, 0);
			label45.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty47 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter47 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider47 = new XamlServiceProvider();
			Type typeFromHandle93 = typeof(IProvideValueTarget);
			object[] array47 = new object[0 + 8];
			array47[0] = label45;
			array47[1] = grid27;
			array47[2] = grid28;
			array47[3] = stackLayout6;
			array47[4] = stackLayout7;
			array47[5] = scrollView;
			array47[6] = grid50;
			array47[7] = paraPage;
			object service47;
			xamlServiceProvider47.Add(typeFromHandle93, service47 = new SimpleValueTargetProvider(array47, Label.FontSizeProperty, nameScope));
			xamlServiceProvider47.Add(typeof(IReferenceProvider), service47);
			Type typeFromHandle94 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver47 = new XmlNamespaceResolver();
			xmlNamespaceResolver47.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver47.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver47.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider47.Add(typeFromHandle94, new XamlTypeResolver(xmlNamespaceResolver47, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider47.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(281, 92)));
			label45.SetValue(fontSizeProperty47, ((IExtendedTypeConverter)fontSizeConverter47).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider47));
			label45.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid27.Children.Add(label45);
			label46.SetValue(Label.TextProperty, "P Function Enable");
			label46.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty48 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter48 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider48 = new XamlServiceProvider();
			Type typeFromHandle95 = typeof(IProvideValueTarget);
			object[] array48 = new object[0 + 8];
			array48[0] = label46;
			array48[1] = grid27;
			array48[2] = grid28;
			array48[3] = stackLayout6;
			array48[4] = stackLayout7;
			array48[5] = scrollView;
			array48[6] = grid50;
			array48[7] = paraPage;
			object service48;
			xamlServiceProvider48.Add(typeFromHandle95, service48 = new SimpleValueTargetProvider(array48, Label.FontSizeProperty, nameScope));
			xamlServiceProvider48.Add(typeof(IReferenceProvider), service48);
			Type typeFromHandle96 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver48 = new XmlNamespaceResolver();
			xmlNamespaceResolver48.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver48.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver48.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider48.Add(typeFromHandle96, new XamlTypeResolver(xmlNamespaceResolver48, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider48.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(282, 84)));
			label46.SetValue(fontSizeProperty48, ((IExtendedTypeConverter)fontSizeConverter48).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider48));
			label46.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid27.Children.Add(label46);
			grid28.Children.Add(grid27);
			obj3.SetValue(Grid.ColumnProperty, 2);
			obj3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid28.Children.Add(obj3);
			button11.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button11.Clicked += paraPage.PGear_Clicked;
			button11.SetValue(Grid.ColumnProperty, 2);
			button11.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid28.Children.Add(button11);
			stackLayout6.Children.Add(grid28);
			grid30.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition46.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("70*"));
			((DefinitionCollection<ColumnDefinition>)grid30.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition46);
			columnDefinition47.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("15*"));
			((DefinitionCollection<ColumnDefinition>)grid30.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition47);
			columnDefinition48.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid30.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition48);
			columnDefinition49.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid30.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition49);
			grid29.SetValue(Grid.ColumnProperty, 0);
			rowDefinition31.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid29.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition31);
			rowDefinition32.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid29.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition32);
			label47.SetValue(Label.TextProperty, "◊‘∂Øªÿ1Pµµπ¶ƒ‹");
			label47.SetValue(Grid.RowProperty, 0);
			label47.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty49 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter49 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider49 = new XamlServiceProvider();
			Type typeFromHandle97 = typeof(IProvideValueTarget);
			object[] array49 = new object[0 + 8];
			array49[0] = label47;
			array49[1] = grid29;
			array49[2] = grid30;
			array49[3] = stackLayout6;
			array49[4] = stackLayout7;
			array49[5] = scrollView;
			array49[6] = grid50;
			array49[7] = paraPage;
			object service49;
			xamlServiceProvider49.Add(typeFromHandle97, service49 = new SimpleValueTargetProvider(array49, Label.FontSizeProperty, nameScope));
			xamlServiceProvider49.Add(typeof(IReferenceProvider), service49);
			Type typeFromHandle98 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver49 = new XmlNamespaceResolver();
			xmlNamespaceResolver49.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver49.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver49.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider49.Add(typeFromHandle98, new XamlTypeResolver(xmlNamespaceResolver49, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider49.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(299, 99)));
			label47.SetValue(fontSizeProperty49, ((IExtendedTypeConverter)fontSizeConverter49).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider49));
			label47.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid29.Children.Add(label47);
			label48.SetValue(Label.TextProperty, "Auto Return to Gear P Function");
			label48.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty50 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter50 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider50 = new XamlServiceProvider();
			Type typeFromHandle99 = typeof(IProvideValueTarget);
			object[] array50 = new object[0 + 8];
			array50[0] = label48;
			array50[1] = grid29;
			array50[2] = grid30;
			array50[3] = stackLayout6;
			array50[4] = stackLayout7;
			array50[5] = scrollView;
			array50[6] = grid50;
			array50[7] = paraPage;
			object service50;
			xamlServiceProvider50.Add(typeFromHandle99, service50 = new SimpleValueTargetProvider(array50, Label.FontSizeProperty, nameScope));
			xamlServiceProvider50.Add(typeof(IReferenceProvider), service50);
			Type typeFromHandle100 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver50 = new XmlNamespaceResolver();
			xmlNamespaceResolver50.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver50.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver50.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider50.Add(typeFromHandle100, new XamlTypeResolver(xmlNamespaceResolver50, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider50.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(300, 102)));
			label48.SetValue(fontSizeProperty50, ((IExtendedTypeConverter)fontSizeConverter50).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider50));
			label48.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid29.Children.Add(label48);
			grid30.Children.Add(grid29);
			obj4.SetValue(Grid.ColumnProperty, 2);
			obj4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid30.Children.Add(obj4);
			button12.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button12.Clicked += paraPage.AutoBackP_Clicked;
			button12.SetValue(Grid.ColumnProperty, 2);
			button12.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid30.Children.Add(button12);
			stackLayout6.Children.Add(grid30);
			grid32.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition50.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("70*"));
			((DefinitionCollection<ColumnDefinition>)grid32.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition50);
			columnDefinition51.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("15*"));
			((DefinitionCollection<ColumnDefinition>)grid32.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition51);
			columnDefinition52.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid32.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition52);
			columnDefinition53.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid32.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition53);
			label49.SetValue(Label.TextProperty, "PIN  ");
			label49.SetValue(Grid.ColumnProperty, 1);
			BindableProperty fontSizeProperty51 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter51 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider51 = new XamlServiceProvider();
			Type typeFromHandle101 = typeof(IProvideValueTarget);
			object[] array51 = new object[0 + 7];
			array51[0] = label49;
			array51[1] = grid32;
			array51[2] = stackLayout6;
			array51[3] = stackLayout7;
			array51[4] = scrollView;
			array51[5] = grid50;
			array51[6] = paraPage;
			object service51;
			xamlServiceProvider51.Add(typeFromHandle101, service51 = new SimpleValueTargetProvider(array51, Label.FontSizeProperty, nameScope));
			xamlServiceProvider51.Add(typeof(IReferenceProvider), service51);
			Type typeFromHandle102 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver51 = new XmlNamespaceResolver();
			xmlNamespaceResolver51.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver51.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver51.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider51.Add(typeFromHandle102, new XamlTypeResolver(xmlNamespaceResolver51, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider51.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(312, 67)));
			label49.SetValue(fontSizeProperty51, ((IExtendedTypeConverter)fontSizeConverter51).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider51));
			label49.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid32.Children.Add(label49);
			button13.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button13.Clicked += paraPage.SDHSRH_Clicked;
			button13.SetValue(Grid.ColumnProperty, 1);
			button13.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid32.Children.Add(button13);
			grid31.SetValue(Grid.ColumnProperty, 0);
			rowDefinition33.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid31.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition33);
			rowDefinition34.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid31.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition34);
			label50.SetValue(Label.TextProperty, "∏ﬂÀŸΩ≈µ„∂Øº”µµ");
			label50.SetValue(Grid.RowProperty, 0);
			label50.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty52 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter52 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider52 = new XamlServiceProvider();
			Type typeFromHandle103 = typeof(IProvideValueTarget);
			object[] array52 = new object[0 + 8];
			array52[0] = label50;
			array52[1] = grid31;
			array52[2] = grid32;
			array52[3] = stackLayout6;
			array52[4] = stackLayout7;
			array52[5] = scrollView;
			array52[6] = grid50;
			array52[7] = paraPage;
			object service52;
			xamlServiceProvider52.Add(typeFromHandle103, service52 = new SimpleValueTargetProvider(array52, Label.FontSizeProperty, nameScope));
			xamlServiceProvider52.Add(typeof(IReferenceProvider), service52);
			Type typeFromHandle104 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver52 = new XmlNamespaceResolver();
			xmlNamespaceResolver52.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver52.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver52.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider52.Add(typeFromHandle104, new XamlTypeResolver(xmlNamespaceResolver52, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider52.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(319, 91)));
			label50.SetValue(fontSizeProperty52, ((IExtendedTypeConverter)fontSizeConverter52).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider52));
			label50.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid31.Children.Add(label50);
			label51.SetValue(Label.TextProperty, "SDH PIN Push Acc");
			label51.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty53 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter53 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider53 = new XamlServiceProvider();
			Type typeFromHandle105 = typeof(IProvideValueTarget);
			object[] array53 = new object[0 + 8];
			array53[0] = label51;
			array53[1] = grid31;
			array53[2] = grid32;
			array53[3] = stackLayout6;
			array53[4] = stackLayout7;
			array53[5] = scrollView;
			array53[6] = grid50;
			array53[7] = paraPage;
			object service53;
			xamlServiceProvider53.Add(typeFromHandle105, service53 = new SimpleValueTargetProvider(array53, Label.FontSizeProperty, nameScope));
			xamlServiceProvider53.Add(typeof(IReferenceProvider), service53);
			Type typeFromHandle106 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver53 = new XmlNamespaceResolver();
			xmlNamespaceResolver53.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver53.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver53.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider53.Add(typeFromHandle106, new XamlTypeResolver(xmlNamespaceResolver53, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider53.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(320, 81)));
			label51.SetValue(fontSizeProperty53, ((IExtendedTypeConverter)fontSizeConverter53).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider53));
			label51.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid31.Children.Add(label51);
			grid32.Children.Add(grid31);
			button14.SetValue(Grid.ColumnProperty, 0);
			button14.Clicked += paraPage.SDH_Clicked;
			button14.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid32.Children.Add(button14);
			label52.SetValue(Label.TextProperty, "-");
			BindableProperty fontSizeProperty54 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter54 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider54 = new XamlServiceProvider();
			Type typeFromHandle107 = typeof(IProvideValueTarget);
			object[] array54 = new object[0 + 7];
			array54[0] = label52;
			array54[1] = grid32;
			array54[2] = stackLayout6;
			array54[3] = stackLayout7;
			array54[4] = scrollView;
			array54[5] = grid50;
			array54[6] = paraPage;
			object service54;
			xamlServiceProvider54.Add(typeFromHandle107, service54 = new SimpleValueTargetProvider(array54, Label.FontSizeProperty, nameScope));
			xamlServiceProvider54.Add(typeof(IReferenceProvider), service54);
			Type typeFromHandle108 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver54 = new XmlNamespaceResolver();
			xmlNamespaceResolver54.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver54.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver54.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider54.Add(typeFromHandle108, new XamlTypeResolver(xmlNamespaceResolver54, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider54.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(323, 30)));
			label52.SetValue(fontSizeProperty54, ((IExtendedTypeConverter)fontSizeConverter54).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider54));
			label52.SetValue(Grid.ColumnProperty, 3);
			label52.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid32.Children.Add(label52);
			stackLayout6.Children.Add(grid32);
			grid34.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition54.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("70*"));
			((DefinitionCollection<ColumnDefinition>)grid34.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition54);
			columnDefinition55.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("15*"));
			((DefinitionCollection<ColumnDefinition>)grid34.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition55);
			columnDefinition56.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid34.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition56);
			columnDefinition57.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid34.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition57);
			label53.SetValue(Label.TextProperty, "PIN  ");
			label53.SetValue(Grid.ColumnProperty, 1);
			BindableProperty fontSizeProperty55 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter55 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider55 = new XamlServiceProvider();
			Type typeFromHandle109 = typeof(IProvideValueTarget);
			object[] array55 = new object[0 + 7];
			array55[0] = label53;
			array55[1] = grid34;
			array55[2] = stackLayout6;
			array55[3] = stackLayout7;
			array55[4] = scrollView;
			array55[5] = grid50;
			array55[6] = paraPage;
			object service55;
			xamlServiceProvider55.Add(typeFromHandle109, service55 = new SimpleValueTargetProvider(array55, Label.FontSizeProperty, nameScope));
			xamlServiceProvider55.Add(typeof(IReferenceProvider), service55);
			Type typeFromHandle110 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver55 = new XmlNamespaceResolver();
			xmlNamespaceResolver55.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver55.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver55.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider55.Add(typeFromHandle110, new XamlTypeResolver(xmlNamespaceResolver55, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider55.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(332, 67)));
			label53.SetValue(fontSizeProperty55, ((IExtendedTypeConverter)fontSizeConverter55).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider55));
			label53.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid34.Children.Add(label53);
			button15.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button15.Clicked += paraPage.SDLSRH_Clicked;
			button15.SetValue(Grid.ColumnProperty, 1);
			button15.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid34.Children.Add(button15);
			grid33.SetValue(Grid.ColumnProperty, 0);
			rowDefinition35.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid33.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition35);
			rowDefinition36.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid33.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition36);
			label54.SetValue(Label.TextProperty, "µÕÀŸΩ≈µ„∂Øºıµµ");
			label54.SetValue(Grid.RowProperty, 0);
			label54.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty56 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter56 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider56 = new XamlServiceProvider();
			Type typeFromHandle111 = typeof(IProvideValueTarget);
			object[] array56 = new object[0 + 8];
			array56[0] = label54;
			array56[1] = grid33;
			array56[2] = grid34;
			array56[3] = stackLayout6;
			array56[4] = stackLayout7;
			array56[5] = scrollView;
			array56[6] = grid50;
			array56[7] = paraPage;
			object service56;
			xamlServiceProvider56.Add(typeFromHandle111, service56 = new SimpleValueTargetProvider(array56, Label.FontSizeProperty, nameScope));
			xamlServiceProvider56.Add(typeof(IReferenceProvider), service56);
			Type typeFromHandle112 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver56 = new XmlNamespaceResolver();
			xmlNamespaceResolver56.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver56.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver56.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider56.Add(typeFromHandle112, new XamlTypeResolver(xmlNamespaceResolver56, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider56.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(339, 91)));
			label54.SetValue(fontSizeProperty56, ((IExtendedTypeConverter)fontSizeConverter56).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider56));
			label54.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid33.Children.Add(label54);
			label55.SetValue(Label.TextProperty, "SDL PIN Push Dec");
			label55.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty57 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter57 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider57 = new XamlServiceProvider();
			Type typeFromHandle113 = typeof(IProvideValueTarget);
			object[] array57 = new object[0 + 8];
			array57[0] = label55;
			array57[1] = grid33;
			array57[2] = grid34;
			array57[3] = stackLayout6;
			array57[4] = stackLayout7;
			array57[5] = scrollView;
			array57[6] = grid50;
			array57[7] = paraPage;
			object service57;
			xamlServiceProvider57.Add(typeFromHandle113, service57 = new SimpleValueTargetProvider(array57, Label.FontSizeProperty, nameScope));
			xamlServiceProvider57.Add(typeof(IReferenceProvider), service57);
			Type typeFromHandle114 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver57 = new XmlNamespaceResolver();
			xmlNamespaceResolver57.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver57.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver57.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider57.Add(typeFromHandle114, new XamlTypeResolver(xmlNamespaceResolver57, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider57.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(340, 81)));
			label55.SetValue(fontSizeProperty57, ((IExtendedTypeConverter)fontSizeConverter57).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider57));
			label55.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid33.Children.Add(label55);
			grid34.Children.Add(grid33);
			button16.SetValue(Grid.ColumnProperty, 0);
			button16.Clicked += paraPage.SDL_Clicked;
			button16.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid34.Children.Add(button16);
			label56.SetValue(Label.TextProperty, "-");
			BindableProperty fontSizeProperty58 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter58 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider58 = new XamlServiceProvider();
			Type typeFromHandle115 = typeof(IProvideValueTarget);
			object[] array58 = new object[0 + 7];
			array58[0] = label56;
			array58[1] = grid34;
			array58[2] = stackLayout6;
			array58[3] = stackLayout7;
			array58[4] = scrollView;
			array58[5] = grid50;
			array58[6] = paraPage;
			object service58;
			xamlServiceProvider58.Add(typeFromHandle115, service58 = new SimpleValueTargetProvider(array58, Label.FontSizeProperty, nameScope));
			xamlServiceProvider58.Add(typeof(IReferenceProvider), service58);
			Type typeFromHandle116 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver58 = new XmlNamespaceResolver();
			xmlNamespaceResolver58.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver58.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver58.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider58.Add(typeFromHandle116, new XamlTypeResolver(xmlNamespaceResolver58, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider58.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(343, 30)));
			label56.SetValue(fontSizeProperty58, ((IExtendedTypeConverter)fontSizeConverter58).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider58));
			label56.SetValue(Grid.ColumnProperty, 3);
			label56.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid34.Children.Add(label56);
			stackLayout6.Children.Add(grid34);
			grid36.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition58.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("70*"));
			((DefinitionCollection<ColumnDefinition>)grid36.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition58);
			columnDefinition59.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("15*"));
			((DefinitionCollection<ColumnDefinition>)grid36.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition59);
			columnDefinition60.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid36.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition60);
			columnDefinition61.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid36.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition61);
			label57.SetValue(Label.TextProperty, "PIN  ");
			label57.SetValue(Grid.ColumnProperty, 1);
			BindableProperty fontSizeProperty59 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter59 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider59 = new XamlServiceProvider();
			Type typeFromHandle117 = typeof(IProvideValueTarget);
			object[] array59 = new object[0 + 7];
			array59[0] = label57;
			array59[1] = grid36;
			array59[2] = stackLayout6;
			array59[3] = stackLayout7;
			array59[4] = scrollView;
			array59[5] = grid50;
			array59[6] = paraPage;
			object service59;
			xamlServiceProvider59.Add(typeFromHandle117, service59 = new SimpleValueTargetProvider(array59, Label.FontSizeProperty, nameScope));
			xamlServiceProvider59.Add(typeof(IReferenceProvider), service59);
			Type typeFromHandle118 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver59 = new XmlNamespaceResolver();
			xmlNamespaceResolver59.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver59.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver59.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider59.Add(typeFromHandle118, new XamlTypeResolver(xmlNamespaceResolver59, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider59.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(352, 67)));
			label57.SetValue(fontSizeProperty59, ((IExtendedTypeConverter)fontSizeConverter59).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider59));
			label57.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid36.Children.Add(label57);
			button17.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button17.Clicked += paraPage.RESRH_Clicked;
			button17.SetValue(Grid.ColumnProperty, 1);
			button17.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid36.Children.Add(button17);
			grid35.SetValue(Grid.ColumnProperty, 0);
			rowDefinition37.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid35.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition37);
			rowDefinition38.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid35.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition38);
			label58.SetValue(Label.TextProperty, "RE Function");
			label58.SetValue(Grid.RowProperty, 0);
			label58.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty60 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter60 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider60 = new XamlServiceProvider();
			Type typeFromHandle119 = typeof(IProvideValueTarget);
			object[] array60 = new object[0 + 8];
			array60[0] = label58;
			array60[1] = grid35;
			array60[2] = grid36;
			array60[3] = stackLayout6;
			array60[4] = stackLayout7;
			array60[5] = scrollView;
			array60[6] = grid50;
			array60[7] = paraPage;
			object service60;
			xamlServiceProvider60.Add(typeFromHandle119, service60 = new SimpleValueTargetProvider(array60, Label.FontSizeProperty, nameScope));
			xamlServiceProvider60.Add(typeof(IReferenceProvider), service60);
			Type typeFromHandle120 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver60 = new XmlNamespaceResolver();
			xmlNamespaceResolver60.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver60.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver60.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider60.Add(typeFromHandle120, new XamlTypeResolver(xmlNamespaceResolver60, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider60.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(359, 99)));
			label58.SetValue(fontSizeProperty60, ((IExtendedTypeConverter)fontSizeConverter60).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider60));
			label58.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid35.Children.Add(label58);
			label59.SetValue(Label.TextProperty, "RE Function Enable");
			label59.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty61 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter61 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider61 = new XamlServiceProvider();
			Type typeFromHandle121 = typeof(IProvideValueTarget);
			object[] array61 = new object[0 + 8];
			array61[0] = label59;
			array61[1] = grid35;
			array61[2] = grid36;
			array61[3] = stackLayout6;
			array61[4] = stackLayout7;
			array61[5] = scrollView;
			array61[6] = grid50;
			array61[7] = paraPage;
			object service61;
			xamlServiceProvider61.Add(typeFromHandle121, service61 = new SimpleValueTargetProvider(array61, Label.FontSizeProperty, nameScope));
			xamlServiceProvider61.Add(typeof(IReferenceProvider), service61);
			Type typeFromHandle122 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver61 = new XmlNamespaceResolver();
			xmlNamespaceResolver61.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver61.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver61.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider61.Add(typeFromHandle122, new XamlTypeResolver(xmlNamespaceResolver61, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider61.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(360, 86)));
			label59.SetValue(fontSizeProperty61, ((IExtendedTypeConverter)fontSizeConverter61).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider61));
			label59.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid35.Children.Add(label59);
			grid36.Children.Add(grid35);
			obj5.SetValue(Grid.ColumnProperty, 2);
			obj5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid36.Children.Add(obj5);
			button18.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button18.Clicked += paraPage.REGear_Clicked;
			button18.SetValue(Grid.ColumnProperty, 2);
			button18.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid36.Children.Add(button18);
			stackLayout6.Children.Add(grid36);
			grid38.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition62.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("70*"));
			((DefinitionCollection<ColumnDefinition>)grid38.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition62);
			columnDefinition63.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("15*"));
			((DefinitionCollection<ColumnDefinition>)grid38.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition63);
			columnDefinition64.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid38.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition64);
			columnDefinition65.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid38.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition65);
			label60.SetValue(Label.TextProperty, "PIN  ");
			label60.SetValue(Grid.ColumnProperty, 1);
			BindableProperty fontSizeProperty62 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter62 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider62 = new XamlServiceProvider();
			Type typeFromHandle123 = typeof(IProvideValueTarget);
			object[] array62 = new object[0 + 7];
			array62[0] = label60;
			array62[1] = grid38;
			array62[2] = stackLayout6;
			array62[3] = stackLayout7;
			array62[4] = scrollView;
			array62[5] = grid50;
			array62[6] = paraPage;
			object service62;
			xamlServiceProvider62.Add(typeFromHandle123, service62 = new SimpleValueTargetProvider(array62, Label.FontSizeProperty, nameScope));
			xamlServiceProvider62.Add(typeof(IReferenceProvider), service62);
			Type typeFromHandle124 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver62 = new XmlNamespaceResolver();
			xmlNamespaceResolver62.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver62.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver62.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider62.Add(typeFromHandle124, new XamlTypeResolver(xmlNamespaceResolver62, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider62.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(372, 73)));
			label60.SetValue(fontSizeProperty62, ((IExtendedTypeConverter)fontSizeConverter62).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider62));
			label60.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid38.Children.Add(label60);
			button19.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button19.Clicked += paraPage.SEATSRH_Clicked;
			button19.SetValue(Grid.ColumnProperty, 1);
			button19.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid38.Children.Add(button19);
			grid37.SetValue(Grid.ColumnProperty, 0);
			rowDefinition39.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid37.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition39);
			rowDefinition40.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid37.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition40);
			label61.SetValue(Label.TextProperty, "◊¯Õ∞1π¶ƒ‹");
			label61.SetValue(Grid.RowProperty, 0);
			label61.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty63 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter63 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider63 = new XamlServiceProvider();
			Type typeFromHandle125 = typeof(IProvideValueTarget);
			object[] array63 = new object[0 + 8];
			array63[0] = label61;
			array63[1] = grid37;
			array63[2] = grid38;
			array63[3] = stackLayout6;
			array63[4] = stackLayout7;
			array63[5] = scrollView;
			array63[6] = grid50;
			array63[7] = paraPage;
			object service63;
			xamlServiceProvider63.Add(typeFromHandle125, service63 = new SimpleValueTargetProvider(array63, Label.FontSizeProperty, nameScope));
			xamlServiceProvider63.Add(typeof(IReferenceProvider), service63);
			Type typeFromHandle126 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver63 = new XmlNamespaceResolver();
			xmlNamespaceResolver63.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver63.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver63.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider63.Add(typeFromHandle126, new XamlTypeResolver(xmlNamespaceResolver63, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider63.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(379, 93)));
			label61.SetValue(fontSizeProperty63, ((IExtendedTypeConverter)fontSizeConverter63).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider63));
			label61.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid37.Children.Add(label61);
			label62.SetValue(Label.TextProperty, "Seat Function Enable");
			label62.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty64 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter64 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider64 = new XamlServiceProvider();
			Type typeFromHandle127 = typeof(IProvideValueTarget);
			object[] array64 = new object[0 + 8];
			array64[0] = label62;
			array64[1] = grid37;
			array64[2] = grid38;
			array64[3] = stackLayout6;
			array64[4] = stackLayout7;
			array64[5] = scrollView;
			array64[6] = grid50;
			array64[7] = paraPage;
			object service64;
			xamlServiceProvider64.Add(typeFromHandle127, service64 = new SimpleValueTargetProvider(array64, Label.FontSizeProperty, nameScope));
			xamlServiceProvider64.Add(typeof(IReferenceProvider), service64);
			Type typeFromHandle128 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver64 = new XmlNamespaceResolver();
			xmlNamespaceResolver64.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver64.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver64.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider64.Add(typeFromHandle128, new XamlTypeResolver(xmlNamespaceResolver64, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider64.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(380, 89)));
			label62.SetValue(fontSizeProperty64, ((IExtendedTypeConverter)fontSizeConverter64).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider64));
			label62.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid37.Children.Add(label62);
			grid38.Children.Add(grid37);
			obj6.SetValue(Grid.ColumnProperty, 2);
			obj6.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid38.Children.Add(obj6);
			button20.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button20.Clicked += paraPage.Zuotong_Clicked;
			button20.SetValue(Grid.ColumnProperty, 2);
			button20.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid38.Children.Add(button20);
			stackLayout6.Children.Add(grid38);
			grid40.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition66.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("70*"));
			((DefinitionCollection<ColumnDefinition>)grid40.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition66);
			columnDefinition67.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("15*"));
			((DefinitionCollection<ColumnDefinition>)grid40.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition67);
			columnDefinition68.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid40.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition68);
			columnDefinition69.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid40.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition69);
			grid39.SetValue(Grid.ColumnProperty, 0);
			rowDefinition41.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid39.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition41);
			rowDefinition42.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid39.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition42);
			label63.SetValue(Label.TextProperty, "tuixingπ¶ƒ‹");
			label63.SetValue(Grid.RowProperty, 0);
			label63.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty65 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter65 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider65 = new XamlServiceProvider();
			Type typeFromHandle129 = typeof(IProvideValueTarget);
			object[] array65 = new object[0 + 8];
			array65[0] = label63;
			array65[1] = grid39;
			array65[2] = grid40;
			array65[3] = stackLayout6;
			array65[4] = stackLayout7;
			array65[5] = scrollView;
			array65[6] = grid50;
			array65[7] = paraPage;
			object service65;
			xamlServiceProvider65.Add(typeFromHandle129, service65 = new SimpleValueTargetProvider(array65, Label.FontSizeProperty, nameScope));
			xamlServiceProvider65.Add(typeof(IReferenceProvider), service65);
			Type typeFromHandle130 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver65 = new XmlNamespaceResolver();
			xmlNamespaceResolver65.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver65.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver65.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider65.Add(typeFromHandle130, new XamlTypeResolver(xmlNamespaceResolver65, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider65.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(397, 98)));
			label63.SetValue(fontSizeProperty65, ((IExtendedTypeConverter)fontSizeConverter65).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider65));
			label63.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid39.Children.Add(label63);
			label64.SetValue(Label.TextProperty, "Assist Roll Function");
			label64.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty66 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter66 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider66 = new XamlServiceProvider();
			Type typeFromHandle131 = typeof(IProvideValueTarget);
			object[] array66 = new object[0 + 8];
			array66[0] = label64;
			array66[1] = grid39;
			array66[2] = grid40;
			array66[3] = stackLayout6;
			array66[4] = stackLayout7;
			array66[5] = scrollView;
			array66[6] = grid50;
			array66[7] = paraPage;
			object service66;
			xamlServiceProvider66.Add(typeFromHandle131, service66 = new SimpleValueTargetProvider(array66, Label.FontSizeProperty, nameScope));
			xamlServiceProvider66.Add(typeof(IReferenceProvider), service66);
			Type typeFromHandle132 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver66 = new XmlNamespaceResolver();
			xmlNamespaceResolver66.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver66.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver66.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider66.Add(typeFromHandle132, new XamlTypeResolver(xmlNamespaceResolver66, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider66.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(398, 90)));
			label64.SetValue(fontSizeProperty66, ((IExtendedTypeConverter)fontSizeConverter66).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider66));
			label64.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid39.Children.Add(label64);
			grid40.Children.Add(grid39);
			obj7.SetValue(Grid.ColumnProperty, 2);
			obj7.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid40.Children.Add(obj7);
			button21.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button21.Clicked += paraPage.Tuixing_Clicked;
			button21.SetValue(Grid.ColumnProperty, 2);
			button21.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid40.Children.Add(button21);
			stackLayout6.Children.Add(grid40);
			grid42.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition70.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("70*"));
			((DefinitionCollection<ColumnDefinition>)grid42.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition70);
			columnDefinition71.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("15*"));
			((DefinitionCollection<ColumnDefinition>)grid42.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition71);
			columnDefinition72.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid42.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition72);
			columnDefinition73.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid42.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition73);
			label65.SetValue(Label.TextProperty, "PIN  ");
			label65.SetValue(Grid.ColumnProperty, 1);
			BindableProperty fontSizeProperty67 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter67 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider67 = new XamlServiceProvider();
			Type typeFromHandle133 = typeof(IProvideValueTarget);
			object[] array67 = new object[0 + 7];
			array67[0] = label65;
			array67[1] = grid42;
			array67[2] = stackLayout6;
			array67[3] = stackLayout7;
			array67[4] = scrollView;
			array67[5] = grid50;
			array67[6] = paraPage;
			object service67;
			xamlServiceProvider67.Add(typeFromHandle133, service67 = new SimpleValueTargetProvider(array67, Label.FontSizeProperty, nameScope));
			xamlServiceProvider67.Add(typeof(IReferenceProvider), service67);
			Type typeFromHandle134 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver67 = new XmlNamespaceResolver();
			xmlNamespaceResolver67.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver67.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver67.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider67.Add(typeFromHandle134, new XamlTypeResolver(xmlNamespaceResolver67, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider67.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(410, 67)));
			label65.SetValue(fontSizeProperty67, ((IExtendedTypeConverter)fontSizeConverter67).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider67));
			label65.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid42.Children.Add(label65);
			button22.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button22.Clicked += paraPage.BCSRH_Clicked;
			button22.SetValue(Grid.ColumnProperty, 1);
			button22.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid42.Children.Add(button22);
			grid41.SetValue(Grid.ColumnProperty, 0);
			rowDefinition43.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid41.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition43);
			rowDefinition44.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid41.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition44);
			label66.SetValue(Label.TextProperty, "±ﬂ≥≈π¶ƒ‹");
			label66.SetValue(Grid.RowProperty, 0);
			label66.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty68 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter68 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider68 = new XamlServiceProvider();
			Type typeFromHandle135 = typeof(IProvideValueTarget);
			object[] array68 = new object[0 + 8];
			array68[0] = label66;
			array68[1] = grid41;
			array68[2] = grid42;
			array68[3] = stackLayout6;
			array68[4] = stackLayout7;
			array68[5] = scrollView;
			array68[6] = grid50;
			array68[7] = paraPage;
			object service68;
			xamlServiceProvider68.Add(typeFromHandle135, service68 = new SimpleValueTargetProvider(array68, Label.FontSizeProperty, nameScope));
			xamlServiceProvider68.Add(typeof(IReferenceProvider), service68);
			Type typeFromHandle136 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver68 = new XmlNamespaceResolver();
			xmlNamespaceResolver68.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver68.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver68.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider68.Add(typeFromHandle136, new XamlTypeResolver(xmlNamespaceResolver68, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider68.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(417, 88)));
			label66.SetValue(fontSizeProperty68, ((IExtendedTypeConverter)fontSizeConverter68).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider68));
			label66.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid41.Children.Add(label66);
			label67.SetValue(Label.TextProperty, "Side Stand Function Enable");
			label67.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty69 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter69 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider69 = new XamlServiceProvider();
			Type typeFromHandle137 = typeof(IProvideValueTarget);
			object[] array69 = new object[0 + 8];
			array69[0] = label67;
			array69[1] = grid41;
			array69[2] = grid42;
			array69[3] = stackLayout6;
			array69[4] = stackLayout7;
			array69[5] = scrollView;
			array69[6] = grid50;
			array69[7] = paraPage;
			object service69;
			xamlServiceProvider69.Add(typeFromHandle137, service69 = new SimpleValueTargetProvider(array69, Label.FontSizeProperty, nameScope));
			xamlServiceProvider69.Add(typeof(IReferenceProvider), service69);
			Type typeFromHandle138 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver69 = new XmlNamespaceResolver();
			xmlNamespaceResolver69.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver69.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver69.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider69.Add(typeFromHandle138, new XamlTypeResolver(xmlNamespaceResolver69, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider69.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(418, 91)));
			label67.SetValue(fontSizeProperty69, ((IExtendedTypeConverter)fontSizeConverter69).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider69));
			label67.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid41.Children.Add(label67);
			grid42.Children.Add(grid41);
			obj8.SetValue(Grid.ColumnProperty, 2);
			obj8.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid42.Children.Add(obj8);
			button23.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button23.Clicked += paraPage.BC_Clicked;
			button23.SetValue(Grid.ColumnProperty, 2);
			button23.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid42.Children.Add(button23);
			stackLayout6.Children.Add(grid42);
			grid44.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition74.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("70*"));
			((DefinitionCollection<ColumnDefinition>)grid44.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition74);
			columnDefinition75.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("15*"));
			((DefinitionCollection<ColumnDefinition>)grid44.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition75);
			columnDefinition76.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid44.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition76);
			columnDefinition77.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid44.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition77);
			grid43.SetValue(Grid.ColumnProperty, 0);
			rowDefinition45.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid43.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition45);
			rowDefinition46.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid43.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition46);
			label68.SetValue(Label.TextProperty, "GearRememberπ¶ƒ‹");
			label68.SetValue(Grid.RowProperty, 0);
			label68.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty70 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter70 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider70 = new XamlServiceProvider();
			Type typeFromHandle139 = typeof(IProvideValueTarget);
			object[] array70 = new object[0 + 8];
			array70[0] = label68;
			array70[1] = grid43;
			array70[2] = grid44;
			array70[3] = stackLayout6;
			array70[4] = stackLayout7;
			array70[5] = scrollView;
			array70[6] = grid50;
			array70[7] = paraPage;
			object service70;
			xamlServiceProvider70.Add(typeFromHandle139, service70 = new SimpleValueTargetProvider(array70, Label.FontSizeProperty, nameScope));
			xamlServiceProvider70.Add(typeof(IReferenceProvider), service70);
			Type typeFromHandle140 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver70 = new XmlNamespaceResolver();
			xmlNamespaceResolver70.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver70.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver70.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider70.Add(typeFromHandle140, new XamlTypeResolver(xmlNamespaceResolver70, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider70.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(435, 109)));
			label68.SetValue(fontSizeProperty70, ((IExtendedTypeConverter)fontSizeConverter70).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider70));
			label68.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid43.Children.Add(label68);
			label69.SetValue(Label.TextProperty, "Gear Remember Function");
			label69.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty71 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter71 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider71 = new XamlServiceProvider();
			Type typeFromHandle141 = typeof(IProvideValueTarget);
			object[] array71 = new object[0 + 8];
			array71[0] = label69;
			array71[1] = grid43;
			array71[2] = grid44;
			array71[3] = stackLayout6;
			array71[4] = stackLayout7;
			array71[5] = scrollView;
			array71[6] = grid50;
			array71[7] = paraPage;
			object service71;
			xamlServiceProvider71.Add(typeFromHandle141, service71 = new SimpleValueTargetProvider(array71, Label.FontSizeProperty, nameScope));
			xamlServiceProvider71.Add(typeof(IReferenceProvider), service71);
			Type typeFromHandle142 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver71 = new XmlNamespaceResolver();
			xmlNamespaceResolver71.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver71.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver71.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider71.Add(typeFromHandle142, new XamlTypeResolver(xmlNamespaceResolver71, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider71.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(436, 96)));
			label69.SetValue(fontSizeProperty71, ((IExtendedTypeConverter)fontSizeConverter71).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider71));
			label69.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid43.Children.Add(label69);
			grid44.Children.Add(grid43);
			obj9.SetValue(Grid.ColumnProperty, 2);
			obj9.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid44.Children.Add(obj9);
			button24.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button24.Clicked += paraPage.GearRemember_Clicked;
			button24.SetValue(Grid.ColumnProperty, 2);
			button24.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid44.Children.Add(button24);
			stackLayout6.Children.Add(grid44);
			grid46.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition78.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("70*"));
			((DefinitionCollection<ColumnDefinition>)grid46.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition78);
			columnDefinition79.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("15*"));
			((DefinitionCollection<ColumnDefinition>)grid46.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition79);
			columnDefinition80.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid46.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition80);
			columnDefinition81.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid46.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition81);
			grid45.SetValue(Grid.ColumnProperty, 0);
			rowDefinition47.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid45.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition47);
			rowDefinition48.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid45.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition48);
			label70.SetValue(Label.TextProperty, "◊§≥µπ¶ƒ‹");
			label70.SetValue(Grid.RowProperty, 0);
			label70.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty72 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter72 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider72 = new XamlServiceProvider();
			Type typeFromHandle143 = typeof(IProvideValueTarget);
			object[] array72 = new object[0 + 8];
			array72[0] = label70;
			array72[1] = grid45;
			array72[2] = grid46;
			array72[3] = stackLayout6;
			array72[4] = stackLayout7;
			array72[5] = scrollView;
			array72[6] = grid50;
			array72[7] = paraPage;
			object service72;
			xamlServiceProvider72.Add(typeFromHandle143, service72 = new SimpleValueTargetProvider(array72, Label.FontSizeProperty, nameScope));
			xamlServiceProvider72.Add(typeof(IReferenceProvider), service72);
			Type typeFromHandle144 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver72 = new XmlNamespaceResolver();
			xmlNamespaceResolver72.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver72.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver72.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider72.Add(typeFromHandle144, new XamlTypeResolver(xmlNamespaceResolver72, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider72.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(453, 90)));
			label70.SetValue(fontSizeProperty72, ((IExtendedTypeConverter)fontSizeConverter72).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider72));
			label70.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid45.Children.Add(label70);
			label71.SetValue(Label.TextProperty, "Park Function");
			label71.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty73 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter73 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider73 = new XamlServiceProvider();
			Type typeFromHandle145 = typeof(IProvideValueTarget);
			object[] array73 = new object[0 + 8];
			array73[0] = label71;
			array73[1] = grid45;
			array73[2] = grid46;
			array73[3] = stackLayout6;
			array73[4] = stackLayout7;
			array73[5] = scrollView;
			array73[6] = grid50;
			array73[7] = paraPage;
			object service73;
			xamlServiceProvider73.Add(typeFromHandle145, service73 = new SimpleValueTargetProvider(array73, Label.FontSizeProperty, nameScope));
			xamlServiceProvider73.Add(typeof(IReferenceProvider), service73);
			Type typeFromHandle146 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver73 = new XmlNamespaceResolver();
			xmlNamespaceResolver73.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver73.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver73.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider73.Add(typeFromHandle146, new XamlTypeResolver(xmlNamespaceResolver73, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider73.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(454, 79)));
			label71.SetValue(fontSizeProperty73, ((IExtendedTypeConverter)fontSizeConverter73).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider73));
			label71.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid45.Children.Add(label71);
			grid46.Children.Add(grid45);
			button25.SetValue(Grid.ColumnProperty, 0);
			button25.Clicked += paraPage.Park_Clicked;
			button25.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid46.Children.Add(button25);
			label72.SetValue(Label.TextProperty, "-");
			BindableProperty fontSizeProperty74 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter74 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider74 = new XamlServiceProvider();
			Type typeFromHandle147 = typeof(IProvideValueTarget);
			object[] array74 = new object[0 + 7];
			array74[0] = label72;
			array74[1] = grid46;
			array74[2] = stackLayout6;
			array74[3] = stackLayout7;
			array74[4] = scrollView;
			array74[5] = grid50;
			array74[6] = paraPage;
			object service74;
			xamlServiceProvider74.Add(typeFromHandle147, service74 = new SimpleValueTargetProvider(array74, Label.FontSizeProperty, nameScope));
			xamlServiceProvider74.Add(typeof(IReferenceProvider), service74);
			Type typeFromHandle148 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver74 = new XmlNamespaceResolver();
			xmlNamespaceResolver74.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver74.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver74.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider74.Add(typeFromHandle148, new XamlTypeResolver(xmlNamespaceResolver74, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider74.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(457, 30)));
			label72.SetValue(fontSizeProperty74, ((IExtendedTypeConverter)fontSizeConverter74).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider74));
			label72.SetValue(Grid.ColumnProperty, 3);
			label72.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid46.Children.Add(label72);
			stackLayout6.Children.Add(grid46);
			grid48.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			columnDefinition82.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("70*"));
			((DefinitionCollection<ColumnDefinition>)grid48.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition82);
			columnDefinition83.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("15*"));
			((DefinitionCollection<ColumnDefinition>)grid48.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition83);
			columnDefinition84.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("5*"));
			((DefinitionCollection<ColumnDefinition>)grid48.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition84);
			columnDefinition85.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("10*"));
			((DefinitionCollection<ColumnDefinition>)grid48.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition85);
			grid47.SetValue(Grid.ColumnProperty, 0);
			rowDefinition49.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid47.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition49);
			rowDefinition50.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid47.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition50);
			label73.SetValue(Label.TextProperty, "TCSπ¶ƒ‹");
			label73.SetValue(Grid.RowProperty, 0);
			label73.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty75 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter75 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider75 = new XamlServiceProvider();
			Type typeFromHandle149 = typeof(IProvideValueTarget);
			object[] array75 = new object[0 + 8];
			array75[0] = label73;
			array75[1] = grid47;
			array75[2] = grid48;
			array75[3] = stackLayout6;
			array75[4] = stackLayout7;
			array75[5] = scrollView;
			array75[6] = grid50;
			array75[7] = paraPage;
			object service75;
			xamlServiceProvider75.Add(typeFromHandle149, service75 = new SimpleValueTargetProvider(array75, Label.FontSizeProperty, nameScope));
			xamlServiceProvider75.Add(typeof(IReferenceProvider), service75);
			Type typeFromHandle150 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver75 = new XmlNamespaceResolver();
			xmlNamespaceResolver75.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver75.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver75.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider75.Add(typeFromHandle150, new XamlTypeResolver(xmlNamespaceResolver75, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider75.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(471, 90)));
			label73.SetValue(fontSizeProperty75, ((IExtendedTypeConverter)fontSizeConverter75).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider75));
			label73.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid47.Children.Add(label73);
			label74.SetValue(Label.TextProperty, "TCS: Snow Application");
			label74.SetValue(Grid.RowProperty, 1);
			BindableProperty fontSizeProperty76 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter76 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider76 = new XamlServiceProvider();
			Type typeFromHandle151 = typeof(IProvideValueTarget);
			object[] array76 = new object[0 + 8];
			array76[0] = label74;
			array76[1] = grid47;
			array76[2] = grid48;
			array76[3] = stackLayout6;
			array76[4] = stackLayout7;
			array76[5] = scrollView;
			array76[6] = grid50;
			array76[7] = paraPage;
			object service76;
			xamlServiceProvider76.Add(typeFromHandle151, service76 = new SimpleValueTargetProvider(array76, Label.FontSizeProperty, nameScope));
			xamlServiceProvider76.Add(typeof(IReferenceProvider), service76);
			Type typeFromHandle152 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver76 = new XmlNamespaceResolver();
			xmlNamespaceResolver76.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver76.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver76.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider76.Add(typeFromHandle152, new XamlTypeResolver(xmlNamespaceResolver76, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider76.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(472, 86)));
			label74.SetValue(fontSizeProperty76, ((IExtendedTypeConverter)fontSizeConverter76).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider76));
			label74.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
			grid47.Children.Add(label74);
			grid48.Children.Add(grid47);
			button26.SetValue(Grid.ColumnProperty, 0);
			button26.Clicked += paraPage.TCS_Clicked;
			button26.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			grid48.Children.Add(button26);
			label75.SetValue(Label.TextProperty, "-");
			BindableProperty fontSizeProperty77 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter77 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider77 = new XamlServiceProvider();
			Type typeFromHandle153 = typeof(IProvideValueTarget);
			object[] array77 = new object[0 + 7];
			array77[0] = label75;
			array77[1] = grid48;
			array77[2] = stackLayout6;
			array77[3] = stackLayout7;
			array77[4] = scrollView;
			array77[5] = grid50;
			array77[6] = paraPage;
			object service77;
			xamlServiceProvider77.Add(typeFromHandle153, service77 = new SimpleValueTargetProvider(array77, Label.FontSizeProperty, nameScope));
			xamlServiceProvider77.Add(typeof(IReferenceProvider), service77);
			Type typeFromHandle154 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver77 = new XmlNamespaceResolver();
			xmlNamespaceResolver77.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver77.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver77.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider77.Add(typeFromHandle154, new XamlTypeResolver(xmlNamespaceResolver77, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider77.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(475, 30)));
			label75.SetValue(fontSizeProperty77, ((IExtendedTypeConverter)fontSizeConverter77).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider77));
			label75.SetValue(Grid.ColumnProperty, 3);
			label75.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			grid48.Children.Add(label75);
			stackLayout6.Children.Add(grid48);
			stackLayout7.Children.Add(stackLayout6);
			scrollView.Content = stackLayout7;
			grid50.Children.Add(scrollView);
			grid49.SetValue(Grid.RowProperty, 1);
			grid49.SetValue(Grid.ColumnProperty, 0);
			columnDefinition86.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("18*"));
			((DefinitionCollection<ColumnDefinition>)grid49.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition86);
			columnDefinition87.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("18*"));
			((DefinitionCollection<ColumnDefinition>)grid49.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition87);
			columnDefinition88.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("40*"));
			((DefinitionCollection<ColumnDefinition>)grid49.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition88);
			columnDefinition89.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("24*"));
			((DefinitionCollection<ColumnDefinition>)grid49.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition89);
			button27.SetValue(Xamarin.Forms.Button.TextProperty, "ª÷∏¥");
			button27.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button27.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			BindableProperty fontSizeProperty78 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter78 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider78 = new XamlServiceProvider();
			Type typeFromHandle155 = typeof(IProvideValueTarget);
			object[] array78 = new object[0 + 4];
			array78[0] = button27;
			array78[1] = grid49;
			array78[2] = grid50;
			array78[3] = paraPage;
			object service78;
			xamlServiceProvider78.Add(typeFromHandle155, service78 = new SimpleValueTargetProvider(array78, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider78.Add(typeof(IReferenceProvider), service78);
			Type typeFromHandle156 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver78 = new XmlNamespaceResolver();
			xmlNamespaceResolver78.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver78.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver78.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider78.Add(typeFromHandle156, new XamlTypeResolver(xmlNamespaceResolver78, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider78.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(1371, 100)));
			button27.SetValue(fontSizeProperty78, ((IExtendedTypeConverter)fontSizeConverter78).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider78));
			button27.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button27.SetValue(Grid.RowProperty, 0);
			button27.SetValue(Grid.ColumnProperty, 0);
			button27.Clicked += paraPage.OnButtonResetClicked;
			grid49.Children.Add(button27);
			button28.SetValue(Xamarin.Forms.Button.TextProperty, "±£¥Ê");
			button28.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button28.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			BindableProperty fontSizeProperty79 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter79 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider79 = new XamlServiceProvider();
			Type typeFromHandle157 = typeof(IProvideValueTarget);
			object[] array79 = new object[0 + 4];
			array79[0] = button28;
			array79[1] = grid49;
			array79[2] = grid50;
			array79[3] = paraPage;
			object service79;
			xamlServiceProvider79.Add(typeFromHandle157, service79 = new SimpleValueTargetProvider(array79, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider79.Add(typeof(IReferenceProvider), service79);
			Type typeFromHandle158 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver79 = new XmlNamespaceResolver();
			xmlNamespaceResolver79.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver79.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver79.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider79.Add(typeFromHandle158, new XamlTypeResolver(xmlNamespaceResolver79, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider79.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(1374, 99)));
			button28.SetValue(fontSizeProperty79, ((IExtendedTypeConverter)fontSizeConverter79).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider79));
			button28.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button28.SetValue(Grid.RowProperty, 0);
			button28.SetValue(Grid.ColumnProperty, 1);
			button28.Clicked += paraPage.ButtonSaveName_Clicked;
			grid49.Children.Add(button28);
			button29.SetValue(Xamarin.Forms.Button.TextProperty, "æ´ºÚƒ£ Ω");
			button29.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button29.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			BindableProperty fontSizeProperty80 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter80 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider80 = new XamlServiceProvider();
			Type typeFromHandle159 = typeof(IProvideValueTarget);
			object[] array80 = new object[0 + 4];
			array80[0] = button29;
			array80[1] = grid49;
			array80[2] = grid50;
			array80[3] = paraPage;
			object service80;
			xamlServiceProvider80.Add(typeFromHandle159, service80 = new SimpleValueTargetProvider(array80, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider80.Add(typeof(IReferenceProvider), service80);
			Type typeFromHandle160 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver80 = new XmlNamespaceResolver();
			xmlNamespaceResolver80.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver80.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver80.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider80.Add(typeFromHandle160, new XamlTypeResolver(xmlNamespaceResolver80, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider80.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(1377, 101)));
			button29.SetValue(fontSizeProperty80, ((IExtendedTypeConverter)fontSizeConverter80).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider80));
			button29.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button29.SetValue(Grid.RowProperty, 0);
			button29.SetValue(Grid.ColumnProperty, 2);
			button29.Clicked += paraPage.ButtonMode_Clicked;
			grid49.Children.Add(button29);
			label76.SetValue(Label.TextProperty, "Ω” ’÷°∫≈00000000000");
			label76.SetValue(Grid.RowProperty, 0);
			label76.SetValue(Grid.ColumnProperty, 3);
			label76.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty81 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter81 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider81 = new XamlServiceProvider();
			Type typeFromHandle161 = typeof(IProvideValueTarget);
			object[] array81 = new object[0 + 4];
			array81[0] = label76;
			array81[1] = grid49;
			array81[2] = grid50;
			array81[3] = paraPage;
			object service81;
			xamlServiceProvider81.Add(typeFromHandle161, service81 = new SimpleValueTargetProvider(array81, Label.FontSizeProperty, nameScope));
			xamlServiceProvider81.Add(typeof(IReferenceProvider), service81);
			Type typeFromHandle162 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver81 = new XmlNamespaceResolver();
			xmlNamespaceResolver81.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver81.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver81.Add("skia", "clr-namespace:SkiaSharp.Views.Forms;assembly=SkiaSharp.Views.Forms");
			xamlServiceProvider81.Add(typeFromHandle162, new XamlTypeResolver(xmlNamespaceResolver81, typeof(ParaPage).GetTypeInfo().Assembly));
			xamlServiceProvider81.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(1380, 112)));
			label76.SetValue(fontSizeProperty81, ((IExtendedTypeConverter)fontSizeConverter81).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider81));
			label76.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label76.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label76.SetValue(View.VerticalOptionsProperty, LayoutOptions.Start);
			grid49.Children.Add(label76);
			grid50.Children.Add(grid49);
			paraPage.SetValue(ContentPage.ContentProperty, grid50);
		}

		private void __InitComponentRuntime()
		{
			this.LoadFromXaml(typeof(ParaPage));
			girdall = this.FindByName<Grid>("girdall");
			DetailView = this.FindByName<Xamarin.Forms.ScrollView>("DetailView");
			controllerView = this.FindByName<SKCanvasView>("controllerView");
			RowText0 = this.FindByName<Label>("RowText0");
			ModelFactoryName = this.FindByName<Label>("ModelFactoryName");
			ModelName = this.FindByName<Label>("ModelName");
			ModelTypeName = this.FindByName<Label>("ModelTypeName");
			ModelType = this.FindByName<Label>("ModelType");
			ModelPowerName = this.FindByName<Label>("ModelPowerName");
			ModelPower = this.FindByName<Label>("ModelPower");
			ModelCurrName = this.FindByName<Label>("ModelCurrName");
			ModelCurr = this.FindByName<Label>("ModelCurr");
			ewmView = this.FindByName<SKCanvasView>("ewmView");
			ModelNumber = this.FindByName<Label>("ModelNumber");
			CustomCode = this.FindByName<Label>("CustomCode");
			MorseCodeName = this.FindByName<Label>("MorseCodeName");
			RowDateTime = this.FindByName<Xamarin.Forms.Button>("RowDateTime");
			DateTimeGrid = this.FindByName<Grid>("DateTimeGrid");
			ModelDate = this.FindByName<Label>("ModelDate");
			ModelTime = this.FindByName<Label>("ModelTime");
			BasePara = this.FindByName<Label>("BasePara");
			DIRName = this.FindByName<Label>("DIRName");
			DIRDsName = this.FindByName<Label>("DIRDsName");
			DIRStat = this.FindByName<Xamarin.Forms.Switch>("DIRStat");
			RatedVolName = this.FindByName<Label>("RatedVolName");
			RatedVolDsName = this.FindByName<Label>("RatedVolDsName");
			LimitWayName = this.FindByName<Label>("LimitWayName");
			LimitWayDsName = this.FindByName<Label>("LimitWayDsName");
			EnergyBackName = this.FindByName<Label>("EnergyBackName");
			EnergyBackDsName = this.FindByName<Label>("EnergyBackDsName");
			SpeedPara = this.FindByName<Label>("SpeedPara");
			DHName = this.FindByName<Label>("DHName");
			DHNameS = this.FindByName<Xamarin.Forms.Slider>("DHNameS");
			DMName = this.FindByName<Label>("DMName");
			DMNameS = this.FindByName<Xamarin.Forms.Slider>("DMNameS");
			DLName = this.FindByName<Label>("DLName");
			DLNameS = this.FindByName<Xamarin.Forms.Slider>("DLNameS");
			DHSpeedName = this.FindByName<Label>("DHSpeedName");
			DHSpeedNameS = this.FindByName<Xamarin.Forms.Slider>("DHSpeedNameS");
			DMSpeedName = this.FindByName<Label>("DMSpeedName");
			DMSpeedNameS = this.FindByName<Xamarin.Forms.Slider>("DMSpeedNameS");
			DLSpeedName = this.FindByName<Label>("DLSpeedName");
			DLSpeedNameS = this.FindByName<Xamarin.Forms.Slider>("DLSpeedNameS");
			BaseFunction = this.FindByName<Label>("BaseFunction");
			XHPIN = this.FindByName<Label>("XHPIN");
			XHName = this.FindByName<Label>("XHName");
			XHDsName = this.FindByName<Label>("XHDsName");
			XHStat = this.FindByName<Xamarin.Forms.Switch>("XHStat");
			PPIN = this.FindByName<Label>("PPIN");
			PGearName = this.FindByName<Label>("PGearName");
			PGearDsName = this.FindByName<Label>("PGearDsName");
			PGear = this.FindByName<Xamarin.Forms.Switch>("PGear");
			AutoBackPName = this.FindByName<Label>("AutoBackPName");
			AutoBackPDsName = this.FindByName<Label>("AutoBackPDsName");
			AutoBackPStat = this.FindByName<Xamarin.Forms.Switch>("AutoBackPStat");
			SDHPIN = this.FindByName<Label>("SDHPIN");
			SDHName = this.FindByName<Label>("SDHName");
			SDHDsName = this.FindByName<Label>("SDHDsName");
			SDLPIN = this.FindByName<Label>("SDLPIN");
			SDLName = this.FindByName<Label>("SDLName");
			SDLDsName = this.FindByName<Label>("SDLDsName");
			REPIN = this.FindByName<Label>("REPIN");
			REGearName = this.FindByName<Label>("REGearName");
			REGearDsName = this.FindByName<Label>("REGearDsName");
			REGear = this.FindByName<Xamarin.Forms.Switch>("REGear");
			ZuotongPIN = this.FindByName<Label>("ZuotongPIN");
			ZuotongName = this.FindByName<Label>("ZuotongName");
			ZuotongDsName = this.FindByName<Label>("ZuotongDsName");
			Zuotong = this.FindByName<Xamarin.Forms.Switch>("Zuotong");
			TuixingName = this.FindByName<Label>("TuixingName");
			TuixingDsName = this.FindByName<Label>("TuixingDsName");
			TuixingS = this.FindByName<Xamarin.Forms.Switch>("TuixingS");
			BCPIN = this.FindByName<Label>("BCPIN");
			BCName = this.FindByName<Label>("BCName");
			BCDsName = this.FindByName<Label>("BCDsName");
			BCStat = this.FindByName<Xamarin.Forms.Switch>("BCStat");
			GearRememberName = this.FindByName<Label>("GearRememberName");
			GearRememberDsName = this.FindByName<Label>("GearRememberDsName");
			GearRememberS = this.FindByName<Xamarin.Forms.Switch>("GearRememberS");
			ParkName = this.FindByName<Label>("ParkName");
			ParkDsName = this.FindByName<Label>("ParkDsName");
			TCSName = this.FindByName<Label>("TCSName");
			TCSDsName = this.FindByName<Label>("TCSDsName");
			ResetName = this.FindByName<Xamarin.Forms.Button>("ResetName");
			SaveName = this.FindByName<Xamarin.Forms.Button>("SaveName");
			ParaMode = this.FindByName<Xamarin.Forms.Button>("ParaMode");
			RcvFrames = this.FindByName<Label>("RcvFrames");
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	[XamlFilePath("ProBmsPage.xaml")]
	public class ProBmsPage : ContentPage
	{
		private char m_ParaIndex2;

		private char m_ParaIndex3;

		private char rcv_CustomCode0;

		private char rcv_CustomCode1;

		private byte[] bstr = new byte[20];

		private int rcv_OverChargeCurrent;

		private int rcv_OverDisChargeCurrent;

		private int rcv_OverChargeDelay;

		private int rcv_OverDisChargeDelay;

		private int rcv_BalanceCurrent;

		private int rcv_SndOverCurrentProtect;

		private int rcv_ShortProtect;

		private int rcv_SndOverCurrentDelay;

		private int rcv_ShortDelay;

		private int rcv_LowSocAlarm;

		private int rcv_ChargeTempProtect;

		private int rcv_ChargeTempRestore;

		private int rcv_DisChargeTempProtect;

		private int rcv_DisChargeTempRestore;

		private int rcv_BMSMosTempProtect;

		private int rcv_BMSMosTempRestore;

		private int rcv_ChargeLowTempProtect;

		private int rcv_ChargeLowTempRestore;

		private int rcv_DisChargeLowTempProtect;

		private int rcv_DisChargeLowTempRestore;

		private int rcv_ShutDownTime;

		private int rcv_CHGDSG;

		private int rcv_NEEDBAL;

		private float rcv_SetFullCap;

		private int rcv_Series;

		private int rcv_SetSop;

		private int rcv_CurrentRange;

		private int rcv_CurrGain;

		private int rcv_CurrGain2;

		private int rcv_VolGain;

		private int rcv_VolOffset;

		private float[] rcv_BMSR = new float[24];

		private float rcv_OverSVolProtect;

		private float rcv_OverSVolRestore;

		private float rcv_LowSVolProtect;

		private float rcv_LowSVolRestore;

		private float rcv_DeltaSVolProtect;

		private float rcv_DeltaSVolRestore;

		private float rcv_OverTVolProtect;

		private float rcv_LowTVolProtect;

		private float rcv_OverSVolAlarm;

		private float rcv_LowSvolAlarm;

		private float rcv_BalanceStartLimitVol;

		private float rcv_BalanceStartDeltaVol;

		private float rcv_BalanceStartVol;

		private float rcv_ShutdownVoltage;

		private int rcv_RatedVoltage = 144;

		private int rcv_ENMaxLineCurr;

		private int rcv_FullBattCoeff;

		private int rcv_ZeroBattCoeff;

		private int m_GPara0;

		private int rcv_GPara0;

		private char rcv_kzqVersion0 = '1';

		private char rcv_kzqVersion1 = '0';

		private int rcv_SoftVer = 1;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid girdall;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.ScrollView DetailView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RowText0;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelFactoryName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelTypeName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelType;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelPowerName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelPower;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelCurrName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelNumber;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowDateTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid DateTimeGrid;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelDate;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowText2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid BMSpara;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BalanceStartVol;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BalanceLimitVol;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BalanceDeltaVol;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BattRatedCap;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AutoDownTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RatedVoltage2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Series;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MaxDSGCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MaxDSGCurrTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MaxCHGCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MaxCHGCurrTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowTextBMSR;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid BMSRPara;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR1;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR3;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR4;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR5;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR6;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR7;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR8;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR9;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR10;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR11;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR12;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR13;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR14;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR15;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR16;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR17;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR18;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR19;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR20;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR21;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR22;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR23;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSR24;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowText7;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid BMSProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label OverSVolProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label OverSVolRestore;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LowSVolProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LowSVolRestore;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DeltaSVolProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DeltaSVolRestore;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label OverTVolProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label OverTVolRestore;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BalanceCurrent;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SndOverCurrentProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ShortProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SndOverCurrentDelay;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ShortDelay;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label OverSVolAlarm;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LowSVolAlarm;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LowSocAlarm;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ChargeTempProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ChargeTempRestore;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DisChargeTempProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DisChargeTempRestore;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSMosTempProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BMSMosTempRestore;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ChargeLowTempProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ChargeLowTempRestore;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DisChargeLowTempProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DisChargeLowTempRestore;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ShutDownVol;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button ShutdownVolButton;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowText11;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid Girdbms11;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CurrCoeff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CurrCoeff2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VolGain;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VolZero;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CurrentRange;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ZeroBattCoeff2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FullBattCoeff2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CurrentRangeButton;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button ResetName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button SaveName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button ParaMode;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RcvFrames;

		public ProBmsPage()
		{
			InitializeComponent();
			if (App.CN)
			{
				ModelDate.Text = "»’∆⁄";
				ModelTime.Text = " ±º‰";
			}
			else
			{
				ModelDate.Text = "Date";
				ModelTime.Text = "Time";
				ParaMode.Text = "Return Simple Mode";
				RcvFrames.Text = "RcvFrames0";
			}
			Device.StartTimer(TimeSpan.FromMilliseconds(500.0), delegate
			{
				ModelType.Text = App.ModelName;
				if (App.RcvRemoteCount > 0)
				{
					ResetName.BackgroundColor = Color.Orange;
					SaveName.BackgroundColor = Color.Orange;
					ParaMode.BackgroundColor = Color.Orange;
				}
				else if (App.CAT1_Loggined)
				{
					if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
					{
						ResetName.BackgroundColor = Color.LightBlue;
						SaveName.BackgroundColor = Color.LightBlue;
						ParaMode.BackgroundColor = Color.LightBlue;
					}
					else if (App.isConnected)
					{
						ResetName.BackgroundColor = Color.LightCyan;
						SaveName.BackgroundColor = Color.LightCyan;
						ParaMode.BackgroundColor = Color.LightCyan;
					}
					else
					{
						ResetName.BackgroundColor = Color.LightGreen;
						SaveName.BackgroundColor = Color.LightGreen;
						ParaMode.BackgroundColor = Color.LightGreen;
					}
				}
				else
				{
					ResetName.BackgroundColor = Color.LightGray;
					SaveName.BackgroundColor = Color.LightGray;
					ParaMode.BackgroundColor = Color.LightGray;
				}
				if (App.CN)
				{
					ModelName.Text = "µÁ≥ÿπ‹¿ÌœµÕ≥BMS";
					if (rcv_RatedVoltage < 100)
					{
						_ = $"0{rcv_RatedVoltage}";
					}
					else
					{
						_ = $"{rcv_RatedVoltage}";
					}
					int num = rcv_ENMaxLineCurr / 4;
					if (num < 100)
					{
						_ = $"0{num}";
					}
					else
					{
						_ = $"{num}";
					}
					ModelPowerName.Text = "µÁ—π/¥Æ ˝";
					ModelPower.Text = rcv_RatedVoltage + "V" + rcv_Series + "¥Æ";
					ModelCurr.Text = rcv_OverChargeCurrent + "A/" + rcv_OverDisChargeCurrent + "A";
					ModelCurrName.Text = "≥‰µÁµÁ¡˜/∑≈µÁµÁ¡˜";
					VolGain.Text = $"µÁ—π‘ˆ“Ê:{rcv_VolGain}";
					CurrCoeff.Text = $"µÁ¡˜‘ˆ“Ê:{rcv_CurrGain}";
					CurrCoeff2.Text = $"¥ÛµÁ¡˜‘ˆ“Ê:{rcv_CurrGain2}";
					VolZero.Text = $"µÁ—π¡„µ„:{rcv_VolOffset}";
					BalanceStartVol.Text = $"æ˘∫‚∆Ù∂ØµÁ—π:{rcv_BalanceStartVol}V";
					BalanceLimitVol.Text = $"æ˘∫‚º´œﬁµÁ—π:{rcv_BalanceStartLimitVol}V";
					BalanceDeltaVol.Text = $"æ˘∫‚∆Ù∂Ø—π≤Ó:{rcv_BalanceStartDeltaVol}V";
					BalanceCurrent.Text = $"æ˘∫‚µÁ¡˜:{rcv_BalanceCurrent}mA";
					OverSVolAlarm.Text = $"µ•ÃÂπ˝—π∏ÊæØ:{rcv_OverSVolAlarm}V";
					LowSVolAlarm.Text = $"µ•ÃÂ«∑—π∏ÊæØ:{rcv_LowSvolAlarm}V";
					OverSVolProtect.Text = $"µ•ÃÂπ˝—π±£ª§:{rcv_OverSVolProtect}V";
					OverSVolRestore.Text = $"µ•ÃÂπ˝—πª÷∏¥:{rcv_OverSVolRestore}V";
					LowSVolProtect.Text = $"µ•ÃÂ«∑—π±£ª§:{rcv_LowSVolProtect}V";
					LowSVolRestore.Text = $"µ•ÃÂ«∑—πª÷∏¥:{rcv_LowSVolRestore}V";
					DeltaSVolProtect.Text = $"µ•ÃÂ—π≤Ó±£ª§:{rcv_DeltaSVolProtect}V";
					DeltaSVolRestore.Text = $"µ•ÃÂ—π≤Óª÷∏¥:{rcv_DeltaSVolRestore}V";
					OverTVolProtect.Text = $"◊‹π˝—π±£ª§:{rcv_OverTVolProtect}V";
					OverTVolRestore.Text = $"◊‹«∑—π±£ª§:{rcv_LowTVolProtect}V";
					ChargeTempProtect.Text = $"≥‰µÁŒ¬∂»±£ª§:{rcv_ChargeTempProtect}°„C";
					ChargeTempRestore.Text = $"≥‰µÁŒ¬∂»ª÷∏¥:{rcv_ChargeTempRestore}°„C";
					DisChargeTempProtect.Text = $"∑≈µÁŒ¬∂»±£ª§:{rcv_DisChargeTempProtect}°„C";
					DisChargeTempRestore.Text = $"∑≈µÁŒ¬∂»ª÷∏¥:{rcv_DisChargeTempRestore}°„C";
					BMSMosTempProtect.Text = $"MOSŒ¬∂»±£ª§:{rcv_BMSMosTempProtect}°„C";
					BMSMosTempRestore.Text = $"MOSŒ¬∂»ª÷∏¥:{rcv_BMSMosTempRestore}°„C";
					ChargeLowTempProtect.Text = $"≥‰µÁµÕŒ¬±£ª§:{rcv_ChargeLowTempProtect}°„C";
					ChargeLowTempRestore.Text = $"≥‰µÁµÕŒ¬ª÷∏¥:{rcv_ChargeLowTempRestore}°„C";
					DisChargeLowTempProtect.Text = $"∑≈µÁµÕŒ¬±£ª§:{rcv_DisChargeLowTempProtect}°„C";
					DisChargeLowTempRestore.Text = $"∑≈µÁµÕŒ¬ª÷∏¥:{rcv_DisChargeLowTempRestore}°„C";
					SndOverCurrentProtect.Text = $"∂˛¥Œπ˝¡˜±£ª§:{rcv_SndOverCurrentProtect}mA";
					ShortProtect.Text = $"∂Ã¬∑±£ª§µÁ¡˜:{rcv_ShortProtect}A";
					SndOverCurrentDelay.Text = $"∂˛¥Œπ˝¡˜—” ±:{rcv_SndOverCurrentDelay}ms";
					ShortDelay.Text = $"∂Ã¬∑—” ±:{rcv_ShortDelay}us";
					LowSocAlarm.Text = $"µÕµÁ¡ø∏ÊæØ:{rcv_LowSocAlarm}%";
					RatedVoltage2.Text = $"∂Ó∂®µÁ—π:{rcv_RatedVoltage}V";
					Series.Text = $"µÁ≥ÿ¥Æ ˝:{rcv_Series}";
					BMSR1.Text = $"ƒ⁄◊Ë1:  {rcv_BMSR[0]}m¶∏";
					BMSR2.Text = $"ƒ⁄◊Ë2:  {rcv_BMSR[1]}m¶∏";
					BMSR3.Text = $"ƒ⁄◊Ë3:  {rcv_BMSR[2]}m¶∏";
					BMSR4.Text = $"ƒ⁄◊Ë4:  {rcv_BMSR[3]}m¶∏";
					BMSR5.Text = $"ƒ⁄◊Ë5:  {rcv_BMSR[4]}m¶∏";
					BMSR6.Text = $"ƒ⁄◊Ë6:  {rcv_BMSR[5]}m¶∏";
					BMSR7.Text = $"ƒ⁄◊Ë7:  {rcv_BMSR[6]}m¶∏";
					BMSR8.Text = $"ƒ⁄◊Ë8:  {rcv_BMSR[7]}m¶∏";
					BMSR9.Text = $"ƒ⁄◊Ë9:  {rcv_BMSR[8]}m¶∏";
					BMSR10.Text = $"ƒ⁄◊Ë10: {rcv_BMSR[9]}m¶∏";
					BMSR11.Text = $"ƒ⁄◊Ë11: {rcv_BMSR[10]}m¶∏";
					BMSR12.Text = $"ƒ⁄◊Ë12: {rcv_BMSR[11]}m¶∏";
					BMSR13.Text = $"ƒ⁄◊Ë13: {rcv_BMSR[12]}m¶∏";
					BMSR14.Text = $"ƒ⁄◊Ë14: {rcv_BMSR[13]}m¶∏";
					BMSR15.Text = $"ƒ⁄◊Ë15: {rcv_BMSR[14]}m¶∏";
					BMSR16.Text = $"ƒ⁄◊Ë16: {rcv_BMSR[15]}m¶∏";
					BMSR17.Text = $"ƒ⁄◊Ë17: {rcv_BMSR[16]}m¶∏";
					BMSR18.Text = $"ƒ⁄◊Ë18: {rcv_BMSR[17]}m¶∏";
					BMSR19.Text = $"ƒ⁄◊Ë19: {rcv_BMSR[18]}m¶∏";
					BMSR20.Text = $"ƒ⁄◊Ë20: {rcv_BMSR[19]}m¶∏";
					BMSR21.Text = $"ƒ⁄◊Ë21: {rcv_BMSR[20]}m¶∏";
					BMSR22.Text = $"ƒ⁄◊Ë22: {rcv_BMSR[21]}m¶∏";
					BMSR23.Text = $"ƒ⁄◊Ë23: {rcv_BMSR[22]}m¶∏";
					BMSR24.Text = $"ƒ⁄◊Ë24: {rcv_BMSR[23]}m¶∏";
				}
				else
				{
					ModelName.Text = "Battery Manage System";
					ModelPowerName.Text = "Voltage/Series";
					ModelPower.Text = rcv_RatedVoltage + "V" + rcv_Series + "s";
					ModelCurr.Text = rcv_OverChargeCurrent + "A/" + rcv_OverDisChargeCurrent + "A";
					ModelCurrName.Text = "Charge/Discharge";
					VolGain.Text = $"VolGain:{rcv_VolGain}";
					CurrCoeff.Text = $"CurrGain:{rcv_CurrGain}";
					CurrCoeff2.Text = $"LargeCurrGain:{rcv_CurrGain2}";
					VolZero.Text = $"VoltageZero:{rcv_VolOffset}";
					BalanceStartVol.Text = $"BalanceStartVol:{rcv_BalanceStartVol}V";
					BalanceLimitVol.Text = $"BalanceLimstVol:{rcv_BalanceStartLimitVol}V";
					BalanceDeltaVol.Text = $"BalanceDeltaVol:{rcv_BalanceStartDeltaVol}V";
					BalanceCurrent.Text = $"BalanceCurrent:{rcv_BalanceCurrent}mA";
					OverSVolAlarm.Text = $"UnitVolAlarm:{rcv_OverSVolAlarm}V";
					LowSVolAlarm.Text = $"UnitVolLowAlarm:{rcv_LowSvolAlarm}V";
					OverSVolProtect.Text = $"UnitOverVolProtect:{rcv_OverSVolProtect}V";
					OverSVolRestore.Text = $"UnitOverVolRestore:{rcv_OverSVolRestore}V";
					LowSVolProtect.Text = $"UnitLowVolProtect:{rcv_LowSVolProtect}V";
					LowSVolRestore.Text = $"UnitLowVolRestore:{rcv_LowSVolRestore}V";
					DeltaSVolProtect.Text = $"UnitDeltaVolProtect:{rcv_DeltaSVolProtect}V";
					DeltaSVolRestore.Text = $"UnitDeltaVolRestore:{rcv_DeltaSVolRestore}V";
					OverTVolProtect.Text = $"TotalOverVolProtect:{rcv_OverTVolProtect}V";
					OverTVolRestore.Text = $"TotalLowVolProtect:{rcv_LowTVolProtect}V";
					ChargeTempProtect.Text = $"ChargeTempProtect:{rcv_ChargeTempProtect}°„C";
					ChargeTempRestore.Text = $"ChargeTempRestore:{rcv_ChargeTempRestore}°„C";
					DisChargeTempProtect.Text = $"DischargeTempProtect:{rcv_DisChargeTempProtect}°„C";
					DisChargeTempRestore.Text = $"DischargeTempRestore:{rcv_DisChargeTempRestore}°„C";
					BMSMosTempProtect.Text = $"MOSTempProtect:{rcv_BMSMosTempProtect}°„C";
					BMSMosTempRestore.Text = $"MOSTempRestore:{rcv_BMSMosTempRestore}°„C";
					ChargeLowTempProtect.Text = $"ChargeLowTempProtect:{rcv_ChargeLowTempProtect}°„C";
					ChargeLowTempRestore.Text = $"ChargeLowTempRestore:{rcv_ChargeLowTempRestore}°„C";
					DisChargeLowTempProtect.Text = $"DischagrLowTempProtect:{rcv_DisChargeLowTempProtect}°„C";
					DisChargeLowTempRestore.Text = $"DischagrLowTempRestore:{rcv_DisChargeLowTempRestore}°„C";
					SndOverCurrentProtect.Text = $"SndOverCurrProtect:{rcv_SndOverCurrentProtect}mA";
					ShortProtect.Text = $"ShortProtect:{rcv_ShortProtect}A";
					SndOverCurrentDelay.Text = $"SndOverCurrDelay:{rcv_SndOverCurrentDelay}ms";
					ShortDelay.Text = $"ShortDelay:{rcv_ShortDelay}us";
					LowSocAlarm.Text = $"LowSOCAlarm:{rcv_LowSocAlarm}%";
					RatedVoltage2.Text = $"RatedVoltage:{rcv_RatedVoltage}V";
					Series.Text = $"Battery Series:{rcv_Series}";
					BMSR1.Text = $"Res1:  {rcv_BMSR[0]}m¶∏";
					BMSR2.Text = $"Res2:  {rcv_BMSR[1]}m¶∏";
					BMSR3.Text = $"Res3:  {rcv_BMSR[2]}m¶∏";
					BMSR4.Text = $"Res4:  {rcv_BMSR[3]}m¶∏";
					BMSR5.Text = $"Res5:  {rcv_BMSR[4]}m¶∏";
					BMSR6.Text = $"Res6:  {rcv_BMSR[5]}m¶∏";
					BMSR7.Text = $"Res7:  {rcv_BMSR[6]}m¶∏";
					BMSR8.Text = $"Res8:  {rcv_BMSR[7]}m¶∏";
					BMSR9.Text = $"Res9:  {rcv_BMSR[8]}m¶∏";
					BMSR10.Text = $"Res10: {rcv_BMSR[9]}m¶∏";
					BMSR11.Text = $"Res11: {rcv_BMSR[10]}m¶∏";
					BMSR12.Text = $"Res12: {rcv_BMSR[11]}m¶∏";
					BMSR13.Text = $"Res13: {rcv_BMSR[12]}m¶∏";
					BMSR14.Text = $"Res14: {rcv_BMSR[13]}m¶∏";
					BMSR15.Text = $"Res15: {rcv_BMSR[14]}m¶∏";
					BMSR16.Text = $"Res16: {rcv_BMSR[15]}m¶∏";
					BMSR17.Text = $"Res17: {rcv_BMSR[16]}m¶∏";
					BMSR18.Text = $"Res18: {rcv_BMSR[17]}m¶∏";
					BMSR19.Text = $"Res19: {rcv_BMSR[18]}m¶∏";
					BMSR20.Text = $"Res20: {rcv_BMSR[19]}m¶∏";
					BMSR21.Text = $"Res21: {rcv_BMSR[20]}m¶∏";
					BMSR22.Text = $"Res22: {rcv_BMSR[21]}m¶∏";
					BMSR23.Text = $"Res23: {rcv_BMSR[22]}m¶∏";
					BMSR24.Text = $"Res24: {rcv_BMSR[23]}m¶∏";
				}
				if (App.CN)
				{
					RowText0.Text = "–Õ∫≈";
					if (DateTimeGrid.IsVisible)
					{
						RowDateTime.Text = "- »’∆⁄ ±º‰";
					}
					else
					{
						RowDateTime.Text = "+ »’∆⁄ ±º‰";
					}
					ModelTypeName.Text = "–Õ∫≈";
					ModelFactoryName.Text = "ƒœæ©‘∂«˝";
					ModelPowerName.Text = "µÁ—π/π¶¬ ";
					if (Girdbms11.IsVisible)
					{
						RowText11.Text = "- ±Í∂®";
					}
					else
					{
						RowText11.Text = "+ ±Í∂®";
					}
					ZeroBattCoeff2.Text = "µÁ¡˜0∆´÷√:" + rcv_ZeroBattCoeff;
					FullBattCoeff2.Text = "CµÁ—π∆´÷√:" + rcv_FullBattCoeff;
					MaxDSGCurr.Text = $"◊Ó¥Û∑≈µÁµÁ¡˜{rcv_OverDisChargeCurrent}A";
					MaxDSGCurrTime.Text = $"∑≈µÁµÁ¡˜±£ª§—” ±{rcv_OverDisChargeDelay}s";
					MaxCHGCurr.Text = $"◊Ó¥Û≥‰µÁµÁ¡˜{rcv_OverChargeCurrent}A";
					MaxCHGCurrTime.Text = $"≥‰µÁµÁ¡˜±£ª§—” ±{rcv_OverChargeDelay}s";
					BattRatedCap.Text = $"µÁ≥ÿ»›¡ø£∫{rcv_SetFullCap}AH";
					AutoDownTime.Text = $"◊‘∂Ø¥˝ª˙ ±º‰£∫{rcv_ShutDownTime}s";
					if (BMSProtect.IsVisible)
					{
						RowText7.Text = "- ±£ª§";
					}
					else
					{
						RowText7.Text = "+ ±£ª§";
					}
					if (BMSRPara.IsVisible)
					{
						RowTextBMSR.Text = "- ¡¨Ω”ƒ⁄◊Ë";
					}
					else
					{
						RowTextBMSR.Text = "+ ¡¨Ω”ƒ⁄◊Ë";
					}
					ShutDownVol.Text = $"◊‘∂Øπÿª˙µÁ—π£∫{rcv_ShutdownVoltage}V";
					CurrentRange.Text = $"¥ÛµÁ¡˜œµ ˝:{rcv_CurrentRange}";
				}
				else
				{
					RowText0.Text = "ModelType";
					if (DateTimeGrid.IsVisible)
					{
						RowDateTime.Text = "- DateTime";
					}
					else
					{
						RowDateTime.Text = "+ DateTime";
					}
					ModelTypeName.Text = "ModelType";
					ModelFactoryName.Text = "FarDriver";
					ModelPowerName.Text = "Voltage/Power";
					if (Girdbms11.IsVisible)
					{
						RowText11.Text = "- FixedParas";
					}
					else
					{
						RowText11.Text = "+ FixedParas";
					}
					ZeroBattCoeff2.Text = "Curr0 Offset:" + rcv_ZeroBattCoeff;
					FullBattCoeff2.Text = "C Vol Offset:" + rcv_FullBattCoeff;
					MaxDSGCurr.Text = $"MaxDischargeCurrent{rcv_OverDisChargeCurrent}A";
					MaxDSGCurrTime.Text = $"DischargeProtectDelay{rcv_OverDisChargeDelay}s";
					MaxCHGCurr.Text = $"MaxChargeCurrent{rcv_OverChargeCurrent}A";
					MaxCHGCurrTime.Text = $"ChargeProtectDelay{rcv_OverChargeDelay}s";
					BattRatedCap.Text = $"Batt RatedCapacity:{rcv_SetFullCap}AH";
					AutoDownTime.Text = $"IdleTime£∫{rcv_ShutDownTime}s";
					if (BMSProtect.IsVisible)
					{
						RowText7.Text = "- Protect";
					}
					else
					{
						RowText7.Text = "+ Protect";
					}
					if (RowTextBMSR.IsVisible)
					{
						RowTextBMSR.Text = "- Connect Res";
					}
					else
					{
						RowTextBMSR.Text = "+ Connect Res";
					}
					ShutDownVol.Text = $"ECOAccCoeff£∫{rcv_ShutdownVoltage}V";
					ResetName.Text = "Restore";
					if (((rcv_GPara0 >> 12) & 3) == 2)
					{
						SaveName.Text = "Save";
					}
					else
					{
						SaveName.Text = "PWP";
					}
				}
				if (App.CN)
				{
					ModelName.Text = "µÁ≥ÿπ‹¿ÌœµÕ≥BMS";
					if (rcv_RatedVoltage < 100)
					{
						_ = $"0{rcv_RatedVoltage}";
					}
					else
					{
						_ = $"{rcv_RatedVoltage}";
					}
					int num2 = rcv_ENMaxLineCurr / 4;
					if (num2 < 100)
					{
						_ = $"0{num2}";
					}
					else
					{
						_ = $"{num2}";
					}
					ModelPowerName.Text = "µÁ—π/¥Æ ˝";
					ModelPower.Text = rcv_RatedVoltage + "V" + rcv_Series + "¥Æ";
					ModelCurr.Text = rcv_OverChargeCurrent + "A/" + rcv_OverDisChargeCurrent + "A";
					ModelCurrName.Text = "≥‰µÁµÁ¡˜/∑≈µÁµÁ¡˜";
				}
				else
				{
					ModelName.Text = "Battery Manage System";
					ModelPowerName.Text = "Voltage/Series";
					ModelPower.Text = rcv_RatedVoltage + "V" + rcv_Series + "s";
					ModelCurr.Text = rcv_OverChargeCurrent + "A/" + rcv_OverDisChargeCurrent + "A";
					ModelCurrName.Text = "Charge/Discharge";
				}
				return true;
			});
			int rcvframe = 0;
			MessagingCenter.Subscribe(this, "ReadParaMeter", delegate(ConnectPage sender, byte[] arg)
			{
				if (arg[0] == 170 && arg.Length == 16 && (arg[1] & 0xC0) != 128)
				{
					int num = 0;
					for (int i = 0; i < 14; i++)
					{
						num += arg[i];
					}
					if (arg[14] * 256 + arg[15] == num)
					{
						rcvframe++;
						if (App.CN)
						{
							RcvFrames.Text = rcvframe.ToString("Ω” ’÷°0");
						}
						else
						{
							RcvFrames.Text = rcvframe.ToString("RcvFrames0");
						}
						switch (arg[1])
						{
						case 18:
							if (App.bms)
							{
								m_ParaIndex2 = (char)arg[2];
								m_ParaIndex3 = (char)arg[9];
								rcv_ZeroBattCoeff = arg[3];
								rcv_FullBattCoeff = arg[4] * 256 + arg[5];
								rcv_SetFullCap = (float)(arg[6] * 256 + arg[7]) / 100f;
								rcv_Series = arg[8];
								rcv_CurrGain2 = arg[10] * 256 + arg[11];
								rcv_SetSop = arg[12] * 256 + arg[13];
							}
							break;
						case 19:
						{
							for (int l = 2; l < 10; l++)
							{
								if (arg[l] > 32 && arg[l] <= 126)
								{
									bstr[l - 2] = arg[l];
								}
								else
								{
									bstr[l - 2] = 32;
								}
							}
							break;
						}
						case 20:
						{
							for (int m = 2; m < 14; m++)
							{
								if (arg[m] > 32 && arg[m] <= 126)
								{
									bstr[m + 6] = arg[m];
								}
								else
								{
									bstr[m + 6] = 32;
								}
							}
							break;
						}
						case 21:
							rcv_ENMaxLineCurr = arg[2] * 256 + arg[3];
							break;
						case 41:
							rcv_RatedVoltage = (arg[9] * 256 + arg[10]) / 10;
							rcv_kzqVersion0 = (char)arg[11];
							rcv_kzqVersion1 = (char)arg[12];
							rcv_SoftVer = arg[13];
							App.Softver1 = rcv_SoftVer;
							break;
						case 42:
							rcv_OverSVolProtect = (float)(arg[2] * 256 + arg[3]) / 1000f;
							rcv_OverSVolRestore = (float)(arg[4] * 256 + arg[5]) / 1000f;
							rcv_LowSVolProtect = (float)(arg[6] * 256 + arg[7]) / 1000f;
							rcv_LowSVolRestore = (float)(arg[8] * 256 + arg[9]) / 1000f;
							rcv_DeltaSVolProtect = (float)(arg[10] * 256 + arg[11]) / 1000f;
							rcv_DeltaSVolRestore = (float)(arg[12] * 256 + arg[13]) / 1000f;
							break;
						case 43:
							rcv_OverTVolProtect = (float)(arg[2] * 256 + arg[3]) / 10f;
							rcv_LowTVolProtect = (float)(arg[4] * 256 + arg[5]) / 10f;
							rcv_OverChargeCurrent = (arg[6] * 256 + arg[7]) / 10;
							rcv_OverDisChargeCurrent = (arg[8] * 256 + arg[9]) / 10;
							rcv_OverChargeDelay = arg[10];
							rcv_OverDisChargeDelay = arg[11];
							rcv_BalanceCurrent = arg[12] * 256 + arg[13];
							break;
						case 44:
							rcv_SndOverCurrentProtect = arg[2] * 256 + arg[3];
							rcv_ShortProtect = arg[4] * 256 + arg[5];
							rcv_SndOverCurrentDelay = arg[6];
							rcv_ShortDelay = arg[7];
							rcv_OverSVolAlarm = (float)(arg[8] * 256 + arg[9]) / 1000f;
							rcv_LowSvolAlarm = (float)(arg[10] * 256 + arg[11]) / 1000f;
							rcv_LowSocAlarm = arg[12];
							break;
						case 45:
							rcv_ChargeTempProtect = (sbyte)arg[2];
							rcv_ChargeTempRestore = (sbyte)arg[3];
							rcv_DisChargeTempProtect = (sbyte)arg[4];
							rcv_DisChargeTempRestore = (sbyte)arg[5];
							rcv_BMSMosTempProtect = (sbyte)arg[6];
							rcv_BMSMosTempRestore = (sbyte)arg[7];
							rcv_ChargeLowTempProtect = (sbyte)arg[8];
							rcv_ChargeLowTempRestore = (sbyte)arg[9];
							rcv_DisChargeLowTempProtect = (sbyte)arg[10];
							rcv_DisChargeLowTempRestore = (sbyte)arg[11];
							rcv_ShutDownTime = arg[12] * 256 + arg[13];
							break;
						case 46:
							rcv_ShutdownVoltage = (float)(arg[2] * 256 + arg[3]) / 1000f;
							rcv_CurrentRange = arg[4] * 256 + arg[5];
							rcv_CurrGain = arg[6] * 256 + arg[7];
							rcv_VolGain = arg[8] * 256 + arg[9];
							rcv_VolOffset = arg[10] * 256 + arg[11];
							rcv_BalanceStartVol = (float)(arg[12] * 256 + arg[13]) / 1000f;
							break;
						case 47:
							rcv_BalanceStartLimitVol = (float)(arg[2] * 256 + arg[3]) / 1000f;
							rcv_BalanceStartDeltaVol = (float)(arg[4] * 256 + arg[5]) / 1000f;
							rcv_CHGDSG = arg[7];
							rcv_NEEDBAL = arg[8] + arg[9] * 256 + arg[10] * 65536;
							rcv_CustomCode0 = (char)arg[12];
							rcv_CustomCode1 = (char)arg[13];
							break;
						case 51:
						{
							for (int k = 0; k < 12; k++)
							{
								rcv_BMSR[k] = (float)(int)arg[k + 2] / 10f;
							}
							break;
						}
						case 52:
						{
							for (int j = 0; j < 12; j++)
							{
								rcv_BMSR[12 + j] = (float)(int)arg[j + 2] / 10f;
							}
							break;
						}
						}
					}
				}
			});
		}

		private async void ButtonMode_Clicked(object sender, EventArgs e)
		{
			await base.Navigation.PopModalAsync();
		}

		private void SendRs232Data(byte mcmd, byte scmd, byte va1, byte va2)
		{
			byte[] array = new byte[8];
			array[0] = 170;
			array[1] = mcmd;
			array[2] = (byte)(~array[1]);
			array[3] = scmd;
			array[4] = va1;
			array[5] = va2;
			array[6] = (byte)(array[0] + array[1] + array[2] + array[3] + array[4] + array[5]);
			array[7] = (byte)(~array[6]);
			MessagingCenter.Send(this, "WriteParaMeter", array);
		}

		private void RowText1_Clicked_1(object sender, EventArgs e)
		{
			DateTimeGrid.IsVisible = !DateTimeGrid.IsVisible;
		}

		private void RowText2_Clicked(object sender, EventArgs e)
		{
			BMSpara.IsVisible = !BMSpara.IsVisible;
		}

		private void RowTextBMSR_Clicked(object sender, EventArgs e)
		{
			BMSRPara.IsVisible = !BMSRPara.IsVisible;
		}

		private void RowText7_Clicked(object sender, EventArgs e)
		{
			BMSProtect.IsVisible = !BMSProtect.IsVisible;
		}

		private void RowText11_Clicked(object sender, EventArgs e)
		{
			Girdbms11.IsVisible = !Girdbms11.IsVisible;
		}

		private void CustomCode_TextChanged(object sender, EventArgs e)
		{
		}

		private async void BindA()
		{
			if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Controller is not bound or login, Please bind or login the controller.", null, "Bind", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("øÿ÷∆∆˜Œ¥∞Û∂®µ«¬º£¨«Îœ»∞Û∂®µ«¬ºøÿ÷∆∆˜°£", null, "∞Û∂®", "»°œ˚")))
			{
				App.NotBindStat = 99;
			}
		}

		private bool NotBindingStat()
		{
			if (App.RcvRemoteCount > 0 && !App.isConnected)
			{
				return false;
			}
			if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
			{
				BindA();
				return true;
			}
			return false;
		}

		private async void BindC()
		{
			if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Controller is not bound, to protect parameters from being modified by others, it is recommended to bind the controller.", null, "Bind", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("øÿ÷∆∆˜Œ¥∞Û∂®£¨Œ™¡À±£ª§≤Œ ˝≤ª±ªÀ˚»À–ﬁ∏ƒ£¨Ω®“È∞Û∂®øÿ÷∆∆˜°£", null, "∞Û∂®", "»°œ˚")))
			{
				App.NotBindStat = 99;
			}
		}

		private bool NotOwnerStat()
		{
			if (App.RcvRemoteCount > 0 && !App.isConnected)
			{
				return false;
			}
			if (App.ownertype <= 1)
			{
				if (App.PassOk == 2)
				{
					if (App.NotBindStat >= 1 && App.NotBindStat < 100)
					{
						App.NotBindStat++;
						BindC();
						return true;
					}
					return false;
				}
				if (App.CN)
				{
					UserDialogs.Instance.Alert("÷ª”–÷˜”√ªß∫Õπ§≥ß”√ªß≤≈ƒ‹–ﬁ∏ƒ’‚∏ˆ≤Œ ˝£°");
				}
				else
				{
					UserDialogs.Instance.Alert("Only master and factory users can modify this parameter.");
				}
				return true;
			}
			return false;
		}

		private async void MaxDSGCurr_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MaxDSGCurr.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'A' });
			text = text.TrimEnd(new char[1] { 'a' });
			try
			{
				int num = Convert.ToInt16(text);
				num *= 10;
				SendRs232Data(18, 1, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MaxDSGCurrTime_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MaxDSGCurrTime.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 's' });
			text = text.TrimEnd(new char[1] { 'S' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(18, 4, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MaxCHGCurr_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MaxCHGCurr.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'A' });
			text = text.TrimEnd(new char[1] { 'a' });
			try
			{
				int num = Convert.ToInt16(text);
				num *= 10;
				SendRs232Data(18, 2, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MaxCHGCurrTime_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MaxCHGCurrTime.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 's' });
			text = text.TrimEnd(new char[1] { 'S' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(18, 3, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR1_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR1.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 0, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR2_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR2.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 1, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR3_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR3.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 2, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR4_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR4.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 3, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR5_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR5.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 4, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR6_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR6.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 5, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR7_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR7.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 6, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR8_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR8.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 7, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR9_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR9.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 8, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR10_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR10.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 9, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR11_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR11.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 10, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR12_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR12.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 11, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR13_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR13.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 12, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR14_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR14.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 13, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR15_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR15.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 14, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR16_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR16.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 15, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR17_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR17.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 16, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR18_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR18.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 17, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR19_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR19.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 18, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR20_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR20.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 19, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR21_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR21.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 20, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR22_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR22.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 21, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR23_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR23.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 22, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSR24_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSR24.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(12, 23, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void AutoDownTime_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = AutoDownTime.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'S' });
			text = text.TrimEnd(new char[1] { 's' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num < 1000)
				{
					SendRs232Data(17, 11, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BattRatedCap_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BattRatedCap.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'A' });
			text = text.TrimEnd(new char[1] { 'H' });
			text = text.TrimEnd(new char[1] { 'a' });
			text = text.TrimEnd(new char[1] { 'h' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 100f);
				if (num >= 500 && num <= 60000)
				{
					SendRs232Data(17, 19, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void VolCoeff_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = VolGain.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num >= 1000 && num <= 6000)
				{
					SendRs232Data(1, 1, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void VolZero_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = VolZero.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num >= 0 && num <= 2000)
				{
					SendRs232Data(1, 2, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void CurrCoeff_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = CurrCoeff.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num >= 500 && num <= 8000)
				{
					SendRs232Data(2, 1, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BalanceStartVol_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BalanceStartVol.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'V' });
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'v' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 1000f);
				SendRs232Data(17, 14, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BalanceLimitVol_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BalanceLimitVol.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'V' });
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'v' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 1000f);
				SendRs232Data(17, 15, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BalanceDeltaVol_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BalanceDeltaVol.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'V' });
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'v' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 1000f);
				SendRs232Data(17, 16, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void CurrentRange_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = CurrentRange.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'A' });
			text = text.TrimEnd(new char[1] { 'a' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(17, 13, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void RadVoltage2_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = RatedVoltage2.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'v' });
			text = text.TrimEnd(new char[1] { 'V' });
			try
			{
				int num = Convert.ToInt16(text);
				num *= 10;
				SendRs232Data(2, 3, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Series_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Series.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(2, 2, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void CurrCoeff2_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = CurrCoeff2.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num >= 500 && num <= 8000)
				{
					SendRs232Data(2, 4, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ZeroBattCoeff2_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ZeroBattCoeff2.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 100)
				{
					SendRs232Data(17, 17, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void FullBattCoeff2_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = FullBattCoeff2.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 2100 && num >= 1800)
				{
					SendRs232Data(17, 18, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void OverSVolProtect_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = OverSVolProtect.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'v' });
			text = text.TrimEnd(new char[1] { 'V' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 1000f);
				SendRs232Data(18, 5, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void OverSVolRestore_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = OverSVolRestore.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'v' });
			text = text.TrimEnd(new char[1] { 'V' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 1000f);
				SendRs232Data(18, 6, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LowSVolProtect_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LowSVolProtect.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'v' });
			text = text.TrimEnd(new char[1] { 'V' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 1000f);
				SendRs232Data(18, 7, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LowSVolRestore_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LowSVolRestore.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'v' });
			text = text.TrimEnd(new char[1] { 'V' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 1000f);
				SendRs232Data(18, 8, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void DeltaSVolProtect_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = DeltaSVolProtect.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'v' });
			text = text.TrimEnd(new char[1] { 'V' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 1000f);
				SendRs232Data(18, 9, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void DeltaSVolRestore_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = DeltaSVolRestore.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'v' });
			text = text.TrimEnd(new char[1] { 'V' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 1000f);
				SendRs232Data(18, 10, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void OverTVolProtect_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = OverTVolProtect.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'v' });
			text = text.TrimEnd(new char[1] { 'V' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(18, 11, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void OverTVolRestore_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = OverTVolRestore.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'v' });
			text = text.TrimEnd(new char[1] { 'V' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				SendRs232Data(18, 12, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BalanceCurrent_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BalanceCurrent.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'A' });
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'a' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(18, 13, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SndOverCurrentProtect_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SndOverCurrentProtect.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'A' });
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'a' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(18, 14, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ShortProtect_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ShortProtect.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'A' });
			text = text.TrimEnd(new char[1] { 'a' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(18, 15, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SndOverCurrentDelay_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SndOverCurrentDelay.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 's' });
			text = text.TrimEnd(new char[1] { 'S' });
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'm' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(18, 16, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ShortDelay_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ShortDelay.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 's' });
			text = text.TrimEnd(new char[1] { 'S' });
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'm' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(18, 17, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void OverSVolAlarm_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = OverSVolAlarm.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'V' });
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'v' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 1000f);
				SendRs232Data(18, 18, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LowSVolAlarm_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LowSVolAlarm.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'v' });
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'V' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 1000f);
				SendRs232Data(18, 19, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LowSocAlarm_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LowSocAlarm.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(18, 20, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ChargeTempProtect_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ChargeTempProtect.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '°„' });
			text = text.TrimEnd(new char[1] { 'C' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(17, 1, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ChargeTempRestore_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ChargeTempRestore.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '°„' });
			text = text.TrimEnd(new char[1] { 'C' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(17, 2, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void DisChargeTempProtect_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = DisChargeTempProtect.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '°„' });
			text = text.TrimEnd(new char[1] { 'C' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(17, 3, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void DisChargeTempRestore_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = DisChargeTempRestore.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '°„' });
			text = text.TrimEnd(new char[1] { 'C' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(17, 4, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSMosTempProtect_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSMosTempProtect.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '°„' });
			text = text.TrimEnd(new char[1] { 'C' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(17, 5, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BMSMosTempRestore_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BMSMosTempRestore.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '°„' });
			text = text.TrimEnd(new char[1] { 'C' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(17, 6, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ChargeLowTempProtect_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ChargeLowTempProtect.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '°„' });
			text = text.TrimEnd(new char[1] { 'C' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(17, 7, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ChargeLowTempRestore_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ChargeLowTempRestore.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '°„' });
			text = text.TrimEnd(new char[1] { 'C' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(17, 8, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void DisChargeLowTempProtect_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = DisChargeLowTempProtect.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '°„' });
			text = text.TrimEnd(new char[1] { 'C' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(17, 9, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void DisChargeLowTempRestore_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = DisChargeLowTempRestore.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '°„' });
			text = text.TrimEnd(new char[1] { 'C' });
			try
			{
				int num = Convert.ToInt16(text);
				SendRs232Data(17, 10, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ShutDownVol_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ShutDownVol.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'V' });
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'v' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 1000f);
				SendRs232Data(17, 12, (byte)num, (byte)(num >> 8));
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void OnButtonResetClicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Reset BMS", null, "Reset", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´∏¥ŒªBMS", null, "∏¥Œª", "»°œ˚"))))
			{
				SendRs232Data(4, 1, 0, 0);
			}
		}

		private async void ButtonSaveName_Clicked(object sender, EventArgs e)
		{
			if (!NotBindingStat() && !NotOwnerStat() && ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Save Controller Data", null, "Save", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´±£¥Êbms ˝æ›", null, "±£¥Ê", "»°œ˚"))))
			{
				DateTime now = DateTime.Now;
				SendRs232Data(21, (byte)(now.Hour + 1), (byte)(now.Minute + 1), (byte)(now.Second + 1));
				Thread.Sleep(10);
				SendRs232Data(20, (byte)(now.Year - 2000), (byte)now.Month, (byte)now.Day);
				Thread.Sleep(10);
				SendRs232Data(5, 1, 95, 95);
			}
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			if (ResourceLoader.IsEnabled && ResourceLoader.CanProvideContentFor(new ResourceLoader.ResourceLoadingQuery
			{
				AssemblyName = typeof(ProBmsPage).GetTypeInfo().Assembly.GetName(),
				ResourcePath = "ProBmsPage.xaml",
				Instance = this
			}))
			{
				__InitComponentRuntime();
				return;
			}
			if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
			{
				__InitComponentRuntime();
				return;
			}
			RowDefinition rowDefinition;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 9, 18);
			RowDefinition rowDefinition2;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition2 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 10, 18);
			Label label;
			VisualDiagnostics.RegisterSourceInfo(label = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 14, 22);
			ColumnDefinition columnDefinition;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 17, 30);
			ColumnDefinition columnDefinition2;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition2 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 18, 30);
			RowDefinition rowDefinition3;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition3 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 22, 34);
			RowDefinition rowDefinition4;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition4 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 23, 34);
			RowDefinition rowDefinition5;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition5 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 24, 34);
			RowDefinition rowDefinition6;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition6 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 25, 34);
			Label label2;
			VisualDiagnostics.RegisterSourceInfo(label2 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 28, 34);
			Label label3;
			VisualDiagnostics.RegisterSourceInfo(label3 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 29, 34);
			StackLayout stackLayout;
			VisualDiagnostics.RegisterSourceInfo(stackLayout = new StackLayout(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 27, 30);
			Label label4;
			VisualDiagnostics.RegisterSourceInfo(label4 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 32, 34);
			Label label5;
			VisualDiagnostics.RegisterSourceInfo(label5 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 33, 34);
			StackLayout stackLayout2;
			VisualDiagnostics.RegisterSourceInfo(stackLayout2 = new StackLayout(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 31, 30);
			Label label6;
			VisualDiagnostics.RegisterSourceInfo(label6 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 36, 34);
			Label label7;
			VisualDiagnostics.RegisterSourceInfo(label7 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 37, 34);
			StackLayout stackLayout3;
			VisualDiagnostics.RegisterSourceInfo(stackLayout3 = new StackLayout(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 35, 30);
			Label label8;
			VisualDiagnostics.RegisterSourceInfo(label8 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 40, 34);
			Label label9;
			VisualDiagnostics.RegisterSourceInfo(label9 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 41, 34);
			StackLayout stackLayout4;
			VisualDiagnostics.RegisterSourceInfo(stackLayout4 = new StackLayout(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 39, 30);
			Grid grid;
			VisualDiagnostics.RegisterSourceInfo(grid = new Grid(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 20, 26);
			Grid grid2;
			VisualDiagnostics.RegisterSourceInfo(grid2 = new Grid(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 15, 22);
			Label label10;
			VisualDiagnostics.RegisterSourceInfo(label10 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 46, 26);
			StackLayout stackLayout5;
			VisualDiagnostics.RegisterSourceInfo(stackLayout5 = new StackLayout(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 45, 22);
			Xamarin.Forms.Button button;
			VisualDiagnostics.RegisterSourceInfo(button = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 48, 22);
			ColumnDefinition columnDefinition3;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition3 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 51, 30);
			ColumnDefinition columnDefinition4;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition4 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 52, 30);
			Label label11;
			VisualDiagnostics.RegisterSourceInfo(label11 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 54, 26);
			Label label12;
			VisualDiagnostics.RegisterSourceInfo(label12 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 55, 26);
			Grid grid3;
			VisualDiagnostics.RegisterSourceInfo(grid3 = new Grid(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 49, 22);
			Xamarin.Forms.Button button2;
			VisualDiagnostics.RegisterSourceInfo(button2 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 58, 22);
			RowDefinition rowDefinition7;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition7 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 62, 30);
			RowDefinition rowDefinition8;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition8 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 63, 30);
			RowDefinition rowDefinition9;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition9 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 64, 30);
			RowDefinition rowDefinition10;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition10 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 65, 30);
			RowDefinition rowDefinition11;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition11 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 66, 30);
			RowDefinition rowDefinition12;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition12 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 67, 30);
			ColumnDefinition columnDefinition5;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition5 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 70, 30);
			ColumnDefinition columnDefinition6;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition6 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 71, 30);
			Label label13;
			VisualDiagnostics.RegisterSourceInfo(label13 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 73, 26);
			Label label14;
			VisualDiagnostics.RegisterSourceInfo(label14 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 74, 26);
			Label label15;
			VisualDiagnostics.RegisterSourceInfo(label15 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 75, 26);
			Label label16;
			VisualDiagnostics.RegisterSourceInfo(label16 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 76, 26);
			Label label17;
			VisualDiagnostics.RegisterSourceInfo(label17 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 77, 26);
			Label label18;
			VisualDiagnostics.RegisterSourceInfo(label18 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 78, 26);
			Label label19;
			VisualDiagnostics.RegisterSourceInfo(label19 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 79, 26);
			Label label20;
			VisualDiagnostics.RegisterSourceInfo(label20 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 80, 26);
			Label label21;
			VisualDiagnostics.RegisterSourceInfo(label21 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 81, 26);
			Label label22;
			VisualDiagnostics.RegisterSourceInfo(label22 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 82, 26);
			Label label23;
			VisualDiagnostics.RegisterSourceInfo(label23 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 83, 26);
			Xamarin.Forms.Button button3;
			VisualDiagnostics.RegisterSourceInfo(button3 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 85, 26);
			Xamarin.Forms.Button button4;
			VisualDiagnostics.RegisterSourceInfo(button4 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 86, 26);
			Xamarin.Forms.Button button5;
			VisualDiagnostics.RegisterSourceInfo(button5 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 87, 26);
			Xamarin.Forms.Button button6;
			VisualDiagnostics.RegisterSourceInfo(button6 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 89, 26);
			Xamarin.Forms.Button button7;
			VisualDiagnostics.RegisterSourceInfo(button7 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 90, 26);
			Xamarin.Forms.Button button8;
			VisualDiagnostics.RegisterSourceInfo(button8 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 91, 26);
			Xamarin.Forms.Button button9;
			VisualDiagnostics.RegisterSourceInfo(button9 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 92, 26);
			Xamarin.Forms.Button button10;
			VisualDiagnostics.RegisterSourceInfo(button10 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 93, 26);
			Xamarin.Forms.Button button11;
			VisualDiagnostics.RegisterSourceInfo(button11 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 94, 26);
			Xamarin.Forms.Button button12;
			VisualDiagnostics.RegisterSourceInfo(button12 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 95, 26);
			Xamarin.Forms.Button button13;
			VisualDiagnostics.RegisterSourceInfo(button13 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 96, 26);
			Grid grid4;
			VisualDiagnostics.RegisterSourceInfo(grid4 = new Grid(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 60, 22);
			Xamarin.Forms.Button button14;
			VisualDiagnostics.RegisterSourceInfo(button14 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 98, 22);
			RowDefinition rowDefinition13;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition13 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 101, 30);
			RowDefinition rowDefinition14;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition14 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 102, 30);
			RowDefinition rowDefinition15;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition15 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 103, 30);
			RowDefinition rowDefinition16;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition16 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 104, 30);
			RowDefinition rowDefinition17;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition17 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 105, 30);
			RowDefinition rowDefinition18;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition18 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 106, 30);
			RowDefinition rowDefinition19;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition19 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 107, 30);
			RowDefinition rowDefinition20;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition20 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 108, 30);
			RowDefinition rowDefinition21;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition21 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 109, 30);
			RowDefinition rowDefinition22;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition22 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 110, 30);
			RowDefinition rowDefinition23;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition23 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 111, 30);
			RowDefinition rowDefinition24;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition24 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 112, 30);
			ColumnDefinition columnDefinition7;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition7 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 115, 30);
			ColumnDefinition columnDefinition8;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition8 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 116, 30);
			Label label24;
			VisualDiagnostics.RegisterSourceInfo(label24 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 118, 26);
			Label label25;
			VisualDiagnostics.RegisterSourceInfo(label25 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 119, 26);
			Label label26;
			VisualDiagnostics.RegisterSourceInfo(label26 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 120, 26);
			Label label27;
			VisualDiagnostics.RegisterSourceInfo(label27 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 121, 26);
			Label label28;
			VisualDiagnostics.RegisterSourceInfo(label28 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 122, 26);
			Label label29;
			VisualDiagnostics.RegisterSourceInfo(label29 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 123, 26);
			Label label30;
			VisualDiagnostics.RegisterSourceInfo(label30 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 124, 26);
			Label label31;
			VisualDiagnostics.RegisterSourceInfo(label31 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 125, 26);
			Label label32;
			VisualDiagnostics.RegisterSourceInfo(label32 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 126, 26);
			Label label33;
			VisualDiagnostics.RegisterSourceInfo(label33 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 127, 26);
			Label label34;
			VisualDiagnostics.RegisterSourceInfo(label34 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 128, 26);
			Label label35;
			VisualDiagnostics.RegisterSourceInfo(label35 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 129, 26);
			Label label36;
			VisualDiagnostics.RegisterSourceInfo(label36 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 130, 26);
			Label label37;
			VisualDiagnostics.RegisterSourceInfo(label37 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 131, 26);
			Label label38;
			VisualDiagnostics.RegisterSourceInfo(label38 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 132, 26);
			Label label39;
			VisualDiagnostics.RegisterSourceInfo(label39 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 133, 26);
			Label label40;
			VisualDiagnostics.RegisterSourceInfo(label40 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 134, 26);
			Label label41;
			VisualDiagnostics.RegisterSourceInfo(label41 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 135, 26);
			Label label42;
			VisualDiagnostics.RegisterSourceInfo(label42 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 136, 26);
			Label label43;
			VisualDiagnostics.RegisterSourceInfo(label43 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 137, 26);
			Label label44;
			VisualDiagnostics.RegisterSourceInfo(label44 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 138, 26);
			Label label45;
			VisualDiagnostics.RegisterSourceInfo(label45 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 139, 26);
			Label label46;
			VisualDiagnostics.RegisterSourceInfo(label46 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 140, 26);
			Label label47;
			VisualDiagnostics.RegisterSourceInfo(label47 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 141, 26);
			Xamarin.Forms.Button button15;
			VisualDiagnostics.RegisterSourceInfo(button15 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 143, 26);
			Xamarin.Forms.Button button16;
			VisualDiagnostics.RegisterSourceInfo(button16 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 144, 26);
			Xamarin.Forms.Button button17;
			VisualDiagnostics.RegisterSourceInfo(button17 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 145, 26);
			Xamarin.Forms.Button button18;
			VisualDiagnostics.RegisterSourceInfo(button18 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 146, 26);
			Xamarin.Forms.Button button19;
			VisualDiagnostics.RegisterSourceInfo(button19 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 147, 26);
			Xamarin.Forms.Button button20;
			VisualDiagnostics.RegisterSourceInfo(button20 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 148, 26);
			Xamarin.Forms.Button button21;
			VisualDiagnostics.RegisterSourceInfo(button21 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 149, 26);
			Xamarin.Forms.Button button22;
			VisualDiagnostics.RegisterSourceInfo(button22 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 150, 26);
			Xamarin.Forms.Button button23;
			VisualDiagnostics.RegisterSourceInfo(button23 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 151, 26);
			Xamarin.Forms.Button button24;
			VisualDiagnostics.RegisterSourceInfo(button24 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 152, 26);
			Xamarin.Forms.Button button25;
			VisualDiagnostics.RegisterSourceInfo(button25 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 153, 26);
			Xamarin.Forms.Button button26;
			VisualDiagnostics.RegisterSourceInfo(button26 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 154, 26);
			Xamarin.Forms.Button button27;
			VisualDiagnostics.RegisterSourceInfo(button27 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 155, 26);
			Xamarin.Forms.Button button28;
			VisualDiagnostics.RegisterSourceInfo(button28 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 156, 26);
			Xamarin.Forms.Button button29;
			VisualDiagnostics.RegisterSourceInfo(button29 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 157, 26);
			Xamarin.Forms.Button button30;
			VisualDiagnostics.RegisterSourceInfo(button30 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 158, 26);
			Xamarin.Forms.Button button31;
			VisualDiagnostics.RegisterSourceInfo(button31 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 159, 26);
			Xamarin.Forms.Button button32;
			VisualDiagnostics.RegisterSourceInfo(button32 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 160, 26);
			Xamarin.Forms.Button button33;
			VisualDiagnostics.RegisterSourceInfo(button33 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 161, 26);
			Xamarin.Forms.Button button34;
			VisualDiagnostics.RegisterSourceInfo(button34 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 162, 26);
			Xamarin.Forms.Button button35;
			VisualDiagnostics.RegisterSourceInfo(button35 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 163, 26);
			Xamarin.Forms.Button button36;
			VisualDiagnostics.RegisterSourceInfo(button36 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 164, 26);
			Xamarin.Forms.Button button37;
			VisualDiagnostics.RegisterSourceInfo(button37 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 165, 26);
			Xamarin.Forms.Button button38;
			VisualDiagnostics.RegisterSourceInfo(button38 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 166, 26);
			Grid grid5;
			VisualDiagnostics.RegisterSourceInfo(grid5 = new Grid(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 99, 22);
			Xamarin.Forms.Button button39;
			VisualDiagnostics.RegisterSourceInfo(button39 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 168, 22);
			RowDefinition rowDefinition25;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition25 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 171, 30);
			RowDefinition rowDefinition26;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition26 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 172, 30);
			RowDefinition rowDefinition27;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition27 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 173, 30);
			RowDefinition rowDefinition28;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition28 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 174, 30);
			RowDefinition rowDefinition29;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition29 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 175, 30);
			RowDefinition rowDefinition30;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition30 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 176, 30);
			RowDefinition rowDefinition31;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition31 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 177, 30);
			RowDefinition rowDefinition32;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition32 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 178, 30);
			RowDefinition rowDefinition33;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition33 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 179, 30);
			RowDefinition rowDefinition34;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition34 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 180, 30);
			RowDefinition rowDefinition35;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition35 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 181, 30);
			RowDefinition rowDefinition36;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition36 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 182, 30);
			RowDefinition rowDefinition37;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition37 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 183, 30);
			RowDefinition rowDefinition38;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition38 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 184, 30);
			ColumnDefinition columnDefinition9;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition9 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 187, 30);
			ColumnDefinition columnDefinition10;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition10 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 188, 30);
			Label label48;
			VisualDiagnostics.RegisterSourceInfo(label48 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 190, 26);
			Label label49;
			VisualDiagnostics.RegisterSourceInfo(label49 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 191, 26);
			Label label50;
			VisualDiagnostics.RegisterSourceInfo(label50 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 192, 26);
			Label label51;
			VisualDiagnostics.RegisterSourceInfo(label51 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 193, 26);
			Label label52;
			VisualDiagnostics.RegisterSourceInfo(label52 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 194, 26);
			Label label53;
			VisualDiagnostics.RegisterSourceInfo(label53 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 195, 26);
			Label label54;
			VisualDiagnostics.RegisterSourceInfo(label54 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 196, 26);
			Label label55;
			VisualDiagnostics.RegisterSourceInfo(label55 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 197, 26);
			Label label56;
			VisualDiagnostics.RegisterSourceInfo(label56 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 198, 26);
			Label label57;
			VisualDiagnostics.RegisterSourceInfo(label57 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 199, 26);
			Label label58;
			VisualDiagnostics.RegisterSourceInfo(label58 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 200, 26);
			Label label59;
			VisualDiagnostics.RegisterSourceInfo(label59 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 201, 26);
			Label label60;
			VisualDiagnostics.RegisterSourceInfo(label60 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 202, 26);
			Label label61;
			VisualDiagnostics.RegisterSourceInfo(label61 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 203, 26);
			Label label62;
			VisualDiagnostics.RegisterSourceInfo(label62 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 204, 26);
			Label label63;
			VisualDiagnostics.RegisterSourceInfo(label63 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 205, 26);
			Label label64;
			VisualDiagnostics.RegisterSourceInfo(label64 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 206, 26);
			Label label65;
			VisualDiagnostics.RegisterSourceInfo(label65 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 207, 26);
			Label label66;
			VisualDiagnostics.RegisterSourceInfo(label66 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 208, 26);
			Label label67;
			VisualDiagnostics.RegisterSourceInfo(label67 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 209, 26);
			Label label68;
			VisualDiagnostics.RegisterSourceInfo(label68 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 210, 26);
			Label label69;
			VisualDiagnostics.RegisterSourceInfo(label69 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 211, 26);
			Label label70;
			VisualDiagnostics.RegisterSourceInfo(label70 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 212, 26);
			Label label71;
			VisualDiagnostics.RegisterSourceInfo(label71 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 213, 26);
			Label label72;
			VisualDiagnostics.RegisterSourceInfo(label72 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 214, 26);
			Label label73;
			VisualDiagnostics.RegisterSourceInfo(label73 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 215, 26);
			Label label74;
			VisualDiagnostics.RegisterSourceInfo(label74 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 216, 26);
			Xamarin.Forms.Button button40;
			VisualDiagnostics.RegisterSourceInfo(button40 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 218, 26);
			Xamarin.Forms.Button button41;
			VisualDiagnostics.RegisterSourceInfo(button41 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 219, 26);
			Xamarin.Forms.Button button42;
			VisualDiagnostics.RegisterSourceInfo(button42 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 220, 26);
			Xamarin.Forms.Button button43;
			VisualDiagnostics.RegisterSourceInfo(button43 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 221, 26);
			Xamarin.Forms.Button button44;
			VisualDiagnostics.RegisterSourceInfo(button44 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 222, 26);
			Xamarin.Forms.Button button45;
			VisualDiagnostics.RegisterSourceInfo(button45 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 223, 26);
			Xamarin.Forms.Button button46;
			VisualDiagnostics.RegisterSourceInfo(button46 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 224, 26);
			Xamarin.Forms.Button button47;
			VisualDiagnostics.RegisterSourceInfo(button47 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 225, 26);
			Xamarin.Forms.Button button48;
			VisualDiagnostics.RegisterSourceInfo(button48 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 226, 26);
			Xamarin.Forms.Button button49;
			VisualDiagnostics.RegisterSourceInfo(button49 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 227, 26);
			Xamarin.Forms.Button button50;
			VisualDiagnostics.RegisterSourceInfo(button50 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 228, 26);
			Xamarin.Forms.Button button51;
			VisualDiagnostics.RegisterSourceInfo(button51 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 229, 26);
			Xamarin.Forms.Button button52;
			VisualDiagnostics.RegisterSourceInfo(button52 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 230, 26);
			Xamarin.Forms.Button button53;
			VisualDiagnostics.RegisterSourceInfo(button53 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 231, 26);
			Xamarin.Forms.Button button54;
			VisualDiagnostics.RegisterSourceInfo(button54 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 232, 26);
			Xamarin.Forms.Button button55;
			VisualDiagnostics.RegisterSourceInfo(button55 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 233, 26);
			Xamarin.Forms.Button button56;
			VisualDiagnostics.RegisterSourceInfo(button56 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 235, 26);
			Xamarin.Forms.Button button57;
			VisualDiagnostics.RegisterSourceInfo(button57 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 236, 26);
			Xamarin.Forms.Button button58;
			VisualDiagnostics.RegisterSourceInfo(button58 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 237, 26);
			Xamarin.Forms.Button button59;
			VisualDiagnostics.RegisterSourceInfo(button59 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 238, 26);
			Xamarin.Forms.Button button60;
			VisualDiagnostics.RegisterSourceInfo(button60 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 239, 26);
			Xamarin.Forms.Button button61;
			VisualDiagnostics.RegisterSourceInfo(button61 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 240, 26);
			Xamarin.Forms.Button button62;
			VisualDiagnostics.RegisterSourceInfo(button62 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 241, 26);
			Xamarin.Forms.Button button63;
			VisualDiagnostics.RegisterSourceInfo(button63 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 242, 26);
			Xamarin.Forms.Button button64;
			VisualDiagnostics.RegisterSourceInfo(button64 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 243, 26);
			Xamarin.Forms.Button button65;
			VisualDiagnostics.RegisterSourceInfo(button65 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 244, 26);
			Xamarin.Forms.Button button66;
			VisualDiagnostics.RegisterSourceInfo(button66 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 246, 26);
			Grid grid6;
			VisualDiagnostics.RegisterSourceInfo(grid6 = new Grid(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 169, 22);
			Xamarin.Forms.Button button67;
			VisualDiagnostics.RegisterSourceInfo(button67 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 248, 22);
			RowDefinition rowDefinition39;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition39 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 251, 30);
			RowDefinition rowDefinition40;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition40 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 252, 30);
			RowDefinition rowDefinition41;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition41 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 253, 30);
			RowDefinition rowDefinition42;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition42 = new RowDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 254, 30);
			ColumnDefinition columnDefinition11;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition11 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 257, 30);
			ColumnDefinition columnDefinition12;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition12 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 258, 30);
			Label label75;
			VisualDiagnostics.RegisterSourceInfo(label75 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 260, 26);
			Label label76;
			VisualDiagnostics.RegisterSourceInfo(label76 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 261, 26);
			Label label77;
			VisualDiagnostics.RegisterSourceInfo(label77 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 262, 26);
			Label label78;
			VisualDiagnostics.RegisterSourceInfo(label78 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 263, 26);
			Label label79;
			VisualDiagnostics.RegisterSourceInfo(label79 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 264, 26);
			Label label80;
			VisualDiagnostics.RegisterSourceInfo(label80 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 265, 26);
			Label label81;
			VisualDiagnostics.RegisterSourceInfo(label81 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 266, 26);
			Xamarin.Forms.Button button68;
			VisualDiagnostics.RegisterSourceInfo(button68 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 269, 26);
			Xamarin.Forms.Button button69;
			VisualDiagnostics.RegisterSourceInfo(button69 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 270, 26);
			Xamarin.Forms.Button button70;
			VisualDiagnostics.RegisterSourceInfo(button70 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 271, 26);
			Xamarin.Forms.Button button71;
			VisualDiagnostics.RegisterSourceInfo(button71 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 272, 26);
			Xamarin.Forms.Button button72;
			VisualDiagnostics.RegisterSourceInfo(button72 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 273, 26);
			Xamarin.Forms.Button button73;
			VisualDiagnostics.RegisterSourceInfo(button73 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 274, 26);
			Xamarin.Forms.Button button74;
			VisualDiagnostics.RegisterSourceInfo(button74 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 275, 26);
			Grid grid7;
			VisualDiagnostics.RegisterSourceInfo(grid7 = new Grid(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 249, 22);
			StackLayout stackLayout6;
			VisualDiagnostics.RegisterSourceInfo(stackLayout6 = new StackLayout(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 13, 18);
			Xamarin.Forms.ScrollView scrollView;
			VisualDiagnostics.RegisterSourceInfo(scrollView = new Xamarin.Forms.ScrollView(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 12, 14);
			ColumnDefinition columnDefinition13;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition13 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 281, 22);
			ColumnDefinition columnDefinition14;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition14 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 282, 22);
			ColumnDefinition columnDefinition15;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition15 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 283, 22);
			ColumnDefinition columnDefinition16;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition16 = new ColumnDefinition(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 284, 22);
			Xamarin.Forms.Button button75;
			VisualDiagnostics.RegisterSourceInfo(button75 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 286, 18);
			Xamarin.Forms.Button button76;
			VisualDiagnostics.RegisterSourceInfo(button76 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 289, 18);
			Xamarin.Forms.Button button77;
			VisualDiagnostics.RegisterSourceInfo(button77 = new Xamarin.Forms.Button(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 292, 18);
			Label label82;
			VisualDiagnostics.RegisterSourceInfo(label82 = new Label(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 295, 18);
			Grid grid8;
			VisualDiagnostics.RegisterSourceInfo(grid8 = new Grid(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 279, 14);
			Grid grid9;
			VisualDiagnostics.RegisterSourceInfo(grid9 = new Grid(), new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 7, 10);
			ProBmsPage proBmsPage;
			VisualDiagnostics.RegisterSourceInfo(proBmsPage = this, new Uri("ProBmsPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 2, 2);
			NameScope nameScope = (NameScope)(NameScope.GetNameScope(proBmsPage) ?? new NameScope());
			NameScope.SetNameScope(proBmsPage, nameScope);
			((INameScope)nameScope).RegisterName("girdall", (object)grid9);
			if (grid9.StyleId == null)
			{
				grid9.StyleId = "girdall";
			}
			((INameScope)nameScope).RegisterName("DetailView", (object)scrollView);
			if (scrollView.StyleId == null)
			{
				scrollView.StyleId = "DetailView";
			}
			((INameScope)nameScope).RegisterName("RowText0", (object)label);
			if (label.StyleId == null)
			{
				label.StyleId = "RowText0";
			}
			((INameScope)nameScope).RegisterName("ModelFactoryName", (object)label2);
			if (label2.StyleId == null)
			{
				label2.StyleId = "ModelFactoryName";
			}
			((INameScope)nameScope).RegisterName("ModelName", (object)label3);
			if (label3.StyleId == null)
			{
				label3.StyleId = "ModelName";
			}
			((INameScope)nameScope).RegisterName("ModelTypeName", (object)label4);
			if (label4.StyleId == null)
			{
				label4.StyleId = "ModelTypeName";
			}
			((INameScope)nameScope).RegisterName("ModelType", (object)label5);
			if (label5.StyleId == null)
			{
				label5.StyleId = "ModelType";
			}
			((INameScope)nameScope).RegisterName("ModelPowerName", (object)label6);
			if (label6.StyleId == null)
			{
				label6.StyleId = "ModelPowerName";
			}
			((INameScope)nameScope).RegisterName("ModelPower", (object)label7);
			if (label7.StyleId == null)
			{
				label7.StyleId = "ModelPower";
			}
			((INameScope)nameScope).RegisterName("ModelCurrName", (object)label8);
			if (label8.StyleId == null)
			{
				label8.StyleId = "ModelCurrName";
			}
			((INameScope)nameScope).RegisterName("ModelCurr", (object)label9);
			if (label9.StyleId == null)
			{
				label9.StyleId = "ModelCurr";
			}
			((INameScope)nameScope).RegisterName("ModelNumber", (object)label10);
			if (label10.StyleId == null)
			{
				label10.StyleId = "ModelNumber";
			}
			((INameScope)nameScope).RegisterName("RowDateTime", (object)button);
			if (button.StyleId == null)
			{
				button.StyleId = "RowDateTime";
			}
			((INameScope)nameScope).RegisterName("DateTimeGrid", (object)grid3);
			if (grid3.StyleId == null)
			{
				grid3.StyleId = "DateTimeGrid";
			}
			((INameScope)nameScope).RegisterName("ModelDate", (object)label11);
			if (label11.StyleId == null)
			{
				label11.StyleId = "ModelDate";
			}
			((INameScope)nameScope).RegisterName("ModelTime", (object)label12);
			if (label12.StyleId == null)
			{
				label12.StyleId = "ModelTime";
			}
			((INameScope)nameScope).RegisterName("RowText2", (object)button2);
			if (button2.StyleId == null)
			{
				button2.StyleId = "RowText2";
			}
			((INameScope)nameScope).RegisterName("BMSpara", (object)grid4);
			if (grid4.StyleId == null)
			{
				grid4.StyleId = "BMSpara";
			}
			((INameScope)nameScope).RegisterName("BalanceStartVol", (object)label13);
			if (label13.StyleId == null)
			{
				label13.StyleId = "BalanceStartVol";
			}
			((INameScope)nameScope).RegisterName("BalanceLimitVol", (object)label14);
			if (label14.StyleId == null)
			{
				label14.StyleId = "BalanceLimitVol";
			}
			((INameScope)nameScope).RegisterName("BalanceDeltaVol", (object)label15);
			if (label15.StyleId == null)
			{
				label15.StyleId = "BalanceDeltaVol";
			}
			((INameScope)nameScope).RegisterName("BattRatedCap", (object)label16);
			if (label16.StyleId == null)
			{
				label16.StyleId = "BattRatedCap";
			}
			((INameScope)nameScope).RegisterName("AutoDownTime", (object)label17);
			if (label17.StyleId == null)
			{
				label17.StyleId = "AutoDownTime";
			}
			((INameScope)nameScope).RegisterName("RatedVoltage2", (object)label18);
			if (label18.StyleId == null)
			{
				label18.StyleId = "RatedVoltage2";
			}
			((INameScope)nameScope).RegisterName("Series", (object)label19);
			if (label19.StyleId == null)
			{
				label19.StyleId = "Series";
			}
			((INameScope)nameScope).RegisterName("MaxDSGCurr", (object)label20);
			if (label20.StyleId == null)
			{
				label20.StyleId = "MaxDSGCurr";
			}
			((INameScope)nameScope).RegisterName("MaxDSGCurrTime", (object)label21);
			if (label21.StyleId == null)
			{
				label21.StyleId = "MaxDSGCurrTime";
			}
			((INameScope)nameScope).RegisterName("MaxCHGCurr", (object)label22);
			if (label22.StyleId == null)
			{
				label22.StyleId = "MaxCHGCurr";
			}
			((INameScope)nameScope).RegisterName("MaxCHGCurrTime", (object)label23);
			if (label23.StyleId == null)
			{
				label23.StyleId = "MaxCHGCurrTime";
			}
			((INameScope)nameScope).RegisterName("RowTextBMSR", (object)button14);
			if (button14.StyleId == null)
			{
				button14.StyleId = "RowTextBMSR";
			}
			((INameScope)nameScope).RegisterName("BMSRPara", (object)grid5);
			if (grid5.StyleId == null)
			{
				grid5.StyleId = "BMSRPara";
			}
			((INameScope)nameScope).RegisterName("BMSR1", (object)label24);
			if (label24.StyleId == null)
			{
				label24.StyleId = "BMSR1";
			}
			((INameScope)nameScope).RegisterName("BMSR2", (object)label25);
			if (label25.StyleId == null)
			{
				label25.StyleId = "BMSR2";
			}
			((INameScope)nameScope).RegisterName("BMSR3", (object)label26);
			if (label26.StyleId == null)
			{
				label26.StyleId = "BMSR3";
			}
			((INameScope)nameScope).RegisterName("BMSR4", (object)label27);
			if (label27.StyleId == null)
			{
				label27.StyleId = "BMSR4";
			}
			((INameScope)nameScope).RegisterName("BMSR5", (object)label28);
			if (label28.StyleId == null)
			{
				label28.StyleId = "BMSR5";
			}
			((INameScope)nameScope).RegisterName("BMSR6", (object)label29);
			if (label29.StyleId == null)
			{
				label29.StyleId = "BMSR6";
			}
			((INameScope)nameScope).RegisterName("BMSR7", (object)label30);
			if (label30.StyleId == null)
			{
				label30.StyleId = "BMSR7";
			}
			((INameScope)nameScope).RegisterName("BMSR8", (object)label31);
			if (label31.StyleId == null)
			{
				label31.StyleId = "BMSR8";
			}
			((INameScope)nameScope).RegisterName("BMSR9", (object)label32);
			if (label32.StyleId == null)
			{
				label32.StyleId = "BMSR9";
			}
			((INameScope)nameScope).RegisterName("BMSR10", (object)label33);
			if (label33.StyleId == null)
			{
				label33.StyleId = "BMSR10";
			}
			((INameScope)nameScope).RegisterName("BMSR11", (object)label34);
			if (label34.StyleId == null)
			{
				label34.StyleId = "BMSR11";
			}
			((INameScope)nameScope).RegisterName("BMSR12", (object)label35);
			if (label35.StyleId == null)
			{
				label35.StyleId = "BMSR12";
			}
			((INameScope)nameScope).RegisterName("BMSR13", (object)label36);
			if (label36.StyleId == null)
			{
				label36.StyleId = "BMSR13";
			}
			((INameScope)nameScope).RegisterName("BMSR14", (object)label37);
			if (label37.StyleId == null)
			{
				label37.StyleId = "BMSR14";
			}
			((INameScope)nameScope).RegisterName("BMSR15", (object)label38);
			if (label38.StyleId == null)
			{
				label38.StyleId = "BMSR15";
			}
			((INameScope)nameScope).RegisterName("BMSR16", (object)label39);
			if (label39.StyleId == null)
			{
				label39.StyleId = "BMSR16";
			}
			((INameScope)nameScope).RegisterName("BMSR17", (object)label40);
			if (label40.StyleId == null)
			{
				label40.StyleId = "BMSR17";
			}
			((INameScope)nameScope).RegisterName("BMSR18", (object)label41);
			if (label41.StyleId == null)
			{
				label41.StyleId = "BMSR18";
			}
			((INameScope)nameScope).RegisterName("BMSR19", (object)label42);
			if (label42.StyleId == null)
			{
				label42.StyleId = "BMSR19";
			}
			((INameScope)nameScope).RegisterName("BMSR20", (object)label43);
			if (label43.StyleId == null)
			{
				label43.StyleId = "BMSR20";
			}
			((INameScope)nameScope).RegisterName("BMSR21", (object)label44);
			if (label44.StyleId == null)
			{
				label44.StyleId = "BMSR21";
			}
			((INameScope)nameScope).RegisterName("BMSR22", (object)label45);
			if (label45.StyleId == null)
			{
				label45.StyleId = "BMSR22";
			}
			((INameScope)nameScope).RegisterName("BMSR23", (object)label46);
			if (label46.StyleId == null)
			{
				label46.StyleId = "BMSR23";
			}
			((INameScope)nameScope).RegisterName("BMSR24", (object)label47);
			if (label47.StyleId == null)
			{
				label47.StyleId = "BMSR24";
			}
			((INameScope)nameScope).RegisterName("RowText7", (object)button39);
			if (button39.StyleId == null)
			{
				button39.StyleId = "RowText7";
			}
			((INameScope)nameScope).RegisterName("BMSProtect", (object)grid6);
			if (grid6.StyleId == null)
			{
				grid6.StyleId = "BMSProtect";
			}
			((INameScope)nameScope).RegisterName("OverSVolProtect", (object)label48);
			if (label48.StyleId == null)
			{
				label48.StyleId = "OverSVolProtect";
			}
			((INameScope)nameScope).RegisterName("OverSVolRestore", (object)label49);
			if (label49.StyleId == null)
			{
				label49.StyleId = "OverSVolRestore";
			}
			((INameScope)nameScope).RegisterName("LowSVolProtect", (object)label50);
			if (label50.StyleId == null)
			{
				label50.StyleId = "LowSVolProtect";
			}
			((INameScope)nameScope).RegisterName("LowSVolRestore", (object)label51);
			if (label51.StyleId == null)
			{
				label51.StyleId = "LowSVolRestore";
			}
			((INameScope)nameScope).RegisterName("DeltaSVolProtect", (object)label52);
			if (label52.StyleId == null)
			{
				label52.StyleId = "DeltaSVolProtect";
			}
			((INameScope)nameScope).RegisterName("DeltaSVolRestore", (object)label53);
			if (label53.StyleId == null)
			{
				label53.StyleId = "DeltaSVolRestore";
			}
			((INameScope)nameScope).RegisterName("OverTVolProtect", (object)label54);
			if (label54.StyleId == null)
			{
				label54.StyleId = "OverTVolProtect";
			}
			((INameScope)nameScope).RegisterName("OverTVolRestore", (object)label55);
			if (label55.StyleId == null)
			{
				label55.StyleId = "OverTVolRestore";
			}
			((INameScope)nameScope).RegisterName("BalanceCurrent", (object)label56);
			if (label56.StyleId == null)
			{
				label56.StyleId = "BalanceCurrent";
			}
			((INameScope)nameScope).RegisterName("SndOverCurrentProtect", (object)label57);
			if (label57.StyleId == null)
			{
				label57.StyleId = "SndOverCurrentProtect";
			}
			((INameScope)nameScope).RegisterName("ShortProtect", (object)label58);
			if (label58.StyleId == null)
			{
				label58.StyleId = "ShortProtect";
			}
			((INameScope)nameScope).RegisterName("SndOverCurrentDelay", (object)label59);
			if (label59.StyleId == null)
			{
				label59.StyleId = "SndOverCurrentDelay";
			}
			((INameScope)nameScope).RegisterName("ShortDelay", (object)label60);
			if (label60.StyleId == null)
			{
				label60.StyleId = "ShortDelay";
			}
			((INameScope)nameScope).RegisterName("OverSVolAlarm", (object)label61);
			if (label61.StyleId == null)
			{
				label61.StyleId = "OverSVolAlarm";
			}
			((INameScope)nameScope).RegisterName("LowSVolAlarm", (object)label62);
			if (label62.StyleId == null)
			{
				label62.StyleId = "LowSVolAlarm";
			}
			((INameScope)nameScope).RegisterName("LowSocAlarm", (object)label63);
			if (label63.StyleId == null)
			{
				label63.StyleId = "LowSocAlarm";
			}
			((INameScope)nameScope).RegisterName("ChargeTempProtect", (object)label64);
			if (label64.StyleId == null)
			{
				label64.StyleId = "ChargeTempProtect";
			}
			((INameScope)nameScope).RegisterName("ChargeTempRestore", (object)label65);
			if (label65.StyleId == null)
			{
				label65.StyleId = "ChargeTempRestore";
			}
			((INameScope)nameScope).RegisterName("DisChargeTempProtect", (object)label66);
			if (label66.StyleId == null)
			{
				label66.StyleId = "DisChargeTempProtect";
			}
			((INameScope)nameScope).RegisterName("DisChargeTempRestore", (object)label67);
			if (label67.StyleId == null)
			{
				label67.StyleId = "DisChargeTempRestore";
			}
			((INameScope)nameScope).RegisterName("BMSMosTempProtect", (object)label68);
			if (label68.StyleId == null)
			{
				label68.StyleId = "BMSMosTempProtect";
			}
			((INameScope)nameScope).RegisterName("BMSMosTempRestore", (object)label69);
			if (label69.StyleId == null)
			{
				label69.StyleId = "BMSMosTempRestore";
			}
			((INameScope)nameScope).RegisterName("ChargeLowTempProtect", (object)label70);
			if (label70.StyleId == null)
			{
				label70.StyleId = "ChargeLowTempProtect";
			}
			((INameScope)nameScope).RegisterName("ChargeLowTempRestore", (object)label71);
			if (label71.StyleId == null)
			{
				label71.StyleId = "ChargeLowTempRestore";
			}
			((INameScope)nameScope).RegisterName("DisChargeLowTempProtect", (object)label72);
			if (label72.StyleId == null)
			{
				label72.StyleId = "DisChargeLowTempProtect";
			}
			((INameScope)nameScope).RegisterName("DisChargeLowTempRestore", (object)label73);
			if (label73.StyleId == null)
			{
				label73.StyleId = "DisChargeLowTempRestore";
			}
			((INameScope)nameScope).RegisterName("ShutDownVol", (object)label74);
			if (label74.StyleId == null)
			{
				label74.StyleId = "ShutDownVol";
			}
			((INameScope)nameScope).RegisterName("ShutdownVolButton", (object)button66);
			if (button66.StyleId == null)
			{
				button66.StyleId = "ShutdownVolButton";
			}
			((INameScope)nameScope).RegisterName("RowText11", (object)button67);
			if (button67.StyleId == null)
			{
				button67.StyleId = "RowText11";
			}
			((INameScope)nameScope).RegisterName("Girdbms11", (object)grid7);
			if (grid7.StyleId == null)
			{
				grid7.StyleId = "Girdbms11";
			}
			((INameScope)nameScope).RegisterName("CurrCoeff", (object)label75);
			if (label75.StyleId == null)
			{
				label75.StyleId = "CurrCoeff";
			}
			((INameScope)nameScope).RegisterName("CurrCoeff2", (object)label76);
			if (label76.StyleId == null)
			{
				label76.StyleId = "CurrCoeff2";
			}
			((INameScope)nameScope).RegisterName("VolGain", (object)label77);
			if (label77.StyleId == null)
			{
				label77.StyleId = "VolGain";
			}
			((INameScope)nameScope).RegisterName("VolZero", (object)label78);
			if (label78.StyleId == null)
			{
				label78.StyleId = "VolZero";
			}
			((INameScope)nameScope).RegisterName("CurrentRange", (object)label79);
			if (label79.StyleId == null)
			{
				label79.StyleId = "CurrentRange";
			}
			((INameScope)nameScope).RegisterName("ZeroBattCoeff2", (object)label80);
			if (label80.StyleId == null)
			{
				label80.StyleId = "ZeroBattCoeff2";
			}
			((INameScope)nameScope).RegisterName("FullBattCoeff2", (object)label81);
			if (label81.StyleId == null)
			{
				label81.StyleId = "FullBattCoeff2";
			}
			((INameScope)nameScope).RegisterName("CurrentRangeButton", (object)button72);
			if (button72.StyleId == null)
			{
				button72.StyleId = "CurrentRangeButton";
			}
			((INameScope)nameScope).RegisterName("ResetName", (object)button75);
			if (button75.StyleId == null)
			{
				button75.StyleId = "ResetName";
			}
			((INameScope)nameScope).RegisterName("SaveName", (object)button76);
			if (button76.StyleId == null)
			{
				button76.StyleId = "SaveName";
			}
			((INameScope)nameScope).RegisterName("ParaMode", (object)button77);
			if (button77.StyleId == null)
			{
				button77.StyleId = "ParaMode";
			}
			((INameScope)nameScope).RegisterName("RcvFrames", (object)label82);
			if (label82.StyleId == null)
			{
				label82.StyleId = "RcvFrames";
			}
			girdall = grid9;
			DetailView = scrollView;
			RowText0 = label;
			ModelFactoryName = label2;
			ModelName = label3;
			ModelTypeName = label4;
			ModelType = label5;
			ModelPowerName = label6;
			ModelPower = label7;
			ModelCurrName = label8;
			ModelCurr = label9;
			ModelNumber = label10;
			RowDateTime = button;
			DateTimeGrid = grid3;
			ModelDate = label11;
			ModelTime = label12;
			RowText2 = button2;
			BMSpara = grid4;
			BalanceStartVol = label13;
			BalanceLimitVol = label14;
			BalanceDeltaVol = label15;
			BattRatedCap = label16;
			AutoDownTime = label17;
			RatedVoltage2 = label18;
			Series = label19;
			MaxDSGCurr = label20;
			MaxDSGCurrTime = label21;
			MaxCHGCurr = label22;
			MaxCHGCurrTime = label23;
			RowTextBMSR = button14;
			BMSRPara = grid5;
			BMSR1 = label24;
			BMSR2 = label25;
			BMSR3 = label26;
			BMSR4 = label27;
			BMSR5 = label28;
			BMSR6 = label29;
			BMSR7 = label30;
			BMSR8 = label31;
			BMSR9 = label32;
			BMSR10 = label33;
			BMSR11 = label34;
			BMSR12 = label35;
			BMSR13 = label36;
			BMSR14 = label37;
			BMSR15 = label38;
			BMSR16 = label39;
			BMSR17 = label40;
			BMSR18 = label41;
			BMSR19 = label42;
			BMSR20 = label43;
			BMSR21 = label44;
			BMSR22 = label45;
			BMSR23 = label46;
			BMSR24 = label47;
			RowText7 = button39;
			BMSProtect = grid6;
			OverSVolProtect = label48;
			OverSVolRestore = label49;
			LowSVolProtect = label50;
			LowSVolRestore = label51;
			DeltaSVolProtect = label52;
			DeltaSVolRestore = label53;
			OverTVolProtect = label54;
			OverTVolRestore = label55;
			BalanceCurrent = label56;
			SndOverCurrentProtect = label57;
			ShortProtect = label58;
			SndOverCurrentDelay = label59;
			ShortDelay = label60;
			OverSVolAlarm = label61;
			LowSVolAlarm = label62;
			LowSocAlarm = label63;
			ChargeTempProtect = label64;
			ChargeTempRestore = label65;
			DisChargeTempProtect = label66;
			DisChargeTempRestore = label67;
			BMSMosTempProtect = label68;
			BMSMosTempRestore = label69;
			ChargeLowTempProtect = label70;
			ChargeLowTempRestore = label71;
			DisChargeLowTempProtect = label72;
			DisChargeLowTempRestore = label73;
			ShutDownVol = label74;
			ShutdownVolButton = button66;
			RowText11 = button67;
			Girdbms11 = grid7;
			CurrCoeff = label75;
			CurrCoeff2 = label76;
			VolGain = label77;
			VolZero = label78;
			CurrentRange = label79;
			ZeroBattCoeff2 = label80;
			FullBattCoeff2 = label81;
			CurrentRangeButton = button72;
			ResetName = button75;
			SaveName = button76;
			ParaMode = button77;
			RcvFrames = label82;
			grid9.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid9.SetValue(CompressedLayout.IsHeadlessProperty, true);
			rowDefinition.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("93*"));
			((DefinitionCollection<RowDefinition>)grid9.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition);
			rowDefinition2.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("7*"));
			((DefinitionCollection<RowDefinition>)grid9.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition2);
			scrollView.SetValue(Grid.RowProperty, 0);
			scrollView.SetValue(Grid.ColumnProperty, 0);
			label.SetValue(Label.TextProperty, "–Õ∫≈");
			label.SetValue(Label.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
			Type typeFromHandle = typeof(IProvideValueTarget);
			object[] array = new object[0 + 5];
			array[0] = label;
			array[1] = stackLayout6;
			array[2] = scrollView;
			array[3] = grid9;
			array[4] = proBmsPage;
			object service;
			xamlServiceProvider.Add(typeFromHandle, service = new SimpleValueTargetProvider(array, Label.FontSizeProperty, nameScope));
			xamlServiceProvider.Add(typeof(IReferenceProvider), service);
			Type typeFromHandle2 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
			xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(14, 81)));
			label.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider));
			label.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			label.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(label);
			grid2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid2.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid2.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("65*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
			columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("35*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
			grid.SetValue(Grid.RowProperty, 0);
			grid.SetValue(Grid.ColumnProperty, 0);
			grid.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid.SetValue(Grid.RowSpacingProperty, 0.0);
			rowDefinition3.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition3);
			rowDefinition4.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition4);
			rowDefinition5.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition5);
			rowDefinition6.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition6);
			stackLayout.SetValue(Grid.RowProperty, 0);
			stackLayout.SetValue(Grid.ColumnProperty, 0);
			stackLayout.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout.SetValue(StackLayout.SpacingProperty, 0.0);
			stackLayout.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			stackLayout.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label2.SetValue(Label.TextProperty, "ƒœæ©‘∂«˝");
			label2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Black);
			label2.SetValue(Label.TextColorProperty, Color.White);
			BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
			Type typeFromHandle3 = typeof(IProvideValueTarget);
			object[] array2 = new object[0 + 8];
			array2[0] = label2;
			array2[1] = stackLayout;
			array2[2] = grid;
			array2[3] = grid2;
			array2[4] = stackLayout6;
			array2[5] = scrollView;
			array2[6] = grid9;
			array2[7] = proBmsPage;
			object service2;
			xamlServiceProvider2.Add(typeFromHandle3, service2 = new SimpleValueTargetProvider(array2, Label.FontSizeProperty, nameScope));
			xamlServiceProvider2.Add(typeof(IReferenceProvider), service2);
			Type typeFromHandle4 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
			xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(28, 120)));
			label2.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("Large", (IServiceProvider)xamlServiceProvider2));
			label2.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout.Children.Add(label2);
			label3.SetValue(Label.TextProperty, "”¿¥≈Õ¨≤Ωøÿ÷∆∆˜");
			label3.SetValue(Grid.RowProperty, 0);
			label3.SetValue(Grid.ColumnProperty, 0);
			label3.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
			Type typeFromHandle5 = typeof(IProvideValueTarget);
			object[] array3 = new object[0 + 8];
			array3[0] = label3;
			array3[1] = stackLayout;
			array3[2] = grid;
			array3[3] = grid2;
			array3[4] = stackLayout6;
			array3[5] = scrollView;
			array3[6] = grid9;
			array3[7] = proBmsPage;
			object service3;
			xamlServiceProvider3.Add(typeFromHandle5, service3 = new SimpleValueTargetProvider(array3, Label.FontSizeProperty, nameScope));
			xamlServiceProvider3.Add(typeof(IReferenceProvider), service3);
			Type typeFromHandle6 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
			xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(29, 121)));
			label3.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider3));
			label3.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout.Children.Add(label3);
			grid.Children.Add(stackLayout);
			stackLayout2.SetValue(Grid.RowProperty, 1);
			stackLayout2.SetValue(Grid.ColumnProperty, 0);
			stackLayout2.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout2.SetValue(StackLayout.SpacingProperty, 10.0);
			stackLayout2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			stackLayout2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label4.SetValue(Label.TextProperty, "–Õ∫≈");
			label4.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
			Type typeFromHandle7 = typeof(IProvideValueTarget);
			object[] array4 = new object[0 + 8];
			array4[0] = label4;
			array4[1] = stackLayout2;
			array4[2] = grid;
			array4[3] = grid2;
			array4[4] = stackLayout6;
			array4[5] = scrollView;
			array4[6] = grid9;
			array4[7] = proBmsPage;
			object service4;
			xamlServiceProvider4.Add(typeFromHandle7, service4 = new SimpleValueTargetProvider(array4, Label.FontSizeProperty, nameScope));
			xamlServiceProvider4.Add(typeof(IReferenceProvider), service4);
			Type typeFromHandle8 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
			xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(32, 91)));
			label4.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider4));
			label4.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout2.Children.Add(label4);
			label5.SetValue(Label.TextProperty, "SA72V150_418_1_697");
			label5.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			label5.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty5 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
			Type typeFromHandle9 = typeof(IProvideValueTarget);
			object[] array5 = new object[0 + 8];
			array5[0] = label5;
			array5[1] = stackLayout2;
			array5[2] = grid;
			array5[3] = grid2;
			array5[4] = stackLayout6;
			array5[5] = scrollView;
			array5[6] = grid9;
			array5[7] = proBmsPage;
			object service5;
			xamlServiceProvider5.Add(typeFromHandle9, service5 = new SimpleValueTargetProvider(array5, Label.FontSizeProperty, nameScope));
			xamlServiceProvider5.Add(typeof(IReferenceProvider), service5);
			Type typeFromHandle10 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
			xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(33, 125)));
			label5.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider5));
			label5.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout2.Children.Add(label5);
			grid.Children.Add(stackLayout2);
			stackLayout3.SetValue(Grid.RowProperty, 2);
			stackLayout3.SetValue(Grid.ColumnProperty, 0);
			stackLayout3.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout3.SetValue(StackLayout.SpacingProperty, 10.0);
			stackLayout3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			stackLayout3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label6.SetValue(Label.TextProperty, "µÁ—π/π¶¬ ");
			label6.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
			Type typeFromHandle11 = typeof(IProvideValueTarget);
			object[] array6 = new object[0 + 8];
			array6[0] = label6;
			array6[1] = stackLayout3;
			array6[2] = grid;
			array6[3] = grid2;
			array6[4] = stackLayout6;
			array6[5] = scrollView;
			array6[6] = grid9;
			array6[7] = proBmsPage;
			object service6;
			xamlServiceProvider6.Add(typeFromHandle11, service6 = new SimpleValueTargetProvider(array6, Label.FontSizeProperty, nameScope));
			xamlServiceProvider6.Add(typeof(IReferenceProvider), service6);
			Type typeFromHandle12 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
			xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(36, 95)));
			label6.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider6));
			label6.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label6.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout3.Children.Add(label6);
			label7.SetValue(Label.TextProperty, "72V/5KW");
			label7.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty7 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
			Type typeFromHandle13 = typeof(IProvideValueTarget);
			object[] array7 = new object[0 + 8];
			array7[0] = label7;
			array7[1] = stackLayout3;
			array7[2] = grid;
			array7[3] = grid2;
			array7[4] = stackLayout6;
			array7[5] = scrollView;
			array7[6] = grid9;
			array7[7] = proBmsPage;
			object service7;
			xamlServiceProvider7.Add(typeFromHandle13, service7 = new SimpleValueTargetProvider(array7, Label.FontSizeProperty, nameScope));
			xamlServiceProvider7.Add(typeof(IReferenceProvider), service7);
			Type typeFromHandle14 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
			xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(37, 93)));
			label7.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider7));
			label7.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label7.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout3.Children.Add(label7);
			grid.Children.Add(stackLayout3);
			stackLayout4.SetValue(Grid.RowProperty, 3);
			stackLayout4.SetValue(Grid.ColumnProperty, 0);
			stackLayout4.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout4.SetValue(StackLayout.SpacingProperty, 10.0);
			stackLayout4.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			stackLayout4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label8.SetValue(Label.TextProperty, "œﬂµÁ¡˜/œ‡µÁ¡˜");
			label8.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
			Type typeFromHandle15 = typeof(IProvideValueTarget);
			object[] array8 = new object[0 + 8];
			array8[0] = label8;
			array8[1] = stackLayout4;
			array8[2] = grid;
			array8[3] = grid2;
			array8[4] = stackLayout6;
			array8[5] = scrollView;
			array8[6] = grid9;
			array8[7] = proBmsPage;
			object service8;
			xamlServiceProvider8.Add(typeFromHandle15, service8 = new SimpleValueTargetProvider(array8, Label.FontSizeProperty, nameScope));
			xamlServiceProvider8.Add(typeof(IReferenceProvider), service8);
			Type typeFromHandle16 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
			xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(40, 96)));
			label8.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider8));
			label8.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label8.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label8.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout4.Children.Add(label8);
			label9.SetValue(Label.TextProperty, "100A/300A");
			label9.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty9 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter9 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
			Type typeFromHandle17 = typeof(IProvideValueTarget);
			object[] array9 = new object[0 + 8];
			array9[0] = label9;
			array9[1] = stackLayout4;
			array9[2] = grid;
			array9[3] = grid2;
			array9[4] = stackLayout6;
			array9[5] = scrollView;
			array9[6] = grid9;
			array9[7] = proBmsPage;
			object service9;
			xamlServiceProvider9.Add(typeFromHandle17, service9 = new SimpleValueTargetProvider(array9, Label.FontSizeProperty, nameScope));
			xamlServiceProvider9.Add(typeof(IReferenceProvider), service9);
			Type typeFromHandle18 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
			xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(41, 94)));
			label9.SetValue(fontSizeProperty9, ((IExtendedTypeConverter)fontSizeConverter9).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider9));
			label9.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label9.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label9.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout4.Children.Add(label9);
			grid.Children.Add(stackLayout4);
			grid2.Children.Add(grid);
			stackLayout6.Children.Add(grid2);
			stackLayout5.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout5.SetValue(StackLayout.SpacingProperty, 10.0);
			stackLayout5.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			stackLayout5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label10.SetValue(Label.TextProperty, "±‡∫≈");
			label10.SetValue(Label.TextColorProperty, Color.Black);
			label10.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty10 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter10 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
			Type typeFromHandle19 = typeof(IProvideValueTarget);
			object[] array10 = new object[0 + 6];
			array10[0] = label10;
			array10[1] = stackLayout5;
			array10[2] = stackLayout6;
			array10[3] = scrollView;
			array10[4] = grid9;
			array10[5] = proBmsPage;
			object service10;
			xamlServiceProvider10.Add(typeFromHandle19, service10 = new SimpleValueTargetProvider(array10, Label.FontSizeProperty, nameScope));
			xamlServiceProvider10.Add(typeof(IReferenceProvider), service10);
			Type typeFromHandle20 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
			xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(46, 105)));
			label10.SetValue(fontSizeProperty10, ((IExtendedTypeConverter)fontSizeConverter10).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider10));
			label10.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label10.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label10.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout5.Children.Add(label10);
			stackLayout6.Children.Add(stackLayout5);
			button.Clicked += proBmsPage.RowText1_Clicked_1;
			button.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 4000.0);
			button.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button.SetValue(Xamarin.Forms.Button.TextProperty, "»’∆⁄ ±º‰");
			button.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty11 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter11 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
			Type typeFromHandle21 = typeof(IProvideValueTarget);
			object[] array11 = new object[0 + 5];
			array11[0] = button;
			array11[1] = stackLayout6;
			array11[2] = scrollView;
			array11[3] = grid9;
			array11[4] = proBmsPage;
			object service11;
			xamlServiceProvider11.Add(typeFromHandle21, service11 = new SimpleValueTargetProvider(array11, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider11.Add(typeof(IReferenceProvider), service11);
			Type typeFromHandle22 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
			xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(48, 189)));
			button.SetValue(fontSizeProperty11, ((IExtendedTypeConverter)fontSizeConverter11).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider11));
			button.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			stackLayout6.Children.Add(button);
			grid3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			columnDefinition3.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition3);
			columnDefinition4.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition4);
			label11.SetValue(Label.TextProperty, "»’∆⁄");
			label11.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label11.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label11.SetValue(Grid.RowProperty, 0);
			label11.SetValue(Grid.ColumnProperty, 0);
			label11.SetValue(Label.TextColorProperty, Color.DarkGray);
			BindableProperty fontSizeProperty12 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter12 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
			Type typeFromHandle23 = typeof(IProvideValueTarget);
			object[] array12 = new object[0 + 6];
			array12[0] = label11;
			array12[1] = grid3;
			array12[2] = stackLayout6;
			array12[3] = scrollView;
			array12[4] = grid9;
			array12[5] = proBmsPage;
			object service12;
			xamlServiceProvider12.Add(typeFromHandle23, service12 = new SimpleValueTargetProvider(array12, Label.FontSizeProperty, nameScope));
			xamlServiceProvider12.Add(typeof(IReferenceProvider), service12);
			Type typeFromHandle24 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
			xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(54, 163)));
			label11.SetValue(fontSizeProperty12, ((IExtendedTypeConverter)fontSizeConverter12).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider12));
			label11.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label11.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label11.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid3.Children.Add(label11);
			label12.SetValue(Label.TextProperty, " ±º‰");
			label12.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label12.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label12.SetValue(Grid.RowProperty, 0);
			label12.SetValue(Grid.ColumnProperty, 1);
			label12.SetValue(Label.TextColorProperty, Color.DarkGray);
			BindableProperty fontSizeProperty13 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter13 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
			Type typeFromHandle25 = typeof(IProvideValueTarget);
			object[] array13 = new object[0 + 6];
			array13[0] = label12;
			array13[1] = grid3;
			array13[2] = stackLayout6;
			array13[3] = scrollView;
			array13[4] = grid9;
			array13[5] = proBmsPage;
			object service13;
			xamlServiceProvider13.Add(typeFromHandle25, service13 = new SimpleValueTargetProvider(array13, Label.FontSizeProperty, nameScope));
			xamlServiceProvider13.Add(typeof(IReferenceProvider), service13);
			Type typeFromHandle26 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
			xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(55, 162)));
			label12.SetValue(fontSizeProperty13, ((IExtendedTypeConverter)fontSizeConverter13).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider13));
			label12.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label12.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label12.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid3.Children.Add(label12);
			stackLayout6.Children.Add(grid3);
			button2.Clicked += proBmsPage.RowText2_Clicked;
			button2.SetValue(Xamarin.Forms.Button.TextProperty, "≤Œ ˝");
			button2.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty14 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter14 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
			Type typeFromHandle27 = typeof(IProvideValueTarget);
			object[] array14 = new object[0 + 5];
			array14[0] = button2;
			array14[1] = stackLayout6;
			array14[2] = scrollView;
			array14[3] = grid9;
			array14[4] = proBmsPage;
			object service14;
			xamlServiceProvider14.Add(typeFromHandle27, service14 = new SimpleValueTargetProvider(array14, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider14.Add(typeof(IReferenceProvider), service14);
			Type typeFromHandle28 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
			xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(58, 109)));
			button2.SetValue(fontSizeProperty14, ((IExtendedTypeConverter)fontSizeConverter14).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider14));
			button2.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(button2);
			grid4.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition7.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid4.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition7);
			rowDefinition8.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid4.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition8);
			rowDefinition9.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid4.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition9);
			rowDefinition10.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid4.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition10);
			rowDefinition11.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid4.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition11);
			rowDefinition12.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid4.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition12);
			columnDefinition5.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid4.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition5);
			columnDefinition6.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid4.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition6);
			label13.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label13.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label13.SetValue(Label.TextProperty, "æ˘∫‚∆Ù∂ØµÁ—π: 0.000V");
			label13.SetValue(Grid.RowProperty, 0);
			label13.SetValue(Grid.ColumnProperty, 0);
			label13.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty15 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter15 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider15 = new XamlServiceProvider();
			Type typeFromHandle29 = typeof(IProvideValueTarget);
			object[] array15 = new object[0 + 6];
			array15[0] = label13;
			array15[1] = grid4;
			array15[2] = stackLayout6;
			array15[3] = scrollView;
			array15[4] = grid9;
			array15[5] = proBmsPage;
			object service15;
			xamlServiceProvider15.Add(typeFromHandle29, service15 = new SimpleValueTargetProvider(array15, Label.FontSizeProperty, nameScope));
			xamlServiceProvider15.Add(typeof(IReferenceProvider), service15);
			Type typeFromHandle30 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver15 = new XmlNamespaceResolver();
			xmlNamespaceResolver15.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver15.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider15.Add(typeFromHandle30, new XamlTypeResolver(xmlNamespaceResolver15, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider15.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(73, 177)));
			label13.SetValue(fontSizeProperty15, ((IExtendedTypeConverter)fontSizeConverter15).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider15));
			label13.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label13.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label13.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label13);
			label14.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label14.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label14.SetValue(Label.TextProperty, "æ˘∫‚º´œﬁµÁ—π: 0.000V");
			label14.SetValue(Grid.RowProperty, 0);
			label14.SetValue(Grid.ColumnProperty, 1);
			label14.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty16 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter16 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider16 = new XamlServiceProvider();
			Type typeFromHandle31 = typeof(IProvideValueTarget);
			object[] array16 = new object[0 + 6];
			array16[0] = label14;
			array16[1] = grid4;
			array16[2] = stackLayout6;
			array16[3] = scrollView;
			array16[4] = grid9;
			array16[5] = proBmsPage;
			object service16;
			xamlServiceProvider16.Add(typeFromHandle31, service16 = new SimpleValueTargetProvider(array16, Label.FontSizeProperty, nameScope));
			xamlServiceProvider16.Add(typeof(IReferenceProvider), service16);
			Type typeFromHandle32 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver16 = new XmlNamespaceResolver();
			xmlNamespaceResolver16.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver16.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider16.Add(typeFromHandle32, new XamlTypeResolver(xmlNamespaceResolver16, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider16.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(74, 178)));
			label14.SetValue(fontSizeProperty16, ((IExtendedTypeConverter)fontSizeConverter16).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider16));
			label14.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label14.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label14.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label14);
			label15.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label15.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label15.SetValue(Label.TextProperty, "æ˘∫‚—π≤Ó: 0.000V");
			label15.SetValue(Grid.RowProperty, 1);
			label15.SetValue(Grid.ColumnProperty, 0);
			label15.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty17 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter17 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider17 = new XamlServiceProvider();
			Type typeFromHandle33 = typeof(IProvideValueTarget);
			object[] array17 = new object[0 + 6];
			array17[0] = label15;
			array17[1] = grid4;
			array17[2] = stackLayout6;
			array17[3] = scrollView;
			array17[4] = grid9;
			array17[5] = proBmsPage;
			object service17;
			xamlServiceProvider17.Add(typeFromHandle33, service17 = new SimpleValueTargetProvider(array17, Label.FontSizeProperty, nameScope));
			xamlServiceProvider17.Add(typeof(IReferenceProvider), service17);
			Type typeFromHandle34 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver17 = new XmlNamespaceResolver();
			xmlNamespaceResolver17.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver17.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider17.Add(typeFromHandle34, new XamlTypeResolver(xmlNamespaceResolver17, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider17.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(75, 176)));
			label15.SetValue(fontSizeProperty17, ((IExtendedTypeConverter)fontSizeConverter17).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider17));
			label15.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label15.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label15.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label15);
			label16.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label16.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label16.SetValue(Label.TextProperty, "µÁ≥ÿ»›¡ø: 00.00Ah");
			label16.SetValue(Grid.RowProperty, 2);
			label16.SetValue(Grid.ColumnProperty, 0);
			label16.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty18 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter18 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider18 = new XamlServiceProvider();
			Type typeFromHandle35 = typeof(IProvideValueTarget);
			object[] array18 = new object[0 + 6];
			array18[0] = label16;
			array18[1] = grid4;
			array18[2] = stackLayout6;
			array18[3] = scrollView;
			array18[4] = grid9;
			array18[5] = proBmsPage;
			object service18;
			xamlServiceProvider18.Add(typeFromHandle35, service18 = new SimpleValueTargetProvider(array18, Label.FontSizeProperty, nameScope));
			xamlServiceProvider18.Add(typeof(IReferenceProvider), service18);
			Type typeFromHandle36 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver18 = new XmlNamespaceResolver();
			xmlNamespaceResolver18.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver18.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider18.Add(typeFromHandle36, new XamlTypeResolver(xmlNamespaceResolver18, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider18.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(76, 176)));
			label16.SetValue(fontSizeProperty18, ((IExtendedTypeConverter)fontSizeConverter18).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider18));
			label16.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label16.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label16.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label16);
			label17.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label17.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label17.SetValue(Label.TextProperty, "◊‘∂Ø¥˝ª˙ ±º‰: 000s");
			label17.SetValue(Grid.RowProperty, 2);
			label17.SetValue(Grid.ColumnProperty, 1);
			label17.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty19 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter19 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider19 = new XamlServiceProvider();
			Type typeFromHandle37 = typeof(IProvideValueTarget);
			object[] array19 = new object[0 + 6];
			array19[0] = label17;
			array19[1] = grid4;
			array19[2] = stackLayout6;
			array19[3] = scrollView;
			array19[4] = grid9;
			array19[5] = proBmsPage;
			object service19;
			xamlServiceProvider19.Add(typeFromHandle37, service19 = new SimpleValueTargetProvider(array19, Label.FontSizeProperty, nameScope));
			xamlServiceProvider19.Add(typeof(IReferenceProvider), service19);
			Type typeFromHandle38 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver19 = new XmlNamespaceResolver();
			xmlNamespaceResolver19.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver19.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider19.Add(typeFromHandle38, new XamlTypeResolver(xmlNamespaceResolver19, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider19.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(77, 173)));
			label17.SetValue(fontSizeProperty19, ((IExtendedTypeConverter)fontSizeConverter19).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider19));
			label17.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label17.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label17.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label17);
			label18.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label18.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label18.SetValue(Label.TextProperty, "∂Ó∂®µÁ—π: 000V");
			label18.SetValue(Grid.RowProperty, 3);
			label18.SetValue(Grid.ColumnProperty, 0);
			label18.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty20 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter20 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider20 = new XamlServiceProvider();
			Type typeFromHandle39 = typeof(IProvideValueTarget);
			object[] array20 = new object[0 + 6];
			array20[0] = label18;
			array20[1] = grid4;
			array20[2] = stackLayout6;
			array20[3] = scrollView;
			array20[4] = grid9;
			array20[5] = proBmsPage;
			object service20;
			xamlServiceProvider20.Add(typeFromHandle39, service20 = new SimpleValueTargetProvider(array20, Label.FontSizeProperty, nameScope));
			xamlServiceProvider20.Add(typeof(IReferenceProvider), service20);
			Type typeFromHandle40 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver20 = new XmlNamespaceResolver();
			xmlNamespaceResolver20.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver20.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider20.Add(typeFromHandle40, new XamlTypeResolver(xmlNamespaceResolver20, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider20.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(78, 172)));
			label18.SetValue(fontSizeProperty20, ((IExtendedTypeConverter)fontSizeConverter20).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider20));
			label18.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label18.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label18.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label18);
			label19.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label19.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label19.SetValue(Label.TextProperty, "¥Æ ˝: 00");
			label19.SetValue(Grid.RowProperty, 3);
			label19.SetValue(Grid.ColumnProperty, 1);
			label19.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty21 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter21 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider21 = new XamlServiceProvider();
			Type typeFromHandle41 = typeof(IProvideValueTarget);
			object[] array21 = new object[0 + 6];
			array21[0] = label19;
			array21[1] = grid4;
			array21[2] = stackLayout6;
			array21[3] = scrollView;
			array21[4] = grid9;
			array21[5] = proBmsPage;
			object service21;
			xamlServiceProvider21.Add(typeFromHandle41, service21 = new SimpleValueTargetProvider(array21, Label.FontSizeProperty, nameScope));
			xamlServiceProvider21.Add(typeof(IReferenceProvider), service21);
			Type typeFromHandle42 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver21 = new XmlNamespaceResolver();
			xmlNamespaceResolver21.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver21.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider21.Add(typeFromHandle42, new XamlTypeResolver(xmlNamespaceResolver21, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider21.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(79, 160)));
			label19.SetValue(fontSizeProperty21, ((IExtendedTypeConverter)fontSizeConverter21).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider21));
			label19.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label19.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label19.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label19);
			label20.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label20.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label20.SetValue(Label.TextProperty, "◊Ó¥Û∑≈µÁµÁ¡˜: 000.0A");
			label20.SetValue(Grid.RowProperty, 4);
			label20.SetValue(Grid.ColumnProperty, 0);
			label20.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty22 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter22 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider22 = new XamlServiceProvider();
			Type typeFromHandle43 = typeof(IProvideValueTarget);
			object[] array22 = new object[0 + 6];
			array22[0] = label20;
			array22[1] = grid4;
			array22[2] = stackLayout6;
			array22[3] = scrollView;
			array22[4] = grid9;
			array22[5] = proBmsPage;
			object service22;
			xamlServiceProvider22.Add(typeFromHandle43, service22 = new SimpleValueTargetProvider(array22, Label.FontSizeProperty, nameScope));
			xamlServiceProvider22.Add(typeof(IReferenceProvider), service22);
			Type typeFromHandle44 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver22 = new XmlNamespaceResolver();
			xmlNamespaceResolver22.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver22.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider22.Add(typeFromHandle44, new XamlTypeResolver(xmlNamespaceResolver22, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider22.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(80, 172)));
			label20.SetValue(fontSizeProperty22, ((IExtendedTypeConverter)fontSizeConverter22).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider22));
			label20.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label20.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label20.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label20);
			label21.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label21.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label21.SetValue(Label.TextProperty, "∑≈µÁ±£ª§—” ±: 000s");
			label21.SetValue(Grid.RowProperty, 4);
			label21.SetValue(Grid.ColumnProperty, 1);
			label21.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty23 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter23 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider23 = new XamlServiceProvider();
			Type typeFromHandle45 = typeof(IProvideValueTarget);
			object[] array23 = new object[0 + 6];
			array23[0] = label21;
			array23[1] = grid4;
			array23[2] = stackLayout6;
			array23[3] = scrollView;
			array23[4] = grid9;
			array23[5] = proBmsPage;
			object service23;
			xamlServiceProvider23.Add(typeFromHandle45, service23 = new SimpleValueTargetProvider(array23, Label.FontSizeProperty, nameScope));
			xamlServiceProvider23.Add(typeof(IReferenceProvider), service23);
			Type typeFromHandle46 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver23 = new XmlNamespaceResolver();
			xmlNamespaceResolver23.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver23.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider23.Add(typeFromHandle46, new XamlTypeResolver(xmlNamespaceResolver23, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider23.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(81, 174)));
			label21.SetValue(fontSizeProperty23, ((IExtendedTypeConverter)fontSizeConverter23).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider23));
			label21.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label21.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label21.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label21);
			label22.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label22.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label22.SetValue(Label.TextProperty, "◊Ó¥Û≥‰µÁµÁ¡˜: 000.0A");
			label22.SetValue(Grid.RowProperty, 5);
			label22.SetValue(Grid.ColumnProperty, 0);
			label22.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty24 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter24 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider24 = new XamlServiceProvider();
			Type typeFromHandle47 = typeof(IProvideValueTarget);
			object[] array24 = new object[0 + 6];
			array24[0] = label22;
			array24[1] = grid4;
			array24[2] = stackLayout6;
			array24[3] = scrollView;
			array24[4] = grid9;
			array24[5] = proBmsPage;
			object service24;
			xamlServiceProvider24.Add(typeFromHandle47, service24 = new SimpleValueTargetProvider(array24, Label.FontSizeProperty, nameScope));
			xamlServiceProvider24.Add(typeof(IReferenceProvider), service24);
			Type typeFromHandle48 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver24 = new XmlNamespaceResolver();
			xmlNamespaceResolver24.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver24.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider24.Add(typeFromHandle48, new XamlTypeResolver(xmlNamespaceResolver24, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider24.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(82, 172)));
			label22.SetValue(fontSizeProperty24, ((IExtendedTypeConverter)fontSizeConverter24).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider24));
			label22.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label22.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label22.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label22);
			label23.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label23.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label23.SetValue(Label.TextProperty, "≥‰µÁ±£ª§—” ±: 000s");
			label23.SetValue(Grid.RowProperty, 5);
			label23.SetValue(Grid.ColumnProperty, 1);
			label23.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty25 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter25 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider25 = new XamlServiceProvider();
			Type typeFromHandle49 = typeof(IProvideValueTarget);
			object[] array25 = new object[0 + 6];
			array25[0] = label23;
			array25[1] = grid4;
			array25[2] = stackLayout6;
			array25[3] = scrollView;
			array25[4] = grid9;
			array25[5] = proBmsPage;
			object service25;
			xamlServiceProvider25.Add(typeFromHandle49, service25 = new SimpleValueTargetProvider(array25, Label.FontSizeProperty, nameScope));
			xamlServiceProvider25.Add(typeof(IReferenceProvider), service25);
			Type typeFromHandle50 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver25 = new XmlNamespaceResolver();
			xmlNamespaceResolver25.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver25.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider25.Add(typeFromHandle50, new XamlTypeResolver(xmlNamespaceResolver25, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider25.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(83, 174)));
			label23.SetValue(fontSizeProperty25, ((IExtendedTypeConverter)fontSizeConverter25).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider25));
			label23.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label23.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label23.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label23);
			button3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button3.Clicked += proBmsPage.BalanceStartVol_TextChanged;
			button3.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button3.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button3.SetValue(Grid.RowProperty, 0);
			button3.SetValue(Grid.ColumnProperty, 0);
			button3.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty26 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter26 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider26 = new XamlServiceProvider();
			Type typeFromHandle51 = typeof(IProvideValueTarget);
			object[] array26 = new object[0 + 6];
			array26[0] = button3;
			array26[1] = grid4;
			array26[2] = stackLayout6;
			array26[3] = scrollView;
			array26[4] = grid9;
			array26[5] = proBmsPage;
			object service26;
			xamlServiceProvider26.Add(typeFromHandle51, service26 = new SimpleValueTargetProvider(array26, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider26.Add(typeof(IReferenceProvider), service26);
			Type typeFromHandle52 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver26 = new XmlNamespaceResolver();
			xmlNamespaceResolver26.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver26.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider26.Add(typeFromHandle52, new XamlTypeResolver(xmlNamespaceResolver26, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider26.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(85, 190)));
			button3.SetValue(fontSizeProperty26, ((IExtendedTypeConverter)fontSizeConverter26).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider26));
			button3.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(button3);
			button4.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button4.Clicked += proBmsPage.BalanceLimitVol_TextChanged;
			button4.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button4.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button4.SetValue(Grid.RowProperty, 0);
			button4.SetValue(Grid.ColumnProperty, 1);
			button4.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty27 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter27 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider27 = new XamlServiceProvider();
			Type typeFromHandle53 = typeof(IProvideValueTarget);
			object[] array27 = new object[0 + 6];
			array27[0] = button4;
			array27[1] = grid4;
			array27[2] = stackLayout6;
			array27[3] = scrollView;
			array27[4] = grid9;
			array27[5] = proBmsPage;
			object service27;
			xamlServiceProvider27.Add(typeFromHandle53, service27 = new SimpleValueTargetProvider(array27, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider27.Add(typeof(IReferenceProvider), service27);
			Type typeFromHandle54 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver27 = new XmlNamespaceResolver();
			xmlNamespaceResolver27.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver27.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider27.Add(typeFromHandle54, new XamlTypeResolver(xmlNamespaceResolver27, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider27.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(86, 191)));
			button4.SetValue(fontSizeProperty27, ((IExtendedTypeConverter)fontSizeConverter27).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider27));
			button4.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(button4);
			button5.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button5.Clicked += proBmsPage.BalanceDeltaVol_TextChanged;
			button5.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button5.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button5.SetValue(Grid.RowProperty, 1);
			button5.SetValue(Grid.ColumnProperty, 0);
			button5.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty28 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter28 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider28 = new XamlServiceProvider();
			Type typeFromHandle55 = typeof(IProvideValueTarget);
			object[] array28 = new object[0 + 6];
			array28[0] = button5;
			array28[1] = grid4;
			array28[2] = stackLayout6;
			array28[3] = scrollView;
			array28[4] = grid9;
			array28[5] = proBmsPage;
			object service28;
			xamlServiceProvider28.Add(typeFromHandle55, service28 = new SimpleValueTargetProvider(array28, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider28.Add(typeof(IReferenceProvider), service28);
			Type typeFromHandle56 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver28 = new XmlNamespaceResolver();
			xmlNamespaceResolver28.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver28.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider28.Add(typeFromHandle56, new XamlTypeResolver(xmlNamespaceResolver28, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider28.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(87, 191)));
			button5.SetValue(fontSizeProperty28, ((IExtendedTypeConverter)fontSizeConverter28).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider28));
			button5.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(button5);
			button6.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button6.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button6.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button6.Clicked += proBmsPage.BattRatedCap_TextChanged;
			button6.SetValue(Grid.RowProperty, 2);
			button6.SetValue(Grid.ColumnProperty, 0);
			button6.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty29 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter29 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider29 = new XamlServiceProvider();
			Type typeFromHandle57 = typeof(IProvideValueTarget);
			object[] array29 = new object[0 + 6];
			array29[0] = button6;
			array29[1] = grid4;
			array29[2] = stackLayout6;
			array29[3] = scrollView;
			array29[4] = grid9;
			array29[5] = proBmsPage;
			object service29;
			xamlServiceProvider29.Add(typeFromHandle57, service29 = new SimpleValueTargetProvider(array29, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider29.Add(typeof(IReferenceProvider), service29);
			Type typeFromHandle58 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver29 = new XmlNamespaceResolver();
			xmlNamespaceResolver29.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver29.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider29.Add(typeFromHandle58, new XamlTypeResolver(xmlNamespaceResolver29, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider29.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(89, 187)));
			button6.SetValue(fontSizeProperty29, ((IExtendedTypeConverter)fontSizeConverter29).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider29));
			button6.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button6.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(button6);
			button7.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button7.Clicked += proBmsPage.AutoDownTime_TextChanged;
			button7.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button7.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button7.SetValue(Grid.RowProperty, 2);
			button7.SetValue(Grid.ColumnProperty, 1);
			button7.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty30 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter30 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider30 = new XamlServiceProvider();
			Type typeFromHandle59 = typeof(IProvideValueTarget);
			object[] array30 = new object[0 + 6];
			array30[0] = button7;
			array30[1] = grid4;
			array30[2] = stackLayout6;
			array30[3] = scrollView;
			array30[4] = grid9;
			array30[5] = proBmsPage;
			object service30;
			xamlServiceProvider30.Add(typeFromHandle59, service30 = new SimpleValueTargetProvider(array30, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider30.Add(typeof(IReferenceProvider), service30);
			Type typeFromHandle60 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver30 = new XmlNamespaceResolver();
			xmlNamespaceResolver30.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver30.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider30.Add(typeFromHandle60, new XamlTypeResolver(xmlNamespaceResolver30, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider30.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(90, 187)));
			button7.SetValue(fontSizeProperty30, ((IExtendedTypeConverter)fontSizeConverter30).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider30));
			button7.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button7.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(button7);
			button8.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button8.Clicked += proBmsPage.RadVoltage2_TextChanged;
			button8.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button8.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button8.SetValue(Grid.RowProperty, 3);
			button8.SetValue(Grid.ColumnProperty, 0);
			button8.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty31 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter31 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider31 = new XamlServiceProvider();
			Type typeFromHandle61 = typeof(IProvideValueTarget);
			object[] array31 = new object[0 + 6];
			array31[0] = button8;
			array31[1] = grid4;
			array31[2] = stackLayout6;
			array31[3] = scrollView;
			array31[4] = grid9;
			array31[5] = proBmsPage;
			object service31;
			xamlServiceProvider31.Add(typeFromHandle61, service31 = new SimpleValueTargetProvider(array31, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider31.Add(typeof(IReferenceProvider), service31);
			Type typeFromHandle62 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver31 = new XmlNamespaceResolver();
			xmlNamespaceResolver31.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver31.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider31.Add(typeFromHandle62, new XamlTypeResolver(xmlNamespaceResolver31, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider31.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(91, 186)));
			button8.SetValue(fontSizeProperty31, ((IExtendedTypeConverter)fontSizeConverter31).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider31));
			button8.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button8.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button8.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(button8);
			button9.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button9.Clicked += proBmsPage.Series_TextChanged;
			button9.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button9.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button9.SetValue(Grid.RowProperty, 3);
			button9.SetValue(Grid.ColumnProperty, 1);
			button9.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty32 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter32 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider32 = new XamlServiceProvider();
			Type typeFromHandle63 = typeof(IProvideValueTarget);
			object[] array32 = new object[0 + 6];
			array32[0] = button9;
			array32[1] = grid4;
			array32[2] = stackLayout6;
			array32[3] = scrollView;
			array32[4] = grid9;
			array32[5] = proBmsPage;
			object service32;
			xamlServiceProvider32.Add(typeFromHandle63, service32 = new SimpleValueTargetProvider(array32, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider32.Add(typeof(IReferenceProvider), service32);
			Type typeFromHandle64 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver32 = new XmlNamespaceResolver();
			xmlNamespaceResolver32.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver32.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider32.Add(typeFromHandle64, new XamlTypeResolver(xmlNamespaceResolver32, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider32.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(92, 181)));
			button9.SetValue(fontSizeProperty32, ((IExtendedTypeConverter)fontSizeConverter32).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider32));
			button9.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button9.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button9.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(button9);
			button10.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button10.Clicked += proBmsPage.MaxDSGCurr_TextChanged;
			button10.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button10.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button10.SetValue(Grid.RowProperty, 4);
			button10.SetValue(Grid.ColumnProperty, 0);
			button10.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty33 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter33 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider33 = new XamlServiceProvider();
			Type typeFromHandle65 = typeof(IProvideValueTarget);
			object[] array33 = new object[0 + 6];
			array33[0] = button10;
			array33[1] = grid4;
			array33[2] = stackLayout6;
			array33[3] = scrollView;
			array33[4] = grid9;
			array33[5] = proBmsPage;
			object service33;
			xamlServiceProvider33.Add(typeFromHandle65, service33 = new SimpleValueTargetProvider(array33, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider33.Add(typeof(IReferenceProvider), service33);
			Type typeFromHandle66 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver33 = new XmlNamespaceResolver();
			xmlNamespaceResolver33.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver33.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider33.Add(typeFromHandle66, new XamlTypeResolver(xmlNamespaceResolver33, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider33.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(93, 185)));
			button10.SetValue(fontSizeProperty33, ((IExtendedTypeConverter)fontSizeConverter33).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider33));
			button10.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button10.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button10.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(button10);
			button11.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button11.Clicked += proBmsPage.MaxDSGCurrTime_TextChanged;
			button11.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button11.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button11.SetValue(Grid.RowProperty, 4);
			button11.SetValue(Grid.ColumnProperty, 1);
			button11.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty34 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter34 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider34 = new XamlServiceProvider();
			Type typeFromHandle67 = typeof(IProvideValueTarget);
			object[] array34 = new object[0 + 6];
			array34[0] = button11;
			array34[1] = grid4;
			array34[2] = stackLayout6;
			array34[3] = scrollView;
			array34[4] = grid9;
			array34[5] = proBmsPage;
			object service34;
			xamlServiceProvider34.Add(typeFromHandle67, service34 = new SimpleValueTargetProvider(array34, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider34.Add(typeof(IReferenceProvider), service34);
			Type typeFromHandle68 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver34 = new XmlNamespaceResolver();
			xmlNamespaceResolver34.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver34.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider34.Add(typeFromHandle68, new XamlTypeResolver(xmlNamespaceResolver34, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider34.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(94, 189)));
			button11.SetValue(fontSizeProperty34, ((IExtendedTypeConverter)fontSizeConverter34).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider34));
			button11.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button11.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button11.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(button11);
			button12.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button12.Clicked += proBmsPage.MaxCHGCurr_TextChanged;
			button12.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button12.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button12.SetValue(Grid.RowProperty, 5);
			button12.SetValue(Grid.ColumnProperty, 0);
			button12.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty35 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter35 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider35 = new XamlServiceProvider();
			Type typeFromHandle69 = typeof(IProvideValueTarget);
			object[] array35 = new object[0 + 6];
			array35[0] = button12;
			array35[1] = grid4;
			array35[2] = stackLayout6;
			array35[3] = scrollView;
			array35[4] = grid9;
			array35[5] = proBmsPage;
			object service35;
			xamlServiceProvider35.Add(typeFromHandle69, service35 = new SimpleValueTargetProvider(array35, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider35.Add(typeof(IReferenceProvider), service35);
			Type typeFromHandle70 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver35 = new XmlNamespaceResolver();
			xmlNamespaceResolver35.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver35.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider35.Add(typeFromHandle70, new XamlTypeResolver(xmlNamespaceResolver35, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider35.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(95, 185)));
			button12.SetValue(fontSizeProperty35, ((IExtendedTypeConverter)fontSizeConverter35).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider35));
			button12.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button12.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button12.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(button12);
			button13.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button13.Clicked += proBmsPage.MaxCHGCurrTime_TextChanged;
			button13.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button13.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button13.SetValue(Grid.RowProperty, 5);
			button13.SetValue(Grid.ColumnProperty, 1);
			button13.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty36 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter36 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider36 = new XamlServiceProvider();
			Type typeFromHandle71 = typeof(IProvideValueTarget);
			object[] array36 = new object[0 + 6];
			array36[0] = button13;
			array36[1] = grid4;
			array36[2] = stackLayout6;
			array36[3] = scrollView;
			array36[4] = grid9;
			array36[5] = proBmsPage;
			object service36;
			xamlServiceProvider36.Add(typeFromHandle71, service36 = new SimpleValueTargetProvider(array36, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider36.Add(typeof(IReferenceProvider), service36);
			Type typeFromHandle72 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver36 = new XmlNamespaceResolver();
			xmlNamespaceResolver36.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver36.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider36.Add(typeFromHandle72, new XamlTypeResolver(xmlNamespaceResolver36, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider36.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(96, 189)));
			button13.SetValue(fontSizeProperty36, ((IExtendedTypeConverter)fontSizeConverter36).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider36));
			button13.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button13.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button13.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(button13);
			stackLayout6.Children.Add(grid4);
			button14.Clicked += proBmsPage.RowTextBMSR_Clicked;
			button14.SetValue(Xamarin.Forms.Button.TextProperty, "¡¨Ω”ƒ⁄◊Ë");
			button14.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty37 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter37 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider37 = new XamlServiceProvider();
			Type typeFromHandle73 = typeof(IProvideValueTarget);
			object[] array37 = new object[0 + 5];
			array37[0] = button14;
			array37[1] = stackLayout6;
			array37[2] = scrollView;
			array37[3] = grid9;
			array37[4] = proBmsPage;
			object service37;
			xamlServiceProvider37.Add(typeFromHandle73, service37 = new SimpleValueTargetProvider(array37, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider37.Add(typeof(IReferenceProvider), service37);
			Type typeFromHandle74 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver37 = new XmlNamespaceResolver();
			xmlNamespaceResolver37.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver37.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider37.Add(typeFromHandle74, new XamlTypeResolver(xmlNamespaceResolver37, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider37.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(98, 117)));
			button14.SetValue(fontSizeProperty37, ((IExtendedTypeConverter)fontSizeConverter37).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider37));
			button14.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button14.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(button14);
			grid5.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition13.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition13);
			rowDefinition14.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition14);
			rowDefinition15.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition15);
			rowDefinition16.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition16);
			rowDefinition17.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition17);
			rowDefinition18.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition18);
			rowDefinition19.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition19);
			rowDefinition20.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition20);
			rowDefinition21.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition21);
			rowDefinition22.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition22);
			rowDefinition23.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition23);
			rowDefinition24.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition24);
			columnDefinition7.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid5.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition7);
			columnDefinition8.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid5.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition8);
			label24.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label24.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label24.SetValue(Label.TextProperty, "500RPM£∫ 000%");
			label24.SetValue(Grid.RowProperty, 0);
			label24.SetValue(Grid.ColumnProperty, 0);
			label24.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty38 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter38 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider38 = new XamlServiceProvider();
			Type typeFromHandle75 = typeof(IProvideValueTarget);
			object[] array38 = new object[0 + 6];
			array38[0] = label24;
			array38[1] = grid5;
			array38[2] = stackLayout6;
			array38[3] = scrollView;
			array38[4] = grid9;
			array38[5] = proBmsPage;
			object service38;
			xamlServiceProvider38.Add(typeFromHandle75, service38 = new SimpleValueTargetProvider(array38, Label.FontSizeProperty, nameScope));
			xamlServiceProvider38.Add(typeof(IReferenceProvider), service38);
			Type typeFromHandle76 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver38 = new XmlNamespaceResolver();
			xmlNamespaceResolver38.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver38.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider38.Add(typeFromHandle76, new XamlTypeResolver(xmlNamespaceResolver38, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider38.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(118, 164)));
			label24.SetValue(fontSizeProperty38, ((IExtendedTypeConverter)fontSizeConverter38).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider38));
			label24.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label24.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label24.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label24);
			label25.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label25.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label25.SetValue(Label.TextProperty, "1000RPM£∫ 000%");
			label25.SetValue(Grid.RowProperty, 0);
			label25.SetValue(Grid.ColumnProperty, 1);
			label25.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty39 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter39 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider39 = new XamlServiceProvider();
			Type typeFromHandle77 = typeof(IProvideValueTarget);
			object[] array39 = new object[0 + 6];
			array39[0] = label25;
			array39[1] = grid5;
			array39[2] = stackLayout6;
			array39[3] = scrollView;
			array39[4] = grid9;
			array39[5] = proBmsPage;
			object service39;
			xamlServiceProvider39.Add(typeFromHandle77, service39 = new SimpleValueTargetProvider(array39, Label.FontSizeProperty, nameScope));
			xamlServiceProvider39.Add(typeof(IReferenceProvider), service39);
			Type typeFromHandle78 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver39 = new XmlNamespaceResolver();
			xmlNamespaceResolver39.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver39.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider39.Add(typeFromHandle78, new XamlTypeResolver(xmlNamespaceResolver39, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider39.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(119, 165)));
			label25.SetValue(fontSizeProperty39, ((IExtendedTypeConverter)fontSizeConverter39).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider39));
			label25.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label25.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label25.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label25);
			label26.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label26.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label26.SetValue(Label.TextProperty, "1500RPM£∫ 000%");
			label26.SetValue(Grid.RowProperty, 1);
			label26.SetValue(Grid.ColumnProperty, 0);
			label26.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty40 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter40 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider40 = new XamlServiceProvider();
			Type typeFromHandle79 = typeof(IProvideValueTarget);
			object[] array40 = new object[0 + 6];
			array40[0] = label26;
			array40[1] = grid5;
			array40[2] = stackLayout6;
			array40[3] = scrollView;
			array40[4] = grid9;
			array40[5] = proBmsPage;
			object service40;
			xamlServiceProvider40.Add(typeFromHandle79, service40 = new SimpleValueTargetProvider(array40, Label.FontSizeProperty, nameScope));
			xamlServiceProvider40.Add(typeof(IReferenceProvider), service40);
			Type typeFromHandle80 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver40 = new XmlNamespaceResolver();
			xmlNamespaceResolver40.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver40.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider40.Add(typeFromHandle80, new XamlTypeResolver(xmlNamespaceResolver40, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider40.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(120, 165)));
			label26.SetValue(fontSizeProperty40, ((IExtendedTypeConverter)fontSizeConverter40).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider40));
			label26.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label26.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label26.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label26);
			label27.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label27.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label27.SetValue(Label.TextProperty, "2000RPM£∫ 000%");
			label27.SetValue(Grid.RowProperty, 1);
			label27.SetValue(Grid.ColumnProperty, 1);
			label27.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty41 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter41 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider41 = new XamlServiceProvider();
			Type typeFromHandle81 = typeof(IProvideValueTarget);
			object[] array41 = new object[0 + 6];
			array41[0] = label27;
			array41[1] = grid5;
			array41[2] = stackLayout6;
			array41[3] = scrollView;
			array41[4] = grid9;
			array41[5] = proBmsPage;
			object service41;
			xamlServiceProvider41.Add(typeFromHandle81, service41 = new SimpleValueTargetProvider(array41, Label.FontSizeProperty, nameScope));
			xamlServiceProvider41.Add(typeof(IReferenceProvider), service41);
			Type typeFromHandle82 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver41 = new XmlNamespaceResolver();
			xmlNamespaceResolver41.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver41.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider41.Add(typeFromHandle82, new XamlTypeResolver(xmlNamespaceResolver41, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider41.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(121, 166)));
			label27.SetValue(fontSizeProperty41, ((IExtendedTypeConverter)fontSizeConverter41).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider41));
			label27.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label27.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label27.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label27);
			label28.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label28.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label28.SetValue(Label.TextProperty, "2500RPM£∫ 000%");
			label28.SetValue(Grid.RowProperty, 2);
			label28.SetValue(Grid.ColumnProperty, 0);
			label28.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty42 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter42 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider42 = new XamlServiceProvider();
			Type typeFromHandle83 = typeof(IProvideValueTarget);
			object[] array42 = new object[0 + 6];
			array42[0] = label28;
			array42[1] = grid5;
			array42[2] = stackLayout6;
			array42[3] = scrollView;
			array42[4] = grid9;
			array42[5] = proBmsPage;
			object service42;
			xamlServiceProvider42.Add(typeFromHandle83, service42 = new SimpleValueTargetProvider(array42, Label.FontSizeProperty, nameScope));
			xamlServiceProvider42.Add(typeof(IReferenceProvider), service42);
			Type typeFromHandle84 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver42 = new XmlNamespaceResolver();
			xmlNamespaceResolver42.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver42.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider42.Add(typeFromHandle84, new XamlTypeResolver(xmlNamespaceResolver42, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider42.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(122, 166)));
			label28.SetValue(fontSizeProperty42, ((IExtendedTypeConverter)fontSizeConverter42).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider42));
			label28.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label28.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label28.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label28);
			label29.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label29.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label29.SetValue(Label.TextProperty, "3000RPM£∫ 000%");
			label29.SetValue(Grid.RowProperty, 2);
			label29.SetValue(Grid.ColumnProperty, 1);
			label29.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty43 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter43 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider43 = new XamlServiceProvider();
			Type typeFromHandle85 = typeof(IProvideValueTarget);
			object[] array43 = new object[0 + 6];
			array43[0] = label29;
			array43[1] = grid5;
			array43[2] = stackLayout6;
			array43[3] = scrollView;
			array43[4] = grid9;
			array43[5] = proBmsPage;
			object service43;
			xamlServiceProvider43.Add(typeFromHandle85, service43 = new SimpleValueTargetProvider(array43, Label.FontSizeProperty, nameScope));
			xamlServiceProvider43.Add(typeof(IReferenceProvider), service43);
			Type typeFromHandle86 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver43 = new XmlNamespaceResolver();
			xmlNamespaceResolver43.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver43.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider43.Add(typeFromHandle86, new XamlTypeResolver(xmlNamespaceResolver43, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider43.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(123, 167)));
			label29.SetValue(fontSizeProperty43, ((IExtendedTypeConverter)fontSizeConverter43).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider43));
			label29.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label29.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label29.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label29);
			label30.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label30.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label30.SetValue(Label.TextProperty, "3500RPM£∫ 000%");
			label30.SetValue(Grid.RowProperty, 3);
			label30.SetValue(Grid.ColumnProperty, 0);
			label30.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty44 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter44 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider44 = new XamlServiceProvider();
			Type typeFromHandle87 = typeof(IProvideValueTarget);
			object[] array44 = new object[0 + 6];
			array44[0] = label30;
			array44[1] = grid5;
			array44[2] = stackLayout6;
			array44[3] = scrollView;
			array44[4] = grid9;
			array44[5] = proBmsPage;
			object service44;
			xamlServiceProvider44.Add(typeFromHandle87, service44 = new SimpleValueTargetProvider(array44, Label.FontSizeProperty, nameScope));
			xamlServiceProvider44.Add(typeof(IReferenceProvider), service44);
			Type typeFromHandle88 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver44 = new XmlNamespaceResolver();
			xmlNamespaceResolver44.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver44.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider44.Add(typeFromHandle88, new XamlTypeResolver(xmlNamespaceResolver44, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider44.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(124, 167)));
			label30.SetValue(fontSizeProperty44, ((IExtendedTypeConverter)fontSizeConverter44).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider44));
			label30.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label30.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label30.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label30);
			label31.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label31.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label31.SetValue(Label.TextProperty, "4000RPM£∫ 000%");
			label31.SetValue(Grid.RowProperty, 3);
			label31.SetValue(Grid.ColumnProperty, 1);
			label31.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty45 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter45 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider45 = new XamlServiceProvider();
			Type typeFromHandle89 = typeof(IProvideValueTarget);
			object[] array45 = new object[0 + 6];
			array45[0] = label31;
			array45[1] = grid5;
			array45[2] = stackLayout6;
			array45[3] = scrollView;
			array45[4] = grid9;
			array45[5] = proBmsPage;
			object service45;
			xamlServiceProvider45.Add(typeFromHandle89, service45 = new SimpleValueTargetProvider(array45, Label.FontSizeProperty, nameScope));
			xamlServiceProvider45.Add(typeof(IReferenceProvider), service45);
			Type typeFromHandle90 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver45 = new XmlNamespaceResolver();
			xmlNamespaceResolver45.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver45.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider45.Add(typeFromHandle90, new XamlTypeResolver(xmlNamespaceResolver45, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider45.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(125, 166)));
			label31.SetValue(fontSizeProperty45, ((IExtendedTypeConverter)fontSizeConverter45).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider45));
			label31.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label31.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label31.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label31);
			label32.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label32.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label32.SetValue(Label.TextProperty, "4500RPM£∫ 000%");
			label32.SetValue(Grid.RowProperty, 4);
			label32.SetValue(Grid.ColumnProperty, 0);
			label32.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty46 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter46 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider46 = new XamlServiceProvider();
			Type typeFromHandle91 = typeof(IProvideValueTarget);
			object[] array46 = new object[0 + 6];
			array46[0] = label32;
			array46[1] = grid5;
			array46[2] = stackLayout6;
			array46[3] = scrollView;
			array46[4] = grid9;
			array46[5] = proBmsPage;
			object service46;
			xamlServiceProvider46.Add(typeFromHandle91, service46 = new SimpleValueTargetProvider(array46, Label.FontSizeProperty, nameScope));
			xamlServiceProvider46.Add(typeof(IReferenceProvider), service46);
			Type typeFromHandle92 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver46 = new XmlNamespaceResolver();
			xmlNamespaceResolver46.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver46.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider46.Add(typeFromHandle92, new XamlTypeResolver(xmlNamespaceResolver46, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider46.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(126, 166)));
			label32.SetValue(fontSizeProperty46, ((IExtendedTypeConverter)fontSizeConverter46).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider46));
			label32.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label32.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label32.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label32);
			label33.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label33.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label33.SetValue(Label.TextProperty, "5000RPM£∫ 000%");
			label33.SetValue(Grid.RowProperty, 4);
			label33.SetValue(Grid.ColumnProperty, 1);
			label33.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty47 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter47 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider47 = new XamlServiceProvider();
			Type typeFromHandle93 = typeof(IProvideValueTarget);
			object[] array47 = new object[0 + 6];
			array47[0] = label33;
			array47[1] = grid5;
			array47[2] = stackLayout6;
			array47[3] = scrollView;
			array47[4] = grid9;
			array47[5] = proBmsPage;
			object service47;
			xamlServiceProvider47.Add(typeFromHandle93, service47 = new SimpleValueTargetProvider(array47, Label.FontSizeProperty, nameScope));
			xamlServiceProvider47.Add(typeof(IReferenceProvider), service47);
			Type typeFromHandle94 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver47 = new XmlNamespaceResolver();
			xmlNamespaceResolver47.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver47.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider47.Add(typeFromHandle94, new XamlTypeResolver(xmlNamespaceResolver47, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider47.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(127, 167)));
			label33.SetValue(fontSizeProperty47, ((IExtendedTypeConverter)fontSizeConverter47).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider47));
			label33.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label33.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label33.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label33);
			label34.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label34.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label34.SetValue(Label.TextProperty, "5500RPM£∫ 000%");
			label34.SetValue(Grid.RowProperty, 5);
			label34.SetValue(Grid.ColumnProperty, 0);
			label34.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty48 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter48 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider48 = new XamlServiceProvider();
			Type typeFromHandle95 = typeof(IProvideValueTarget);
			object[] array48 = new object[0 + 6];
			array48[0] = label34;
			array48[1] = grid5;
			array48[2] = stackLayout6;
			array48[3] = scrollView;
			array48[4] = grid9;
			array48[5] = proBmsPage;
			object service48;
			xamlServiceProvider48.Add(typeFromHandle95, service48 = new SimpleValueTargetProvider(array48, Label.FontSizeProperty, nameScope));
			xamlServiceProvider48.Add(typeof(IReferenceProvider), service48);
			Type typeFromHandle96 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver48 = new XmlNamespaceResolver();
			xmlNamespaceResolver48.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver48.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider48.Add(typeFromHandle96, new XamlTypeResolver(xmlNamespaceResolver48, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider48.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(128, 166)));
			label34.SetValue(fontSizeProperty48, ((IExtendedTypeConverter)fontSizeConverter48).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider48));
			label34.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label34.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label34.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label34);
			label35.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label35.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label35.SetValue(Label.TextProperty, "6000RPM£∫ 000%");
			label35.SetValue(Grid.RowProperty, 5);
			label35.SetValue(Grid.ColumnProperty, 1);
			label35.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty49 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter49 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider49 = new XamlServiceProvider();
			Type typeFromHandle97 = typeof(IProvideValueTarget);
			object[] array49 = new object[0 + 6];
			array49[0] = label35;
			array49[1] = grid5;
			array49[2] = stackLayout6;
			array49[3] = scrollView;
			array49[4] = grid9;
			array49[5] = proBmsPage;
			object service49;
			xamlServiceProvider49.Add(typeFromHandle97, service49 = new SimpleValueTargetProvider(array49, Label.FontSizeProperty, nameScope));
			xamlServiceProvider49.Add(typeof(IReferenceProvider), service49);
			Type typeFromHandle98 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver49 = new XmlNamespaceResolver();
			xmlNamespaceResolver49.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver49.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider49.Add(typeFromHandle98, new XamlTypeResolver(xmlNamespaceResolver49, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider49.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(129, 166)));
			label35.SetValue(fontSizeProperty49, ((IExtendedTypeConverter)fontSizeConverter49).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider49));
			label35.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label35.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label35.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label35);
			label36.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label36.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label36.SetValue(Label.TextProperty, "6500RPM£∫ 000%");
			label36.SetValue(Grid.RowProperty, 6);
			label36.SetValue(Grid.ColumnProperty, 0);
			label36.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty50 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter50 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider50 = new XamlServiceProvider();
			Type typeFromHandle99 = typeof(IProvideValueTarget);
			object[] array50 = new object[0 + 6];
			array50[0] = label36;
			array50[1] = grid5;
			array50[2] = stackLayout6;
			array50[3] = scrollView;
			array50[4] = grid9;
			array50[5] = proBmsPage;
			object service50;
			xamlServiceProvider50.Add(typeFromHandle99, service50 = new SimpleValueTargetProvider(array50, Label.FontSizeProperty, nameScope));
			xamlServiceProvider50.Add(typeof(IReferenceProvider), service50);
			Type typeFromHandle100 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver50 = new XmlNamespaceResolver();
			xmlNamespaceResolver50.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver50.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider50.Add(typeFromHandle100, new XamlTypeResolver(xmlNamespaceResolver50, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider50.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(130, 166)));
			label36.SetValue(fontSizeProperty50, ((IExtendedTypeConverter)fontSizeConverter50).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider50));
			label36.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label36.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label36.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label36);
			label37.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label37.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label37.SetValue(Label.TextProperty, "7000RPM£∫ 000%");
			label37.SetValue(Grid.RowProperty, 6);
			label37.SetValue(Grid.ColumnProperty, 1);
			label37.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty51 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter51 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider51 = new XamlServiceProvider();
			Type typeFromHandle101 = typeof(IProvideValueTarget);
			object[] array51 = new object[0 + 6];
			array51[0] = label37;
			array51[1] = grid5;
			array51[2] = stackLayout6;
			array51[3] = scrollView;
			array51[4] = grid9;
			array51[5] = proBmsPage;
			object service51;
			xamlServiceProvider51.Add(typeFromHandle101, service51 = new SimpleValueTargetProvider(array51, Label.FontSizeProperty, nameScope));
			xamlServiceProvider51.Add(typeof(IReferenceProvider), service51);
			Type typeFromHandle102 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver51 = new XmlNamespaceResolver();
			xmlNamespaceResolver51.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver51.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider51.Add(typeFromHandle102, new XamlTypeResolver(xmlNamespaceResolver51, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider51.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(131, 166)));
			label37.SetValue(fontSizeProperty51, ((IExtendedTypeConverter)fontSizeConverter51).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider51));
			label37.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label37.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label37.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label37);
			label38.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label38.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label38.SetValue(Label.TextProperty, "7500RPM£∫ 000%");
			label38.SetValue(Grid.RowProperty, 7);
			label38.SetValue(Grid.ColumnProperty, 0);
			label38.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty52 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter52 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider52 = new XamlServiceProvider();
			Type typeFromHandle103 = typeof(IProvideValueTarget);
			object[] array52 = new object[0 + 6];
			array52[0] = label38;
			array52[1] = grid5;
			array52[2] = stackLayout6;
			array52[3] = scrollView;
			array52[4] = grid9;
			array52[5] = proBmsPage;
			object service52;
			xamlServiceProvider52.Add(typeFromHandle103, service52 = new SimpleValueTargetProvider(array52, Label.FontSizeProperty, nameScope));
			xamlServiceProvider52.Add(typeof(IReferenceProvider), service52);
			Type typeFromHandle104 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver52 = new XmlNamespaceResolver();
			xmlNamespaceResolver52.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver52.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider52.Add(typeFromHandle104, new XamlTypeResolver(xmlNamespaceResolver52, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider52.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(132, 167)));
			label38.SetValue(fontSizeProperty52, ((IExtendedTypeConverter)fontSizeConverter52).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider52));
			label38.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label38.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label38.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label38);
			label39.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label39.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label39.SetValue(Label.TextProperty, "8000RPM£∫ 000%");
			label39.SetValue(Grid.RowProperty, 7);
			label39.SetValue(Grid.ColumnProperty, 1);
			label39.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty53 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter53 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider53 = new XamlServiceProvider();
			Type typeFromHandle105 = typeof(IProvideValueTarget);
			object[] array53 = new object[0 + 6];
			array53[0] = label39;
			array53[1] = grid5;
			array53[2] = stackLayout6;
			array53[3] = scrollView;
			array53[4] = grid9;
			array53[5] = proBmsPage;
			object service53;
			xamlServiceProvider53.Add(typeFromHandle105, service53 = new SimpleValueTargetProvider(array53, Label.FontSizeProperty, nameScope));
			xamlServiceProvider53.Add(typeof(IReferenceProvider), service53);
			Type typeFromHandle106 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver53 = new XmlNamespaceResolver();
			xmlNamespaceResolver53.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver53.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider53.Add(typeFromHandle106, new XamlTypeResolver(xmlNamespaceResolver53, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider53.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(133, 166)));
			label39.SetValue(fontSizeProperty53, ((IExtendedTypeConverter)fontSizeConverter53).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider53));
			label39.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label39.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label39.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label39);
			label40.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label40.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label40.SetValue(Label.TextProperty, "8500RPM£∫ 000%");
			label40.SetValue(Grid.RowProperty, 8);
			label40.SetValue(Grid.ColumnProperty, 0);
			label40.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty54 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter54 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider54 = new XamlServiceProvider();
			Type typeFromHandle107 = typeof(IProvideValueTarget);
			object[] array54 = new object[0 + 6];
			array54[0] = label40;
			array54[1] = grid5;
			array54[2] = stackLayout6;
			array54[3] = scrollView;
			array54[4] = grid9;
			array54[5] = proBmsPage;
			object service54;
			xamlServiceProvider54.Add(typeFromHandle107, service54 = new SimpleValueTargetProvider(array54, Label.FontSizeProperty, nameScope));
			xamlServiceProvider54.Add(typeof(IReferenceProvider), service54);
			Type typeFromHandle108 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver54 = new XmlNamespaceResolver();
			xmlNamespaceResolver54.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver54.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider54.Add(typeFromHandle108, new XamlTypeResolver(xmlNamespaceResolver54, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider54.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(134, 166)));
			label40.SetValue(fontSizeProperty54, ((IExtendedTypeConverter)fontSizeConverter54).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider54));
			label40.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label40.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label40.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label40);
			label41.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label41.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label41.SetValue(Label.TextProperty, "9000RPM£∫ 000%");
			label41.SetValue(Grid.RowProperty, 8);
			label41.SetValue(Grid.ColumnProperty, 1);
			label41.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty55 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter55 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider55 = new XamlServiceProvider();
			Type typeFromHandle109 = typeof(IProvideValueTarget);
			object[] array55 = new object[0 + 6];
			array55[0] = label41;
			array55[1] = grid5;
			array55[2] = stackLayout6;
			array55[3] = scrollView;
			array55[4] = grid9;
			array55[5] = proBmsPage;
			object service55;
			xamlServiceProvider55.Add(typeFromHandle109, service55 = new SimpleValueTargetProvider(array55, Label.FontSizeProperty, nameScope));
			xamlServiceProvider55.Add(typeof(IReferenceProvider), service55);
			Type typeFromHandle110 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver55 = new XmlNamespaceResolver();
			xmlNamespaceResolver55.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver55.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider55.Add(typeFromHandle110, new XamlTypeResolver(xmlNamespaceResolver55, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider55.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(135, 167)));
			label41.SetValue(fontSizeProperty55, ((IExtendedTypeConverter)fontSizeConverter55).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider55));
			label41.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label41.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label41.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label41);
			label42.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label42.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label42.SetValue(Label.TextProperty, "9000RPM£∫ 000%");
			label42.SetValue(Grid.RowProperty, 9);
			label42.SetValue(Grid.ColumnProperty, 0);
			label42.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty56 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter56 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider56 = new XamlServiceProvider();
			Type typeFromHandle111 = typeof(IProvideValueTarget);
			object[] array56 = new object[0 + 6];
			array56[0] = label42;
			array56[1] = grid5;
			array56[2] = stackLayout6;
			array56[3] = scrollView;
			array56[4] = grid9;
			array56[5] = proBmsPage;
			object service56;
			xamlServiceProvider56.Add(typeFromHandle111, service56 = new SimpleValueTargetProvider(array56, Label.FontSizeProperty, nameScope));
			xamlServiceProvider56.Add(typeof(IReferenceProvider), service56);
			Type typeFromHandle112 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver56 = new XmlNamespaceResolver();
			xmlNamespaceResolver56.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver56.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider56.Add(typeFromHandle112, new XamlTypeResolver(xmlNamespaceResolver56, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider56.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(136, 167)));
			label42.SetValue(fontSizeProperty56, ((IExtendedTypeConverter)fontSizeConverter56).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider56));
			label42.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label42.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label42.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label42);
			label43.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label43.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label43.SetValue(Label.TextProperty, "9000RPM£∫ 000%");
			label43.SetValue(Grid.RowProperty, 9);
			label43.SetValue(Grid.ColumnProperty, 1);
			label43.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty57 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter57 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider57 = new XamlServiceProvider();
			Type typeFromHandle113 = typeof(IProvideValueTarget);
			object[] array57 = new object[0 + 6];
			array57[0] = label43;
			array57[1] = grid5;
			array57[2] = stackLayout6;
			array57[3] = scrollView;
			array57[4] = grid9;
			array57[5] = proBmsPage;
			object service57;
			xamlServiceProvider57.Add(typeFromHandle113, service57 = new SimpleValueTargetProvider(array57, Label.FontSizeProperty, nameScope));
			xamlServiceProvider57.Add(typeof(IReferenceProvider), service57);
			Type typeFromHandle114 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver57 = new XmlNamespaceResolver();
			xmlNamespaceResolver57.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver57.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider57.Add(typeFromHandle114, new XamlTypeResolver(xmlNamespaceResolver57, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider57.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(137, 167)));
			label43.SetValue(fontSizeProperty57, ((IExtendedTypeConverter)fontSizeConverter57).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider57));
			label43.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label43.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label43.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label43);
			label44.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label44.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label44.SetValue(Label.TextProperty, "9000RPM£∫ 000%");
			label44.SetValue(Grid.RowProperty, 10);
			label44.SetValue(Grid.ColumnProperty, 0);
			label44.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty58 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter58 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider58 = new XamlServiceProvider();
			Type typeFromHandle115 = typeof(IProvideValueTarget);
			object[] array58 = new object[0 + 6];
			array58[0] = label44;
			array58[1] = grid5;
			array58[2] = stackLayout6;
			array58[3] = scrollView;
			array58[4] = grid9;
			array58[5] = proBmsPage;
			object service58;
			xamlServiceProvider58.Add(typeFromHandle115, service58 = new SimpleValueTargetProvider(array58, Label.FontSizeProperty, nameScope));
			xamlServiceProvider58.Add(typeof(IReferenceProvider), service58);
			Type typeFromHandle116 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver58 = new XmlNamespaceResolver();
			xmlNamespaceResolver58.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver58.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider58.Add(typeFromHandle116, new XamlTypeResolver(xmlNamespaceResolver58, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider58.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(138, 168)));
			label44.SetValue(fontSizeProperty58, ((IExtendedTypeConverter)fontSizeConverter58).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider58));
			label44.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label44.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label44.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label44);
			label45.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label45.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label45.SetValue(Label.TextProperty, "9000RPM£∫ 000%");
			label45.SetValue(Grid.RowProperty, 10);
			label45.SetValue(Grid.ColumnProperty, 1);
			label45.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty59 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter59 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider59 = new XamlServiceProvider();
			Type typeFromHandle117 = typeof(IProvideValueTarget);
			object[] array59 = new object[0 + 6];
			array59[0] = label45;
			array59[1] = grid5;
			array59[2] = stackLayout6;
			array59[3] = scrollView;
			array59[4] = grid9;
			array59[5] = proBmsPage;
			object service59;
			xamlServiceProvider59.Add(typeFromHandle117, service59 = new SimpleValueTargetProvider(array59, Label.FontSizeProperty, nameScope));
			xamlServiceProvider59.Add(typeof(IReferenceProvider), service59);
			Type typeFromHandle118 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver59 = new XmlNamespaceResolver();
			xmlNamespaceResolver59.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver59.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider59.Add(typeFromHandle118, new XamlTypeResolver(xmlNamespaceResolver59, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider59.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(139, 168)));
			label45.SetValue(fontSizeProperty59, ((IExtendedTypeConverter)fontSizeConverter59).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider59));
			label45.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label45.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label45.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label45);
			label46.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label46.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label46.SetValue(Label.TextProperty, "9000RPM£∫ 000%");
			label46.SetValue(Grid.RowProperty, 11);
			label46.SetValue(Grid.ColumnProperty, 0);
			label46.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty60 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter60 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider60 = new XamlServiceProvider();
			Type typeFromHandle119 = typeof(IProvideValueTarget);
			object[] array60 = new object[0 + 6];
			array60[0] = label46;
			array60[1] = grid5;
			array60[2] = stackLayout6;
			array60[3] = scrollView;
			array60[4] = grid9;
			array60[5] = proBmsPage;
			object service60;
			xamlServiceProvider60.Add(typeFromHandle119, service60 = new SimpleValueTargetProvider(array60, Label.FontSizeProperty, nameScope));
			xamlServiceProvider60.Add(typeof(IReferenceProvider), service60);
			Type typeFromHandle120 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver60 = new XmlNamespaceResolver();
			xmlNamespaceResolver60.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver60.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider60.Add(typeFromHandle120, new XamlTypeResolver(xmlNamespaceResolver60, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider60.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(140, 168)));
			label46.SetValue(fontSizeProperty60, ((IExtendedTypeConverter)fontSizeConverter60).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider60));
			label46.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label46.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label46.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label46);
			label47.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label47.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label47.SetValue(Label.TextProperty, "9000RPM£∫ 000%");
			label47.SetValue(Grid.RowProperty, 11);
			label47.SetValue(Grid.ColumnProperty, 1);
			label47.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty61 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter61 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider61 = new XamlServiceProvider();
			Type typeFromHandle121 = typeof(IProvideValueTarget);
			object[] array61 = new object[0 + 6];
			array61[0] = label47;
			array61[1] = grid5;
			array61[2] = stackLayout6;
			array61[3] = scrollView;
			array61[4] = grid9;
			array61[5] = proBmsPage;
			object service61;
			xamlServiceProvider61.Add(typeFromHandle121, service61 = new SimpleValueTargetProvider(array61, Label.FontSizeProperty, nameScope));
			xamlServiceProvider61.Add(typeof(IReferenceProvider), service61);
			Type typeFromHandle122 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver61 = new XmlNamespaceResolver();
			xmlNamespaceResolver61.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver61.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider61.Add(typeFromHandle122, new XamlTypeResolver(xmlNamespaceResolver61, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider61.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(141, 168)));
			label47.SetValue(fontSizeProperty61, ((IExtendedTypeConverter)fontSizeConverter61).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider61));
			label47.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label47.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label47.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label47);
			button15.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button15.Clicked += proBmsPage.BMSR1_TextChanged;
			button15.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button15.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button15.SetValue(Grid.RowProperty, 0);
			button15.SetValue(Grid.ColumnProperty, 0);
			button15.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty62 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter62 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider62 = new XamlServiceProvider();
			Type typeFromHandle123 = typeof(IProvideValueTarget);
			object[] array62 = new object[0 + 6];
			array62[0] = button15;
			array62[1] = grid5;
			array62[2] = stackLayout6;
			array62[3] = scrollView;
			array62[4] = grid9;
			array62[5] = proBmsPage;
			object service62;
			xamlServiceProvider62.Add(typeFromHandle123, service62 = new SimpleValueTargetProvider(array62, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider62.Add(typeof(IReferenceProvider), service62);
			Type typeFromHandle124 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver62 = new XmlNamespaceResolver();
			xmlNamespaceResolver62.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver62.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider62.Add(typeFromHandle124, new XamlTypeResolver(xmlNamespaceResolver62, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider62.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(143, 180)));
			button15.SetValue(fontSizeProperty62, ((IExtendedTypeConverter)fontSizeConverter62).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider62));
			button15.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button15.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button15.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button15);
			button16.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button16.Clicked += proBmsPage.BMSR2_TextChanged;
			button16.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button16.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button16.SetValue(Grid.RowProperty, 0);
			button16.SetValue(Grid.ColumnProperty, 1);
			button16.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty63 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter63 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider63 = new XamlServiceProvider();
			Type typeFromHandle125 = typeof(IProvideValueTarget);
			object[] array63 = new object[0 + 6];
			array63[0] = button16;
			array63[1] = grid5;
			array63[2] = stackLayout6;
			array63[3] = scrollView;
			array63[4] = grid9;
			array63[5] = proBmsPage;
			object service63;
			xamlServiceProvider63.Add(typeFromHandle125, service63 = new SimpleValueTargetProvider(array63, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider63.Add(typeof(IReferenceProvider), service63);
			Type typeFromHandle126 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver63 = new XmlNamespaceResolver();
			xmlNamespaceResolver63.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver63.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider63.Add(typeFromHandle126, new XamlTypeResolver(xmlNamespaceResolver63, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider63.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(144, 180)));
			button16.SetValue(fontSizeProperty63, ((IExtendedTypeConverter)fontSizeConverter63).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider63));
			button16.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button16.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button16.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button16);
			button17.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button17.Clicked += proBmsPage.BMSR3_TextChanged;
			button17.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button17.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button17.SetValue(Grid.RowProperty, 1);
			button17.SetValue(Grid.ColumnProperty, 0);
			button17.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty64 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter64 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider64 = new XamlServiceProvider();
			Type typeFromHandle127 = typeof(IProvideValueTarget);
			object[] array64 = new object[0 + 6];
			array64[0] = button17;
			array64[1] = grid5;
			array64[2] = stackLayout6;
			array64[3] = scrollView;
			array64[4] = grid9;
			array64[5] = proBmsPage;
			object service64;
			xamlServiceProvider64.Add(typeFromHandle127, service64 = new SimpleValueTargetProvider(array64, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider64.Add(typeof(IReferenceProvider), service64);
			Type typeFromHandle128 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver64 = new XmlNamespaceResolver();
			xmlNamespaceResolver64.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver64.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider64.Add(typeFromHandle128, new XamlTypeResolver(xmlNamespaceResolver64, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider64.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(145, 179)));
			button17.SetValue(fontSizeProperty64, ((IExtendedTypeConverter)fontSizeConverter64).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider64));
			button17.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button17.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button17.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button17);
			button18.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button18.Clicked += proBmsPage.BMSR4_TextChanged;
			button18.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button18.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button18.SetValue(Grid.RowProperty, 1);
			button18.SetValue(Grid.ColumnProperty, 1);
			button18.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty65 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter65 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider65 = new XamlServiceProvider();
			Type typeFromHandle129 = typeof(IProvideValueTarget);
			object[] array65 = new object[0 + 6];
			array65[0] = button18;
			array65[1] = grid5;
			array65[2] = stackLayout6;
			array65[3] = scrollView;
			array65[4] = grid9;
			array65[5] = proBmsPage;
			object service65;
			xamlServiceProvider65.Add(typeFromHandle129, service65 = new SimpleValueTargetProvider(array65, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider65.Add(typeof(IReferenceProvider), service65);
			Type typeFromHandle130 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver65 = new XmlNamespaceResolver();
			xmlNamespaceResolver65.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver65.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider65.Add(typeFromHandle130, new XamlTypeResolver(xmlNamespaceResolver65, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider65.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(146, 181)));
			button18.SetValue(fontSizeProperty65, ((IExtendedTypeConverter)fontSizeConverter65).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider65));
			button18.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button18.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button18.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button18);
			button19.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button19.Clicked += proBmsPage.BMSR5_TextChanged;
			button19.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button19.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button19.SetValue(Grid.RowProperty, 2);
			button19.SetValue(Grid.ColumnProperty, 0);
			button19.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty66 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter66 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider66 = new XamlServiceProvider();
			Type typeFromHandle131 = typeof(IProvideValueTarget);
			object[] array66 = new object[0 + 6];
			array66[0] = button19;
			array66[1] = grid5;
			array66[2] = stackLayout6;
			array66[3] = scrollView;
			array66[4] = grid9;
			array66[5] = proBmsPage;
			object service66;
			xamlServiceProvider66.Add(typeFromHandle131, service66 = new SimpleValueTargetProvider(array66, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider66.Add(typeof(IReferenceProvider), service66);
			Type typeFromHandle132 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver66 = new XmlNamespaceResolver();
			xmlNamespaceResolver66.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver66.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider66.Add(typeFromHandle132, new XamlTypeResolver(xmlNamespaceResolver66, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider66.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(147, 182)));
			button19.SetValue(fontSizeProperty66, ((IExtendedTypeConverter)fontSizeConverter66).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider66));
			button19.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button19.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button19.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button19);
			button20.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button20.Clicked += proBmsPage.BMSR6_TextChanged;
			button20.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button20.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button20.SetValue(Grid.RowProperty, 2);
			button20.SetValue(Grid.ColumnProperty, 1);
			button20.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty67 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter67 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider67 = new XamlServiceProvider();
			Type typeFromHandle133 = typeof(IProvideValueTarget);
			object[] array67 = new object[0 + 6];
			array67[0] = button20;
			array67[1] = grid5;
			array67[2] = stackLayout6;
			array67[3] = scrollView;
			array67[4] = grid9;
			array67[5] = proBmsPage;
			object service67;
			xamlServiceProvider67.Add(typeFromHandle133, service67 = new SimpleValueTargetProvider(array67, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider67.Add(typeof(IReferenceProvider), service67);
			Type typeFromHandle134 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver67 = new XmlNamespaceResolver();
			xmlNamespaceResolver67.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver67.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider67.Add(typeFromHandle134, new XamlTypeResolver(xmlNamespaceResolver67, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider67.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(148, 180)));
			button20.SetValue(fontSizeProperty67, ((IExtendedTypeConverter)fontSizeConverter67).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider67));
			button20.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button20.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button20.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button20);
			button21.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button21.Clicked += proBmsPage.BMSR7_TextChanged;
			button21.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button21.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button21.SetValue(Grid.RowProperty, 3);
			button21.SetValue(Grid.ColumnProperty, 0);
			button21.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty68 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter68 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider68 = new XamlServiceProvider();
			Type typeFromHandle135 = typeof(IProvideValueTarget);
			object[] array68 = new object[0 + 6];
			array68[0] = button21;
			array68[1] = grid5;
			array68[2] = stackLayout6;
			array68[3] = scrollView;
			array68[4] = grid9;
			array68[5] = proBmsPage;
			object service68;
			xamlServiceProvider68.Add(typeFromHandle135, service68 = new SimpleValueTargetProvider(array68, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider68.Add(typeof(IReferenceProvider), service68);
			Type typeFromHandle136 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver68 = new XmlNamespaceResolver();
			xmlNamespaceResolver68.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver68.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider68.Add(typeFromHandle136, new XamlTypeResolver(xmlNamespaceResolver68, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider68.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(149, 180)));
			button21.SetValue(fontSizeProperty68, ((IExtendedTypeConverter)fontSizeConverter68).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider68));
			button21.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button21.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button21.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button21);
			button22.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button22.Clicked += proBmsPage.BMSR8_TextChanged;
			button22.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button22.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button22.SetValue(Grid.RowProperty, 3);
			button22.SetValue(Grid.ColumnProperty, 1);
			button22.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty69 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter69 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider69 = new XamlServiceProvider();
			Type typeFromHandle137 = typeof(IProvideValueTarget);
			object[] array69 = new object[0 + 6];
			array69[0] = button22;
			array69[1] = grid5;
			array69[2] = stackLayout6;
			array69[3] = scrollView;
			array69[4] = grid9;
			array69[5] = proBmsPage;
			object service69;
			xamlServiceProvider69.Add(typeFromHandle137, service69 = new SimpleValueTargetProvider(array69, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider69.Add(typeof(IReferenceProvider), service69);
			Type typeFromHandle138 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver69 = new XmlNamespaceResolver();
			xmlNamespaceResolver69.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver69.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider69.Add(typeFromHandle138, new XamlTypeResolver(xmlNamespaceResolver69, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider69.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(150, 179)));
			button22.SetValue(fontSizeProperty69, ((IExtendedTypeConverter)fontSizeConverter69).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider69));
			button22.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button22.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button22.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button22);
			button23.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button23.Clicked += proBmsPage.BMSR9_TextChanged;
			button23.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button23.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button23.SetValue(Grid.RowProperty, 4);
			button23.SetValue(Grid.ColumnProperty, 0);
			button23.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty70 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter70 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider70 = new XamlServiceProvider();
			Type typeFromHandle139 = typeof(IProvideValueTarget);
			object[] array70 = new object[0 + 6];
			array70[0] = button23;
			array70[1] = grid5;
			array70[2] = stackLayout6;
			array70[3] = scrollView;
			array70[4] = grid9;
			array70[5] = proBmsPage;
			object service70;
			xamlServiceProvider70.Add(typeFromHandle139, service70 = new SimpleValueTargetProvider(array70, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider70.Add(typeof(IReferenceProvider), service70);
			Type typeFromHandle140 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver70 = new XmlNamespaceResolver();
			xmlNamespaceResolver70.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver70.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider70.Add(typeFromHandle140, new XamlTypeResolver(xmlNamespaceResolver70, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider70.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(151, 178)));
			button23.SetValue(fontSizeProperty70, ((IExtendedTypeConverter)fontSizeConverter70).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider70));
			button23.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button23.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button23.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button23);
			button24.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button24.Clicked += proBmsPage.BMSR10_TextChanged;
			button24.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button24.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button24.SetValue(Grid.RowProperty, 4);
			button24.SetValue(Grid.ColumnProperty, 1);
			button24.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty71 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter71 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider71 = new XamlServiceProvider();
			Type typeFromHandle141 = typeof(IProvideValueTarget);
			object[] array71 = new object[0 + 6];
			array71[0] = button24;
			array71[1] = grid5;
			array71[2] = stackLayout6;
			array71[3] = scrollView;
			array71[4] = grid9;
			array71[5] = proBmsPage;
			object service71;
			xamlServiceProvider71.Add(typeFromHandle141, service71 = new SimpleValueTargetProvider(array71, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider71.Add(typeof(IReferenceProvider), service71);
			Type typeFromHandle142 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver71 = new XmlNamespaceResolver();
			xmlNamespaceResolver71.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver71.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider71.Add(typeFromHandle142, new XamlTypeResolver(xmlNamespaceResolver71, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider71.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(152, 181)));
			button24.SetValue(fontSizeProperty71, ((IExtendedTypeConverter)fontSizeConverter71).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider71));
			button24.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button24.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button24.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button24);
			button25.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button25.Clicked += proBmsPage.BMSR11_TextChanged;
			button25.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button25.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button25.SetValue(Grid.RowProperty, 5);
			button25.SetValue(Grid.ColumnProperty, 0);
			button25.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty72 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter72 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider72 = new XamlServiceProvider();
			Type typeFromHandle143 = typeof(IProvideValueTarget);
			object[] array72 = new object[0 + 6];
			array72[0] = button25;
			array72[1] = grid5;
			array72[2] = stackLayout6;
			array72[3] = scrollView;
			array72[4] = grid9;
			array72[5] = proBmsPage;
			object service72;
			xamlServiceProvider72.Add(typeFromHandle143, service72 = new SimpleValueTargetProvider(array72, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider72.Add(typeof(IReferenceProvider), service72);
			Type typeFromHandle144 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver72 = new XmlNamespaceResolver();
			xmlNamespaceResolver72.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver72.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider72.Add(typeFromHandle144, new XamlTypeResolver(xmlNamespaceResolver72, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider72.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(153, 180)));
			button25.SetValue(fontSizeProperty72, ((IExtendedTypeConverter)fontSizeConverter72).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider72));
			button25.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button25.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button25.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button25);
			button26.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button26.Clicked += proBmsPage.BMSR12_TextChanged;
			button26.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button26.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button26.SetValue(Grid.RowProperty, 5);
			button26.SetValue(Grid.ColumnProperty, 1);
			button26.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty73 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter73 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider73 = new XamlServiceProvider();
			Type typeFromHandle145 = typeof(IProvideValueTarget);
			object[] array73 = new object[0 + 6];
			array73[0] = button26;
			array73[1] = grid5;
			array73[2] = stackLayout6;
			array73[3] = scrollView;
			array73[4] = grid9;
			array73[5] = proBmsPage;
			object service73;
			xamlServiceProvider73.Add(typeFromHandle145, service73 = new SimpleValueTargetProvider(array73, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider73.Add(typeof(IReferenceProvider), service73);
			Type typeFromHandle146 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver73 = new XmlNamespaceResolver();
			xmlNamespaceResolver73.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver73.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider73.Add(typeFromHandle146, new XamlTypeResolver(xmlNamespaceResolver73, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider73.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(154, 179)));
			button26.SetValue(fontSizeProperty73, ((IExtendedTypeConverter)fontSizeConverter73).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider73));
			button26.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button26.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button26.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button26);
			button27.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button27.Clicked += proBmsPage.BMSR13_TextChanged;
			button27.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button27.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button27.SetValue(Grid.RowProperty, 6);
			button27.SetValue(Grid.ColumnProperty, 0);
			button27.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty74 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter74 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider74 = new XamlServiceProvider();
			Type typeFromHandle147 = typeof(IProvideValueTarget);
			object[] array74 = new object[0 + 6];
			array74[0] = button27;
			array74[1] = grid5;
			array74[2] = stackLayout6;
			array74[3] = scrollView;
			array74[4] = grid9;
			array74[5] = proBmsPage;
			object service74;
			xamlServiceProvider74.Add(typeFromHandle147, service74 = new SimpleValueTargetProvider(array74, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider74.Add(typeof(IReferenceProvider), service74);
			Type typeFromHandle148 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver74 = new XmlNamespaceResolver();
			xmlNamespaceResolver74.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver74.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider74.Add(typeFromHandle148, new XamlTypeResolver(xmlNamespaceResolver74, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider74.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(155, 180)));
			button27.SetValue(fontSizeProperty74, ((IExtendedTypeConverter)fontSizeConverter74).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider74));
			button27.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button27.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button27.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button27);
			button28.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button28.Clicked += proBmsPage.BMSR14_TextChanged;
			button28.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button28.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button28.SetValue(Grid.RowProperty, 6);
			button28.SetValue(Grid.ColumnProperty, 1);
			button28.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty75 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter75 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider75 = new XamlServiceProvider();
			Type typeFromHandle149 = typeof(IProvideValueTarget);
			object[] array75 = new object[0 + 6];
			array75[0] = button28;
			array75[1] = grid5;
			array75[2] = stackLayout6;
			array75[3] = scrollView;
			array75[4] = grid9;
			array75[5] = proBmsPage;
			object service75;
			xamlServiceProvider75.Add(typeFromHandle149, service75 = new SimpleValueTargetProvider(array75, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider75.Add(typeof(IReferenceProvider), service75);
			Type typeFromHandle150 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver75 = new XmlNamespaceResolver();
			xmlNamespaceResolver75.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver75.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider75.Add(typeFromHandle150, new XamlTypeResolver(xmlNamespaceResolver75, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider75.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(156, 180)));
			button28.SetValue(fontSizeProperty75, ((IExtendedTypeConverter)fontSizeConverter75).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider75));
			button28.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button28.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button28.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button28);
			button29.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button29.Clicked += proBmsPage.BMSR15_TextChanged;
			button29.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button29.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button29.SetValue(Grid.RowProperty, 7);
			button29.SetValue(Grid.ColumnProperty, 0);
			button29.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty76 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter76 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider76 = new XamlServiceProvider();
			Type typeFromHandle151 = typeof(IProvideValueTarget);
			object[] array76 = new object[0 + 6];
			array76[0] = button29;
			array76[1] = grid5;
			array76[2] = stackLayout6;
			array76[3] = scrollView;
			array76[4] = grid9;
			array76[5] = proBmsPage;
			object service76;
			xamlServiceProvider76.Add(typeFromHandle151, service76 = new SimpleValueTargetProvider(array76, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider76.Add(typeof(IReferenceProvider), service76);
			Type typeFromHandle152 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver76 = new XmlNamespaceResolver();
			xmlNamespaceResolver76.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver76.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider76.Add(typeFromHandle152, new XamlTypeResolver(xmlNamespaceResolver76, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider76.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(157, 179)));
			button29.SetValue(fontSizeProperty76, ((IExtendedTypeConverter)fontSizeConverter76).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider76));
			button29.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button29.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button29.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button29);
			button30.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button30.Clicked += proBmsPage.BMSR16_TextChanged;
			button30.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button30.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button30.SetValue(Grid.RowProperty, 7);
			button30.SetValue(Grid.ColumnProperty, 1);
			button30.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty77 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter77 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider77 = new XamlServiceProvider();
			Type typeFromHandle153 = typeof(IProvideValueTarget);
			object[] array77 = new object[0 + 6];
			array77[0] = button30;
			array77[1] = grid5;
			array77[2] = stackLayout6;
			array77[3] = scrollView;
			array77[4] = grid9;
			array77[5] = proBmsPage;
			object service77;
			xamlServiceProvider77.Add(typeFromHandle153, service77 = new SimpleValueTargetProvider(array77, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider77.Add(typeof(IReferenceProvider), service77);
			Type typeFromHandle154 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver77 = new XmlNamespaceResolver();
			xmlNamespaceResolver77.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver77.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider77.Add(typeFromHandle154, new XamlTypeResolver(xmlNamespaceResolver77, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider77.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(158, 182)));
			button30.SetValue(fontSizeProperty77, ((IExtendedTypeConverter)fontSizeConverter77).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider77));
			button30.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button30.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button30.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button30);
			button31.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button31.Clicked += proBmsPage.BMSR17_TextChanged;
			button31.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button31.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button31.SetValue(Grid.RowProperty, 8);
			button31.SetValue(Grid.ColumnProperty, 0);
			button31.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty78 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter78 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider78 = new XamlServiceProvider();
			Type typeFromHandle155 = typeof(IProvideValueTarget);
			object[] array78 = new object[0 + 6];
			array78[0] = button31;
			array78[1] = grid5;
			array78[2] = stackLayout6;
			array78[3] = scrollView;
			array78[4] = grid9;
			array78[5] = proBmsPage;
			object service78;
			xamlServiceProvider78.Add(typeFromHandle155, service78 = new SimpleValueTargetProvider(array78, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider78.Add(typeof(IReferenceProvider), service78);
			Type typeFromHandle156 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver78 = new XmlNamespaceResolver();
			xmlNamespaceResolver78.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver78.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider78.Add(typeFromHandle156, new XamlTypeResolver(xmlNamespaceResolver78, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider78.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(159, 180)));
			button31.SetValue(fontSizeProperty78, ((IExtendedTypeConverter)fontSizeConverter78).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider78));
			button31.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button31.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button31.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button31);
			button32.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button32.Clicked += proBmsPage.BMSR18_TextChanged;
			button32.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button32.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button32.SetValue(Grid.RowProperty, 8);
			button32.SetValue(Grid.ColumnProperty, 1);
			button32.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty79 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter79 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider79 = new XamlServiceProvider();
			Type typeFromHandle157 = typeof(IProvideValueTarget);
			object[] array79 = new object[0 + 6];
			array79[0] = button32;
			array79[1] = grid5;
			array79[2] = stackLayout6;
			array79[3] = scrollView;
			array79[4] = grid9;
			array79[5] = proBmsPage;
			object service79;
			xamlServiceProvider79.Add(typeFromHandle157, service79 = new SimpleValueTargetProvider(array79, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider79.Add(typeof(IReferenceProvider), service79);
			Type typeFromHandle158 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver79 = new XmlNamespaceResolver();
			xmlNamespaceResolver79.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver79.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider79.Add(typeFromHandle158, new XamlTypeResolver(xmlNamespaceResolver79, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider79.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(160, 181)));
			button32.SetValue(fontSizeProperty79, ((IExtendedTypeConverter)fontSizeConverter79).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider79));
			button32.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button32.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button32.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button32);
			button33.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button33.Clicked += proBmsPage.BMSR19_TextChanged;
			button33.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button33.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button33.SetValue(Grid.RowProperty, 9);
			button33.SetValue(Grid.ColumnProperty, 0);
			button33.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty80 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter80 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider80 = new XamlServiceProvider();
			Type typeFromHandle159 = typeof(IProvideValueTarget);
			object[] array80 = new object[0 + 6];
			array80[0] = button33;
			array80[1] = grid5;
			array80[2] = stackLayout6;
			array80[3] = scrollView;
			array80[4] = grid9;
			array80[5] = proBmsPage;
			object service80;
			xamlServiceProvider80.Add(typeFromHandle159, service80 = new SimpleValueTargetProvider(array80, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider80.Add(typeof(IReferenceProvider), service80);
			Type typeFromHandle160 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver80 = new XmlNamespaceResolver();
			xmlNamespaceResolver80.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver80.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider80.Add(typeFromHandle160, new XamlTypeResolver(xmlNamespaceResolver80, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider80.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(161, 181)));
			button33.SetValue(fontSizeProperty80, ((IExtendedTypeConverter)fontSizeConverter80).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider80));
			button33.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button33.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button33.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button33);
			button34.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button34.Clicked += proBmsPage.BMSR20_TextChanged;
			button34.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button34.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button34.SetValue(Grid.RowProperty, 9);
			button34.SetValue(Grid.ColumnProperty, 1);
			button34.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty81 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter81 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider81 = new XamlServiceProvider();
			Type typeFromHandle161 = typeof(IProvideValueTarget);
			object[] array81 = new object[0 + 6];
			array81[0] = button34;
			array81[1] = grid5;
			array81[2] = stackLayout6;
			array81[3] = scrollView;
			array81[4] = grid9;
			array81[5] = proBmsPage;
			object service81;
			xamlServiceProvider81.Add(typeFromHandle161, service81 = new SimpleValueTargetProvider(array81, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider81.Add(typeof(IReferenceProvider), service81);
			Type typeFromHandle162 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver81 = new XmlNamespaceResolver();
			xmlNamespaceResolver81.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver81.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider81.Add(typeFromHandle162, new XamlTypeResolver(xmlNamespaceResolver81, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider81.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(162, 181)));
			button34.SetValue(fontSizeProperty81, ((IExtendedTypeConverter)fontSizeConverter81).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider81));
			button34.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button34.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button34.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button34);
			button35.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button35.Clicked += proBmsPage.BMSR21_TextChanged;
			button35.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button35.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button35.SetValue(Grid.RowProperty, 10);
			button35.SetValue(Grid.ColumnProperty, 0);
			button35.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty82 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter82 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider82 = new XamlServiceProvider();
			Type typeFromHandle163 = typeof(IProvideValueTarget);
			object[] array82 = new object[0 + 6];
			array82[0] = button35;
			array82[1] = grid5;
			array82[2] = stackLayout6;
			array82[3] = scrollView;
			array82[4] = grid9;
			array82[5] = proBmsPage;
			object service82;
			xamlServiceProvider82.Add(typeFromHandle163, service82 = new SimpleValueTargetProvider(array82, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider82.Add(typeof(IReferenceProvider), service82);
			Type typeFromHandle164 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver82 = new XmlNamespaceResolver();
			xmlNamespaceResolver82.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver82.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider82.Add(typeFromHandle164, new XamlTypeResolver(xmlNamespaceResolver82, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider82.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(163, 182)));
			button35.SetValue(fontSizeProperty82, ((IExtendedTypeConverter)fontSizeConverter82).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider82));
			button35.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button35.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button35.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button35);
			button36.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button36.Clicked += proBmsPage.BMSR22_TextChanged;
			button36.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button36.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button36.SetValue(Grid.RowProperty, 10);
			button36.SetValue(Grid.ColumnProperty, 1);
			button36.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty83 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter83 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider83 = new XamlServiceProvider();
			Type typeFromHandle165 = typeof(IProvideValueTarget);
			object[] array83 = new object[0 + 6];
			array83[0] = button36;
			array83[1] = grid5;
			array83[2] = stackLayout6;
			array83[3] = scrollView;
			array83[4] = grid9;
			array83[5] = proBmsPage;
			object service83;
			xamlServiceProvider83.Add(typeFromHandle165, service83 = new SimpleValueTargetProvider(array83, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider83.Add(typeof(IReferenceProvider), service83);
			Type typeFromHandle166 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver83 = new XmlNamespaceResolver();
			xmlNamespaceResolver83.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver83.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider83.Add(typeFromHandle166, new XamlTypeResolver(xmlNamespaceResolver83, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider83.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(164, 182)));
			button36.SetValue(fontSizeProperty83, ((IExtendedTypeConverter)fontSizeConverter83).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider83));
			button36.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button36.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button36.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button36);
			button37.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button37.Clicked += proBmsPage.BMSR23_TextChanged;
			button37.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button37.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button37.SetValue(Grid.RowProperty, 11);
			button37.SetValue(Grid.ColumnProperty, 0);
			button37.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty84 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter84 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider84 = new XamlServiceProvider();
			Type typeFromHandle167 = typeof(IProvideValueTarget);
			object[] array84 = new object[0 + 6];
			array84[0] = button37;
			array84[1] = grid5;
			array84[2] = stackLayout6;
			array84[3] = scrollView;
			array84[4] = grid9;
			array84[5] = proBmsPage;
			object service84;
			xamlServiceProvider84.Add(typeFromHandle167, service84 = new SimpleValueTargetProvider(array84, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider84.Add(typeof(IReferenceProvider), service84);
			Type typeFromHandle168 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver84 = new XmlNamespaceResolver();
			xmlNamespaceResolver84.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver84.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider84.Add(typeFromHandle168, new XamlTypeResolver(xmlNamespaceResolver84, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider84.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(165, 182)));
			button37.SetValue(fontSizeProperty84, ((IExtendedTypeConverter)fontSizeConverter84).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider84));
			button37.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button37.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button37.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button37);
			button38.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button38.Clicked += proBmsPage.BMSR24_TextChanged;
			button38.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button38.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button38.SetValue(Grid.RowProperty, 11);
			button38.SetValue(Grid.ColumnProperty, 1);
			button38.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty85 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter85 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider85 = new XamlServiceProvider();
			Type typeFromHandle169 = typeof(IProvideValueTarget);
			object[] array85 = new object[0 + 6];
			array85[0] = button38;
			array85[1] = grid5;
			array85[2] = stackLayout6;
			array85[3] = scrollView;
			array85[4] = grid9;
			array85[5] = proBmsPage;
			object service85;
			xamlServiceProvider85.Add(typeFromHandle169, service85 = new SimpleValueTargetProvider(array85, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider85.Add(typeof(IReferenceProvider), service85);
			Type typeFromHandle170 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver85 = new XmlNamespaceResolver();
			xmlNamespaceResolver85.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver85.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider85.Add(typeFromHandle170, new XamlTypeResolver(xmlNamespaceResolver85, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider85.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(166, 182)));
			button38.SetValue(fontSizeProperty85, ((IExtendedTypeConverter)fontSizeConverter85).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider85));
			button38.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button38.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button38.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button38);
			stackLayout6.Children.Add(grid5);
			button39.Clicked += proBmsPage.RowText7_Clicked;
			button39.SetValue(Xamarin.Forms.Button.TextProperty, "±£ª§");
			button39.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty86 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter86 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider86 = new XamlServiceProvider();
			Type typeFromHandle171 = typeof(IProvideValueTarget);
			object[] array86 = new object[0 + 5];
			array86[0] = button39;
			array86[1] = stackLayout6;
			array86[2] = scrollView;
			array86[3] = grid9;
			array86[4] = proBmsPage;
			object service86;
			xamlServiceProvider86.Add(typeFromHandle171, service86 = new SimpleValueTargetProvider(array86, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider86.Add(typeof(IReferenceProvider), service86);
			Type typeFromHandle172 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver86 = new XmlNamespaceResolver();
			xmlNamespaceResolver86.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver86.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider86.Add(typeFromHandle172, new XamlTypeResolver(xmlNamespaceResolver86, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider86.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(168, 110)));
			button39.SetValue(fontSizeProperty86, ((IExtendedTypeConverter)fontSizeConverter86).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider86));
			button39.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button39.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(button39);
			grid6.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid6.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("false"));
			rowDefinition25.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition25);
			rowDefinition26.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition26);
			rowDefinition27.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition27);
			rowDefinition28.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition28);
			rowDefinition29.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition29);
			rowDefinition30.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition30);
			rowDefinition31.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition31);
			rowDefinition32.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition32);
			rowDefinition33.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition33);
			rowDefinition34.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition34);
			rowDefinition35.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition35);
			rowDefinition36.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition36);
			rowDefinition37.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition37);
			rowDefinition38.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition38);
			columnDefinition9.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid6.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition9);
			columnDefinition10.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid6.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition10);
			label48.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label48.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label48.SetValue(Label.TextProperty, "µ•ÃÂπ˝—π±£ª§: 0.000V");
			label48.SetValue(Grid.RowProperty, 0);
			label48.SetValue(Grid.ColumnProperty, 0);
			label48.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty87 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter87 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider87 = new XamlServiceProvider();
			Type typeFromHandle173 = typeof(IProvideValueTarget);
			object[] array87 = new object[0 + 6];
			array87[0] = label48;
			array87[1] = grid6;
			array87[2] = stackLayout6;
			array87[3] = scrollView;
			array87[4] = grid9;
			array87[5] = proBmsPage;
			object service87;
			xamlServiceProvider87.Add(typeFromHandle173, service87 = new SimpleValueTargetProvider(array87, Label.FontSizeProperty, nameScope));
			xamlServiceProvider87.Add(typeof(IReferenceProvider), service87);
			Type typeFromHandle174 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver87 = new XmlNamespaceResolver();
			xmlNamespaceResolver87.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver87.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider87.Add(typeFromHandle174, new XamlTypeResolver(xmlNamespaceResolver87, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider87.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(190, 178)));
			label48.SetValue(fontSizeProperty87, ((IExtendedTypeConverter)fontSizeConverter87).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider87));
			label48.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label48.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label48.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label48);
			label49.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label49.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label49.SetValue(Label.TextProperty, "µ•ÃÂπ˝—πª÷∏¥: 0.000V");
			label49.SetValue(Grid.RowProperty, 0);
			label49.SetValue(Grid.ColumnProperty, 1);
			label49.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty88 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter88 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider88 = new XamlServiceProvider();
			Type typeFromHandle175 = typeof(IProvideValueTarget);
			object[] array88 = new object[0 + 6];
			array88[0] = label49;
			array88[1] = grid6;
			array88[2] = stackLayout6;
			array88[3] = scrollView;
			array88[4] = grid9;
			array88[5] = proBmsPage;
			object service88;
			xamlServiceProvider88.Add(typeFromHandle175, service88 = new SimpleValueTargetProvider(array88, Label.FontSizeProperty, nameScope));
			xamlServiceProvider88.Add(typeof(IReferenceProvider), service88);
			Type typeFromHandle176 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver88 = new XmlNamespaceResolver();
			xmlNamespaceResolver88.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver88.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider88.Add(typeFromHandle176, new XamlTypeResolver(xmlNamespaceResolver88, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider88.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(191, 179)));
			label49.SetValue(fontSizeProperty88, ((IExtendedTypeConverter)fontSizeConverter88).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider88));
			label49.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label49.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label49.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label49);
			label50.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label50.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label50.SetValue(Label.TextProperty, "µ•ÃÂ«∑—π±£ª§: 0.000V");
			label50.SetValue(Grid.RowProperty, 1);
			label50.SetValue(Grid.ColumnProperty, 0);
			label50.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty89 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter89 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider89 = new XamlServiceProvider();
			Type typeFromHandle177 = typeof(IProvideValueTarget);
			object[] array89 = new object[0 + 6];
			array89[0] = label50;
			array89[1] = grid6;
			array89[2] = stackLayout6;
			array89[3] = scrollView;
			array89[4] = grid9;
			array89[5] = proBmsPage;
			object service89;
			xamlServiceProvider89.Add(typeFromHandle177, service89 = new SimpleValueTargetProvider(array89, Label.FontSizeProperty, nameScope));
			xamlServiceProvider89.Add(typeof(IReferenceProvider), service89);
			Type typeFromHandle178 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver89 = new XmlNamespaceResolver();
			xmlNamespaceResolver89.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver89.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider89.Add(typeFromHandle178, new XamlTypeResolver(xmlNamespaceResolver89, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider89.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(192, 177)));
			label50.SetValue(fontSizeProperty89, ((IExtendedTypeConverter)fontSizeConverter89).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider89));
			label50.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label50.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label50.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label50);
			label51.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label51.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label51.SetValue(Label.TextProperty, "µ•ÃÂ«∑—πª÷∏¥: 0.000V");
			label51.SetValue(Grid.RowProperty, 1);
			label51.SetValue(Grid.ColumnProperty, 1);
			label51.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty90 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter90 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider90 = new XamlServiceProvider();
			Type typeFromHandle179 = typeof(IProvideValueTarget);
			object[] array90 = new object[0 + 6];
			array90[0] = label51;
			array90[1] = grid6;
			array90[2] = stackLayout6;
			array90[3] = scrollView;
			array90[4] = grid9;
			array90[5] = proBmsPage;
			object service90;
			xamlServiceProvider90.Add(typeFromHandle179, service90 = new SimpleValueTargetProvider(array90, Label.FontSizeProperty, nameScope));
			xamlServiceProvider90.Add(typeof(IReferenceProvider), service90);
			Type typeFromHandle180 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver90 = new XmlNamespaceResolver();
			xmlNamespaceResolver90.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver90.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider90.Add(typeFromHandle180, new XamlTypeResolver(xmlNamespaceResolver90, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider90.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(193, 178)));
			label51.SetValue(fontSizeProperty90, ((IExtendedTypeConverter)fontSizeConverter90).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider90));
			label51.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label51.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label51.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label51);
			label52.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label52.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label52.SetValue(Label.TextProperty, "µ•ÃÂ—π≤Ó±£ª§: 0.000V");
			label52.SetValue(Grid.RowProperty, 2);
			label52.SetValue(Grid.ColumnProperty, 0);
			label52.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty91 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter91 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider91 = new XamlServiceProvider();
			Type typeFromHandle181 = typeof(IProvideValueTarget);
			object[] array91 = new object[0 + 6];
			array91[0] = label52;
			array91[1] = grid6;
			array91[2] = stackLayout6;
			array91[3] = scrollView;
			array91[4] = grid9;
			array91[5] = proBmsPage;
			object service91;
			xamlServiceProvider91.Add(typeFromHandle181, service91 = new SimpleValueTargetProvider(array91, Label.FontSizeProperty, nameScope));
			xamlServiceProvider91.Add(typeof(IReferenceProvider), service91);
			Type typeFromHandle182 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver91 = new XmlNamespaceResolver();
			xmlNamespaceResolver91.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver91.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider91.Add(typeFromHandle182, new XamlTypeResolver(xmlNamespaceResolver91, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider91.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(194, 179)));
			label52.SetValue(fontSizeProperty91, ((IExtendedTypeConverter)fontSizeConverter91).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider91));
			label52.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label52.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label52.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label52);
			label53.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label53.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label53.SetValue(Label.TextProperty, "µ•ÃÂ—π≤Óª÷∏¥: 0.000V");
			label53.SetValue(Grid.RowProperty, 2);
			label53.SetValue(Grid.ColumnProperty, 1);
			label53.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty92 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter92 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider92 = new XamlServiceProvider();
			Type typeFromHandle183 = typeof(IProvideValueTarget);
			object[] array92 = new object[0 + 6];
			array92[0] = label53;
			array92[1] = grid6;
			array92[2] = stackLayout6;
			array92[3] = scrollView;
			array92[4] = grid9;
			array92[5] = proBmsPage;
			object service92;
			xamlServiceProvider92.Add(typeFromHandle183, service92 = new SimpleValueTargetProvider(array92, Label.FontSizeProperty, nameScope));
			xamlServiceProvider92.Add(typeof(IReferenceProvider), service92);
			Type typeFromHandle184 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver92 = new XmlNamespaceResolver();
			xmlNamespaceResolver92.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver92.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider92.Add(typeFromHandle184, new XamlTypeResolver(xmlNamespaceResolver92, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider92.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(195, 180)));
			label53.SetValue(fontSizeProperty92, ((IExtendedTypeConverter)fontSizeConverter92).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider92));
			label53.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label53.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label53.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label53);
			label54.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label54.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label54.SetValue(Label.TextProperty, "◊‹µÁ—π±£ª§: 0.000V");
			label54.SetValue(Grid.RowProperty, 3);
			label54.SetValue(Grid.ColumnProperty, 0);
			label54.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty93 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter93 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider93 = new XamlServiceProvider();
			Type typeFromHandle185 = typeof(IProvideValueTarget);
			object[] array93 = new object[0 + 6];
			array93[0] = label54;
			array93[1] = grid6;
			array93[2] = stackLayout6;
			array93[3] = scrollView;
			array93[4] = grid9;
			array93[5] = proBmsPage;
			object service93;
			xamlServiceProvider93.Add(typeFromHandle185, service93 = new SimpleValueTargetProvider(array93, Label.FontSizeProperty, nameScope));
			xamlServiceProvider93.Add(typeof(IReferenceProvider), service93);
			Type typeFromHandle186 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver93 = new XmlNamespaceResolver();
			xmlNamespaceResolver93.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver93.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider93.Add(typeFromHandle186, new XamlTypeResolver(xmlNamespaceResolver93, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider93.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(196, 177)));
			label54.SetValue(fontSizeProperty93, ((IExtendedTypeConverter)fontSizeConverter93).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider93));
			label54.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label54.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label54.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label54);
			label55.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label55.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label55.SetValue(Label.TextProperty, "◊‹µÁ—πª÷∏¥: 0.000V");
			label55.SetValue(Grid.RowProperty, 3);
			label55.SetValue(Grid.ColumnProperty, 1);
			label55.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty94 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter94 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider94 = new XamlServiceProvider();
			Type typeFromHandle187 = typeof(IProvideValueTarget);
			object[] array94 = new object[0 + 6];
			array94[0] = label55;
			array94[1] = grid6;
			array94[2] = stackLayout6;
			array94[3] = scrollView;
			array94[4] = grid9;
			array94[5] = proBmsPage;
			object service94;
			xamlServiceProvider94.Add(typeFromHandle187, service94 = new SimpleValueTargetProvider(array94, Label.FontSizeProperty, nameScope));
			xamlServiceProvider94.Add(typeof(IReferenceProvider), service94);
			Type typeFromHandle188 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver94 = new XmlNamespaceResolver();
			xmlNamespaceResolver94.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver94.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider94.Add(typeFromHandle188, new XamlTypeResolver(xmlNamespaceResolver94, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider94.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(197, 178)));
			label55.SetValue(fontSizeProperty94, ((IExtendedTypeConverter)fontSizeConverter94).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider94));
			label55.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label55.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label55.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label55);
			label56.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label56.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label56.SetValue(Label.TextProperty, "æ˘∫‚µÁ¡˜: 0.000A");
			label56.SetValue(Grid.RowProperty, 4);
			label56.SetValue(Grid.ColumnProperty, 0);
			label56.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty95 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter95 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider95 = new XamlServiceProvider();
			Type typeFromHandle189 = typeof(IProvideValueTarget);
			object[] array95 = new object[0 + 6];
			array95[0] = label56;
			array95[1] = grid6;
			array95[2] = stackLayout6;
			array95[3] = scrollView;
			array95[4] = grid9;
			array95[5] = proBmsPage;
			object service95;
			xamlServiceProvider95.Add(typeFromHandle189, service95 = new SimpleValueTargetProvider(array95, Label.FontSizeProperty, nameScope));
			xamlServiceProvider95.Add(typeof(IReferenceProvider), service95);
			Type typeFromHandle190 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver95 = new XmlNamespaceResolver();
			xmlNamespaceResolver95.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver95.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider95.Add(typeFromHandle190, new XamlTypeResolver(xmlNamespaceResolver95, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider95.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(198, 176)));
			label56.SetValue(fontSizeProperty95, ((IExtendedTypeConverter)fontSizeConverter95).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider95));
			label56.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label56.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label56.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label56);
			label57.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label57.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label57.SetValue(Label.TextProperty, "∂˛¥ŒµÁ¡˜±£ª§: 0000mA");
			label57.SetValue(Grid.RowProperty, 4);
			label57.SetValue(Grid.ColumnProperty, 1);
			label57.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty96 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter96 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider96 = new XamlServiceProvider();
			Type typeFromHandle191 = typeof(IProvideValueTarget);
			object[] array96 = new object[0 + 6];
			array96[0] = label57;
			array96[1] = grid6;
			array96[2] = stackLayout6;
			array96[3] = scrollView;
			array96[4] = grid9;
			array96[5] = proBmsPage;
			object service96;
			xamlServiceProvider96.Add(typeFromHandle191, service96 = new SimpleValueTargetProvider(array96, Label.FontSizeProperty, nameScope));
			xamlServiceProvider96.Add(typeof(IReferenceProvider), service96);
			Type typeFromHandle192 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver96 = new XmlNamespaceResolver();
			xmlNamespaceResolver96.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver96.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider96.Add(typeFromHandle192, new XamlTypeResolver(xmlNamespaceResolver96, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider96.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(199, 184)));
			label57.SetValue(fontSizeProperty96, ((IExtendedTypeConverter)fontSizeConverter96).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider96));
			label57.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label57.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label57.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label57);
			label58.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label58.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label58.SetValue(Label.TextProperty, "∂Ã¬∑±£ª§: 0000mA");
			label58.SetValue(Grid.RowProperty, 5);
			label58.SetValue(Grid.ColumnProperty, 0);
			label58.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty97 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter97 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider97 = new XamlServiceProvider();
			Type typeFromHandle193 = typeof(IProvideValueTarget);
			object[] array97 = new object[0 + 6];
			array97[0] = label58;
			array97[1] = grid6;
			array97[2] = stackLayout6;
			array97[3] = scrollView;
			array97[4] = grid9;
			array97[5] = proBmsPage;
			object service97;
			xamlServiceProvider97.Add(typeFromHandle193, service97 = new SimpleValueTargetProvider(array97, Label.FontSizeProperty, nameScope));
			xamlServiceProvider97.Add(typeof(IReferenceProvider), service97);
			Type typeFromHandle194 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver97 = new XmlNamespaceResolver();
			xmlNamespaceResolver97.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver97.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider97.Add(typeFromHandle194, new XamlTypeResolver(xmlNamespaceResolver97, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider97.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(200, 174)));
			label58.SetValue(fontSizeProperty97, ((IExtendedTypeConverter)fontSizeConverter97).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider97));
			label58.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label58.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label58.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label58);
			label59.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label59.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label59.SetValue(Label.TextProperty, "∂˛¥ŒµÁ¡˜±£ª§—” ±: 0000mS");
			label59.SetValue(Grid.RowProperty, 5);
			label59.SetValue(Grid.ColumnProperty, 1);
			label59.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty98 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter98 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider98 = new XamlServiceProvider();
			Type typeFromHandle195 = typeof(IProvideValueTarget);
			object[] array98 = new object[0 + 6];
			array98[0] = label59;
			array98[1] = grid6;
			array98[2] = stackLayout6;
			array98[3] = scrollView;
			array98[4] = grid9;
			array98[5] = proBmsPage;
			object service98;
			xamlServiceProvider98.Add(typeFromHandle195, service98 = new SimpleValueTargetProvider(array98, Label.FontSizeProperty, nameScope));
			xamlServiceProvider98.Add(typeof(IReferenceProvider), service98);
			Type typeFromHandle196 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver98 = new XmlNamespaceResolver();
			xmlNamespaceResolver98.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver98.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider98.Add(typeFromHandle196, new XamlTypeResolver(xmlNamespaceResolver98, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider98.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(201, 184)));
			label59.SetValue(fontSizeProperty98, ((IExtendedTypeConverter)fontSizeConverter98).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider98));
			label59.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label59.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label59.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label59);
			label60.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label60.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label60.SetValue(Label.TextProperty, "∂Ã¬∑±£ª§—” ±: 0000mS");
			label60.SetValue(Grid.RowProperty, 6);
			label60.SetValue(Grid.ColumnProperty, 0);
			label60.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty99 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter99 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider99 = new XamlServiceProvider();
			Type typeFromHandle197 = typeof(IProvideValueTarget);
			object[] array99 = new object[0 + 6];
			array99[0] = label60;
			array99[1] = grid6;
			array99[2] = stackLayout6;
			array99[3] = scrollView;
			array99[4] = grid9;
			array99[5] = proBmsPage;
			object service99;
			xamlServiceProvider99.Add(typeFromHandle197, service99 = new SimpleValueTargetProvider(array99, Label.FontSizeProperty, nameScope));
			xamlServiceProvider99.Add(typeof(IReferenceProvider), service99);
			Type typeFromHandle198 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver99 = new XmlNamespaceResolver();
			xmlNamespaceResolver99.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver99.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider99.Add(typeFromHandle198, new XamlTypeResolver(xmlNamespaceResolver99, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider99.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(202, 173)));
			label60.SetValue(fontSizeProperty99, ((IExtendedTypeConverter)fontSizeConverter99).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider99));
			label60.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label60.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label60.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label60);
			label61.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label61.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label61.SetValue(Label.TextProperty, "µ•ÃÂπ˝—π∏ÊæØ: 0000mV");
			label61.SetValue(Grid.RowProperty, 6);
			label61.SetValue(Grid.ColumnProperty, 1);
			label61.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty100 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter100 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider100 = new XamlServiceProvider();
			Type typeFromHandle199 = typeof(IProvideValueTarget);
			object[] array100 = new object[0 + 6];
			array100[0] = label61;
			array100[1] = grid6;
			array100[2] = stackLayout6;
			array100[3] = scrollView;
			array100[4] = grid9;
			array100[5] = proBmsPage;
			object service100;
			xamlServiceProvider100.Add(typeFromHandle199, service100 = new SimpleValueTargetProvider(array100, Label.FontSizeProperty, nameScope));
			xamlServiceProvider100.Add(typeof(IReferenceProvider), service100);
			Type typeFromHandle200 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver100 = new XmlNamespaceResolver();
			xmlNamespaceResolver100.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver100.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider100.Add(typeFromHandle200, new XamlTypeResolver(xmlNamespaceResolver100, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider100.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(203, 176)));
			label61.SetValue(fontSizeProperty100, ((IExtendedTypeConverter)fontSizeConverter100).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider100));
			label61.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label61.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label61.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label61);
			label62.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label62.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label62.SetValue(Label.TextProperty, "µ•ÃÂ«∑—π∏ÊæØ: 0000mV");
			label62.SetValue(Grid.RowProperty, 7);
			label62.SetValue(Grid.ColumnProperty, 0);
			label62.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty101 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter101 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider101 = new XamlServiceProvider();
			Type typeFromHandle201 = typeof(IProvideValueTarget);
			object[] array101 = new object[0 + 6];
			array101[0] = label62;
			array101[1] = grid6;
			array101[2] = stackLayout6;
			array101[3] = scrollView;
			array101[4] = grid9;
			array101[5] = proBmsPage;
			object service101;
			xamlServiceProvider101.Add(typeFromHandle201, service101 = new SimpleValueTargetProvider(array101, Label.FontSizeProperty, nameScope));
			xamlServiceProvider101.Add(typeof(IReferenceProvider), service101);
			Type typeFromHandle202 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver101 = new XmlNamespaceResolver();
			xmlNamespaceResolver101.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver101.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider101.Add(typeFromHandle202, new XamlTypeResolver(xmlNamespaceResolver101, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider101.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(204, 176)));
			label62.SetValue(fontSizeProperty101, ((IExtendedTypeConverter)fontSizeConverter101).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider101));
			label62.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label62.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label62.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label62);
			label63.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label63.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label63.SetValue(Label.TextProperty, "µÕµÁ¡ø∏ÊæØ: 0000mV");
			label63.SetValue(Grid.RowProperty, 7);
			label63.SetValue(Grid.ColumnProperty, 1);
			label63.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty102 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter102 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider102 = new XamlServiceProvider();
			Type typeFromHandle203 = typeof(IProvideValueTarget);
			object[] array102 = new object[0 + 6];
			array102[0] = label63;
			array102[1] = grid6;
			array102[2] = stackLayout6;
			array102[3] = scrollView;
			array102[4] = grid9;
			array102[5] = proBmsPage;
			object service102;
			xamlServiceProvider102.Add(typeFromHandle203, service102 = new SimpleValueTargetProvider(array102, Label.FontSizeProperty, nameScope));
			xamlServiceProvider102.Add(typeof(IReferenceProvider), service102);
			Type typeFromHandle204 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver102 = new XmlNamespaceResolver();
			xmlNamespaceResolver102.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver102.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider102.Add(typeFromHandle204, new XamlTypeResolver(xmlNamespaceResolver102, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider102.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(205, 173)));
			label63.SetValue(fontSizeProperty102, ((IExtendedTypeConverter)fontSizeConverter102).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider102));
			label63.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label63.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label63.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label63);
			label64.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label64.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label64.SetValue(Label.TextProperty, "≥‰µÁ∏ﬂŒ¬±£ª§: 0000C");
			label64.SetValue(Grid.RowProperty, 8);
			label64.SetValue(Grid.ColumnProperty, 0);
			label64.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty103 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter103 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider103 = new XamlServiceProvider();
			Type typeFromHandle205 = typeof(IProvideValueTarget);
			object[] array103 = new object[0 + 6];
			array103[0] = label64;
			array103[1] = grid6;
			array103[2] = stackLayout6;
			array103[3] = scrollView;
			array103[4] = grid9;
			array103[5] = proBmsPage;
			object service103;
			xamlServiceProvider103.Add(typeFromHandle205, service103 = new SimpleValueTargetProvider(array103, Label.FontSizeProperty, nameScope));
			xamlServiceProvider103.Add(typeof(IReferenceProvider), service103);
			Type typeFromHandle206 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver103 = new XmlNamespaceResolver();
			xmlNamespaceResolver103.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver103.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider103.Add(typeFromHandle206, new XamlTypeResolver(xmlNamespaceResolver103, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider103.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(206, 180)));
			label64.SetValue(fontSizeProperty103, ((IExtendedTypeConverter)fontSizeConverter103).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider103));
			label64.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label64.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label64.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label64);
			label65.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label65.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label65.SetValue(Label.TextProperty, "≥‰µÁ∏ﬂŒ¬ª÷∏¥: 0000C");
			label65.SetValue(Grid.RowProperty, 8);
			label65.SetValue(Grid.ColumnProperty, 1);
			label65.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty104 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter104 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider104 = new XamlServiceProvider();
			Type typeFromHandle207 = typeof(IProvideValueTarget);
			object[] array104 = new object[0 + 6];
			array104[0] = label65;
			array104[1] = grid6;
			array104[2] = stackLayout6;
			array104[3] = scrollView;
			array104[4] = grid9;
			array104[5] = proBmsPage;
			object service104;
			xamlServiceProvider104.Add(typeFromHandle207, service104 = new SimpleValueTargetProvider(array104, Label.FontSizeProperty, nameScope));
			xamlServiceProvider104.Add(typeof(IReferenceProvider), service104);
			Type typeFromHandle208 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver104 = new XmlNamespaceResolver();
			xmlNamespaceResolver104.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver104.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider104.Add(typeFromHandle208, new XamlTypeResolver(xmlNamespaceResolver104, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider104.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(207, 179)));
			label65.SetValue(fontSizeProperty104, ((IExtendedTypeConverter)fontSizeConverter104).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider104));
			label65.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label65.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label65.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label65);
			label66.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label66.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label66.SetValue(Label.TextProperty, "∑≈µÁ∏ﬂŒ¬±£ª§: 0000C");
			label66.SetValue(Grid.RowProperty, 9);
			label66.SetValue(Grid.ColumnProperty, 0);
			label66.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty105 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter105 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider105 = new XamlServiceProvider();
			Type typeFromHandle209 = typeof(IProvideValueTarget);
			object[] array105 = new object[0 + 6];
			array105[0] = label66;
			array105[1] = grid6;
			array105[2] = stackLayout6;
			array105[3] = scrollView;
			array105[4] = grid9;
			array105[5] = proBmsPage;
			object service105;
			xamlServiceProvider105.Add(typeFromHandle209, service105 = new SimpleValueTargetProvider(array105, Label.FontSizeProperty, nameScope));
			xamlServiceProvider105.Add(typeof(IReferenceProvider), service105);
			Type typeFromHandle210 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver105 = new XmlNamespaceResolver();
			xmlNamespaceResolver105.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver105.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider105.Add(typeFromHandle210, new XamlTypeResolver(xmlNamespaceResolver105, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider105.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(208, 183)));
			label66.SetValue(fontSizeProperty105, ((IExtendedTypeConverter)fontSizeConverter105).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider105));
			label66.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label66.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label66.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label66);
			label67.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label67.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label67.SetValue(Label.TextProperty, "∑≈µÁ∏ﬂŒ¬ª÷∏¥: 0000C");
			label67.SetValue(Grid.RowProperty, 9);
			label67.SetValue(Grid.ColumnProperty, 1);
			label67.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty106 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter106 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider106 = new XamlServiceProvider();
			Type typeFromHandle211 = typeof(IProvideValueTarget);
			object[] array106 = new object[0 + 6];
			array106[0] = label67;
			array106[1] = grid6;
			array106[2] = stackLayout6;
			array106[3] = scrollView;
			array106[4] = grid9;
			array106[5] = proBmsPage;
			object service106;
			xamlServiceProvider106.Add(typeFromHandle211, service106 = new SimpleValueTargetProvider(array106, Label.FontSizeProperty, nameScope));
			xamlServiceProvider106.Add(typeof(IReferenceProvider), service106);
			Type typeFromHandle212 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver106 = new XmlNamespaceResolver();
			xmlNamespaceResolver106.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver106.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider106.Add(typeFromHandle212, new XamlTypeResolver(xmlNamespaceResolver106, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider106.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(209, 183)));
			label67.SetValue(fontSizeProperty106, ((IExtendedTypeConverter)fontSizeConverter106).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider106));
			label67.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label67.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label67.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label67);
			label68.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label68.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label68.SetValue(Label.TextProperty, "MOS∏ﬂŒ¬±£ª§: 0000C");
			label68.SetValue(Grid.RowProperty, 10);
			label68.SetValue(Grid.ColumnProperty, 0);
			label68.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty107 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter107 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider107 = new XamlServiceProvider();
			Type typeFromHandle213 = typeof(IProvideValueTarget);
			object[] array107 = new object[0 + 6];
			array107[0] = label68;
			array107[1] = grid6;
			array107[2] = stackLayout6;
			array107[3] = scrollView;
			array107[4] = grid9;
			array107[5] = proBmsPage;
			object service107;
			xamlServiceProvider107.Add(typeFromHandle213, service107 = new SimpleValueTargetProvider(array107, Label.FontSizeProperty, nameScope));
			xamlServiceProvider107.Add(typeof(IReferenceProvider), service107);
			Type typeFromHandle214 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver107 = new XmlNamespaceResolver();
			xmlNamespaceResolver107.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver107.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider107.Add(typeFromHandle214, new XamlTypeResolver(xmlNamespaceResolver107, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider107.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(210, 181)));
			label68.SetValue(fontSizeProperty107, ((IExtendedTypeConverter)fontSizeConverter107).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider107));
			label68.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label68.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label68.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label68);
			label69.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label69.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label69.SetValue(Label.TextProperty, "MOS∏ﬂŒ¬ª÷∏¥: 0000C");
			label69.SetValue(Grid.RowProperty, 10);
			label69.SetValue(Grid.ColumnProperty, 1);
			label69.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty108 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter108 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider108 = new XamlServiceProvider();
			Type typeFromHandle215 = typeof(IProvideValueTarget);
			object[] array108 = new object[0 + 6];
			array108[0] = label69;
			array108[1] = grid6;
			array108[2] = stackLayout6;
			array108[3] = scrollView;
			array108[4] = grid9;
			array108[5] = proBmsPage;
			object service108;
			xamlServiceProvider108.Add(typeFromHandle215, service108 = new SimpleValueTargetProvider(array108, Label.FontSizeProperty, nameScope));
			xamlServiceProvider108.Add(typeof(IReferenceProvider), service108);
			Type typeFromHandle216 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver108 = new XmlNamespaceResolver();
			xmlNamespaceResolver108.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver108.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider108.Add(typeFromHandle216, new XamlTypeResolver(xmlNamespaceResolver108, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider108.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(211, 181)));
			label69.SetValue(fontSizeProperty108, ((IExtendedTypeConverter)fontSizeConverter108).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider108));
			label69.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label69.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label69.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label69);
			label70.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label70.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label70.SetValue(Label.TextProperty, "≥‰µÁµÕŒ¬±£ª§: 0000C");
			label70.SetValue(Grid.RowProperty, 11);
			label70.SetValue(Grid.ColumnProperty, 0);
			label70.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty109 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter109 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider109 = new XamlServiceProvider();
			Type typeFromHandle217 = typeof(IProvideValueTarget);
			object[] array109 = new object[0 + 6];
			array109[0] = label70;
			array109[1] = grid6;
			array109[2] = stackLayout6;
			array109[3] = scrollView;
			array109[4] = grid9;
			array109[5] = proBmsPage;
			object service109;
			xamlServiceProvider109.Add(typeFromHandle217, service109 = new SimpleValueTargetProvider(array109, Label.FontSizeProperty, nameScope));
			xamlServiceProvider109.Add(typeof(IReferenceProvider), service109);
			Type typeFromHandle218 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver109 = new XmlNamespaceResolver();
			xmlNamespaceResolver109.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver109.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider109.Add(typeFromHandle218, new XamlTypeResolver(xmlNamespaceResolver109, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider109.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(212, 183)));
			label70.SetValue(fontSizeProperty109, ((IExtendedTypeConverter)fontSizeConverter109).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider109));
			label70.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label70.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label70.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label70);
			label71.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label71.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label71.SetValue(Label.TextProperty, "≥‰µÁµÕŒ¬ª÷∏¥: 0000C");
			label71.SetValue(Grid.RowProperty, 11);
			label71.SetValue(Grid.ColumnProperty, 1);
			label71.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty110 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter110 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider110 = new XamlServiceProvider();
			Type typeFromHandle219 = typeof(IProvideValueTarget);
			object[] array110 = new object[0 + 6];
			array110[0] = label71;
			array110[1] = grid6;
			array110[2] = stackLayout6;
			array110[3] = scrollView;
			array110[4] = grid9;
			array110[5] = proBmsPage;
			object service110;
			xamlServiceProvider110.Add(typeFromHandle219, service110 = new SimpleValueTargetProvider(array110, Label.FontSizeProperty, nameScope));
			xamlServiceProvider110.Add(typeof(IReferenceProvider), service110);
			Type typeFromHandle220 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver110 = new XmlNamespaceResolver();
			xmlNamespaceResolver110.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver110.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider110.Add(typeFromHandle220, new XamlTypeResolver(xmlNamespaceResolver110, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider110.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(213, 183)));
			label71.SetValue(fontSizeProperty110, ((IExtendedTypeConverter)fontSizeConverter110).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider110));
			label71.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label71.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label71.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label71);
			label72.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label72.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label72.SetValue(Label.TextProperty, "∑≈µÁµÕŒ¬±£ª§: 0000C");
			label72.SetValue(Grid.RowProperty, 12);
			label72.SetValue(Grid.ColumnProperty, 0);
			label72.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty111 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter111 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider111 = new XamlServiceProvider();
			Type typeFromHandle221 = typeof(IProvideValueTarget);
			object[] array111 = new object[0 + 6];
			array111[0] = label72;
			array111[1] = grid6;
			array111[2] = stackLayout6;
			array111[3] = scrollView;
			array111[4] = grid9;
			array111[5] = proBmsPage;
			object service111;
			xamlServiceProvider111.Add(typeFromHandle221, service111 = new SimpleValueTargetProvider(array111, Label.FontSizeProperty, nameScope));
			xamlServiceProvider111.Add(typeof(IReferenceProvider), service111);
			Type typeFromHandle222 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver111 = new XmlNamespaceResolver();
			xmlNamespaceResolver111.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver111.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider111.Add(typeFromHandle222, new XamlTypeResolver(xmlNamespaceResolver111, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider111.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(214, 187)));
			label72.SetValue(fontSizeProperty111, ((IExtendedTypeConverter)fontSizeConverter111).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider111));
			label72.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label72.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label72.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label72);
			label73.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label73.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label73.SetValue(Label.TextProperty, "∑≈µÁµÕŒ¬ª÷∏¥: 0000C");
			label73.SetValue(Grid.RowProperty, 12);
			label73.SetValue(Grid.ColumnProperty, 1);
			label73.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty112 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter112 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider112 = new XamlServiceProvider();
			Type typeFromHandle223 = typeof(IProvideValueTarget);
			object[] array112 = new object[0 + 6];
			array112[0] = label73;
			array112[1] = grid6;
			array112[2] = stackLayout6;
			array112[3] = scrollView;
			array112[4] = grid9;
			array112[5] = proBmsPage;
			object service112;
			xamlServiceProvider112.Add(typeFromHandle223, service112 = new SimpleValueTargetProvider(array112, Label.FontSizeProperty, nameScope));
			xamlServiceProvider112.Add(typeof(IReferenceProvider), service112);
			Type typeFromHandle224 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver112 = new XmlNamespaceResolver();
			xmlNamespaceResolver112.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver112.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider112.Add(typeFromHandle224, new XamlTypeResolver(xmlNamespaceResolver112, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider112.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(215, 187)));
			label73.SetValue(fontSizeProperty112, ((IExtendedTypeConverter)fontSizeConverter112).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider112));
			label73.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label73.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label73.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label73);
			label74.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label74.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label74.SetValue(Label.TextProperty, "◊‘∂Øπÿª˙µÁ—π: 0.000V");
			label74.SetValue(Grid.RowProperty, 13);
			label74.SetValue(Grid.ColumnProperty, 0);
			label74.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty113 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter113 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider113 = new XamlServiceProvider();
			Type typeFromHandle225 = typeof(IProvideValueTarget);
			object[] array113 = new object[0 + 6];
			array113[0] = label74;
			array113[1] = grid6;
			array113[2] = stackLayout6;
			array113[3] = scrollView;
			array113[4] = grid9;
			array113[5] = proBmsPage;
			object service113;
			xamlServiceProvider113.Add(typeFromHandle225, service113 = new SimpleValueTargetProvider(array113, Label.FontSizeProperty, nameScope));
			xamlServiceProvider113.Add(typeof(IReferenceProvider), service113);
			Type typeFromHandle226 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver113 = new XmlNamespaceResolver();
			xmlNamespaceResolver113.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver113.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider113.Add(typeFromHandle226, new XamlTypeResolver(xmlNamespaceResolver113, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider113.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(216, 176)));
			label74.SetValue(fontSizeProperty113, ((IExtendedTypeConverter)fontSizeConverter113).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider113));
			label74.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label74.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label74.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label74);
			button40.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button40.Clicked += proBmsPage.OverSVolProtect_TextChanged;
			button40.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button40.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button40.SetValue(Grid.RowProperty, 0);
			button40.SetValue(Grid.ColumnProperty, 0);
			button40.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty114 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter114 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider114 = new XamlServiceProvider();
			Type typeFromHandle227 = typeof(IProvideValueTarget);
			object[] array114 = new object[0 + 6];
			array114[0] = button40;
			array114[1] = grid6;
			array114[2] = stackLayout6;
			array114[3] = scrollView;
			array114[4] = grid9;
			array114[5] = proBmsPage;
			object service114;
			xamlServiceProvider114.Add(typeFromHandle227, service114 = new SimpleValueTargetProvider(array114, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider114.Add(typeof(IReferenceProvider), service114);
			Type typeFromHandle228 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver114 = new XmlNamespaceResolver();
			xmlNamespaceResolver114.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver114.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider114.Add(typeFromHandle228, new XamlTypeResolver(xmlNamespaceResolver114, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider114.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(218, 188)));
			button40.SetValue(fontSizeProperty114, ((IExtendedTypeConverter)fontSizeConverter114).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider114));
			button40.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button40.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button40.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button40);
			button41.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button41.Clicked += proBmsPage.OverSVolRestore_TextChanged;
			button41.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button41.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button41.SetValue(Grid.RowProperty, 0);
			button41.SetValue(Grid.ColumnProperty, 1);
			button41.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty115 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter115 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider115 = new XamlServiceProvider();
			Type typeFromHandle229 = typeof(IProvideValueTarget);
			object[] array115 = new object[0 + 6];
			array115[0] = button41;
			array115[1] = grid6;
			array115[2] = stackLayout6;
			array115[3] = scrollView;
			array115[4] = grid9;
			array115[5] = proBmsPage;
			object service115;
			xamlServiceProvider115.Add(typeFromHandle229, service115 = new SimpleValueTargetProvider(array115, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider115.Add(typeof(IReferenceProvider), service115);
			Type typeFromHandle230 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver115 = new XmlNamespaceResolver();
			xmlNamespaceResolver115.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver115.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider115.Add(typeFromHandle230, new XamlTypeResolver(xmlNamespaceResolver115, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider115.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(219, 190)));
			button41.SetValue(fontSizeProperty115, ((IExtendedTypeConverter)fontSizeConverter115).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider115));
			button41.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button41.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button41.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button41);
			button42.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button42.Clicked += proBmsPage.LowSVolProtect_TextChanged;
			button42.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button42.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button42.SetValue(Grid.RowProperty, 1);
			button42.SetValue(Grid.ColumnProperty, 0);
			button42.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty116 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter116 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider116 = new XamlServiceProvider();
			Type typeFromHandle231 = typeof(IProvideValueTarget);
			object[] array116 = new object[0 + 6];
			array116[0] = button42;
			array116[1] = grid6;
			array116[2] = stackLayout6;
			array116[3] = scrollView;
			array116[4] = grid9;
			array116[5] = proBmsPage;
			object service116;
			xamlServiceProvider116.Add(typeFromHandle231, service116 = new SimpleValueTargetProvider(array116, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider116.Add(typeof(IReferenceProvider), service116);
			Type typeFromHandle232 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver116 = new XmlNamespaceResolver();
			xmlNamespaceResolver116.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver116.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider116.Add(typeFromHandle232, new XamlTypeResolver(xmlNamespaceResolver116, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider116.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(220, 189)));
			button42.SetValue(fontSizeProperty116, ((IExtendedTypeConverter)fontSizeConverter116).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider116));
			button42.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button42.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button42.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button42);
			button43.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button43.Clicked += proBmsPage.LowSVolRestore_TextChanged;
			button43.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button43.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button43.SetValue(Grid.RowProperty, 1);
			button43.SetValue(Grid.ColumnProperty, 1);
			button43.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty117 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter117 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider117 = new XamlServiceProvider();
			Type typeFromHandle233 = typeof(IProvideValueTarget);
			object[] array117 = new object[0 + 6];
			array117[0] = button43;
			array117[1] = grid6;
			array117[2] = stackLayout6;
			array117[3] = scrollView;
			array117[4] = grid9;
			array117[5] = proBmsPage;
			object service117;
			xamlServiceProvider117.Add(typeFromHandle233, service117 = new SimpleValueTargetProvider(array117, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider117.Add(typeof(IReferenceProvider), service117);
			Type typeFromHandle234 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver117 = new XmlNamespaceResolver();
			xmlNamespaceResolver117.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver117.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider117.Add(typeFromHandle234, new XamlTypeResolver(xmlNamespaceResolver117, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider117.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(221, 189)));
			button43.SetValue(fontSizeProperty117, ((IExtendedTypeConverter)fontSizeConverter117).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider117));
			button43.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button43.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button43.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button43);
			button44.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button44.Clicked += proBmsPage.DeltaSVolProtect_TextChanged;
			button44.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button44.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button44.SetValue(Grid.RowProperty, 2);
			button44.SetValue(Grid.ColumnProperty, 0);
			button44.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty118 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter118 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider118 = new XamlServiceProvider();
			Type typeFromHandle235 = typeof(IProvideValueTarget);
			object[] array118 = new object[0 + 6];
			array118[0] = button44;
			array118[1] = grid6;
			array118[2] = stackLayout6;
			array118[3] = scrollView;
			array118[4] = grid9;
			array118[5] = proBmsPage;
			object service118;
			xamlServiceProvider118.Add(typeFromHandle235, service118 = new SimpleValueTargetProvider(array118, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider118.Add(typeof(IReferenceProvider), service118);
			Type typeFromHandle236 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver118 = new XmlNamespaceResolver();
			xmlNamespaceResolver118.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver118.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider118.Add(typeFromHandle236, new XamlTypeResolver(xmlNamespaceResolver118, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider118.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(222, 191)));
			button44.SetValue(fontSizeProperty118, ((IExtendedTypeConverter)fontSizeConverter118).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider118));
			button44.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button44.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button44.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button44);
			button45.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button45.Clicked += proBmsPage.DeltaSVolRestore_TextChanged;
			button45.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button45.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button45.SetValue(Grid.RowProperty, 2);
			button45.SetValue(Grid.ColumnProperty, 1);
			button45.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty119 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter119 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider119 = new XamlServiceProvider();
			Type typeFromHandle237 = typeof(IProvideValueTarget);
			object[] array119 = new object[0 + 6];
			array119[0] = button45;
			array119[1] = grid6;
			array119[2] = stackLayout6;
			array119[3] = scrollView;
			array119[4] = grid9;
			array119[5] = proBmsPage;
			object service119;
			xamlServiceProvider119.Add(typeFromHandle237, service119 = new SimpleValueTargetProvider(array119, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider119.Add(typeof(IReferenceProvider), service119);
			Type typeFromHandle238 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver119 = new XmlNamespaceResolver();
			xmlNamespaceResolver119.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver119.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider119.Add(typeFromHandle238, new XamlTypeResolver(xmlNamespaceResolver119, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider119.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(223, 192)));
			button45.SetValue(fontSizeProperty119, ((IExtendedTypeConverter)fontSizeConverter119).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider119));
			button45.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button45.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button45.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button45);
			button46.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button46.Clicked += proBmsPage.OverTVolProtect_TextChanged;
			button46.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button46.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button46.SetValue(Grid.RowProperty, 3);
			button46.SetValue(Grid.ColumnProperty, 0);
			button46.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty120 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter120 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider120 = new XamlServiceProvider();
			Type typeFromHandle239 = typeof(IProvideValueTarget);
			object[] array120 = new object[0 + 6];
			array120[0] = button46;
			array120[1] = grid6;
			array120[2] = stackLayout6;
			array120[3] = scrollView;
			array120[4] = grid9;
			array120[5] = proBmsPage;
			object service120;
			xamlServiceProvider120.Add(typeFromHandle239, service120 = new SimpleValueTargetProvider(array120, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider120.Add(typeof(IReferenceProvider), service120);
			Type typeFromHandle240 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver120 = new XmlNamespaceResolver();
			xmlNamespaceResolver120.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver120.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider120.Add(typeFromHandle240, new XamlTypeResolver(xmlNamespaceResolver120, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider120.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(224, 191)));
			button46.SetValue(fontSizeProperty120, ((IExtendedTypeConverter)fontSizeConverter120).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider120));
			button46.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button46.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button46.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button46);
			button47.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button47.Clicked += proBmsPage.OverTVolRestore_TextChanged;
			button47.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button47.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button47.SetValue(Grid.RowProperty, 3);
			button47.SetValue(Grid.ColumnProperty, 1);
			button47.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty121 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter121 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider121 = new XamlServiceProvider();
			Type typeFromHandle241 = typeof(IProvideValueTarget);
			object[] array121 = new object[0 + 6];
			array121[0] = button47;
			array121[1] = grid6;
			array121[2] = stackLayout6;
			array121[3] = scrollView;
			array121[4] = grid9;
			array121[5] = proBmsPage;
			object service121;
			xamlServiceProvider121.Add(typeFromHandle241, service121 = new SimpleValueTargetProvider(array121, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider121.Add(typeof(IReferenceProvider), service121);
			Type typeFromHandle242 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver121 = new XmlNamespaceResolver();
			xmlNamespaceResolver121.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver121.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider121.Add(typeFromHandle242, new XamlTypeResolver(xmlNamespaceResolver121, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider121.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(225, 192)));
			button47.SetValue(fontSizeProperty121, ((IExtendedTypeConverter)fontSizeConverter121).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider121));
			button47.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button47.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button47.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button47);
			button48.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button48.Clicked += proBmsPage.BalanceCurrent_TextChanged;
			button48.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button48.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button48.SetValue(Grid.RowProperty, 4);
			button48.SetValue(Grid.ColumnProperty, 0);
			button48.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty122 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter122 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider122 = new XamlServiceProvider();
			Type typeFromHandle243 = typeof(IProvideValueTarget);
			object[] array122 = new object[0 + 6];
			array122[0] = button48;
			array122[1] = grid6;
			array122[2] = stackLayout6;
			array122[3] = scrollView;
			array122[4] = grid9;
			array122[5] = proBmsPage;
			object service122;
			xamlServiceProvider122.Add(typeFromHandle243, service122 = new SimpleValueTargetProvider(array122, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider122.Add(typeof(IReferenceProvider), service122);
			Type typeFromHandle244 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver122 = new XmlNamespaceResolver();
			xmlNamespaceResolver122.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver122.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider122.Add(typeFromHandle244, new XamlTypeResolver(xmlNamespaceResolver122, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider122.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(226, 191)));
			button48.SetValue(fontSizeProperty122, ((IExtendedTypeConverter)fontSizeConverter122).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider122));
			button48.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button48.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button48.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button48);
			button49.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button49.Clicked += proBmsPage.SndOverCurrentProtect_TextChanged;
			button49.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button49.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button49.SetValue(Grid.RowProperty, 4);
			button49.SetValue(Grid.ColumnProperty, 1);
			button49.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty123 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter123 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider123 = new XamlServiceProvider();
			Type typeFromHandle245 = typeof(IProvideValueTarget);
			object[] array123 = new object[0 + 6];
			array123[0] = button49;
			array123[1] = grid6;
			array123[2] = stackLayout6;
			array123[3] = scrollView;
			array123[4] = grid9;
			array123[5] = proBmsPage;
			object service123;
			xamlServiceProvider123.Add(typeFromHandle245, service123 = new SimpleValueTargetProvider(array123, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider123.Add(typeof(IReferenceProvider), service123);
			Type typeFromHandle246 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver123 = new XmlNamespaceResolver();
			xmlNamespaceResolver123.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver123.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider123.Add(typeFromHandle246, new XamlTypeResolver(xmlNamespaceResolver123, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider123.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(227, 197)));
			button49.SetValue(fontSizeProperty123, ((IExtendedTypeConverter)fontSizeConverter123).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider123));
			button49.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button49.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button49.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button49);
			button50.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button50.Clicked += proBmsPage.ShortProtect_TextChanged;
			button50.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button50.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button50.SetValue(Grid.RowProperty, 5);
			button50.SetValue(Grid.ColumnProperty, 0);
			button50.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty124 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter124 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider124 = new XamlServiceProvider();
			Type typeFromHandle247 = typeof(IProvideValueTarget);
			object[] array124 = new object[0 + 6];
			array124[0] = button50;
			array124[1] = grid6;
			array124[2] = stackLayout6;
			array124[3] = scrollView;
			array124[4] = grid9;
			array124[5] = proBmsPage;
			object service124;
			xamlServiceProvider124.Add(typeFromHandle247, service124 = new SimpleValueTargetProvider(array124, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider124.Add(typeof(IReferenceProvider), service124);
			Type typeFromHandle248 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver124 = new XmlNamespaceResolver();
			xmlNamespaceResolver124.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver124.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider124.Add(typeFromHandle248, new XamlTypeResolver(xmlNamespaceResolver124, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider124.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(228, 188)));
			button50.SetValue(fontSizeProperty124, ((IExtendedTypeConverter)fontSizeConverter124).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider124));
			button50.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button50.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button50.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button50);
			button51.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button51.Clicked += proBmsPage.SndOverCurrentDelay_TextChanged;
			button51.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button51.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button51.SetValue(Grid.RowProperty, 5);
			button51.SetValue(Grid.ColumnProperty, 1);
			button51.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty125 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter125 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider125 = new XamlServiceProvider();
			Type typeFromHandle249 = typeof(IProvideValueTarget);
			object[] array125 = new object[0 + 6];
			array125[0] = button51;
			array125[1] = grid6;
			array125[2] = stackLayout6;
			array125[3] = scrollView;
			array125[4] = grid9;
			array125[5] = proBmsPage;
			object service125;
			xamlServiceProvider125.Add(typeFromHandle249, service125 = new SimpleValueTargetProvider(array125, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider125.Add(typeof(IReferenceProvider), service125);
			Type typeFromHandle250 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver125 = new XmlNamespaceResolver();
			xmlNamespaceResolver125.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver125.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider125.Add(typeFromHandle250, new XamlTypeResolver(xmlNamespaceResolver125, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider125.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(229, 194)));
			button51.SetValue(fontSizeProperty125, ((IExtendedTypeConverter)fontSizeConverter125).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider125));
			button51.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button51.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button51.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button51);
			button52.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button52.Clicked += proBmsPage.ShortDelay_TextChanged;
			button52.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button52.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button52.SetValue(Grid.RowProperty, 6);
			button52.SetValue(Grid.ColumnProperty, 0);
			button52.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty126 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter126 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider126 = new XamlServiceProvider();
			Type typeFromHandle251 = typeof(IProvideValueTarget);
			object[] array126 = new object[0 + 6];
			array126[0] = button52;
			array126[1] = grid6;
			array126[2] = stackLayout6;
			array126[3] = scrollView;
			array126[4] = grid9;
			array126[5] = proBmsPage;
			object service126;
			xamlServiceProvider126.Add(typeFromHandle251, service126 = new SimpleValueTargetProvider(array126, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider126.Add(typeof(IReferenceProvider), service126);
			Type typeFromHandle252 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver126 = new XmlNamespaceResolver();
			xmlNamespaceResolver126.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver126.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider126.Add(typeFromHandle252, new XamlTypeResolver(xmlNamespaceResolver126, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider126.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(230, 186)));
			button52.SetValue(fontSizeProperty126, ((IExtendedTypeConverter)fontSizeConverter126).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider126));
			button52.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button52.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button52.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button52);
			button53.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button53.Clicked += proBmsPage.OverSVolAlarm_TextChanged;
			button53.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button53.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button53.SetValue(Grid.RowProperty, 6);
			button53.SetValue(Grid.ColumnProperty, 1);
			button53.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty127 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter127 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider127 = new XamlServiceProvider();
			Type typeFromHandle253 = typeof(IProvideValueTarget);
			object[] array127 = new object[0 + 6];
			array127[0] = button53;
			array127[1] = grid6;
			array127[2] = stackLayout6;
			array127[3] = scrollView;
			array127[4] = grid9;
			array127[5] = proBmsPage;
			object service127;
			xamlServiceProvider127.Add(typeFromHandle253, service127 = new SimpleValueTargetProvider(array127, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider127.Add(typeof(IReferenceProvider), service127);
			Type typeFromHandle254 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver127 = new XmlNamespaceResolver();
			xmlNamespaceResolver127.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver127.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider127.Add(typeFromHandle254, new XamlTypeResolver(xmlNamespaceResolver127, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider127.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(231, 188)));
			button53.SetValue(fontSizeProperty127, ((IExtendedTypeConverter)fontSizeConverter127).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider127));
			button53.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button53.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button53.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button53);
			button54.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button54.Clicked += proBmsPage.LowSVolAlarm_TextChanged;
			button54.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button54.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button54.SetValue(Grid.RowProperty, 7);
			button54.SetValue(Grid.ColumnProperty, 0);
			button54.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty128 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter128 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider128 = new XamlServiceProvider();
			Type typeFromHandle255 = typeof(IProvideValueTarget);
			object[] array128 = new object[0 + 6];
			array128[0] = button54;
			array128[1] = grid6;
			array128[2] = stackLayout6;
			array128[3] = scrollView;
			array128[4] = grid9;
			array128[5] = proBmsPage;
			object service128;
			xamlServiceProvider128.Add(typeFromHandle255, service128 = new SimpleValueTargetProvider(array128, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider128.Add(typeof(IReferenceProvider), service128);
			Type typeFromHandle256 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver128 = new XmlNamespaceResolver();
			xmlNamespaceResolver128.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver128.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider128.Add(typeFromHandle256, new XamlTypeResolver(xmlNamespaceResolver128, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider128.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(232, 186)));
			button54.SetValue(fontSizeProperty128, ((IExtendedTypeConverter)fontSizeConverter128).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider128));
			button54.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button54.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button54.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button54);
			button55.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button55.Clicked += proBmsPage.LowSocAlarm_TextChanged;
			button55.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button55.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button55.SetValue(Grid.RowProperty, 7);
			button55.SetValue(Grid.ColumnProperty, 1);
			button55.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty129 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter129 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider129 = new XamlServiceProvider();
			Type typeFromHandle257 = typeof(IProvideValueTarget);
			object[] array129 = new object[0 + 6];
			array129[0] = button55;
			array129[1] = grid6;
			array129[2] = stackLayout6;
			array129[3] = scrollView;
			array129[4] = grid9;
			array129[5] = proBmsPage;
			object service129;
			xamlServiceProvider129.Add(typeFromHandle257, service129 = new SimpleValueTargetProvider(array129, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider129.Add(typeof(IReferenceProvider), service129);
			Type typeFromHandle258 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver129 = new XmlNamespaceResolver();
			xmlNamespaceResolver129.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver129.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider129.Add(typeFromHandle258, new XamlTypeResolver(xmlNamespaceResolver129, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider129.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(233, 186)));
			button55.SetValue(fontSizeProperty129, ((IExtendedTypeConverter)fontSizeConverter129).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider129));
			button55.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button55.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button55.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button55);
			button56.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button56.Clicked += proBmsPage.ChargeTempProtect_TextChanged;
			button56.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button56.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button56.SetValue(Grid.RowProperty, 8);
			button56.SetValue(Grid.ColumnProperty, 0);
			button56.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty130 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter130 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider130 = new XamlServiceProvider();
			Type typeFromHandle259 = typeof(IProvideValueTarget);
			object[] array130 = new object[0 + 6];
			array130[0] = button56;
			array130[1] = grid6;
			array130[2] = stackLayout6;
			array130[3] = scrollView;
			array130[4] = grid9;
			array130[5] = proBmsPage;
			object service130;
			xamlServiceProvider130.Add(typeFromHandle259, service130 = new SimpleValueTargetProvider(array130, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider130.Add(typeof(IReferenceProvider), service130);
			Type typeFromHandle260 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver130 = new XmlNamespaceResolver();
			xmlNamespaceResolver130.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver130.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider130.Add(typeFromHandle260, new XamlTypeResolver(xmlNamespaceResolver130, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider130.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(235, 190)));
			button56.SetValue(fontSizeProperty130, ((IExtendedTypeConverter)fontSizeConverter130).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider130));
			button56.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button56.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button56.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button56);
			button57.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button57.Clicked += proBmsPage.ChargeTempRestore_TextChanged;
			button57.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button57.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button57.SetValue(Grid.RowProperty, 8);
			button57.SetValue(Grid.ColumnProperty, 1);
			button57.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty131 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter131 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider131 = new XamlServiceProvider();
			Type typeFromHandle261 = typeof(IProvideValueTarget);
			object[] array131 = new object[0 + 6];
			array131[0] = button57;
			array131[1] = grid6;
			array131[2] = stackLayout6;
			array131[3] = scrollView;
			array131[4] = grid9;
			array131[5] = proBmsPage;
			object service131;
			xamlServiceProvider131.Add(typeFromHandle261, service131 = new SimpleValueTargetProvider(array131, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider131.Add(typeof(IReferenceProvider), service131);
			Type typeFromHandle262 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver131 = new XmlNamespaceResolver();
			xmlNamespaceResolver131.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver131.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider131.Add(typeFromHandle262, new XamlTypeResolver(xmlNamespaceResolver131, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider131.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(236, 192)));
			button57.SetValue(fontSizeProperty131, ((IExtendedTypeConverter)fontSizeConverter131).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider131));
			button57.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button57.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button57.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button57);
			button58.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button58.Clicked += proBmsPage.DisChargeTempProtect_TextChanged;
			button58.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button58.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button58.SetValue(Grid.RowProperty, 9);
			button58.SetValue(Grid.ColumnProperty, 0);
			button58.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty132 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter132 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider132 = new XamlServiceProvider();
			Type typeFromHandle263 = typeof(IProvideValueTarget);
			object[] array132 = new object[0 + 6];
			array132[0] = button58;
			array132[1] = grid6;
			array132[2] = stackLayout6;
			array132[3] = scrollView;
			array132[4] = grid9;
			array132[5] = proBmsPage;
			object service132;
			xamlServiceProvider132.Add(typeFromHandle263, service132 = new SimpleValueTargetProvider(array132, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider132.Add(typeof(IReferenceProvider), service132);
			Type typeFromHandle264 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver132 = new XmlNamespaceResolver();
			xmlNamespaceResolver132.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver132.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider132.Add(typeFromHandle264, new XamlTypeResolver(xmlNamespaceResolver132, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider132.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(237, 197)));
			button58.SetValue(fontSizeProperty132, ((IExtendedTypeConverter)fontSizeConverter132).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider132));
			button58.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button58.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button58.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button58);
			button59.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button59.Clicked += proBmsPage.DisChargeTempRestore_TextChanged;
			button59.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button59.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button59.SetValue(Grid.RowProperty, 9);
			button59.SetValue(Grid.ColumnProperty, 1);
			button59.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty133 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter133 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider133 = new XamlServiceProvider();
			Type typeFromHandle265 = typeof(IProvideValueTarget);
			object[] array133 = new object[0 + 6];
			array133[0] = button59;
			array133[1] = grid6;
			array133[2] = stackLayout6;
			array133[3] = scrollView;
			array133[4] = grid9;
			array133[5] = proBmsPage;
			object service133;
			xamlServiceProvider133.Add(typeFromHandle265, service133 = new SimpleValueTargetProvider(array133, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider133.Add(typeof(IReferenceProvider), service133);
			Type typeFromHandle266 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver133 = new XmlNamespaceResolver();
			xmlNamespaceResolver133.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver133.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider133.Add(typeFromHandle266, new XamlTypeResolver(xmlNamespaceResolver133, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider133.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(238, 195)));
			button59.SetValue(fontSizeProperty133, ((IExtendedTypeConverter)fontSizeConverter133).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider133));
			button59.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button59.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button59.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button59);
			button60.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button60.Clicked += proBmsPage.BMSMosTempProtect_TextChanged;
			button60.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button60.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button60.SetValue(Grid.RowProperty, 10);
			button60.SetValue(Grid.ColumnProperty, 0);
			button60.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty134 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter134 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider134 = new XamlServiceProvider();
			Type typeFromHandle267 = typeof(IProvideValueTarget);
			object[] array134 = new object[0 + 6];
			array134[0] = button60;
			array134[1] = grid6;
			array134[2] = stackLayout6;
			array134[3] = scrollView;
			array134[4] = grid9;
			array134[5] = proBmsPage;
			object service134;
			xamlServiceProvider134.Add(typeFromHandle267, service134 = new SimpleValueTargetProvider(array134, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider134.Add(typeof(IReferenceProvider), service134);
			Type typeFromHandle268 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver134 = new XmlNamespaceResolver();
			xmlNamespaceResolver134.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver134.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider134.Add(typeFromHandle268, new XamlTypeResolver(xmlNamespaceResolver134, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider134.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(239, 194)));
			button60.SetValue(fontSizeProperty134, ((IExtendedTypeConverter)fontSizeConverter134).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider134));
			button60.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button60.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button60.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button60);
			button61.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button61.Clicked += proBmsPage.BMSMosTempRestore_TextChanged;
			button61.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button61.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button61.SetValue(Grid.RowProperty, 10);
			button61.SetValue(Grid.ColumnProperty, 1);
			button61.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty135 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter135 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider135 = new XamlServiceProvider();
			Type typeFromHandle269 = typeof(IProvideValueTarget);
			object[] array135 = new object[0 + 6];
			array135[0] = button61;
			array135[1] = grid6;
			array135[2] = stackLayout6;
			array135[3] = scrollView;
			array135[4] = grid9;
			array135[5] = proBmsPage;
			object service135;
			xamlServiceProvider135.Add(typeFromHandle269, service135 = new SimpleValueTargetProvider(array135, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider135.Add(typeof(IReferenceProvider), service135);
			Type typeFromHandle270 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver135 = new XmlNamespaceResolver();
			xmlNamespaceResolver135.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver135.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider135.Add(typeFromHandle270, new XamlTypeResolver(xmlNamespaceResolver135, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider135.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(240, 192)));
			button61.SetValue(fontSizeProperty135, ((IExtendedTypeConverter)fontSizeConverter135).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider135));
			button61.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button61.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button61.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button61);
			button62.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button62.Clicked += proBmsPage.ChargeLowTempProtect_TextChanged;
			button62.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button62.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button62.SetValue(Grid.RowProperty, 11);
			button62.SetValue(Grid.ColumnProperty, 0);
			button62.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty136 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter136 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider136 = new XamlServiceProvider();
			Type typeFromHandle271 = typeof(IProvideValueTarget);
			object[] array136 = new object[0 + 6];
			array136[0] = button62;
			array136[1] = grid6;
			array136[2] = stackLayout6;
			array136[3] = scrollView;
			array136[4] = grid9;
			array136[5] = proBmsPage;
			object service136;
			xamlServiceProvider136.Add(typeFromHandle271, service136 = new SimpleValueTargetProvider(array136, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider136.Add(typeof(IReferenceProvider), service136);
			Type typeFromHandle272 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver136 = new XmlNamespaceResolver();
			xmlNamespaceResolver136.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver136.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider136.Add(typeFromHandle272, new XamlTypeResolver(xmlNamespaceResolver136, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider136.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(241, 196)));
			button62.SetValue(fontSizeProperty136, ((IExtendedTypeConverter)fontSizeConverter136).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider136));
			button62.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button62.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button62.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button62);
			button63.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button63.Clicked += proBmsPage.ChargeLowTempRestore_TextChanged;
			button63.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button63.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button63.SetValue(Grid.RowProperty, 11);
			button63.SetValue(Grid.ColumnProperty, 1);
			button63.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty137 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter137 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider137 = new XamlServiceProvider();
			Type typeFromHandle273 = typeof(IProvideValueTarget);
			object[] array137 = new object[0 + 6];
			array137[0] = button63;
			array137[1] = grid6;
			array137[2] = stackLayout6;
			array137[3] = scrollView;
			array137[4] = grid9;
			array137[5] = proBmsPage;
			object service137;
			xamlServiceProvider137.Add(typeFromHandle273, service137 = new SimpleValueTargetProvider(array137, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider137.Add(typeof(IReferenceProvider), service137);
			Type typeFromHandle274 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver137 = new XmlNamespaceResolver();
			xmlNamespaceResolver137.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver137.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider137.Add(typeFromHandle274, new XamlTypeResolver(xmlNamespaceResolver137, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider137.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(242, 197)));
			button63.SetValue(fontSizeProperty137, ((IExtendedTypeConverter)fontSizeConverter137).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider137));
			button63.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button63.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button63.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button63);
			button64.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button64.Clicked += proBmsPage.DisChargeLowTempProtect_TextChanged;
			button64.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button64.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button64.SetValue(Grid.RowProperty, 12);
			button64.SetValue(Grid.ColumnProperty, 0);
			button64.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty138 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter138 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider138 = new XamlServiceProvider();
			Type typeFromHandle275 = typeof(IProvideValueTarget);
			object[] array138 = new object[0 + 6];
			array138[0] = button64;
			array138[1] = grid6;
			array138[2] = stackLayout6;
			array138[3] = scrollView;
			array138[4] = grid9;
			array138[5] = proBmsPage;
			object service138;
			xamlServiceProvider138.Add(typeFromHandle275, service138 = new SimpleValueTargetProvider(array138, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider138.Add(typeof(IReferenceProvider), service138);
			Type typeFromHandle276 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver138 = new XmlNamespaceResolver();
			xmlNamespaceResolver138.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver138.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider138.Add(typeFromHandle276, new XamlTypeResolver(xmlNamespaceResolver138, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider138.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(243, 199)));
			button64.SetValue(fontSizeProperty138, ((IExtendedTypeConverter)fontSizeConverter138).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider138));
			button64.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button64.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button64.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button64);
			button65.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button65.Clicked += proBmsPage.DisChargeLowTempRestore_TextChanged;
			button65.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button65.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button65.SetValue(Grid.RowProperty, 12);
			button65.SetValue(Grid.ColumnProperty, 1);
			button65.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty139 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter139 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider139 = new XamlServiceProvider();
			Type typeFromHandle277 = typeof(IProvideValueTarget);
			object[] array139 = new object[0 + 6];
			array139[0] = button65;
			array139[1] = grid6;
			array139[2] = stackLayout6;
			array139[3] = scrollView;
			array139[4] = grid9;
			array139[5] = proBmsPage;
			object service139;
			xamlServiceProvider139.Add(typeFromHandle277, service139 = new SimpleValueTargetProvider(array139, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider139.Add(typeof(IReferenceProvider), service139);
			Type typeFromHandle278 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver139 = new XmlNamespaceResolver();
			xmlNamespaceResolver139.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver139.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider139.Add(typeFromHandle278, new XamlTypeResolver(xmlNamespaceResolver139, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider139.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(244, 200)));
			button65.SetValue(fontSizeProperty139, ((IExtendedTypeConverter)fontSizeConverter139).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider139));
			button65.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button65.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button65.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button65);
			button66.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button66.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button66.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button66.Clicked += proBmsPage.ShutDownVol_TextChanged;
			button66.SetValue(Grid.RowProperty, 13);
			button66.SetValue(Grid.ColumnProperty, 0);
			button66.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty140 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter140 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider140 = new XamlServiceProvider();
			Type typeFromHandle279 = typeof(IProvideValueTarget);
			object[] array140 = new object[0 + 6];
			array140[0] = button66;
			array140[1] = grid6;
			array140[2] = stackLayout6;
			array140[3] = scrollView;
			array140[4] = grid9;
			array140[5] = proBmsPage;
			object service140;
			xamlServiceProvider140.Add(typeFromHandle279, service140 = new SimpleValueTargetProvider(array140, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider140.Add(typeof(IReferenceProvider), service140);
			Type typeFromHandle280 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver140 = new XmlNamespaceResolver();
			xmlNamespaceResolver140.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver140.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider140.Add(typeFromHandle280, new XamlTypeResolver(xmlNamespaceResolver140, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider140.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(246, 214)));
			button66.SetValue(fontSizeProperty140, ((IExtendedTypeConverter)fontSizeConverter140).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider140));
			button66.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button66.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button66.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button66);
			stackLayout6.Children.Add(grid6);
			button67.Clicked += proBmsPage.RowText11_Clicked;
			button67.SetValue(Xamarin.Forms.Button.TextProperty, "±Í∂®");
			button67.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty141 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter141 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider141 = new XamlServiceProvider();
			Type typeFromHandle281 = typeof(IProvideValueTarget);
			object[] array141 = new object[0 + 5];
			array141[0] = button67;
			array141[1] = stackLayout6;
			array141[2] = scrollView;
			array141[3] = grid9;
			array141[4] = proBmsPage;
			object service141;
			xamlServiceProvider141.Add(typeFromHandle281, service141 = new SimpleValueTargetProvider(array141, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider141.Add(typeof(IReferenceProvider), service141);
			Type typeFromHandle282 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver141 = new XmlNamespaceResolver();
			xmlNamespaceResolver141.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver141.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider141.Add(typeFromHandle282, new XamlTypeResolver(xmlNamespaceResolver141, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider141.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(248, 112)));
			button67.SetValue(fontSizeProperty141, ((IExtendedTypeConverter)fontSizeConverter141).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider141));
			button67.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button67.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(button67);
			grid7.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid7.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("false"));
			rowDefinition39.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition39);
			rowDefinition40.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition40);
			rowDefinition41.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition41);
			rowDefinition42.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition42);
			columnDefinition11.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid7.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition11);
			columnDefinition12.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid7.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition12);
			label75.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label75.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label75.SetValue(Label.TextProperty, "µÁ¡˜œµ ˝: 0000");
			label75.SetValue(Grid.RowProperty, 0);
			label75.SetValue(Grid.ColumnProperty, 0);
			label75.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty142 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter142 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider142 = new XamlServiceProvider();
			Type typeFromHandle283 = typeof(IProvideValueTarget);
			object[] array142 = new object[0 + 6];
			array142[0] = label75;
			array142[1] = grid7;
			array142[2] = stackLayout6;
			array142[3] = scrollView;
			array142[4] = grid9;
			array142[5] = proBmsPage;
			object service142;
			xamlServiceProvider142.Add(typeFromHandle283, service142 = new SimpleValueTargetProvider(array142, Label.FontSizeProperty, nameScope));
			xamlServiceProvider142.Add(typeof(IReferenceProvider), service142);
			Type typeFromHandle284 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver142 = new XmlNamespaceResolver();
			xmlNamespaceResolver142.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver142.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider142.Add(typeFromHandle284, new XamlTypeResolver(xmlNamespaceResolver142, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider142.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(260, 168)));
			label75.SetValue(fontSizeProperty142, ((IExtendedTypeConverter)fontSizeConverter142).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider142));
			label75.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label75.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label75.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label75);
			label76.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label76.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label76.SetValue(Label.TextProperty, "µÁ¡˜œµ ˝2: 0000");
			label76.SetValue(Grid.RowProperty, 0);
			label76.SetValue(Grid.ColumnProperty, 1);
			label76.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty143 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter143 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider143 = new XamlServiceProvider();
			Type typeFromHandle285 = typeof(IProvideValueTarget);
			object[] array143 = new object[0 + 6];
			array143[0] = label76;
			array143[1] = grid7;
			array143[2] = stackLayout6;
			array143[3] = scrollView;
			array143[4] = grid9;
			array143[5] = proBmsPage;
			object service143;
			xamlServiceProvider143.Add(typeFromHandle285, service143 = new SimpleValueTargetProvider(array143, Label.FontSizeProperty, nameScope));
			xamlServiceProvider143.Add(typeof(IReferenceProvider), service143);
			Type typeFromHandle286 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver143 = new XmlNamespaceResolver();
			xmlNamespaceResolver143.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver143.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider143.Add(typeFromHandle286, new XamlTypeResolver(xmlNamespaceResolver143, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider143.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(261, 171)));
			label76.SetValue(fontSizeProperty143, ((IExtendedTypeConverter)fontSizeConverter143).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider143));
			label76.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label76.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label76.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label76);
			label77.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label77.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label77.SetValue(Label.TextProperty, "µÁ—πœµ ˝: 0000");
			label77.SetValue(Grid.RowProperty, 1);
			label77.SetValue(Grid.ColumnProperty, 0);
			label77.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty144 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter144 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider144 = new XamlServiceProvider();
			Type typeFromHandle287 = typeof(IProvideValueTarget);
			object[] array144 = new object[0 + 6];
			array144[0] = label77;
			array144[1] = grid7;
			array144[2] = stackLayout6;
			array144[3] = scrollView;
			array144[4] = grid9;
			array144[5] = proBmsPage;
			object service144;
			xamlServiceProvider144.Add(typeFromHandle287, service144 = new SimpleValueTargetProvider(array144, Label.FontSizeProperty, nameScope));
			xamlServiceProvider144.Add(typeof(IReferenceProvider), service144);
			Type typeFromHandle288 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver144 = new XmlNamespaceResolver();
			xmlNamespaceResolver144.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver144.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider144.Add(typeFromHandle288, new XamlTypeResolver(xmlNamespaceResolver144, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider144.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(262, 166)));
			label77.SetValue(fontSizeProperty144, ((IExtendedTypeConverter)fontSizeConverter144).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider144));
			label77.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label77.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label77.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label77);
			label78.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label78.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label78.SetValue(Label.TextProperty, "µÁ—π¡„µ„: 0000");
			label78.SetValue(Grid.RowProperty, 1);
			label78.SetValue(Grid.ColumnProperty, 1);
			label78.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty145 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter145 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider145 = new XamlServiceProvider();
			Type typeFromHandle289 = typeof(IProvideValueTarget);
			object[] array145 = new object[0 + 6];
			array145[0] = label78;
			array145[1] = grid7;
			array145[2] = stackLayout6;
			array145[3] = scrollView;
			array145[4] = grid9;
			array145[5] = proBmsPage;
			object service145;
			xamlServiceProvider145.Add(typeFromHandle289, service145 = new SimpleValueTargetProvider(array145, Label.FontSizeProperty, nameScope));
			xamlServiceProvider145.Add(typeof(IReferenceProvider), service145);
			Type typeFromHandle290 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver145 = new XmlNamespaceResolver();
			xmlNamespaceResolver145.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver145.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider145.Add(typeFromHandle290, new XamlTypeResolver(xmlNamespaceResolver145, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider145.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(263, 167)));
			label78.SetValue(fontSizeProperty145, ((IExtendedTypeConverter)fontSizeConverter145).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider145));
			label78.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label78.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label78.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label78);
			label79.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label79.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label79.SetValue(Label.TextProperty, "µÁ¡˜∑∂Œß: 0000");
			label79.SetValue(Grid.RowProperty, 2);
			label79.SetValue(Grid.ColumnProperty, 0);
			label79.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty146 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter146 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider146 = new XamlServiceProvider();
			Type typeFromHandle291 = typeof(IProvideValueTarget);
			object[] array146 = new object[0 + 6];
			array146[0] = label79;
			array146[1] = grid7;
			array146[2] = stackLayout6;
			array146[3] = scrollView;
			array146[4] = grid9;
			array146[5] = proBmsPage;
			object service146;
			xamlServiceProvider146.Add(typeFromHandle291, service146 = new SimpleValueTargetProvider(array146, Label.FontSizeProperty, nameScope));
			xamlServiceProvider146.Add(typeof(IReferenceProvider), service146);
			Type typeFromHandle292 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver146 = new XmlNamespaceResolver();
			xmlNamespaceResolver146.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver146.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider146.Add(typeFromHandle292, new XamlTypeResolver(xmlNamespaceResolver146, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider146.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(264, 171)));
			label79.SetValue(fontSizeProperty146, ((IExtendedTypeConverter)fontSizeConverter146).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider146));
			label79.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label79.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label79.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label79);
			label80.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label80.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label80.SetValue(Label.TextProperty, "µÁ¡˜0∆´÷√: 0.000V");
			label80.SetValue(Grid.RowProperty, 3);
			label80.SetValue(Grid.ColumnProperty, 0);
			label80.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty147 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter147 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider147 = new XamlServiceProvider();
			Type typeFromHandle293 = typeof(IProvideValueTarget);
			object[] array147 = new object[0 + 6];
			array147[0] = label80;
			array147[1] = grid7;
			array147[2] = stackLayout6;
			array147[3] = scrollView;
			array147[4] = grid9;
			array147[5] = proBmsPage;
			object service147;
			xamlServiceProvider147.Add(typeFromHandle293, service147 = new SimpleValueTargetProvider(array147, Label.FontSizeProperty, nameScope));
			xamlServiceProvider147.Add(typeof(IReferenceProvider), service147);
			Type typeFromHandle294 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver147 = new XmlNamespaceResolver();
			xmlNamespaceResolver147.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver147.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider147.Add(typeFromHandle294, new XamlTypeResolver(xmlNamespaceResolver147, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider147.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(265, 175)));
			label80.SetValue(fontSizeProperty147, ((IExtendedTypeConverter)fontSizeConverter147).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider147));
			label80.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label80.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label80.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label80);
			label81.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label81.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label81.SetValue(Label.TextProperty, "CµÁ—π∆´÷√: 0.000V");
			label81.SetValue(Grid.RowProperty, 3);
			label81.SetValue(Grid.ColumnProperty, 1);
			label81.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty148 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter148 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider148 = new XamlServiceProvider();
			Type typeFromHandle295 = typeof(IProvideValueTarget);
			object[] array148 = new object[0 + 6];
			array148[0] = label81;
			array148[1] = grid7;
			array148[2] = stackLayout6;
			array148[3] = scrollView;
			array148[4] = grid9;
			array148[5] = proBmsPage;
			object service148;
			xamlServiceProvider148.Add(typeFromHandle295, service148 = new SimpleValueTargetProvider(array148, Label.FontSizeProperty, nameScope));
			xamlServiceProvider148.Add(typeof(IReferenceProvider), service148);
			Type typeFromHandle296 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver148 = new XmlNamespaceResolver();
			xmlNamespaceResolver148.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver148.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider148.Add(typeFromHandle296, new XamlTypeResolver(xmlNamespaceResolver148, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider148.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(266, 176)));
			label81.SetValue(fontSizeProperty148, ((IExtendedTypeConverter)fontSizeConverter148).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider148));
			label81.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label81.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label81.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label81);
			button68.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button68.Clicked += proBmsPage.CurrCoeff_TextChanged;
			button68.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button68.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button68.SetValue(Grid.RowProperty, 0);
			button68.SetValue(Grid.ColumnProperty, 0);
			button68.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty149 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter149 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider149 = new XamlServiceProvider();
			Type typeFromHandle297 = typeof(IProvideValueTarget);
			object[] array149 = new object[0 + 6];
			array149[0] = button68;
			array149[1] = grid7;
			array149[2] = stackLayout6;
			array149[3] = scrollView;
			array149[4] = grid9;
			array149[5] = proBmsPage;
			object service149;
			xamlServiceProvider149.Add(typeFromHandle297, service149 = new SimpleValueTargetProvider(array149, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider149.Add(typeof(IReferenceProvider), service149);
			Type typeFromHandle298 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver149 = new XmlNamespaceResolver();
			xmlNamespaceResolver149.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver149.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider149.Add(typeFromHandle298, new XamlTypeResolver(xmlNamespaceResolver149, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider149.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(269, 186)));
			button68.SetValue(fontSizeProperty149, ((IExtendedTypeConverter)fontSizeConverter149).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider149));
			button68.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button68.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button68.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button68);
			button69.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button69.Clicked += proBmsPage.CurrCoeff2_TextChanged;
			button69.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button69.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button69.SetValue(Grid.RowProperty, 0);
			button69.SetValue(Grid.ColumnProperty, 1);
			button69.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty150 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter150 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider150 = new XamlServiceProvider();
			Type typeFromHandle299 = typeof(IProvideValueTarget);
			object[] array150 = new object[0 + 6];
			array150[0] = button69;
			array150[1] = grid7;
			array150[2] = stackLayout6;
			array150[3] = scrollView;
			array150[4] = grid9;
			array150[5] = proBmsPage;
			object service150;
			xamlServiceProvider150.Add(typeFromHandle299, service150 = new SimpleValueTargetProvider(array150, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider150.Add(typeof(IReferenceProvider), service150);
			Type typeFromHandle300 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver150 = new XmlNamespaceResolver();
			xmlNamespaceResolver150.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver150.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider150.Add(typeFromHandle300, new XamlTypeResolver(xmlNamespaceResolver150, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider150.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(270, 186)));
			button69.SetValue(fontSizeProperty150, ((IExtendedTypeConverter)fontSizeConverter150).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider150));
			button69.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button69.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button69.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button69);
			button70.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button70.Clicked += proBmsPage.VolCoeff_TextChanged;
			button70.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button70.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button70.SetValue(Grid.RowProperty, 1);
			button70.SetValue(Grid.ColumnProperty, 0);
			button70.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty151 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter151 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider151 = new XamlServiceProvider();
			Type typeFromHandle301 = typeof(IProvideValueTarget);
			object[] array151 = new object[0 + 6];
			array151[0] = button70;
			array151[1] = grid7;
			array151[2] = stackLayout6;
			array151[3] = scrollView;
			array151[4] = grid9;
			array151[5] = proBmsPage;
			object service151;
			xamlServiceProvider151.Add(typeFromHandle301, service151 = new SimpleValueTargetProvider(array151, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider151.Add(typeof(IReferenceProvider), service151);
			Type typeFromHandle302 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver151 = new XmlNamespaceResolver();
			xmlNamespaceResolver151.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver151.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider151.Add(typeFromHandle302, new XamlTypeResolver(xmlNamespaceResolver151, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider151.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(271, 182)));
			button70.SetValue(fontSizeProperty151, ((IExtendedTypeConverter)fontSizeConverter151).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider151));
			button70.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button70.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button70.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button70);
			button71.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button71.Clicked += proBmsPage.VolZero_TextChanged;
			button71.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button71.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button71.SetValue(Grid.RowProperty, 1);
			button71.SetValue(Grid.ColumnProperty, 1);
			button71.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty152 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter152 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider152 = new XamlServiceProvider();
			Type typeFromHandle303 = typeof(IProvideValueTarget);
			object[] array152 = new object[0 + 6];
			array152[0] = button71;
			array152[1] = grid7;
			array152[2] = stackLayout6;
			array152[3] = scrollView;
			array152[4] = grid9;
			array152[5] = proBmsPage;
			object service152;
			xamlServiceProvider152.Add(typeFromHandle303, service152 = new SimpleValueTargetProvider(array152, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider152.Add(typeof(IReferenceProvider), service152);
			Type typeFromHandle304 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver152 = new XmlNamespaceResolver();
			xmlNamespaceResolver152.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver152.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider152.Add(typeFromHandle304, new XamlTypeResolver(xmlNamespaceResolver152, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider152.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(272, 183)));
			button71.SetValue(fontSizeProperty152, ((IExtendedTypeConverter)fontSizeConverter152).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider152));
			button71.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button71.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button71.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button71);
			button72.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button72.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button72.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button72.Clicked += proBmsPage.CurrentRange_TextChanged;
			button72.SetValue(Grid.RowProperty, 2);
			button72.SetValue(Grid.ColumnProperty, 0);
			button72.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty153 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter153 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider153 = new XamlServiceProvider();
			Type typeFromHandle305 = typeof(IProvideValueTarget);
			object[] array153 = new object[0 + 6];
			array153[0] = button72;
			array153[1] = grid7;
			array153[2] = stackLayout6;
			array153[3] = scrollView;
			array153[4] = grid9;
			array153[5] = proBmsPage;
			object service153;
			xamlServiceProvider153.Add(typeFromHandle305, service153 = new SimpleValueTargetProvider(array153, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider153.Add(typeof(IReferenceProvider), service153);
			Type typeFromHandle306 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver153 = new XmlNamespaceResolver();
			xmlNamespaceResolver153.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver153.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider153.Add(typeFromHandle306, new XamlTypeResolver(xmlNamespaceResolver153, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider153.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(273, 214)));
			button72.SetValue(fontSizeProperty153, ((IExtendedTypeConverter)fontSizeConverter153).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider153));
			button72.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button72.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button72.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button72);
			button73.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button73.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button73.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button73.Clicked += proBmsPage.ZeroBattCoeff2_TextChanged;
			button73.SetValue(Grid.RowProperty, 3);
			button73.SetValue(Grid.ColumnProperty, 0);
			button73.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty154 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter154 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider154 = new XamlServiceProvider();
			Type typeFromHandle307 = typeof(IProvideValueTarget);
			object[] array154 = new object[0 + 6];
			array154[0] = button73;
			array154[1] = grid7;
			array154[2] = stackLayout6;
			array154[3] = scrollView;
			array154[4] = grid9;
			array154[5] = proBmsPage;
			object service154;
			xamlServiceProvider154.Add(typeFromHandle307, service154 = new SimpleValueTargetProvider(array154, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider154.Add(typeof(IReferenceProvider), service154);
			Type typeFromHandle308 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver154 = new XmlNamespaceResolver();
			xmlNamespaceResolver154.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver154.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider154.Add(typeFromHandle308, new XamlTypeResolver(xmlNamespaceResolver154, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider154.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(274, 189)));
			button73.SetValue(fontSizeProperty154, ((IExtendedTypeConverter)fontSizeConverter154).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider154));
			button73.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button73.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button73.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button73);
			button74.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button74.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button74.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button74.Clicked += proBmsPage.FullBattCoeff2_TextChanged;
			button74.SetValue(Grid.RowProperty, 3);
			button74.SetValue(Grid.ColumnProperty, 1);
			button74.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty155 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter155 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider155 = new XamlServiceProvider();
			Type typeFromHandle309 = typeof(IProvideValueTarget);
			object[] array155 = new object[0 + 6];
			array155[0] = button74;
			array155[1] = grid7;
			array155[2] = stackLayout6;
			array155[3] = scrollView;
			array155[4] = grid9;
			array155[5] = proBmsPage;
			object service155;
			xamlServiceProvider155.Add(typeFromHandle309, service155 = new SimpleValueTargetProvider(array155, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider155.Add(typeof(IReferenceProvider), service155);
			Type typeFromHandle310 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver155 = new XmlNamespaceResolver();
			xmlNamespaceResolver155.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver155.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider155.Add(typeFromHandle310, new XamlTypeResolver(xmlNamespaceResolver155, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider155.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(275, 189)));
			button74.SetValue(fontSizeProperty155, ((IExtendedTypeConverter)fontSizeConverter155).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider155));
			button74.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button74.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button74.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button74);
			stackLayout6.Children.Add(grid7);
			scrollView.Content = stackLayout6;
			grid9.Children.Add(scrollView);
			grid8.SetValue(Grid.RowProperty, 1);
			grid8.SetValue(Grid.ColumnProperty, 0);
			columnDefinition13.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("18*"));
			((DefinitionCollection<ColumnDefinition>)grid8.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition13);
			columnDefinition14.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("18*"));
			((DefinitionCollection<ColumnDefinition>)grid8.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition14);
			columnDefinition15.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("40*"));
			((DefinitionCollection<ColumnDefinition>)grid8.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition15);
			columnDefinition16.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("24*"));
			((DefinitionCollection<ColumnDefinition>)grid8.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition16);
			button75.SetValue(Xamarin.Forms.Button.TextProperty, "ª÷∏¥");
			button75.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button75.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			BindableProperty fontSizeProperty156 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter156 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider156 = new XamlServiceProvider();
			Type typeFromHandle311 = typeof(IProvideValueTarget);
			object[] array156 = new object[0 + 4];
			array156[0] = button75;
			array156[1] = grid8;
			array156[2] = grid9;
			array156[3] = proBmsPage;
			object service156;
			xamlServiceProvider156.Add(typeFromHandle311, service156 = new SimpleValueTargetProvider(array156, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider156.Add(typeof(IReferenceProvider), service156);
			Type typeFromHandle312 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver156 = new XmlNamespaceResolver();
			xmlNamespaceResolver156.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver156.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider156.Add(typeFromHandle312, new XamlTypeResolver(xmlNamespaceResolver156, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider156.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(286, 100)));
			button75.SetValue(fontSizeProperty156, ((IExtendedTypeConverter)fontSizeConverter156).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider156));
			button75.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button75.SetValue(Grid.RowProperty, 0);
			button75.SetValue(Grid.ColumnProperty, 0);
			button75.Clicked += proBmsPage.OnButtonResetClicked;
			grid8.Children.Add(button75);
			button76.SetValue(Xamarin.Forms.Button.TextProperty, "±£¥Ê");
			button76.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button76.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			BindableProperty fontSizeProperty157 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter157 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider157 = new XamlServiceProvider();
			Type typeFromHandle313 = typeof(IProvideValueTarget);
			object[] array157 = new object[0 + 4];
			array157[0] = button76;
			array157[1] = grid8;
			array157[2] = grid9;
			array157[3] = proBmsPage;
			object service157;
			xamlServiceProvider157.Add(typeFromHandle313, service157 = new SimpleValueTargetProvider(array157, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider157.Add(typeof(IReferenceProvider), service157);
			Type typeFromHandle314 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver157 = new XmlNamespaceResolver();
			xmlNamespaceResolver157.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver157.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider157.Add(typeFromHandle314, new XamlTypeResolver(xmlNamespaceResolver157, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider157.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(289, 99)));
			button76.SetValue(fontSizeProperty157, ((IExtendedTypeConverter)fontSizeConverter157).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider157));
			button76.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button76.SetValue(Grid.RowProperty, 0);
			button76.SetValue(Grid.ColumnProperty, 1);
			button76.Clicked += proBmsPage.ButtonSaveName_Clicked;
			grid8.Children.Add(button76);
			button77.SetValue(Xamarin.Forms.Button.TextProperty, "∑µªÿæ´ºÚƒ£ Ω");
			button77.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button77.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			BindableProperty fontSizeProperty158 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter158 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider158 = new XamlServiceProvider();
			Type typeFromHandle315 = typeof(IProvideValueTarget);
			object[] array158 = new object[0 + 4];
			array158[0] = button77;
			array158[1] = grid8;
			array158[2] = grid9;
			array158[3] = proBmsPage;
			object service158;
			xamlServiceProvider158.Add(typeFromHandle315, service158 = new SimpleValueTargetProvider(array158, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider158.Add(typeof(IReferenceProvider), service158);
			Type typeFromHandle316 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver158 = new XmlNamespaceResolver();
			xmlNamespaceResolver158.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver158.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider158.Add(typeFromHandle316, new XamlTypeResolver(xmlNamespaceResolver158, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider158.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(292, 103)));
			button77.SetValue(fontSizeProperty158, ((IExtendedTypeConverter)fontSizeConverter158).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider158));
			button77.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button77.SetValue(Grid.RowProperty, 0);
			button77.SetValue(Grid.ColumnProperty, 2);
			button77.Clicked += proBmsPage.ButtonMode_Clicked;
			grid8.Children.Add(button77);
			label82.SetValue(Label.TextProperty, "Ω” ’÷°∫≈00000000000");
			label82.SetValue(Grid.RowProperty, 0);
			label82.SetValue(Grid.ColumnProperty, 3);
			label82.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty159 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter159 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider159 = new XamlServiceProvider();
			Type typeFromHandle317 = typeof(IProvideValueTarget);
			object[] array159 = new object[0 + 4];
			array159[0] = label82;
			array159[1] = grid8;
			array159[2] = grid9;
			array159[3] = proBmsPage;
			object service159;
			xamlServiceProvider159.Add(typeFromHandle317, service159 = new SimpleValueTargetProvider(array159, Label.FontSizeProperty, nameScope));
			xamlServiceProvider159.Add(typeof(IReferenceProvider), service159);
			Type typeFromHandle318 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver159 = new XmlNamespaceResolver();
			xmlNamespaceResolver159.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver159.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider159.Add(typeFromHandle318, new XamlTypeResolver(xmlNamespaceResolver159, typeof(ProBmsPage).GetTypeInfo().Assembly));
			xamlServiceProvider159.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(295, 112)));
			label82.SetValue(fontSizeProperty159, ((IExtendedTypeConverter)fontSizeConverter159).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider159));
			label82.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label82.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label82.SetValue(View.VerticalOptionsProperty, LayoutOptions.Start);
			grid8.Children.Add(label82);
			grid9.Children.Add(grid8);
			proBmsPage.SetValue(ContentPage.ContentProperty, grid9);
		}

		private void __InitComponentRuntime()
		{
			this.LoadFromXaml(typeof(ProBmsPage));
			girdall = this.FindByName<Grid>("girdall");
			DetailView = this.FindByName<Xamarin.Forms.ScrollView>("DetailView");
			RowText0 = this.FindByName<Label>("RowText0");
			ModelFactoryName = this.FindByName<Label>("ModelFactoryName");
			ModelName = this.FindByName<Label>("ModelName");
			ModelTypeName = this.FindByName<Label>("ModelTypeName");
			ModelType = this.FindByName<Label>("ModelType");
			ModelPowerName = this.FindByName<Label>("ModelPowerName");
			ModelPower = this.FindByName<Label>("ModelPower");
			ModelCurrName = this.FindByName<Label>("ModelCurrName");
			ModelCurr = this.FindByName<Label>("ModelCurr");
			ModelNumber = this.FindByName<Label>("ModelNumber");
			RowDateTime = this.FindByName<Xamarin.Forms.Button>("RowDateTime");
			DateTimeGrid = this.FindByName<Grid>("DateTimeGrid");
			ModelDate = this.FindByName<Label>("ModelDate");
			ModelTime = this.FindByName<Label>("ModelTime");
			RowText2 = this.FindByName<Xamarin.Forms.Button>("RowText2");
			BMSpara = this.FindByName<Grid>("BMSpara");
			BalanceStartVol = this.FindByName<Label>("BalanceStartVol");
			BalanceLimitVol = this.FindByName<Label>("BalanceLimitVol");
			BalanceDeltaVol = this.FindByName<Label>("BalanceDeltaVol");
			BattRatedCap = this.FindByName<Label>("BattRatedCap");
			AutoDownTime = this.FindByName<Label>("AutoDownTime");
			RatedVoltage2 = this.FindByName<Label>("RatedVoltage2");
			Series = this.FindByName<Label>("Series");
			MaxDSGCurr = this.FindByName<Label>("MaxDSGCurr");
			MaxDSGCurrTime = this.FindByName<Label>("MaxDSGCurrTime");
			MaxCHGCurr = this.FindByName<Label>("MaxCHGCurr");
			MaxCHGCurrTime = this.FindByName<Label>("MaxCHGCurrTime");
			RowTextBMSR = this.FindByName<Xamarin.Forms.Button>("RowTextBMSR");
			BMSRPara = this.FindByName<Grid>("BMSRPara");
			BMSR1 = this.FindByName<Label>("BMSR1");
			BMSR2 = this.FindByName<Label>("BMSR2");
			BMSR3 = this.FindByName<Label>("BMSR3");
			BMSR4 = this.FindByName<Label>("BMSR4");
			BMSR5 = this.FindByName<Label>("BMSR5");
			BMSR6 = this.FindByName<Label>("BMSR6");
			BMSR7 = this.FindByName<Label>("BMSR7");
			BMSR8 = this.FindByName<Label>("BMSR8");
			BMSR9 = this.FindByName<Label>("BMSR9");
			BMSR10 = this.FindByName<Label>("BMSR10");
			BMSR11 = this.FindByName<Label>("BMSR11");
			BMSR12 = this.FindByName<Label>("BMSR12");
			BMSR13 = this.FindByName<Label>("BMSR13");
			BMSR14 = this.FindByName<Label>("BMSR14");
			BMSR15 = this.FindByName<Label>("BMSR15");
			BMSR16 = this.FindByName<Label>("BMSR16");
			BMSR17 = this.FindByName<Label>("BMSR17");
			BMSR18 = this.FindByName<Label>("BMSR18");
			BMSR19 = this.FindByName<Label>("BMSR19");
			BMSR20 = this.FindByName<Label>("BMSR20");
			BMSR21 = this.FindByName<Label>("BMSR21");
			BMSR22 = this.FindByName<Label>("BMSR22");
			BMSR23 = this.FindByName<Label>("BMSR23");
			BMSR24 = this.FindByName<Label>("BMSR24");
			RowText7 = this.FindByName<Xamarin.Forms.Button>("RowText7");
			BMSProtect = this.FindByName<Grid>("BMSProtect");
			OverSVolProtect = this.FindByName<Label>("OverSVolProtect");
			OverSVolRestore = this.FindByName<Label>("OverSVolRestore");
			LowSVolProtect = this.FindByName<Label>("LowSVolProtect");
			LowSVolRestore = this.FindByName<Label>("LowSVolRestore");
			DeltaSVolProtect = this.FindByName<Label>("DeltaSVolProtect");
			DeltaSVolRestore = this.FindByName<Label>("DeltaSVolRestore");
			OverTVolProtect = this.FindByName<Label>("OverTVolProtect");
			OverTVolRestore = this.FindByName<Label>("OverTVolRestore");
			BalanceCurrent = this.FindByName<Label>("BalanceCurrent");
			SndOverCurrentProtect = this.FindByName<Label>("SndOverCurrentProtect");
			ShortProtect = this.FindByName<Label>("ShortProtect");
			SndOverCurrentDelay = this.FindByName<Label>("SndOverCurrentDelay");
			ShortDelay = this.FindByName<Label>("ShortDelay");
			OverSVolAlarm = this.FindByName<Label>("OverSVolAlarm");
			LowSVolAlarm = this.FindByName<Label>("LowSVolAlarm");
			LowSocAlarm = this.FindByName<Label>("LowSocAlarm");
			ChargeTempProtect = this.FindByName<Label>("ChargeTempProtect");
			ChargeTempRestore = this.FindByName<Label>("ChargeTempRestore");
			DisChargeTempProtect = this.FindByName<Label>("DisChargeTempProtect");
			DisChargeTempRestore = this.FindByName<Label>("DisChargeTempRestore");
			BMSMosTempProtect = this.FindByName<Label>("BMSMosTempProtect");
			BMSMosTempRestore = this.FindByName<Label>("BMSMosTempRestore");
			ChargeLowTempProtect = this.FindByName<Label>("ChargeLowTempProtect");
			ChargeLowTempRestore = this.FindByName<Label>("ChargeLowTempRestore");
			DisChargeLowTempProtect = this.FindByName<Label>("DisChargeLowTempProtect");
			DisChargeLowTempRestore = this.FindByName<Label>("DisChargeLowTempRestore");
			ShutDownVol = this.FindByName<Label>("ShutDownVol");
			ShutdownVolButton = this.FindByName<Xamarin.Forms.Button>("ShutdownVolButton");
			RowText11 = this.FindByName<Xamarin.Forms.Button>("RowText11");
			Girdbms11 = this.FindByName<Grid>("Girdbms11");
			CurrCoeff = this.FindByName<Label>("CurrCoeff");
			CurrCoeff2 = this.FindByName<Label>("CurrCoeff2");
			VolGain = this.FindByName<Label>("VolGain");
			VolZero = this.FindByName<Label>("VolZero");
			CurrentRange = this.FindByName<Label>("CurrentRange");
			ZeroBattCoeff2 = this.FindByName<Label>("ZeroBattCoeff2");
			FullBattCoeff2 = this.FindByName<Label>("FullBattCoeff2");
			CurrentRangeButton = this.FindByName<Xamarin.Forms.Button>("CurrentRangeButton");
			ResetName = this.FindByName<Xamarin.Forms.Button>("ResetName");
			SaveName = this.FindByName<Xamarin.Forms.Button>("SaveName");
			ParaMode = this.FindByName<Xamarin.Forms.Button>("ParaMode");
			RcvFrames = this.FindByName<Label>("RcvFrames");
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	[XamlFilePath("ProControlPage.xaml")]
	public class ProControlPage : ContentPage
	{
		private char m_ParaIndex2;

		private char m_ParaIndex3;

		private bool old_ble = true;

		private int config_word0;

		private int config_word1;

		private int rconfig_word0;

		private int rconfig_word1;

		private int rcv_ENMaxLineCurr;

		private int rcv_ENMaxPhaseCurr;

		private byte[] bstr = new byte[20];

		private char rcv_kzqVersion0 = '1';

		private char rcv_kzqVersion1 = '0';

		private int rcv_SoftVer = 1;

		private int rcv_RatedVoltage = 144;

		private int rcv_RatedPower = 20000;

		private int rcv_RatedPower100;

		private int rcv_MOTORDIA = 88;

		private int rcv_ParaIndex = 51;

		private int rcv_BMQHALL;

		private int rcv_LineCoeff;

		private int rcv_Bmq_Hall;

		private int rcv_LineZero;

		private int rcv_PhaseACoeff;

		private int rcv_PhaseCCoeff;

		private int rcv_PhaseAZero;

		private int rcv_PhaseCZero;

		private int rcv_TempCoeff;

		private int rcv_LD;

		private int rcv_LQ;

		private int rcv_VolCoeff;

		private int rcv_SaveNum;

		private float rcv_HighVolProtect;

		private float rcv_HighVolRestore;

		private float rcv_LowVolRestore;

		private int rcv_MotorTempProtect;

		private int rcv_MotorTempRestore;

		private int rcv_MosTempProtect;

		private int rcv_MosTempRestore;

		private int rcv_FreeThrottle;

		private int rcv_CurveTime;

		private char rcv_SpecialCode;

		private string tempstr;

		private int DELAYTIME;

		private int flashdata34;

		private bool bms;

		private int min;

		private int hour;

		private byte cfg11h;

		private byte cfg11l;

		private byte cfg190l;

		private byte cfg190h;

		private int cancomm;

		private int m_OneCommPS;

		private uint wktime;

		private uint distance;

		private bool ENTimeCount;

		private int TimeCount;

		private int clickprocnt;

		private int rcv_PolePairs = 4;

		private byte cfg50l;

		private byte cfg50h;

		private byte cfg51l;

		private byte cfg51h;

		private byte cfg156l;

		private byte cfg156h;

		private byte cfg26l;

		private byte cfg26h;

		private int rcv_RatedSpeed;

		private int rcv_MaxSpeed;

		private int rcv_IntRes;

		private int rcv_LmtSpeed;

		private int rcv_LowSpeed;

		private int rcv_EmptySpeed;

		private int rcv_BackSpeed;

		private int rcv_Direction;

		private int rcv_NTC_PTC;

		private int rcv_PhaseOffset;

		private char rcv_CustomCode0;

		private char rcv_CustomCode1;

		private int rcv_MaxLineCurr = 999;

		private int rcv_MaxPhaseCurr = 9999;

		private int rcv_CustomMaxLineCurr = 999;

		private int rcv_CustomMaxPhaseCurr = 9999;

		private int rcv_StopBackCurr;

		private int rcv_MaxBackCurr;

		private int[] rcv_nratio = new int[20];

		private int rcv_Ratio500;

		private int rcv_Ratio1000;

		private int rcv_Ratio1500;

		private int rcv_Ratio2000;

		private int rcv_Ratio2500;

		private int rcv_Ratio3000;

		private int rcv_Ratio3500;

		private int rcv_Ratio4000;

		private int rcv_Ratio4500;

		private int rcv_Ratio5000;

		private int rcv_Ratio5500;

		private int rcv_Ratio6000;

		private int rcv_Ratio6500;

		private int rcv_Ratio7000;

		private int rcv_Ratio7500;

		private int rcv_Ratio8000;

		private int rcv_Ratio8500;

		private int rcv_Ratio9000;

		private float rcv_LowVolProtect;

		private int rcv_StartKI;

		private int rcv_StartKP;

		private int rcv_MidKI;

		private int rcv_MidKP;

		private int rcv_MaxKI;

		private int rcv_MaxKP;

		private int rcv_SpeedKI;

		private int rcv_SpeedKP;

		private int rcv_AN;

		private int rcv_LM;

		private int rcv_MOE;

		private int rcv_WeakA;

		private int rcv_WeakTime;

		private int rcv_QuickDown;

		private int rcv_Max_Acc;

		private int rcv_Max_Dec;

		private int rcv_FullBattCoeff;

		private int rcv_ZeroBattCoeff;

		private int rcv_SpeedAnalog;

		private int rcv_SpeedPulse;

		private int rcv_AccCoeff;

		private int rcv_BrakeConfig;

		private int rcv_PC13Config;

		private int rcv_ParkConfig;

		private int rcv_FollowConfig;

		private int rcv_ECOConfig;

		private int rcv_CurrFD;

		private int rcv_PulseFD;

		private int rcv_Protocol485;

		private int rcv_Arg2;

		private int rcv_MidSpeed;

		private int rcv_GearConfig;

		private int rcv_SpeedMeterConfig;

		private int rcv_BattRatedCap;

		private int rcv_AlarmDelay;

		private int rcv_FwReRatio;

		private int rcv_VolSelectRatio;

		private int rcv_RelayDelay;

		private int rcv_ThrottleInsert;

		private int rcv_ReIsinAcc;

		private uint rcv_SpdPulseNum;

		private int rcv_ReCurrRatio;

		private int rcv_BlockTime;

		private int rcv_InverseTime;

		private int rcv_ParkDiff;

		private int rcv_MinSpeedCapCoeff;

		private int rcv_BatSel;

		private int rcv_DataVoltage0;

		private int rcv_DataVoltage1;

		private int rcv_DataVoltage2;

		private int rcv_DataVoltage3;

		private int rcv_DataVoltage4;

		private int rcv_ParkTime;

		private int rcv_BstTime;

		private int rcv_BstRelease;

		private int rcv_BstXhBcP;

		private int rcv_FwReSdhSdl;

		private int rcv_ChgFdSeatVol;

		private int rcv_NoCanCnt;

		private int rcv_TaRlB9D0SP;

		private int rcv_ExitFollowSpeed;

		private int rcv_WheelRadius;

		private int rcv_WheelWidth;

		private int rcv_Throttle1;

		private int rcv_WheelRatio;

		private int rcv_RateRatio;

		private int rcv_InitVol;

		private int rcv_SpeedLowCap;

		private int rcv_LearnVol;

		private int rcv_LearnVoh;

		private int rcv_IsInStart;

		private int rcv_LearnThrottle;

		private int rcv_SpeedLimitByCap;

		private int rcv_MidSpeedCap;

		private int rcv_SpdLmt_sel;

		private int rcv_OneKey_sel;

		private int rcv_anglelearn;

		private bool m_ParaMode;

		private int rcv_ParkCoeff;

		private int rcv_Stage1Soc;

		private int rcv_Stage2Soc;

		private int rcv_Stage1Curr;

		private int rcv_TorqueCoeff;

		private int m_GPara0;

		private int rcv_GPara0;

		private int m_OneCommCfg;

		private int rcv_OneCommCfg;

		private int m_OneCommHead;

		private int m_OneCommPos;

		private int rcv_OneCommPos;

		private int rcv_OnelineCurrCoeff;

		private int rcv_MorseCode;

		private int[] FlashReadAddr = new int[55]
		{
			226, 232, 238, 0, 6, 12, 18, 226, 232, 238,
			24, 30, 36, 42, 226, 232, 238, 48, 93, 99,
			105, 226, 232, 238, 124, 130, 136, 142, 226, 232,
			238, 148, 154, 160, 166, 226, 232, 238, 172, 178,
			184, 190, 226, 232, 238, 196, 202, 208, 226, 232,
			238, 214, 220, 244, 250
		};

		private byte[] crctablelo = new byte[256]
		{
			0, 192, 193, 1, 195, 3, 2, 194, 198, 6,
			7, 199, 5, 197, 196, 4, 204, 12, 13, 205,
			15, 207, 206, 14, 10, 202, 203, 11, 201, 9,
			8, 200, 216, 24, 25, 217, 27, 219, 218, 26,
			30, 222, 223, 31, 221, 29, 28, 220, 20, 212,
			213, 21, 215, 23, 22, 214, 210, 18, 19, 211,
			17, 209, 208, 16, 240, 48, 49, 241, 51, 243,
			242, 50, 54, 246, 247, 55, 245, 53, 52, 244,
			60, 252, 253, 61, 255, 63, 62, 254, 250, 58,
			59, 251, 57, 249, 248, 56, 40, 232, 233, 41,
			235, 43, 42, 234, 238, 46, 47, 239, 45, 237,
			236, 44, 228, 36, 37, 229, 39, 231, 230, 38,
			34, 226, 227, 35, 225, 33, 32, 224, 160, 96,
			97, 161, 99, 163, 162, 98, 102, 166, 167, 103,
			165, 101, 100, 164, 108, 172, 173, 109, 175, 111,
			110, 174, 170, 106, 107, 171, 105, 169, 168, 104,
			120, 184, 185, 121, 187, 123, 122, 186, 190, 126,
			127, 191, 125, 189, 188, 124, 180, 116, 117, 181,
			119, 183, 182, 118, 114, 178, 179, 115, 177, 113,
			112, 176, 80, 144, 145, 81, 147, 83, 82, 146,
			150, 86, 87, 151, 85, 149, 148, 84, 156, 92,
			93, 157, 95, 159, 158, 94, 90, 154, 155, 91,
			153, 89, 88, 152, 136, 72, 73, 137, 75, 139,
			138, 74, 78, 142, 143, 79, 141, 77, 76, 140,
			68, 132, 133, 69, 135, 71, 70, 134, 130, 66,
			67, 131, 65, 129, 128, 64
		};

		private byte[] crctablehi = new byte[256]
		{
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 0, 193, 129, 64, 1, 192,
			128, 65, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 0, 193,
			129, 64, 1, 192, 128, 65, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 0, 193,
			129, 64, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 1, 192, 128, 65, 0, 193,
			129, 64, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 0, 193, 129, 64, 1, 192,
			128, 65, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 0, 193, 129, 64, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			1, 192, 128, 65, 0, 193, 129, 64, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 1, 192, 128, 65, 0, 193,
			129, 64, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64
		};

		private int[] m_OneCommSec = new int[8];

		private int[] invpintable = new int[16]
		{
			0, 10, 7, 3, 8, 6, 2, 4, 12, 13,
			1, 9, 5, 11, 13, 13
		};

		private int[] seltable = new int[16]
		{
			0, 10, 6, 3, 7, 12, 5, 2, 4, 11,
			1, 13, 8, 15, 15, 15
		};

		private string[] PINNameCN = new string[16]
		{
			" 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18",
			"10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß", "14-Œﬁ–ß", "15-Œﬁ–ß"
		};

		private string[] PINNameEN = new string[16]
		{
			" 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18",
			"10-PIN24", "11-PD1", "12-PB4", "13-Invalid", "14-Invalid", "15-Invalid"
		};

		private int rcvframe;

		private string prints;

		private string m_prints;

		private int buffsize = 256;

		private byte[] recvBuff = new byte[256];

		private int rcv_LowSpeedLineCurr;

		private int rcv_MidSpeedLineCurr;

		private int rcv_LowSpeedPhaseCurr;

		private int rcv_MidSpeedPhaseCurr;

		private float rcv_ThrottleLow;

		private float rcv_ThrottleHigh;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid girdall;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.ScrollView DetailView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RowText0;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelFactoryName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelTypeName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelType;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelPowerName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelPower;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelCurrName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelNumber;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CustomCode;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MorseCodeName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowDateTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid DateTimeGrid;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelDate;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModelTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowText2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid Motopara;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PositionDetect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NTC_PTC;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PhaseOffset;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PolePairsDisplay;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Direction;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RatedSpeed;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RatedVoltage;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RatedPower;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MaxSpeed;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BackSpeed;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MaxLineCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MaxPhaseCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ECOConfig;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Max_Acc;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CustomMaxLine;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CustomMaxPhase;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid Motopara2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PhaseExchange;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AccCoeff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label WeakA;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label WeakTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Max_Dec;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label QuickDown;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ThrottleLow;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ThrottleHigh;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button PhaseExchangeB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button Max_DecB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowText4;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid SpeedRatioPara;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio1000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio1500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio2000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio2500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio3000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio3500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio4000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio4500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio5000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio5500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio6000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio6500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio7000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio7500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio8000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio8500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ratio9000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LD;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LQ;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FAIF;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LmtSpeed;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowText5;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid RowText5Para;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LowSpeedLineCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MidSpeedLineCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LowSpeedPhaseCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MidSpeedPhaseCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LowSpeed;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MidSpeed;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button NRowText4;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid NSpeedRatioPara;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label StopBackCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MaxBackCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BattRatedCap1;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid NSpeedRatioParaE;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FreeThrottle;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Voltage2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio1000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio1500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio2000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio2500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio3000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio3500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio4000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio4500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio5000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio5500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio6000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio6500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio7000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio7500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio8000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio8500;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NRatio9000;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowTextFunc;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid RowTextFuncPara;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BoostPin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label XHPin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BCPin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PPin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FWPin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label REPin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SDHPin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SDLPin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CHGPin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FDPin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SEATPin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SpeedLimitPin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SwitchVolPin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label OneKeyPairPin;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BstTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BstRelease;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SPModeConfig;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LongBack;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label EmptySpeed;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SlowDown;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid RowTextFuncParaE;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label GearConfig;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BrakeConfig;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PC13Config;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ParkConfig;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FollowConfig;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowTextOneLine;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid RowTextOneLinePara;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SpeedPulse;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SpdPulseNum;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SpeedMeterConfig;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SpeedAnalog;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CANConfig;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NoCanCnt;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CanSel;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TorqueCoeff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button SpeedPulseButton;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid RowTextOneLineParaE;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Idle;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Stop;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ESQH;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Pulse;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SQH;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DATA0;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DATA1;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SEC0;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SEC1;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SEC2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SEC3;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SEC4;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SEC5;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SEC6;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SEC7;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Ppos;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BCPos;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label HBarPos;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FDPos;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label OneLineCurrCoeff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Byte89Sel;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label WheelWidth;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label WheelRatio;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label WheelRadius;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RateRatio;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowText7;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid FOCProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label HighVolProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label HighVolRestore;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LowVolProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LowVolRestore;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MotorTempProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MotorTempRestore;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MosTempProtect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MosTempRestore;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ZeroBattCoeff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FullBattCoeff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid FOC2Protect;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ThrottleLost;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ThrottleInsert;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ReleasePTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SeatDelay;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BlockTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ParkTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MidSpeedCap;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LowCapLimit;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MidSpeedCapCoeff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Stage1Curr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BatSel;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CurrLimitWay;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label IntRes;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TempCoeff2;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button ThrottleLostB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button ThrottleInsertB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button ReleasePTimeB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button SeatDelayB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button BlockTimeB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button ParkTimeB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button MidSpeedCapB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button LowCapLimitB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button MidSpeedCapCoeffB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button Stage1CurrB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button BatSelB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CurrLimitWayB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button IntResB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button TempCoeff2B;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowText8;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid RowText8Para;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AN;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LM;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label StartKI;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label StartKP;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MidKI;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MidKP;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MaxKI;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MaxKP;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SpeedKI;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SpeedKP;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MOE;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CurveTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button MOEB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CurveTimeB;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowTextProduct;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid RowTextProductPara;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ReCurrRatio;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FwReRatio;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VolSelectRatio;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Stage2Soc;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ReAcc;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AlarmDelay;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RelayDelay;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RelayOut;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BCEnable;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SeatEnable;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PEnable;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AutoBackP;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CruiseEnable;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label EABSEnable;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TuixingEnable;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ForseTheft;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label OverSpeedAlarm;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ParkDisableBreak;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RememberGear;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BackEnable;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RelayDelay1S;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ZeroSwitch;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label IsinStart;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FollowSpeed;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CurrFD;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PulseFD;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Temp70;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FastRE;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label InverseTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ParkDiff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ParkCoeff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RxdSel;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LearnThrottle;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LearnVol;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LearnVoh;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SpecialWeak;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Protocol485;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button RowText11;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid GirdText11;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LineCoeff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LineZero;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PhaseACoeff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PhaseCCoeff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PhaseAZero;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PhaseCZero;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TempCoeff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VolCoeff;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SaveNum;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button ResetName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button SaveName;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button ParaMode;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RcvFrames;

		public ProControlPage()
		{
			ProControlPage proControlPage = this;
			InitializeComponent();
			rcv_CustomCode0 = 'Y';
			rcv_CustomCode1 = 'Q';
			rcv_RatedVoltage = 144;
			cfg190h = 0;
			DELAYTIME = 5;
			rcv_AccCoeff = 0;
			int rcvframe = 0;
			bms = App.bms;
			rcv_GPara0 = 8192;
			if (App.CN)
			{
				ModelDate.Text = "»’∆⁄";
				ModelTime.Text = " ±º‰";
				PositionDetect.Text = $"Œª÷√¥´∏–∆˜£∫";
				Direction.Text = "µÁª˙∑ΩœÚ£∫";
				PolePairsDisplay.Text = "º´∂‘ ˝";
				RatedVoltage.Text = "∂Ó∂®µÁ—π£∫";
				RatedPower.Text = "∂Ó∂®π¶¬ £∫";
				CANConfig.Text = "CANÕ®–≈£∫Œﬁ–ß";
			}
			else
			{
				ModelDate.Text = "Date";
				ModelTime.Text = "Time";
				PositionDetect.Text = $"AngleDetect";
				Direction.Text = "Motor Direction:";
				PolePairsDisplay.Text = "PolePairs";
				RatedVoltage.Text = "RatedVoltage:";
				RatedPower.Text = "RatedPower:";
				CANConfig.Text = "CAN:None";
				ParaMode.Text = "Return Simple Mode";
				RcvFrames.Text = "RcvFrames0";
			}
			if (App.CN)
			{
				VolCoeff.Text = "µÁ—πœµ ˝£∫";
				LineCoeff.Text = "œﬂµÁ¡˜œµ ˝£∫";
				PhaseACoeff.Text = "œ‡µÁ¡˜œµ ˝A:";
				PhaseCCoeff.Text = "œ‡µÁ¡˜œµ ˝B:";
				SaveNum.Text = "±Í∂®¥Œ ˝£∫";
			}
			else
			{
				VolCoeff.Text = "VoltageCoeff:";
				LineCoeff.Text = "LineCurrCoeff:";
				PhaseACoeff.Text = "PhaseCoeffA:";
				PhaseCCoeff.Text = "PhaseCoeffB:";
				SaveNum.Text = "Save Times:";
				HighVolProtect.Text = "HigiVolProtect:";
				HighVolRestore.Text = "HigiVolRestore:";
				LowVolProtect.Text = "LowVolProtect:";
				LowVolRestore.Text = "LowVolRestore:";
				MotorTempProtect.Text = "MotorTempProtect:";
				MotorTempRestore.Text = "MotorTempRestore:";
				MosTempProtect.Text = "MosTempProtect:";
				MosTempRestore.Text = "MosTempRestore:";
			}
			if (App.CN)
			{
				LineZero.Text = "œﬂµÁ¡˜¡„µ„£∫";
				PhaseAZero.Text = "œ‡µÁ¡˜¡„µ„A£∫";
				PhaseCZero.Text = "œ‡µÁ¡˜¡„µ„C£∫";
			}
			else
			{
				LineZero.Text = "LineCurrZero£∫";
				PhaseAZero.Text = "PhseAZero:";
				PhaseCZero.Text = "PhaseCZero:";
			}
			if (App.CN)
			{
				TempCoeff.Text = "Œ¬∂»œµ ˝£∫";
			}
			else
			{
				TempCoeff.Text = "TempCoeff:";
			}
			if (App.CN)
			{
				base.Title = "≤Œ ˝";
			}
			else
			{
				base.Title = "Paras";
			}
			DateTime dateTime = DateTime.Now;
			Device.StartTimer(TimeSpan.FromMilliseconds(500.0), delegate
			{
				proControlPage.ModelType.Text = App.ModelName;
				if (App.RcvRemoteCount > 0)
				{
					proControlPage.ResetName.BackgroundColor = Color.Orange;
					proControlPage.SaveName.BackgroundColor = Color.Orange;
					proControlPage.ParaMode.BackgroundColor = Color.Orange;
				}
				else if (App.CAT1_Loggined)
				{
					if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
					{
						proControlPage.ResetName.BackgroundColor = Color.LightBlue;
						proControlPage.SaveName.BackgroundColor = Color.LightBlue;
						proControlPage.ParaMode.BackgroundColor = Color.LightBlue;
					}
					else if (App.isConnected)
					{
						proControlPage.ResetName.BackgroundColor = Color.LightCyan;
						proControlPage.SaveName.BackgroundColor = Color.LightCyan;
						proControlPage.ParaMode.BackgroundColor = Color.LightCyan;
					}
					else
					{
						proControlPage.ResetName.BackgroundColor = Color.LightGreen;
						proControlPage.SaveName.BackgroundColor = Color.LightGreen;
						proControlPage.ParaMode.BackgroundColor = Color.LightGreen;
					}
				}
				else
				{
					proControlPage.ResetName.BackgroundColor = Color.LightGray;
					proControlPage.SaveName.BackgroundColor = Color.LightGray;
					proControlPage.ParaMode.BackgroundColor = Color.LightGray;
				}
				proControlPage.checkblue();
				if (App.CN)
				{
					if (App.PassOk == 0 && dateTime.Year >= 2020 && dateTime.Month >= 1)
					{
						proControlPage.ModelNumber.Text = "≤˙∆∑±‡∫≈£∫" + App.rcv_serialNumberfoc.Substring(0, 1) + "..." + App.rcv_serialNumberfoc.Substring(8, 4) + "...";
					}
					else
					{
						proControlPage.ModelNumber.Text = "≤˙∆∑±‡∫≈" + App.rcv_serialNumberfoc;
					}
					if (proControlPage.rcv_PolePairs >= 16)
					{
						proControlPage.RatedSpeed.Text = $"∂Ó∂®◊™ÀŸ£∫{proControlPage.rcv_RatedSpeed * 4 / proControlPage.rcv_PolePairs}RPM";
						proControlPage.MaxSpeed.Text = $"◊Ó¥Û◊™ÀŸ£∫{proControlPage.rcv_MaxSpeed * 4 / proControlPage.rcv_PolePairs}RPM";
					}
					else
					{
						proControlPage.RatedSpeed.Text = $"∂Ó∂®◊™ÀŸ£∫{proControlPage.rcv_RatedSpeed}RPM";
						proControlPage.MaxSpeed.Text = $"◊Ó¥Û◊™ÀŸ£∫{proControlPage.rcv_MaxSpeed}RPM";
					}
					if (proControlPage.rcv_PolePairs >= 16)
					{
						proControlPage.LowSpeed.Text = $"µÕÀŸ◊™ÀŸ£∫{proControlPage.rcv_LowSpeed * 4 / proControlPage.rcv_PolePairs}RPM";
						proControlPage.LmtSpeed.Text = $"œﬁÀŸ◊™ÀŸ£∫{proControlPage.rcv_LmtSpeed * 4 / proControlPage.rcv_PolePairs}RPM";
					}
					else
					{
						proControlPage.LowSpeed.Text = $"µÕÀŸ◊™ÀŸ£∫{proControlPage.rcv_LowSpeed}RPM";
						proControlPage.LmtSpeed.Text = $"œﬁÀŸ◊™ÀŸ£∫{proControlPage.rcv_LmtSpeed}RPM";
					}
					proControlPage.IntRes.Text = $"µÁ≥ÿƒ⁄◊Ë£∫{proControlPage.rcv_IntRes}";
					proControlPage.Protocol485.Text = $"485–≠“È£∫{proControlPage.rcv_Protocol485}";
					if (proControlPage.rcv_PolePairs >= 16)
					{
						proControlPage.MidSpeed.Text = $"÷–ÀŸ◊™ÀŸ£∫{proControlPage.rcv_MidSpeed * 4 / proControlPage.rcv_PolePairs}RPM";
					}
					else
					{
						proControlPage.MidSpeed.Text = $"÷–ÀŸ◊™ÀŸ£∫{proControlPage.rcv_MidSpeed}RPM";
					}
					if (proControlPage.rcv_PolePairs >= 16)
					{
						proControlPage.BackSpeed.Text = $"∫ÛÕÀ◊™ÀŸ£∫{proControlPage.rcv_BackSpeed * 4 / proControlPage.rcv_PolePairs}RPM";
					}
					else
					{
						proControlPage.BackSpeed.Text = $"∫ÛÕÀ◊™ÀŸ£∫{proControlPage.rcv_BackSpeed}RPM";
					}
					proControlPage.ESQH.Text = $"Ãÿ ‚÷°:{(proControlPage.rcv_OneCommCfg >> 8) & 0xFF,4}";
					proControlPage.Ppos.Text = $"PŒª÷√:{proControlPage.rcv_OneCommPos & 0xF,4}";
					proControlPage.BCPos.Text = $"±ﬂ≥≈Œª÷√:{(proControlPage.rcv_OneCommPos >> 4) & 0xF,4}";
					proControlPage.HBarPos.Text = $"◊™∞—Œª÷√:{(proControlPage.rcv_OneCommPos >> 8) & 0xF,4}";
					proControlPage.FDPos.Text = $"∑¿µ¡Œª÷√:{(proControlPage.rcv_OneCommPos >> 12) & 0xF,4}";
					proControlPage.OneLineCurrCoeff.Text = $"µÁ¡˜œµ ˝:{proControlPage.rcv_OnelineCurrCoeff,4}";
					proControlPage.WheelWidth.Text = $"¬÷Ã•øÌ∂»:{proControlPage.rcv_WheelWidth,4}";
					proControlPage.WheelRatio.Text = $"¬÷Ã•±‚∆Ω¬ :{proControlPage.rcv_WheelRatio,4}";
					proControlPage.Stage1Curr.Text = $"πÍÀŸœﬁ¡˜œµ ˝:{proControlPage.rcv_Stage1Curr,4}";
					proControlPage.VolSelectRatio.Text = $"µÁ—π—°‘Òœµ ˝:{proControlPage.rcv_VolSelectRatio,4}";
					proControlPage.Stage2Soc.Text = $"»ı¥≈µÁ¡˜œµ ˝:{proControlPage.rcv_Stage2Soc,4}";
					proControlPage.TorqueCoeff.Text = $"≈§æÿœµ ˝:{proControlPage.rcv_TorqueCoeff,4}";
					proControlPage.BstTime.Text = $"Boost ±º‰:{proControlPage.rcv_BstTime / 500,4}s";
					proControlPage.BstRelease.Text = $"Boost Õ∑≈:{proControlPage.rcv_BstRelease / 500,4}s";
					proControlPage.ParkTime.Text = $"◊§≥µ ±º‰:{proControlPage.rcv_ParkTime / 500,4}s";
					proControlPage.InverseTime.Text = $"∑¥œÚ ±º‰:{proControlPage.rcv_InverseTime,4}";
					proControlPage.ParkDiff.Text = $"ª∫Ωµ◊™ÀŸ:{proControlPage.rcv_ParkDiff,4}";
					proControlPage.ParkCoeff.Text = $"ª∫Ωµœµ ˝:{proControlPage.rcv_ParkCoeff,4}";
					proControlPage.BlockTime.Text = $"∂¬◊™ ±º‰:{proControlPage.rcv_BlockTime,4}s";
					proControlPage.SpdPulseNum.Text = $"ÀŸ∂»¬ˆ≥Âª˘ ˝:{proControlPage.rcv_SpdPulseNum,4}";
					proControlPage.IsinStart.Text = $"∆Ù∂ØIs:{proControlPage.rcv_IsInStart,4}";
					proControlPage.LearnVol.Text = $"◊‘—ßœ∞µÁ—πµÕ:{proControlPage.rcv_LearnVol,4}";
					proControlPage.LearnVoh.Text = $"◊‘—ßœ∞µÁ—π∏ﬂ:{proControlPage.rcv_LearnVoh,4}";
					proControlPage.LearnThrottle.Text = $"◊‘—ßœ∞”Õ√≈:{proControlPage.rcv_LearnThrottle,4}";
					proControlPage.LowCapLimit.Text = $"œﬁÀŸº´œﬁµÁ¡ø:{proControlPage.rcv_SpeedLowCap,4}";
					proControlPage.MidSpeedCap.Text = $"œﬁÀŸ∆ ºµÁ¡ø:{proControlPage.rcv_MidSpeedCap,4}";
					proControlPage.MidSpeedCapCoeff.Text = $"œﬁÀŸº´œﬁœµ ˝:{proControlPage.rcv_MinSpeedCapCoeff,4}";
					if (proControlPage.rcv_NoCanCnt < 6)
					{
						proControlPage.NoCanCnt.Text = $"CANºÏ≤‚:{proControlPage.rcv_NoCanCnt * 500,4}ms";
					}
					else
					{
						proControlPage.NoCanCnt.Text = $"CANºÏ≤‚:{proControlPage.rcv_NoCanCnt * 2,4}ms";
					}
					proControlPage.ReleasePTime.Text = $"ªÿP ±º‰:{(proControlPage.rcv_GPara0 & 0x1F) * 10,4}s";
					proControlPage.SeatDelay.Text = $"ªÿ◊¯Õ∞ ±º‰:{(proControlPage.rcv_GPara0 >> 5) & 7,4}s";
					proControlPage.ReAcc.Text = $"∫ÛÕÀº”ÀŸ:{proControlPage.rcv_ReIsinAcc,4}";
					proControlPage.AlarmDelay.Text = $"∏ÊæØ—” ±:{proControlPage.rcv_AlarmDelay,4}ms";
					proControlPage.FwReRatio.Text = $"∫ÛÕÀ≥›±»:{proControlPage.rcv_FwReRatio,4}";
					proControlPage.RelayOut.Text = $"ºÃµÁ∆˜ ‰≥ˆ:{(proControlPage.cfg156l >> 5) & 1,4}";
					proControlPage.EmptySpeed.Text = $"ø’◊™:{(proControlPage.cfg156l >> 6) & 3,4}";
					proControlPage.SlowDown.Text = $"∂∏∆¬ª∫Ωµ:{proControlPage.cfg11h & 7,4}";
					proControlPage.RelayDelay.Text = $"ºÃµÁ∆˜—” ±:{proControlPage.rcv_RelayDelay,4}ms";
					proControlPage.ThrottleInsert.Text = $"”Õ√≈≤Â∞Œ:{proControlPage.rcv_ThrottleInsert,4}";
					proControlPage.FollowSpeed.Text = $"∏˙ÀÊ◊™ÀŸ:{proControlPage.rcv_ExitFollowSpeed,4}rpm";
					proControlPage.ReCurrRatio.Text = $"∫ÛÕÀµÁ¡˜±»:{proControlPage.rcv_ReCurrRatio,4}";
					proControlPage.BCEnable.Text = $"∆Ù”√±ﬂ≥≈:{proControlPage.rcv_RelayDelay & 1,4}";
					proControlPage.SeatEnable.Text = $"∆Ù”√◊¯Õ∞:{(proControlPage.rcv_RelayDelay >> 1) & 1,4}";
					proControlPage.PEnable.Text = $"∆Ù”√Pµµ:{(proControlPage.rcv_RelayDelay >> 2) & 1,4}";
					proControlPage.AutoBackP.Text = $"∆Ù”√◊‘∂ØªÿP:{(proControlPage.rcv_RelayDelay >> 3) & 1,4}";
					proControlPage.CruiseEnable.Text = $"∆Ù”√—≤∫Ω:{(proControlPage.rcv_RelayDelay >> 4) & 1,4}";
					proControlPage.EABSEnable.Text = $"∆Ù”√EABS:{(proControlPage.rcv_RelayDelay >> 5) & 1,4}";
					proControlPage.TuixingEnable.Text = $"∆Ù”√÷˙¡¶Õ∆––:{(proControlPage.rcv_RelayDelay >> 6) & 1,4}";
					proControlPage.ForseTheft.Text = $"«ø÷∆Ω¯»Î∑¿µ¡:{(proControlPage.rcv_RelayDelay >> 7) & 1,4}";
					proControlPage.OverSpeedAlarm.Text = $"∆Ù”√≥¨ÀŸ±®æØ:{(proControlPage.rcv_RelayDelay >> 8) & 1,4}";
					proControlPage.ParkDisableBreak.Text = $"…≤≥µ≤ªΩ‚◊§≥µ:{(proControlPage.rcv_RelayDelay >> 9) & 1,4}";
					proControlPage.RememberGear.Text = $"∆Ù”√µµŒªº«“‰:{(proControlPage.rcv_RelayDelay >> 10) & 1,4}";
					proControlPage.BackEnable.Text = $"∆Ù”√∫ÛÕÀπ¶ƒ‹:{(proControlPage.rcv_RelayDelay >> 14) & 1,4}";
					proControlPage.RelayDelay1S.Text = $"ºÃµÁ∆˜—” ±1√Î:{(proControlPage.rcv_RelayDelay >> 15) & 1,4}";
				}
				else
				{
					if (App.PassOk == 0 && dateTime.Year >= 2020 && dateTime.Month >= 1)
					{
						proControlPage.ModelNumber.Text = "ProductCode:" + App.rcv_serialNumberfoc.Substring(0, 1) + "..." + App.rcv_serialNumberfoc.Substring(8, 4) + "..." + App.rcv_serialNumberfoc.Substring(16);
					}
					else
					{
						proControlPage.ModelNumber.Text = "ProductCode:" + App.rcv_serialNumberfoc;
					}
					if (proControlPage.rcv_PolePairs >= 16)
					{
						proControlPage.RatedSpeed.Text = $"RatedSpeed:{proControlPage.rcv_RatedSpeed * 4 / proControlPage.rcv_PolePairs}RPM";
						proControlPage.MaxSpeed.Text = $"MaxSpeed:{proControlPage.rcv_MaxSpeed * 4 / proControlPage.rcv_PolePairs}RPM";
						proControlPage.LmtSpeed.Text = $"LimitSpeed:{proControlPage.rcv_LmtSpeed * 4 / proControlPage.rcv_PolePairs}RPM";
					}
					else
					{
						proControlPage.RatedSpeed.Text = $"RatedSpeed:{proControlPage.rcv_RatedSpeed}RPM";
						proControlPage.MaxSpeed.Text = $"MaxSpeed:{proControlPage.rcv_MaxSpeed}RPM";
						proControlPage.LmtSpeed.Text = $"LimitSpeed:{proControlPage.rcv_LmtSpeed}RPM";
					}
					proControlPage.IntRes.Text = $"IntRes:{proControlPage.rcv_IntRes}";
					proControlPage.Protocol485.Text = $"Protocol485£∫{proControlPage.rcv_Protocol485}";
					if (proControlPage.rcv_PolePairs >= 16)
					{
						proControlPage.LowSpeed.Text = $"LowSpeed:{proControlPage.rcv_LowSpeed * 4 / proControlPage.rcv_PolePairs}RPM";
					}
					else
					{
						proControlPage.LowSpeed.Text = $"LowSpeed:{proControlPage.rcv_LowSpeed}RPM";
					}
					if (proControlPage.rcv_PolePairs >= 16)
					{
						proControlPage.MidSpeed.Text = $"MiddleSpeed:{proControlPage.rcv_MidSpeed * 4 / proControlPage.rcv_PolePairs}RPM";
					}
					else
					{
						proControlPage.MidSpeed.Text = $"MiddleSpeed:{proControlPage.rcv_MidSpeed}RPM";
					}
					if (proControlPage.rcv_PolePairs >= 16)
					{
						proControlPage.BackSpeed.Text = $"BackSpeed:{proControlPage.rcv_BackSpeed * 4 / proControlPage.rcv_PolePairs}RPM";
					}
					else
					{
						proControlPage.BackSpeed.Text = $"BackSpeed:{proControlPage.rcv_BackSpeed}RPM";
					}
					proControlPage.ESQH.Text = $"SpecialFrame:{(proControlPage.rcv_OneCommCfg >> 8) & 0xFF,4}";
					proControlPage.Ppos.Text = $"PPosition:{proControlPage.rcv_OneCommPos & 0xF,4}";
					proControlPage.BCPos.Text = $"BCPosition:{(proControlPage.rcv_OneCommPos >> 4) & 0xF,4}";
					proControlPage.HBarPos.Text = $"HbarPosition:{(proControlPage.rcv_OneCommPos >> 8) & 0xF,4}";
					proControlPage.FDPos.Text = $"FDPosition:{(proControlPage.rcv_OneCommPos >> 12) & 0xF,4}";
					proControlPage.OneLineCurrCoeff.Text = $"CurrentCoeff:{proControlPage.rcv_OnelineCurrCoeff,4}";
					proControlPage.WheelWidth.Text = $"WheelWidth:{proControlPage.rcv_WheelWidth,4}";
					proControlPage.WheelRatio.Text = $"WheelRatio:{proControlPage.rcv_WheelRatio,4}";
					proControlPage.Stage1Curr.Text = $"TurtleSpeedCurrCoeff:{proControlPage.rcv_Stage1Curr,4}";
					proControlPage.VolSelectRatio.Text = $"VolSelectRatio:{proControlPage.rcv_VolSelectRatio,4}";
					proControlPage.Stage2Soc.Text = $"WeakCurrCoeff:{proControlPage.rcv_Stage2Soc,4}";
					proControlPage.TorqueCoeff.Text = $"TorqueCoeff:{proControlPage.rcv_TorqueCoeff,4}";
					proControlPage.BstTime.Text = $"BoostTime:{proControlPage.rcv_BstTime / 500,4}s";
					proControlPage.BstRelease.Text = $"BoostRelease:{proControlPage.rcv_BstRelease / 500,4}s";
					proControlPage.ParkTime.Text = $"ParkTime:{proControlPage.rcv_ParkTime / 500,4}s";
					proControlPage.InverseTime.Text = $"InverseTime:{proControlPage.rcv_InverseTime,4}";
					proControlPage.ParkDiff.Text = $"SlowDownRpm:{proControlPage.rcv_ParkDiff,4}";
					proControlPage.BlockTime.Text = $"BlockTime:{proControlPage.rcv_BlockTime,4}s";
					proControlPage.SpdPulseNum.Text = $"SpdPulseNum:{proControlPage.rcv_SpdPulseNum,4}";
					proControlPage.IsinStart.Text = $"StartIs:{proControlPage.rcv_IsInStart,4}";
					proControlPage.LearnVol.Text = $"LearnVolLow:{proControlPage.rcv_LearnVol,4}";
					proControlPage.LearnVoh.Text = $"LearnVolHigh:{proControlPage.rcv_LearnVoh,4}";
					proControlPage.ParkCoeff.Text = $"SlowDownCoeff:{proControlPage.rcv_ParkCoeff,4}";
					proControlPage.LearnThrottle.Text = $"LearnThrottle:{proControlPage.rcv_LearnThrottle,4}";
					proControlPage.LowCapLimit.Text = $"LmtSpdMinCap:{proControlPage.rcv_SpeedLowCap,4}";
					proControlPage.MidSpeedCap.Text = $"LmtSpdStartCap:{proControlPage.rcv_MidSpeedCap,4}";
					proControlPage.MidSpeedCapCoeff.Text = $"LmtSpdMaxCoeff:{proControlPage.rcv_MinSpeedCapCoeff,4}";
					if (proControlPage.rcv_NoCanCnt < 6)
					{
						proControlPage.NoCanCnt.Text = $"CAN Detect:{proControlPage.rcv_NoCanCnt * 500,4}ms";
					}
					else
					{
						proControlPage.NoCanCnt.Text = $"CAN Detect:{proControlPage.rcv_NoCanCnt * 2,4}ms";
					}
					proControlPage.ReleasePTime.Text = $"ReleaseToPTime:{(proControlPage.rcv_GPara0 & 0x1F) * 10,4}s";
					proControlPage.SeatDelay.Text = $"ReleaseToSeat:{(proControlPage.rcv_GPara0 >> 5) & 7,4}s";
					proControlPage.ReAcc.Text = $"Re Acc:{proControlPage.rcv_ReIsinAcc,4}s";
					proControlPage.AlarmDelay.Text = $"AlarmDelay:{proControlPage.rcv_AlarmDelay,4}";
					proControlPage.FwReRatio.Text = $"FwReRatio:{proControlPage.rcv_FwReRatio,4}";
					proControlPage.RelayOut.Text = $"RelayOut:{(proControlPage.cfg156l >> 5) & 1,4}";
					proControlPage.EmptySpeed.Text = $"EmptyRun:{(proControlPage.cfg156l >> 6) & 3,4}";
					proControlPage.SlowDown.Text = $"SlowDown:{proControlPage.cfg11h & 7,4}";
					proControlPage.RelayDelay.Text = $"RelayDelay:{proControlPage.rcv_RelayDelay,4}ms";
					proControlPage.ThrottleInsert.Text = $"ThrottleInsert:{proControlPage.rcv_ThrottleInsert,4}";
					proControlPage.FollowSpeed.Text = $"FollowSpeed:{proControlPage.rcv_ExitFollowSpeed,4}rpm";
					proControlPage.ReCurrRatio.Text = $"ReCurrRatio:{proControlPage.rcv_ReCurrRatio,4}";
					proControlPage.BCEnable.Text = $"BCEnable:{proControlPage.rcv_RelayDelay & 1,4}";
					proControlPage.SeatEnable.Text = $"SeatEnable:{(proControlPage.rcv_RelayDelay >> 1) & 1,4}";
					proControlPage.PEnable.Text = $"PEnable:{(proControlPage.rcv_RelayDelay >> 2) & 1,4}";
					proControlPage.AutoBackP.Text = $"AutoBackPEnable:{(proControlPage.rcv_RelayDelay >> 3) & 1,4}";
					proControlPage.CruiseEnable.Text = $"CruiseEnable:{(proControlPage.rcv_RelayDelay >> 4) & 1,4}";
					proControlPage.EABSEnable.Text = $"EABSEnable:{(proControlPage.rcv_RelayDelay >> 5) & 1,4}";
					proControlPage.TuixingEnable.Text = $"PushEnable:{(proControlPage.rcv_RelayDelay >> 6) & 1,4}";
					proControlPage.ForseTheft.Text = $"ForseAntiTheft:{(proControlPage.rcv_RelayDelay >> 7) & 1,4}";
					proControlPage.OverSpeedAlarm.Text = $"OverSpeedAlarm:{(proControlPage.rcv_RelayDelay >> 8) & 1,4}";
					proControlPage.ParkDisableBreak.Text = $"BrakeStillPark:{(proControlPage.rcv_RelayDelay >> 9) & 1,4}";
					proControlPage.RememberGear.Text = $"RememberGear:{(proControlPage.rcv_RelayDelay >> 10) & 1,4}";
					proControlPage.BackEnable.Text = $"BackEnable:{(proControlPage.rcv_RelayDelay >> 14) & 1,4}";
					proControlPage.RelayDelay1S.Text = $"RelayDelay1S:{(proControlPage.rcv_RelayDelay >> 15) & 1,4}";
				}
				proControlPage.Pulse.Text = $"PULSE:{proControlPage.m_OneCommPS & 0xFF,4}";
				proControlPage.SQH.Text = $"SQH:{(proControlPage.m_OneCommPS >> 8) & 0xFF,4}";
				proControlPage.DATA0.Text = $"DATA0:{proControlPage.m_OneCommHead & 0xFF,4}";
				proControlPage.DATA1.Text = $"DATA1:{(proControlPage.m_OneCommHead >> 8) & 0xFF,4}";
				proControlPage.SEC0.Text = $"SEC0:{proControlPage.m_OneCommSec[0],4}";
				proControlPage.SEC1.Text = $"SEC1:{proControlPage.m_OneCommSec[1],4}";
				proControlPage.SEC2.Text = $"SEC2:{proControlPage.m_OneCommSec[2],4}";
				proControlPage.SEC3.Text = $"SEC3:{proControlPage.m_OneCommSec[3],4}";
				proControlPage.SEC4.Text = $"SEC4:{proControlPage.m_OneCommSec[4],4}";
				proControlPage.SEC5.Text = $"SEC5:{proControlPage.m_OneCommSec[5],4}";
				proControlPage.SEC6.Text = $"SEC6:{proControlPage.m_OneCommSec[6],4}";
				proControlPage.SEC7.Text = $"SEC7:{proControlPage.m_OneCommSec[7],4}";
				double num = (float)proControlPage.rcv_RateRatio / 1000f;
				if (App.CN)
				{
					proControlPage.RateRatio.Text = $"¥´∂ØÀŸ±»:{num,4}";
					proControlPage.WheelRadius.Text = $"¬÷Ã•R:{proControlPage.rcv_WheelRadius,4}";
				}
				else
				{
					proControlPage.RateRatio.Text = $"GearRatio:{num,4}";
					proControlPage.WheelRadius.Text = $"WheelR:{proControlPage.rcv_WheelRadius,4}";
				}
				if (proControlPage.rcv_PolePairs >= 16)
				{
					proControlPage.Ratio500.Text = $"{2000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio1000.Text = $"{4000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio1500.Text = $"{6000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio2000.Text = $"{8000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio2500.Text = $"{10000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio3000.Text = $"{12000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio3500.Text = $"{14000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio4000.Text = $"{16000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio4500.Text = $"{18000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio5000.Text = $"{20000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio5500.Text = $"{22000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio6000.Text = $"{24000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio6500.Text = $"{26000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio7000.Text = $"{28000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio7500.Text = $"{30000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio8000.Text = $"{32000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio8500.Text = $"{34000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.Ratio9000.Text = $"{36000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio500.Text = $"{2000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio1000.Text = $"{4000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio1500.Text = $"{6000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio2000.Text = $"{8000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio2500.Text = $"{10000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio3000.Text = $"{12000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio3500.Text = $"{14000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio4000.Text = $"{16000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio4500.Text = $"{18000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio5000.Text = $"{20000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio5500.Text = $"{22000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio6000.Text = $"{24000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio6500.Text = $"{26000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio7000.Text = $"{28000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio7500.Text = $"{30000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio8000.Text = $"{32000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio8500.Text = $"{34000 / proControlPage.rcv_PolePairs,4}RPM";
					proControlPage.NRatio9000.Text = $"{36000 / proControlPage.rcv_PolePairs,4}RPM";
				}
				else
				{
					proControlPage.Ratio500.Text = $"{500,4}RPM";
					proControlPage.Ratio1000.Text = $"{1000,4}RPM";
					proControlPage.Ratio1500.Text = $"{1500,4}RPM";
					proControlPage.Ratio2000.Text = $"{2000,4}RPM";
					proControlPage.Ratio2500.Text = $"{2500,4}RPM";
					proControlPage.Ratio3000.Text = $"{3000,4}RPM";
					proControlPage.Ratio3500.Text = $"{3500,4}RPM";
					proControlPage.Ratio4000.Text = $"{4000,4}RPM";
					proControlPage.Ratio4500.Text = $"{4500,4}RPM";
					proControlPage.Ratio5000.Text = $"{5000,4}RPM";
					proControlPage.Ratio5500.Text = $"{5500,4}RPM";
					proControlPage.Ratio6000.Text = $"{6000,4}RPM";
					proControlPage.Ratio6500.Text = $"{6500,4}RPM";
					proControlPage.Ratio7000.Text = $"{7000,4}RPM";
					proControlPage.Ratio7500.Text = $"{7500,4}RPM";
					proControlPage.Ratio8000.Text = $"{8000,4}RPM";
					proControlPage.Ratio8500.Text = $"{8500,4}RPM";
					proControlPage.Ratio9000.Text = $"{9000,4}RPM";
					proControlPage.NRatio500.Text = $"{500,4}RPM";
					proControlPage.NRatio1000.Text = $"{1000,4}RPM";
					proControlPage.NRatio1500.Text = $"{1500,4}RPM";
					proControlPage.NRatio2000.Text = $"{2000,4}RPM";
					proControlPage.NRatio2500.Text = $"{2500,4}RPM";
					proControlPage.NRatio3000.Text = $"{3000,4}RPM";
					proControlPage.NRatio3500.Text = $"{3500,4}RPM";
					proControlPage.NRatio4000.Text = $"{4000,4}RPM";
					proControlPage.NRatio4500.Text = $"{4500,4}RPM";
					proControlPage.NRatio5000.Text = $"{5000,4}RPM";
					proControlPage.NRatio5500.Text = $"{5500,4}RPM";
					proControlPage.NRatio6000.Text = $"{6000,4}RPM";
					proControlPage.NRatio6500.Text = $"{6500,4}RPM";
					proControlPage.NRatio7000.Text = $"{7000,4}RPM";
					proControlPage.NRatio7500.Text = $"{7500,4}RPM";
					proControlPage.NRatio8000.Text = $"{8000,4}RPM";
					proControlPage.NRatio8500.Text = $"{8500,4}RPM";
					proControlPage.NRatio9000.Text = $"{9000,4}RPM";
				}
				proControlPage.Ratio500.Text += $"{proControlPage.rcv_Ratio500,4}%";
				proControlPage.Ratio1000.Text += $"{proControlPage.rcv_Ratio1000,4}%";
				proControlPage.Ratio1500.Text += $"{proControlPage.rcv_Ratio1500,4}%";
				proControlPage.Ratio2000.Text += $"{proControlPage.rcv_Ratio2000,4}%";
				proControlPage.Ratio2500.Text += $"{proControlPage.rcv_Ratio2500,4}%";
				proControlPage.Ratio3000.Text += $"{proControlPage.rcv_Ratio3000,4}%";
				proControlPage.Ratio3500.Text += $"{proControlPage.rcv_Ratio3500,4}%";
				proControlPage.Ratio4000.Text += $"{proControlPage.rcv_Ratio4000,4}%";
				proControlPage.Ratio4500.Text += $"{proControlPage.rcv_Ratio4500,4}%";
				proControlPage.Ratio5000.Text += $"{proControlPage.rcv_Ratio5000,4}%";
				proControlPage.Ratio5500.Text += $"{proControlPage.rcv_Ratio5500,4}%";
				proControlPage.Ratio6000.Text += $"{proControlPage.rcv_Ratio6000,4}%";
				proControlPage.Ratio6500.Text += $"{proControlPage.rcv_Ratio6500,4}%";
				proControlPage.Ratio7000.Text += $"{proControlPage.rcv_Ratio7000,4}%";
				proControlPage.Ratio7500.Text += $"{proControlPage.rcv_Ratio7500,4}%";
				proControlPage.Ratio8000.Text += $"{proControlPage.rcv_Ratio8000,4}%";
				proControlPage.Ratio8500.Text += $"{proControlPage.rcv_Ratio8500,4}%";
				proControlPage.Ratio9000.Text += $"{proControlPage.rcv_Ratio9000,4}%";
				proControlPage.NRatio500.Text += $"{proControlPage.rcv_nratio[1],4}%";
				proControlPage.NRatio1000.Text += $"{proControlPage.rcv_nratio[2],4}%";
				proControlPage.NRatio1500.Text += $"{proControlPage.rcv_nratio[3],4}%";
				proControlPage.NRatio2000.Text += $"{proControlPage.rcv_nratio[4],4}%";
				proControlPage.NRatio2500.Text += $"{proControlPage.rcv_nratio[5],4}%";
				proControlPage.NRatio3000.Text += $"{proControlPage.rcv_nratio[6],4}%";
				proControlPage.NRatio3500.Text += $"{proControlPage.rcv_nratio[7],4}%";
				proControlPage.NRatio4000.Text += $"{proControlPage.rcv_nratio[8],4}%";
				proControlPage.NRatio4500.Text += $"{proControlPage.rcv_nratio[9],4}%";
				proControlPage.NRatio5000.Text += $"{proControlPage.rcv_nratio[10],4}%";
				proControlPage.NRatio5500.Text += $"{proControlPage.rcv_nratio[11],4}%";
				proControlPage.NRatio6000.Text += $"{proControlPage.rcv_nratio[12],4}%";
				proControlPage.NRatio6500.Text += $"{proControlPage.rcv_nratio[13],4}%";
				proControlPage.NRatio7000.Text += $"{proControlPage.rcv_nratio[14],4}%";
				proControlPage.NRatio7500.Text += $"{proControlPage.rcv_nratio[15],4}%";
				proControlPage.NRatio8000.Text += $"{proControlPage.rcv_nratio[16],4}%";
				proControlPage.NRatio8500.Text += $"{proControlPage.rcv_nratio[17],4}%";
				proControlPage.NRatio9000.Text += $"{proControlPage.rcv_nratio[18],4}%";
				proControlPage.StartKI.Text = "StartKI:" + proControlPage.rcv_StartKI;
				proControlPage.MidKI.Text = "MidKI:" + proControlPage.rcv_MidKI;
				proControlPage.MaxKI.Text = "MaxKI:" + proControlPage.rcv_MaxKI;
				proControlPage.StartKP.Text = "StartKP:" + proControlPage.rcv_StartKP;
				proControlPage.MidKP.Text = "MidKP:" + proControlPage.rcv_MidKP;
				proControlPage.MaxKP.Text = "MaxKP:" + proControlPage.rcv_MaxKP;
				proControlPage.SpeedKI.Text = "SpeedKI:" + proControlPage.rcv_SpeedKI;
				proControlPage.SpeedKP.Text = "SpeedKP:" + proControlPage.rcv_SpeedKP;
				proControlPage.AN.Text = "AN:" + proControlPage.rcv_AN;
				proControlPage.LM.Text = "LM:" + proControlPage.rcv_LM + App.lang;
				if (App.CN)
				{
					proControlPage.RowText0.Text = "–Õ∫≈";
					if (proControlPage.DateTimeGrid.IsVisible)
					{
						proControlPage.RowDateTime.Text = "- »’∆⁄ ±º‰";
					}
					else
					{
						proControlPage.RowDateTime.Text = "+ »’∆⁄ ±º‰";
					}
					if (proControlPage.Motopara.IsVisible)
					{
						proControlPage.RowText2.Text = "- ≤Œ ˝";
					}
					else
					{
						proControlPage.RowText2.Text = "+ ≤Œ ˝";
					}
					if (proControlPage.SpeedRatioPara.IsVisible)
					{
						proControlPage.RowText4.Text = "- ◊™ÀŸœﬁ¡˜±»¿˝œµ ˝";
					}
					else
					{
						proControlPage.RowText4.Text = "+ ◊™ÀŸœﬁ¡˜±»¿˝œµ ˝";
					}
					if (proControlPage.RowText5Para.IsVisible)
					{
						proControlPage.RowText5.Text = "- »˝µµÀŸ∂»œﬁ¡˜±»¿˝";
					}
					else
					{
						proControlPage.RowText5.Text = "+ »˝µµÀŸ∂»œﬁ¡˜±»¿˝";
					}
					if (proControlPage.RowText8Para.IsVisible)
					{
						proControlPage.RowText8.Text = "- PID≤Œ ˝";
					}
					else
					{
						proControlPage.RowText8.Text = "+ PID≤Œ ˝";
					}
					proControlPage.ModelTypeName.Text = "–Õ∫≈";
					proControlPage.ModelFactoryName.Text = "ƒœæ©‘∂«˝";
					proControlPage.ModelPowerName.Text = "µÁ—π/π¶¬ ";
					proControlPage.LowSpeedLineCurr.Text = $"µÕÀŸœﬂµÁ¡˜{proControlPage.rcv_LowSpeedLineCurr,4}%";
					proControlPage.MidSpeedLineCurr.Text = $"÷–ÀŸœﬂµÁ¡˜{proControlPage.rcv_MidSpeedLineCurr,4}%";
					proControlPage.LowSpeedPhaseCurr.Text = $"µÕÀŸœ‡µÁ¡˜{proControlPage.rcv_LowSpeedPhaseCurr,4}%";
					proControlPage.MidSpeedPhaseCurr.Text = $"÷–ÀŸœ‡µÁ¡˜{proControlPage.rcv_MidSpeedPhaseCurr,4}%";
					proControlPage.PhaseOffset.Text = "œ‡“∆£∫" + proControlPage.rcv_PhaseOffset;
					if (proControlPage.GirdText11.IsVisible)
					{
						proControlPage.RowText11.Text = "- ±Í∂®";
					}
					else
					{
						proControlPage.RowText11.Text = "+ ±Í∂®";
					}
					if (proControlPage.RowTextFuncParaE.IsVisible)
					{
						proControlPage.RowTextFunc.Text = "- π¶ƒ‹";
					}
					else
					{
						proControlPage.RowTextFunc.Text = "+ π¶ƒ‹";
					}
					if (proControlPage.RowTextProductPara.IsVisible)
					{
						proControlPage.RowTextProduct.Text = "- …˙≤˙";
					}
					else
					{
						proControlPage.RowTextProduct.Text = "+ …˙≤˙";
					}
					if (proControlPage.RowTextOneLinePara.IsVisible)
					{
						proControlPage.RowTextOneLine.Text = "- “«±Ì";
					}
					else
					{
						proControlPage.RowTextOneLine.Text = "+ “«±Ì";
					}
					proControlPage.CurveTime.Text = $"«˙œﬂ≤…—˘{(proControlPage.rcv_CurveTime + 1) * 2,4}ms";
					proControlPage.FreeThrottle.Text = $"µÁ…≤”Õ√≈{proControlPage.rcv_FreeThrottle,4}";
					proControlPage.ZeroBattCoeff.Text = "0µÁ¡øœµ ˝:" + proControlPage.rcv_ZeroBattCoeff;
					proControlPage.FullBattCoeff.Text = "¬˙µÁ¡øœµ ˝:" + proControlPage.rcv_FullBattCoeff;
					if (proControlPage.NSpeedRatioPara.IsVisible)
					{
						proControlPage.NRowText4.Text = "- ƒ‹¡øªÿ¿°";
					}
					else
					{
						proControlPage.NRowText4.Text = "+ ƒ‹¡øªÿ¿°";
					}
					if (proControlPage.FOCProtect.IsVisible)
					{
						proControlPage.RowText7.Text = "- ±£ª§";
					}
					else
					{
						proControlPage.RowText7.Text = "+ ±£ª§";
					}
					proControlPage.MaxLineCurr.Text = $"◊Ó¥ÛœﬂµÁ¡˜{proControlPage.rcv_MaxLineCurr}A";
					proControlPage.MaxPhaseCurr.Text = $"◊Ó¥Ûœ‡µÁ¡˜{proControlPage.rcv_MaxPhaseCurr}A";
					proControlPage.CustomMaxLine.Text = $"BoostœﬂµÁ¡˜{proControlPage.rcv_CustomMaxLineCurr}A";
					proControlPage.CustomMaxPhase.Text = $"Boostœ‡µÁ¡˜{proControlPage.rcv_CustomMaxPhaseCurr}A";
					proControlPage.StopBackCurr.Text = $"…≤≥µªÿ¿°µÁ¡˜{proControlPage.rcv_StopBackCurr}A";
					proControlPage.MaxBackCurr.Text = $"◊Ó¥Ûªÿ¿°µÁ¡˜{proControlPage.rcv_MaxBackCurr}A";
					proControlPage.BattRatedCap1.Text = $"µÁ≥ÿ»›¡ø£∫{proControlPage.rcv_BattRatedCap}AH";
					proControlPage.Max_Acc.Text = "º”ÀŸ¡È√Ù∂»£∫" + proControlPage.rcv_Max_Acc;
					proControlPage.Max_Dec.Text = "ºıÀŸ¡È√Ù∂»£∫" + proControlPage.rcv_Max_Dec;
					proControlPage.AccCoeff.Text = $"æ≠º√º”ÀŸœµ ˝£∫{proControlPage.rcv_AccCoeff}";
					proControlPage.SpeedPulse.Text = $"ÀŸ∂»¬ˆ≥Â:{proControlPage.rcv_SpeedPulse}";
					if (proControlPage.rcv_PolePairs >= 16)
					{
						proControlPage.SpeedAnalog.Text = $"ƒ£ƒ‚ÀŸ∂»±Ìœµ ˝£∫{proControlPage.rcv_SpeedAnalog * 4 / proControlPage.rcv_PolePairs}RPM";
					}
					else
					{
						proControlPage.SpeedAnalog.Text = $"ƒ£ƒ‚ÀŸ∂»±Ìœµ ˝£∫{proControlPage.rcv_SpeedAnalog}RPM";
					}
					proControlPage.ThrottleLow.Text = $"”Õ√≈µÕ„–÷µ{proControlPage.rcv_ThrottleLow}V";
					proControlPage.ThrottleHigh.Text = $"”Õ√≈∏ﬂ„–÷µ{proControlPage.rcv_ThrottleHigh}V";
					proControlPage.CustomCode.Text = "øÕªß¥˙¬Î:" + proControlPage.rcv_CustomCode0 + proControlPage.rcv_CustomCode1;
					proControlPage.ResetName.Text = "ª÷∏¥";
					if (((proControlPage.rcv_GPara0 >> 12) & 3) == 2)
					{
						proControlPage.SaveName.Text = "±£¥Ê";
					}
					else
					{
						proControlPage.SaveName.Text = "ø⁄¡Ó";
					}
				}
				else
				{
					proControlPage.RowText0.Text = "ModelType";
					if (proControlPage.DateTimeGrid.IsVisible)
					{
						proControlPage.RowDateTime.Text = "- DateTime";
					}
					else
					{
						proControlPage.RowDateTime.Text = "+ DateTime";
					}
					if (proControlPage.Motopara.IsVisible)
					{
						proControlPage.RowText2.Text = "- Parameters";
					}
					else
					{
						proControlPage.RowText2.Text = "+ Parameters";
					}
					if (proControlPage.SpeedRatioPara.IsVisible)
					{
						proControlPage.RowText4.Text = "- Ratios in Speed";
					}
					else
					{
						proControlPage.RowText4.Text = "+ Ratios in Speed";
					}
					if (proControlPage.RowText5Para.IsVisible)
					{
						proControlPage.RowText5.Text = "- Ratios in Gear";
					}
					else
					{
						proControlPage.RowText5.Text = "+ Ratios in Gear";
					}
					if (proControlPage.RowText8Para.IsVisible)
					{
						proControlPage.RowText8.Text = "- PID Paras";
					}
					else
					{
						proControlPage.RowText8.Text = "+ PID Paras";
					}
					proControlPage.ModelTypeName.Text = "ModelType";
					proControlPage.ModelFactoryName.Text = "FarDriver";
					proControlPage.ModelPowerName.Text = "Voltage/Power";
					proControlPage.LowSpeedLineCurr.Text = $"LowSpeedLineRatio:{proControlPage.rcv_LowSpeedLineCurr,4}%";
					proControlPage.MidSpeedLineCurr.Text = $"MidSpeedLineRatio:{proControlPage.rcv_MidSpeedLineCurr,4}%";
					proControlPage.LowSpeedPhaseCurr.Text = $"LowSpeedPhaseRatio:{proControlPage.rcv_LowSpeedPhaseCurr,4}%";
					proControlPage.MidSpeedPhaseCurr.Text = $"MidSpeedPhaseRatio:{proControlPage.rcv_MidSpeedPhaseCurr,4}%";
					proControlPage.PhaseOffset.Text = "PhaseOffset:" + proControlPage.rcv_PhaseOffset;
					if (proControlPage.GirdText11.IsVisible)
					{
						proControlPage.RowText11.Text = "- FixedParas";
					}
					else
					{
						proControlPage.RowText11.Text = "+ FixedParas";
					}
					if (proControlPage.RowTextFuncPara.IsVisible)
					{
						proControlPage.RowTextFunc.Text = "- Functions";
					}
					else
					{
						proControlPage.RowTextFunc.Text = "+ Functions";
					}
					if (proControlPage.RowTextProductPara.IsVisible)
					{
						proControlPage.RowTextProduct.Text = "- Product";
					}
					else
					{
						proControlPage.RowTextProduct.Text = "+ Product";
					}
					if (proControlPage.RowTextOneLinePara.IsVisible)
					{
						proControlPage.RowTextOneLine.Text = "- Display";
					}
					else
					{
						proControlPage.RowTextOneLine.Text = "+ Display";
					}
					proControlPage.CurveTime.Text = $"CurveTime{(proControlPage.rcv_CurveTime + 1) * 2,4}ms";
					proControlPage.FreeThrottle.Text = $"FreeThrottle{proControlPage.rcv_FreeThrottle,4}";
					proControlPage.ZeroBattCoeff.Text = "0 BattCoeff:" + proControlPage.rcv_ZeroBattCoeff;
					proControlPage.FullBattCoeff.Text = "Full BattCoeff:" + proControlPage.rcv_FullBattCoeff;
					if (proControlPage.NSpeedRatioPara.IsVisible)
					{
						proControlPage.NRowText4.Text = "- Energy Regenerate";
					}
					else
					{
						proControlPage.NRowText4.Text = "+ Energy Regenerate";
					}
					if (proControlPage.FOCProtect.IsVisible)
					{
						proControlPage.RowText7.Text = "- Protect";
					}
					else
					{
						proControlPage.RowText7.Text = "+ Protect";
					}
					proControlPage.MaxLineCurr.Text = $"MaxLineCurr:{proControlPage.rcv_MaxLineCurr}A";
					proControlPage.MaxPhaseCurr.Text = $"MaxPhaseCurr:{proControlPage.rcv_MaxPhaseCurr}A";
					proControlPage.CustomMaxLine.Text = $"BoostLineCurr:{proControlPage.rcv_CustomMaxLineCurr}A";
					proControlPage.CustomMaxPhase.Text = $"BoostPhaseCurr:{proControlPage.rcv_CustomMaxPhaseCurr}A";
					proControlPage.StopBackCurr.Text = $"StopBackCurr:{proControlPage.rcv_StopBackCurr}A";
					proControlPage.MaxBackCurr.Text = $"MaxBackCurr:{proControlPage.rcv_MaxBackCurr}A";
					proControlPage.BattRatedCap1.Text = $"Batt RatedCapacity:{proControlPage.rcv_BattRatedCap}AH";
					proControlPage.Max_Acc.Text = "Throttle Acc Step:" + proControlPage.rcv_Max_Acc;
					proControlPage.Max_Dec.Text = "Throttle Dec Step:" + proControlPage.rcv_Max_Dec;
					proControlPage.AccCoeff.Text = $"ECOAccCoeff£∫{proControlPage.rcv_AccCoeff}";
					proControlPage.SpeedPulse.Text = $"Speed Pulses:{proControlPage.rcv_SpeedPulse}";
					if (proControlPage.rcv_PolePairs >= 16)
					{
						proControlPage.SpeedAnalog.Text = $"AnalogSpeedCoeff:{proControlPage.rcv_SpeedAnalog * 4 / proControlPage.rcv_PolePairs}RPM";
					}
					else
					{
						proControlPage.SpeedAnalog.Text = $"AnalogSpeedCoeff:{proControlPage.rcv_SpeedAnalog}RPM";
					}
					proControlPage.ThrottleLow.Text = $"Throttle Low:{proControlPage.rcv_ThrottleLow}V";
					proControlPage.ThrottleHigh.Text = $"Throttle High:{proControlPage.rcv_ThrottleHigh}V";
					proControlPage.CustomCode.Text = "CostumCode:" + proControlPage.rcv_CustomCode0 + proControlPage.rcv_CustomCode1;
					proControlPage.ResetName.Text = "Restore";
					if (((proControlPage.rcv_GPara0 >> 12) & 3) == 2)
					{
						proControlPage.SaveName.Text = "Save";
					}
					else
					{
						proControlPage.SaveName.Text = "PWP";
					}
				}
				if (App.CN)
				{
					proControlPage.ModelCurrName.Text = "œﬂµÁ¡˜/œ‡µÁ¡˜";
					proControlPage.ModelName.Text = "”¿¥≈Õ¨≤Ωøÿ÷∆∆˜";
				}
				else
				{
					proControlPage.ModelCurrName.Text = "LineCurr/PhaseCurr";
					proControlPage.ModelName.Text = "Motor FOC Controller";
				}
				proControlPage.ModelPower.Text = proControlPage.rcv_RatedVoltage + "V" + proControlPage.rcv_RatedPower + "W";
				proControlPage.ModelCurr.Text = proControlPage.rcv_MaxLineCurr + "A/" + proControlPage.rcv_MaxPhaseCurr + "A";
				if (App.CN)
				{
					if (proControlPage.rcv_MOE == 0)
					{
						proControlPage.MOE.Text = "MOE:0-ø™∆Ù";
					}
					else
					{
						proControlPage.MOE.Text = "MOE:1-πÿ±’";
					}
					if ((proControlPage.rcv_TaRlB9D0SP & 0x80) == 128)
					{
						proControlPage.ThrottleLost.Text = "”Õ√≈∂™ ß∏ÊæØ:1-”––ß";
					}
					else
					{
						proControlPage.ThrottleLost.Text = "”Õ√≈∂™ ß∏ÊæØ:0-Œﬁ–ß";
					}
					proControlPage.Temp70.Text = $"Œ¬∂»70: {(proControlPage.rcv_TaRlB9D0SP >> 4) & 3}";
					proControlPage.FastRE.Text = $"øÏÀŸ∫ÛÕÀ: {(proControlPage.rconfig_word1 >> 4) & 1}";
					if ((proControlPage.rconfig_word1 & 8) == 8)
					{
						proControlPage.ZeroSwitch.Text = "0ÀŸ«–ªª: 1-”––ß";
					}
					else
					{
						proControlPage.ZeroSwitch.Text = "0ÀŸ«–ªª: 0-Œﬁ–ß";
					}
					if ((proControlPage.rconfig_word1 & 4) == 4)
					{
						proControlPage.SpecialWeak.Text = "…Ó∂»»ı¥≈: 1-Ãÿ ‚";
					}
					else
					{
						proControlPage.SpecialWeak.Text = "…Ó∂»»ı¥≈: 0-’˝≥£";
					}
				}
				else
				{
					if (proControlPage.rcv_MOE == 0)
					{
						proControlPage.MOE.Text = "MOE:0-Enable";
					}
					else
					{
						proControlPage.MOE.Text = "MOE:1-Disable";
					}
					if ((proControlPage.rcv_TaRlB9D0SP & 0x80) == 128)
					{
						proControlPage.ThrottleLost.Text = "ThrottleLost:1-Valid";
					}
					else
					{
						proControlPage.ThrottleLost.Text = "ThrottleLost:0-Inval";
					}
					proControlPage.Temp70.Text = $"Temp 70: {(proControlPage.rcv_TaRlB9D0SP >> 4) & 3}";
					proControlPage.FastRE.Text = $"Fast RE: {(proControlPage.rconfig_word1 >> 4) & 1}";
					if ((proControlPage.rconfig_word1 & 8) == 8)
					{
						proControlPage.ZeroSwitch.Text = "0SpeedSwitch: 1-Valid";
					}
					else
					{
						proControlPage.ZeroSwitch.Text = "0SpeedSwitch: 0-Invalid";
					}
					if ((proControlPage.rconfig_word1 & 4) == 4)
					{
						proControlPage.SpecialWeak.Text = "DeepWeak: 1-Special";
					}
					else
					{
						proControlPage.SpecialWeak.Text = "DeepWeak: 0-Normal";
					}
				}
				switch ((proControlPage.cfg26l >> 6) & 3)
				{
				case 0:
					proControlPage.RxdSel.Text = "RXD:0-AF";
					break;
				case 1:
					proControlPage.RxdSel.Text = "RXD:1-OD";
					break;
				default:
					proControlPage.RxdSel.Text = "RXD:2-PP";
					break;
				}
				int num2 = (proControlPage.rcv_MorseCode >> 6) & 1;
				int num3 = (proControlPage.rcv_MorseCode >> 5) & 1;
				int num4 = (proControlPage.rcv_MorseCode >> 4) & 1;
				int num5 = (proControlPage.rcv_MorseCode >> 3) & 1;
				int num6 = (proControlPage.rcv_MorseCode >> 2) & 1;
				int num7 = (proControlPage.rcv_MorseCode >> 1) & 1;
				int num8 = proControlPage.rcv_MorseCode & 1;
				string text = num3.ToString() + num4 + num5 + num6 + num7 + num8;
				if (num2 != 0)
				{
					text = num2 + text;
				}
				if (App.CN)
				{
					proControlPage.MorseCodeName.Text = "ƒ¶Àπ√‹¬Î" + text;
					switch (proControlPage.cfg190l)
					{
					case 0:
						proControlPage.CurrLimitWay.Text = " 0-µÁ—π2V";
						break;
					case 1:
						proControlPage.CurrLimitWay.Text = " 1-µÁ—π4V";
						break;
					case 2:
						proControlPage.CurrLimitWay.Text = " 2-µÁ—π8V";
						break;
					case 3:
						proControlPage.CurrLimitWay.Text = " 3-µÁ—π12V";
						break;
					case 4:
						proControlPage.CurrLimitWay.Text = " 4-µÁ—π16V";
						break;
					case 5:
						proControlPage.CurrLimitWay.Text = " 5-πÍÀŸµÁ¡ø5%";
						break;
					case 6:
						proControlPage.CurrLimitWay.Text = " 6-πÍÀŸµÁ¡ø6%";
						break;
					case 7:
						proControlPage.CurrLimitWay.Text = " 7-πÍÀŸµÁ¡ø7%";
						break;
					case 8:
						proControlPage.CurrLimitWay.Text = " 8-πÍÀŸµÁ¡ø8%";
						break;
					case 9:
						proControlPage.CurrLimitWay.Text = " 9-πÍÀŸµÁ¡ø9%";
						break;
					case 10:
						proControlPage.CurrLimitWay.Text = "10-πÍÀŸµÁ¡ø10%";
						break;
					case 11:
						proControlPage.CurrLimitWay.Text = "11-SOP÷µ";
						break;
					default:
						proControlPage.CurrLimitWay.Text = "12-∆‰À˚";
						break;
					}
					proControlPage.CurrLimitWay.Text = "«∑—π∑Ω Ω£∫" + proControlPage.CurrLimitWay.Text;
					switch (proControlPage.rcv_GPara0 & 0x1F)
					{
					case 0:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰: 0-3√Î";
						break;
					case 1:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰: 1-4√Î";
						break;
					case 2:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰: 2-5√Î";
						break;
					case 3:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰: 3-6√Î";
						break;
					case 4:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰: 4-8√Î";
						break;
					case 5:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰: 5-10√Î";
						break;
					case 6:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰: 6-12√Î";
						break;
					case 7:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰: 7-16√Î";
						break;
					case 8:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰: 8-20√Î";
						break;
					case 9:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰: 9-24√Î";
						break;
					case 10:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰:10-30√Î";
						break;
					case 11:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰:11-40√Î";
						break;
					case 12:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰:12-50√Î";
						break;
					case 13:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰:13-60√Î";
						break;
					case 14:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰:14-90√Î";
						break;
					case 15:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰:15-120√Î";
						break;
					case 16:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰:16-150√Î";
						break;
					case 17:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰:17-180√Î";
						break;
					case 18:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰:18-240√Î";
						break;
					case 19:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰:19-300√Î";
						break;
					default:
						proControlPage.ReleasePTime.Text = "ªÿPµ≤ ±º‰:20-Œﬁœﬁ";
						break;
					}
					proControlPage.BoostPin.Text = "Boost Pin: " + proControlPage.PINNameCN[proControlPage.invpintable[(proControlPage.rcv_BstXhBcP >> 12) & 0xF]];
					proControlPage.XHPin.Text = "—≤∫Ω Pin: " + proControlPage.PINNameCN[proControlPage.invpintable[(proControlPage.rcv_BstXhBcP >> 8) & 0xF]];
					proControlPage.BCPin.Text = "±ﬂ≥≈ Pin: " + proControlPage.PINNameCN[proControlPage.invpintable[(proControlPage.rcv_BstXhBcP >> 4) & 0xF]];
					proControlPage.PPin.Text = "Pµµ Pin: " + proControlPage.PINNameCN[proControlPage.invpintable[proControlPage.rcv_BstXhBcP & 0xF]];
					proControlPage.FWPin.Text = "«∞Ω¯ Pin: " + proControlPage.PINNameCN[proControlPage.invpintable[(proControlPage.rcv_FwReSdhSdl >> 12) & 0xF]];
					proControlPage.REPin.Text = "∫ÛÕÀ Pin: " + proControlPage.PINNameCN[proControlPage.invpintable[(proControlPage.rcv_FwReSdhSdl >> 8) & 0xF]];
					proControlPage.SDHPin.Text = "∏ﬂÀŸ Pin: " + proControlPage.PINNameCN[proControlPage.invpintable[(proControlPage.rcv_FwReSdhSdl >> 4) & 0xF]];
					proControlPage.SDLPin.Text = "µÕÀŸ Pin: " + proControlPage.PINNameCN[proControlPage.invpintable[proControlPage.rcv_FwReSdhSdl & 0xF]];
					proControlPage.SpeedLimitPin.Text = "œﬁÀŸ Pin: " + proControlPage.PINNameCN[proControlPage.invpintable[proControlPage.rcv_SpdLmt_sel & 0xF]];
					proControlPage.OneKeyPairPin.Text = "“ªº¸–ﬁ∏¥ Pin: " + proControlPage.PINNameCN[proControlPage.invpintable[proControlPage.rcv_OneKey_sel & 0xF]];
					proControlPage.CHGPin.Text = "≥‰µÁ Pin: " + proControlPage.PINNameCN[proControlPage.invpintable[(proControlPage.rcv_ChgFdSeatVol >> 12) & 0xF]];
					proControlPage.FDPin.Text = "∑¿µ¡ Pin: " + proControlPage.PINNameCN[proControlPage.invpintable[(proControlPage.rcv_ChgFdSeatVol >> 8) & 0xF]];
					proControlPage.SEATPin.Text = "◊¯Õ∞ Pin: " + proControlPage.PINNameCN[proControlPage.invpintable[(proControlPage.rcv_ChgFdSeatVol >> 4) & 0xF]];
					proControlPage.SwitchVolPin.Text = "µÁ—π«–ªª Pin: " + proControlPage.PINNameCN[proControlPage.invpintable[proControlPage.rcv_ChgFdSeatVol & 0xF]];
					switch (proControlPage.rcv_TaRlB9D0SP & 0xF)
					{
					case 0:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫ 0-Ωˆ∏ﬂÀŸ";
						break;
					case 1:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫ 1-º”ºıµµ";
						break;
					case 2:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫ 2-µ„∂Ø∏ﬂµÕÀŸ";
						break;
					case 3:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫ 3-µ„∂ØµÕ÷–ÀŸ";
						break;
					case 4:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫ 4-µ„∂Ø»˝ÀŸµÕ";
						break;
					case 5:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫ 5-µ„∂Ø»˝ÀŸ÷–";
						break;
					case 6:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫ 6-µ„∂Ø»˝ÀŸ∏ﬂ";
						break;
					case 7:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫ 7-µ„∂ØÀƒÀŸµÕ";
						break;
					case 8:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫ 8-µ„∂ØÀƒÀŸ2";
						break;
					case 9:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫ 9-µ„∂ØÀƒÀŸ3";
						break;
					case 10:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫10-µ„∂ØÀƒÀŸ∏ﬂ";
						break;
					case 11:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫11-≤¶∂Ø»˝ÀŸ";
						break;
					case 12:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫12-¥Æø⁄µ≤Œª";
						break;
					case 13:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫13-CANµ≤Œª";
						break;
					case 14:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫14-≤¶∂Ø»˝ÀŸµÕ";
						break;
					default:
						proControlPage.SPModeConfig.Text = $"∏ﬂµÕÀŸ£∫15-≤¶∂Ø»˝ÀŸ∏ﬂ";
						break;
					}
					if ((proControlPage.rcv_TaRlB9D0SP & 0x40) == 0)
					{
						proControlPage.LongBack.Text = "≥§∞¥∫ÛÕÀ£∫0-Œﬁ–ß";
					}
					else
					{
						proControlPage.LongBack.Text = "≥§∞¥∫ÛÕÀ£∫1-”––ß";
					}
					switch (proControlPage.rcv_BMQHALL)
					{
					case 0:
						proControlPage.PositionDetect.Text = $"Œª÷√¥´∏–∆˜£∫ 0-120°„ªÙ∂˚";
						break;
					case 1:
						proControlPage.PositionDetect.Text = $"Œª÷√¥´∏–∆˜£∫ 1-≥£πÊ±‡¬Î∆˜";
						break;
					case 2:
						proControlPage.PositionDetect.Text = $"Œª÷√¥´∏–∆˜£∫ 2-±‡¬Î∆˜4096";
						break;
					case 3:
						proControlPage.PositionDetect.Text = $"Œª÷√¥´∏–∆˜£∫ 3-±‡¬Î∆˜8192";
						break;
					case 13:
						proControlPage.PositionDetect.Text = $"Œª÷√¥´∏–∆˜£∫13-æ¯∂‘÷µ±‡¬Î∆˜L";
						break;
					case 14:
						proControlPage.PositionDetect.Text = $"Œª÷√¥´∏–∆˜£∫14-æ¯∂‘÷µ±‡¬Î∆˜H";
						break;
					case 15:
						proControlPage.PositionDetect.Text = $"Œª÷√¥´∏–∆˜£∫15-–˝±‰±‡¬Î∆˜";
						break;
					case 16:
						proControlPage.PositionDetect.Text = $"Œª÷√¥´∏–∆˜£∫16-60°„ªÙ∂˚";
						break;
					default:
						proControlPage.PositionDetect.Text = string.Format("Œª÷√¥´∏–∆˜£∫{0}-±‡¬Î∆˜{0}", proControlPage.rcv_BMQHALL);
						break;
					}
					switch (proControlPage.rcv_NTC_PTC)
					{
					case 0:
						proControlPage.NTC_PTC.Text = "Œ¬∂»¥´∏–∆˜£∫0-NONE";
						break;
					case 1:
						proControlPage.NTC_PTC.Text = "Œ¬∂»¥´∏–∆˜£∫1-PTC";
						break;
					case 2:
						proControlPage.NTC_PTC.Text = "Œ¬∂»¥´∏–∆˜£∫2-NTC230K";
						break;
					case 3:
						proControlPage.NTC_PTC.Text = "Œ¬∂»¥´∏–∆˜£∫3-KTY84-130";
						break;
					case 5:
						proControlPage.NTC_PTC.Text = "Œ¬∂»¥´∏–∆˜£∫5-KTY83-122";
						break;
					case 6:
						proControlPage.NTC_PTC.Text = "Œ¬∂»¥´∏–∆˜£∫6-NTC10K";
						break;
					case 7:
						proControlPage.NTC_PTC.Text = "Œ¬∂»¥´∏–∆˜£∫7-NTC100K";
						break;
					default:
						proControlPage.NTC_PTC.Text = "Œ¬∂»¥´∏–∆˜£∫4-CACU";
						break;
					}
					switch (proControlPage.rcv_OneCommCfg & 3)
					{
					case 0:
						proControlPage.Idle.Text = "≤Ω≥§:0-0.5ms";
						break;
					case 1:
						proControlPage.Idle.Text = "≤Ω≥§:1-0.9ms";
						break;
					case 2:
						proControlPage.Idle.Text = "≤Ω≥§:2-1.5ms";
						break;
					default:
						proControlPage.Idle.Text = "≤Ω≥§:3-1.9ms";
						break;
					}
					if ((proControlPage.cfg11l & 0x80) == 0)
					{
						proControlPage.PhaseExchange.Text = "œ‡œﬂΩªªª£∫≤ªΩªªª";
					}
					else
					{
						proControlPage.PhaseExchange.Text = "œ‡œﬂΩªªª£∫Ωªªª";
					}
					switch ((proControlPage.rcv_GPara0 >> 8) & 0xF)
					{
					case 8:
						proControlPage.CanSel.Text = "CAN≤®Ãÿ¬ :0-250K";
						break;
					case 4:
						proControlPage.CanSel.Text = "CAN≤®Ãÿ¬ :1-500K";
						break;
					default:
						proControlPage.CanSel.Text = "CAN≤®Ãÿ¬ :2-1M";
						break;
					}
					switch (proControlPage.rcv_BatSel)
					{
					case 0:
						proControlPage.BatSel.Text = "µÁ≥ÿ–≈∫≈:0-“ªœﬂÕ®";
						break;
					case 1:
						proControlPage.BatSel.Text = "µÁ≥ÿ–≈∫≈:1-¥Æø⁄";
						break;
					case 2:
						proControlPage.BatSel.Text = "µÁ≥ÿ–≈∫≈:2-CAN";
						break;
					case 3:
						proControlPage.BatSel.Text = "µÁ≥ÿ–≈∫≈:3-ÔÆµÁ≥ÿ";
						break;
					case 4:
						proControlPage.BatSel.Text = "µÁ≥ÿ–≈∫≈:4-«¶À·";
						break;
					default:
						proControlPage.BatSel.Text = "µÁ≥ÿ–≈∫≈:5-Ã˙ÔÆ";
						break;
					}
					proControlPage.Byte89Sel.Text = $"◊÷Ω⁄—°œÓ:{(proControlPage.rcv_OneCommCfg >> 4) & 0xF}";
					switch ((proControlPage.rcv_OneCommCfg >> 2) & 3)
					{
					case 0:
						proControlPage.Stop.Text = "Õ£÷πº‰∏Ù÷‹∆⁄:0-24ms";
						break;
					case 1:
						proControlPage.Stop.Text = "Õ£÷πº‰∏Ù÷‹∆⁄:1-55ms";
						break;
					case 2:
						proControlPage.Stop.Text = "Õ£÷πº‰∏Ù÷‹∆⁄:2-124ms";
						break;
					default:
						proControlPage.Stop.Text = "Õ£÷πº‰∏Ù÷‹∆⁄:3-216ms";
						break;
					}
					switch (proControlPage.rcv_BrakeConfig)
					{
					case 0:
						proControlPage.BrakeConfig.Text = "…≤≥µ:0-∏°ø’––≥µ";
						break;
					case 1:
						proControlPage.BrakeConfig.Text = "…≤≥µ:1-∏°ø’∂œµÁ";
						break;
					case 2:
						proControlPage.BrakeConfig.Text = "…≤≥µ:2-P+∏°ø’––≥µ";
						break;
					case 3:
						proControlPage.BrakeConfig.Text = "…≤≥µ:3-P+∏°ø’∂œµÁ";
						break;
					case 4:
						proControlPage.BrakeConfig.Text = "…≤≥µ:4-P+Œﬁ–ß";
						break;
					case 5:
						proControlPage.BrakeConfig.Text = "…≤≥µ:5-œﬂ–‘…≤≥µ";
						break;
					case 6:
						proControlPage.BrakeConfig.Text = "…≤≥µ:6-P+œﬂ–‘…≤≥µ";
						break;
					default:
						proControlPage.BrakeConfig.Text = "…≤≥µ:7-Œﬁ–ß";
						break;
					}
					if (App.NewVersion)
					{
						if (proControlPage.rcv_PC13Config == 0)
						{
							proControlPage.PC13Config.Text = "PC13:0-’˝≥£œÏ”¶";
						}
						else
						{
							proControlPage.PC13Config.Text = "PC13:1-»¸µ¿œÏ”¶";
						}
					}
					else
					{
						switch (proControlPage.rcv_PC13Config)
						{
						case 0:
							proControlPage.PC13Config.Text = "PC13:0-∏°ø’––≥µ";
							break;
						case 1:
							proControlPage.PC13Config.Text = "PC13:1-∏°ø’∂œµÁ";
							break;
						case 2:
							proControlPage.PC13Config.Text = "PC13:2-∏°ø’—≤∫Ω";
							break;
						case 3:
							proControlPage.PC13Config.Text = "PC13:3-Ω”µÿ—≤∫Ω";
							break;
						default:
							proControlPage.PC13Config.Text = "PC13:4-Œﬁ–ß";
							break;
						}
					}
					switch (proControlPage.rcv_ParkConfig)
					{
					case 0:
						proControlPage.ParkConfig.Text = "◊§∆¬:0-∑¿∫Û¡Ô";
						break;
					case 1:
						proControlPage.ParkConfig.Text = "◊§∆¬:1-ø™πÿ◊§∆¬";
						break;
					case 3:
						proControlPage.ParkConfig.Text = "◊§∆¬:3-ª∫Ωµ◊§∆¬";
						break;
					default:
						proControlPage.ParkConfig.Text = "◊§∆¬:2-Œﬁ–ß";
						break;
					}
					if (proControlPage.rcv_CurrFD == 0)
					{
						proControlPage.CurrFD.Text = "µÁ¡˜∑¿µ¡:0-Œﬁ–ß";
					}
					else
					{
						proControlPage.CurrFD.Text = "µÁ¡˜∑¿µ¡:1-”––ß";
					}
					switch (proControlPage.rcv_PulseFD)
					{
					case 0:
						proControlPage.PulseFD.Text = "∑¿µ¡¬ˆ≥Â ‰»Î:0-Œﬁ–ß";
						break;
					case 1:
						proControlPage.PulseFD.Text = "∑¿µ¡¬ˆ≥Â ‰»Î:1¿‡–Õ";
						break;
					case 2:
						proControlPage.PulseFD.Text = "∑¿µ¡¬ˆ≥Â ‰»Î:2¿‡–Õ";
						break;
					default:
						proControlPage.PulseFD.Text = "∑¿µ¡¬ˆ≥Â ‰»Î:3¿‡–Õ";
						break;
					}
					switch (proControlPage.rcv_FollowConfig)
					{
					case 0:
						proControlPage.FollowConfig.Text = "∏˙ÀÊ:0-”––ß";
						break;
					case 1:
						proControlPage.FollowConfig.Text = "∏˙ÀÊ:1-Œﬁ–ß";
						break;
					case 2:
						proControlPage.FollowConfig.Text = "∏˙ÀÊ:2-µÁ◊”…≤≥µ";
						break;
					default:
						proControlPage.FollowConfig.Text = "∏˙ÀÊ:3-ªÿ”Õ√≈…≤≥µ";
						break;
					}
					proControlPage.QuickDown.Text = $"ªÿ”Õ√≈:{proControlPage.rcv_QuickDown}";
					switch (proControlPage.rcv_ECOConfig)
					{
					case 0:
						proControlPage.ECOConfig.Text = "”Õ√≈œÏ”¶:0-œﬂ–‘";
						break;
					case 1:
						proControlPage.ECOConfig.Text = "”Õ√≈œÏ”¶:1-‘À∂Ø";
						break;
					default:
						proControlPage.ECOConfig.Text = "”Õ√≈œÏ”¶:2-æ≠º√";
						break;
					}
					if (proControlPage.rcv_WeakTime == 7)
					{
						proControlPage.WeakTime.Text = $"»ı¥≈œÏ”¶:{proControlPage.rcv_WeakTime}-None";
					}
					else
					{
						proControlPage.WeakTime.Text = $"»ı¥≈œÏ”¶:{proControlPage.rcv_WeakTime}";
					}
					switch (proControlPage.rcv_WeakA)
					{
					case 0:
						proControlPage.WeakA.Text = "»ı¥≈Ãÿ–‘:0-øÏ";
						break;
					case 1:
						proControlPage.WeakA.Text = "»ı¥≈Ãÿ–‘:1-÷–";
						break;
					default:
						proControlPage.WeakA.Text = "»ı¥≈Ãÿ–‘:2-¬˝";
						break;
					}
					switch (proControlPage.rcv_GearConfig)
					{
					case 0:
						proControlPage.GearConfig.Text = "µµŒª:0-ƒ¨»œø’µµ";
						break;
					case 1:
						proControlPage.GearConfig.Text = "µµŒª:1-ƒ¨»œ«∞Ω¯";
						break;
					case 2:
						proControlPage.GearConfig.Text = "µµŒª:2-Œﬁ–ß";
						break;
					case 3:
						if (App.NewVersion)
						{
							proControlPage.GearConfig.Text = "µµŒª:3-ƒ¨»œ∑¿µ¡";
						}
						else
						{
							proControlPage.GearConfig.Text = "µµŒª:3-ƒ¨»œµ„∂ØµÕ";
						}
						break;
					case 4:
						proControlPage.GearConfig.Text = "µµŒª:4-ƒ¨»œµ„∂Ø∏ﬂ";
						break;
					default:
						proControlPage.GearConfig.Text = "µµŒª:5-ƒ¨»œµ„∂Ø÷–";
						break;
					}
					switch (proControlPage.rcv_SpeedMeterConfig)
					{
					case 0:
						proControlPage.SpeedMeterConfig.Text = "ÀŸ∂»±Ì∑Ω Ω:0-¬ˆ≥Â";
						break;
					case 1:
						proControlPage.SpeedMeterConfig.Text = "ÀŸ∂»±Ì∑Ω Ω:1-ƒ£ƒ‚";
						break;
					default:
						proControlPage.SpeedMeterConfig.Text = "ÀŸ∂»±Ì∑Ω Ω:2-∏Ù¿Î¬ˆ≥Â";
						break;
					}
				}
				else
				{
					proControlPage.MorseCodeName.Text = "MorseCode" + text;
					switch (proControlPage.cfg190l)
					{
					case 0:
						proControlPage.CurrLimitWay.Text = " 0-Vol2V";
						break;
					case 1:
						proControlPage.CurrLimitWay.Text = " 1-Vol4V";
						break;
					case 2:
						proControlPage.CurrLimitWay.Text = " 2-Vol8V";
						break;
					case 3:
						proControlPage.CurrLimitWay.Text = " 3-Vol12V";
						break;
					case 4:
						proControlPage.CurrLimitWay.Text = " 4-Vol16V";
						break;
					case 5:
						proControlPage.CurrLimitWay.Text = " 5-Soc5%";
						break;
					case 6:
						proControlPage.CurrLimitWay.Text = " 6-Soc6%";
						break;
					case 7:
						proControlPage.CurrLimitWay.Text = " 7-Soc7%";
						break;
					case 8:
						proControlPage.CurrLimitWay.Text = " 8-Soc8%";
						break;
					case 9:
						proControlPage.CurrLimitWay.Text = " 9-Soc9%";
						break;
					case 10:
						proControlPage.CurrLimitWay.Text = "10-Soc10%";
						break;
					case 11:
						proControlPage.CurrLimitWay.Text = "11-SOP";
						break;
					default:
						proControlPage.CurrLimitWay.Text = "12-Other";
						break;
					}
					proControlPage.CurrLimitWay.Text = "LowVol Way:" + proControlPage.CurrLimitWay.Text;
					switch (proControlPage.rcv_GPara0 & 0x1F)
					{
					case 0:
						proControlPage.ReleasePTime.Text = "BackP_Time: 0-3s";
						break;
					case 1:
						proControlPage.ReleasePTime.Text = "BackP_Time: 1-4s";
						break;
					case 2:
						proControlPage.ReleasePTime.Text = "BackP_Time: 2-5s";
						break;
					case 3:
						proControlPage.ReleasePTime.Text = "BackP_Time: 3-6s";
						break;
					case 4:
						proControlPage.ReleasePTime.Text = "BackP_Time: 4-8s";
						break;
					case 5:
						proControlPage.ReleasePTime.Text = "BackP_Time: 5-10s";
						break;
					case 6:
						proControlPage.ReleasePTime.Text = "BackP_Time: 6-12s";
						break;
					case 7:
						proControlPage.ReleasePTime.Text = "BackP_Time: 7-16s";
						break;
					case 8:
						proControlPage.ReleasePTime.Text = "BackP_Time: 8-20s";
						break;
					case 9:
						proControlPage.ReleasePTime.Text = "BackP_Time: 9-24s";
						break;
					case 10:
						proControlPage.ReleasePTime.Text = "BackP_Time:10-30s";
						break;
					case 11:
						proControlPage.ReleasePTime.Text = "BackP_Time:11-40s";
						break;
					case 12:
						proControlPage.ReleasePTime.Text = "BackP_Time:12-50s";
						break;
					case 13:
						proControlPage.ReleasePTime.Text = "BackP_Time:13-60s";
						break;
					case 14:
						proControlPage.ReleasePTime.Text = "BackP_Time:14-90s";
						break;
					case 15:
						proControlPage.ReleasePTime.Text = "BackP_Time:15-120s";
						break;
					case 16:
						proControlPage.ReleasePTime.Text = "BackP_Time:16-150s";
						break;
					case 17:
						proControlPage.ReleasePTime.Text = "BackP_Time:17-180s";
						break;
					case 18:
						proControlPage.ReleasePTime.Text = "BackP_Time:18-240s";
						break;
					case 19:
						proControlPage.ReleasePTime.Text = "BackP_Time:19-300s";
						break;
					default:
						proControlPage.ReleasePTime.Text = "BackP_Time:20-xxxs";
						break;
					}
					proControlPage.BoostPin.Text = "Boost Pin: " + proControlPage.PINNameEN[proControlPage.invpintable[(proControlPage.rcv_BstXhBcP >> 12) & 0xF]];
					proControlPage.XHPin.Text = "Cruise Pin: " + proControlPage.PINNameEN[proControlPage.invpintable[(proControlPage.rcv_BstXhBcP >> 8) & 0xF]];
					proControlPage.BCPin.Text = "SideStand Pin: " + proControlPage.PINNameEN[proControlPage.invpintable[(proControlPage.rcv_BstXhBcP >> 4) & 0xF]];
					proControlPage.PPin.Text = "Pause Pin: " + proControlPage.PINNameEN[proControlPage.invpintable[proControlPage.rcv_BstXhBcP & 0xF]];
					proControlPage.FWPin.Text = "Forward Pin: " + proControlPage.PINNameEN[proControlPage.invpintable[(proControlPage.rcv_FwReSdhSdl >> 12) & 0xF]];
					proControlPage.REPin.Text = "Backward Pin: " + proControlPage.PINNameEN[proControlPage.invpintable[(proControlPage.rcv_FwReSdhSdl >> 8) & 0xF]];
					proControlPage.SDHPin.Text = "Highspeed Pin: " + proControlPage.PINNameEN[proControlPage.invpintable[(proControlPage.rcv_FwReSdhSdl >> 4) & 0xF]];
					proControlPage.SDLPin.Text = "LowSpeed Pin: " + proControlPage.PINNameEN[proControlPage.invpintable[proControlPage.rcv_FwReSdhSdl & 0xF]];
					proControlPage.SpeedLimitPin.Text = "SpeedLimit Pin: " + proControlPage.PINNameEN[proControlPage.invpintable[proControlPage.rcv_SpdLmt_sel & 0xF]];
					proControlPage.OneKeyPairPin.Text = "Repair Pin: " + proControlPage.PINNameEN[proControlPage.invpintable[proControlPage.rcv_OneKey_sel & 0xF]];
					proControlPage.CHGPin.Text = "Charge Pin: " + proControlPage.PINNameEN[proControlPage.invpintable[(proControlPage.rcv_ChgFdSeatVol >> 12) & 0xF]];
					proControlPage.FDPin.Text = "Anti-theft Pin: " + proControlPage.PINNameEN[proControlPage.invpintable[(proControlPage.rcv_ChgFdSeatVol >> 8) & 0xF]];
					proControlPage.SEATPin.Text = "Seat Pin: " + proControlPage.PINNameEN[proControlPage.invpintable[(proControlPage.rcv_ChgFdSeatVol >> 4) & 0xF]];
					proControlPage.SwitchVolPin.Text = "Switch Voltage Pin: " + proControlPage.PINNameEN[proControlPage.invpintable[proControlPage.rcv_ChgFdSeatVol & 0xF]];
					switch (proControlPage.rcv_TaRlB9D0SP & 0xF)
					{
					case 0:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫ 0-HighOnly";
						break;
					case 1:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫ 1-AddDec";
						break;
					case 2:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫ 2-ButtonHighLow";
						break;
					case 3:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫ 3-ButtonLowMid";
						break;
					case 4:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫ 4-Button3SpeedLow";
						break;
					case 5:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫ 5-Button3SpeedMid";
						break;
					case 6:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫ 6-Button3SpeedHigh";
						break;
					case 7:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫ 7-Button4SpeedLow";
						break;
					case 8:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫ 8-Button4Speed2";
						break;
					case 9:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫ 9-Button4Speed3";
						break;
					case 10:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫10-Button4SpeedHigh";
						break;
					case 11:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫11-Line3Speed";
						break;
					case 12:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫12-CommGear";
						break;
					case 13:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫13-CANGear";
						break;
					case 14:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫14-Line3SpeedLow";
						break;
					default:
						proControlPage.SPModeConfig.Text = $"HighLowSpeed£∫15-Line3SpeedHigh";
						break;
					}
					if ((proControlPage.rcv_TaRlB9D0SP & 0x40) == 0)
					{
						proControlPage.LongBack.Text = "Puse RE:0-Invalid";
					}
					else
					{
						proControlPage.LongBack.Text = "Push RE:1-Valid";
					}
					switch (proControlPage.rcv_BMQHALL)
					{
					case 0:
						proControlPage.PositionDetect.Text = $"AngleDetect: 0-120°„Hall";
						break;
					case 1:
						proControlPage.PositionDetect.Text = $"AngleDetect: 1-Encoder";
						break;
					case 2:
						proControlPage.PositionDetect.Text = $"AngleDetect: 2-Encoder4096";
						break;
					case 3:
						proControlPage.PositionDetect.Text = $"AngleDetect: 3-Encoder8192";
						break;
					case 13:
						proControlPage.PositionDetect.Text = $"AngleDetect:13-AbsoluteEncoderL";
						break;
					case 14:
						proControlPage.PositionDetect.Text = $"AngleDetect:14-AbsoluteEncoderH";
						break;
					case 15:
						proControlPage.PositionDetect.Text = $"AngleDetect:15-ResolverEncoder";
						break;
					case 16:
						proControlPage.PositionDetect.Text = $"AngleDetect:16-60°„Hall";
						break;
					default:
						proControlPage.PositionDetect.Text = string.Format("AngleDetect:{0}-Encoder{0}", proControlPage.rcv_BMQHALL);
						break;
					}
					switch (proControlPage.rcv_NTC_PTC)
					{
					case 0:
						proControlPage.NTC_PTC.Text = "TempSensor:0-NONE";
						break;
					case 1:
						proControlPage.NTC_PTC.Text = "TempSensor:1-PTC";
						break;
					case 2:
						proControlPage.NTC_PTC.Text = "TempSensor:2-NTC230K";
						break;
					case 3:
						proControlPage.NTC_PTC.Text = "TempSensor:3-KTY84-130";
						break;
					case 5:
						proControlPage.NTC_PTC.Text = "TempSensor:5-KTY83-122";
						break;
					case 6:
						proControlPage.NTC_PTC.Text = "TempSensor:6-NTC10K";
						break;
					case 7:
						proControlPage.NTC_PTC.Text = "TempSensor:2-NTC100K";
						break;
					default:
						proControlPage.NTC_PTC.Text = "TempSensor:4-CACU";
						break;
					}
					switch (proControlPage.rcv_OneCommCfg & 3)
					{
					case 0:
						proControlPage.Idle.Text = "Step:0-0.5ms";
						break;
					case 1:
						proControlPage.Idle.Text = "Step:1-0.9ms";
						break;
					case 2:
						proControlPage.Idle.Text = "Step:2-1.5ms";
						break;
					default:
						proControlPage.Idle.Text = "Step:3-1.9ms";
						break;
					}
					switch ((proControlPage.rcv_GPara0 >> 8) & 0xF)
					{
					case 8:
						proControlPage.CanSel.Text = "CAN Baud:0-250K";
						break;
					case 4:
						proControlPage.CanSel.Text = "CAN Baud:1-500K";
						break;
					default:
						proControlPage.CanSel.Text = "CAN Baud:2-1M";
						break;
					}
					switch ((proControlPage.rcv_OneCommCfg >> 2) & 3)
					{
					case 0:
						proControlPage.Stop.Text = "Stop:0-24ms";
						break;
					case 1:
						proControlPage.Stop.Text = "Stop:1-55ms";
						break;
					case 2:
						proControlPage.Stop.Text = "Stop:2-124ms";
						break;
					default:
						proControlPage.Stop.Text = "Stop:3-216ms";
						break;
					}
					if ((proControlPage.cfg11l & 0x80) == 0)
					{
						proControlPage.PhaseExchange.Text = "PhaseExchange£∫No Exchange";
					}
					else
					{
						proControlPage.PhaseExchange.Text = "PhaseExchange£∫Exchange";
					}
					proControlPage.Byte89Sel.Text = $"ByteOption:{(proControlPage.rcv_OneCommCfg >> 4) & 0xF}";
					switch (proControlPage.rcv_BrakeConfig)
					{
					case 0:
						proControlPage.BrakeConfig.Text = "Brake:0-StopWhenGround";
						break;
					case 1:
						proControlPage.BrakeConfig.Text = "Brake:1-StopWhenFloat";
						break;
					case 2:
						proControlPage.BrakeConfig.Text = "Brake:2-P+StopGnd";
						break;
					case 3:
						proControlPage.BrakeConfig.Text = "Brake:3-P+StopFloat";
						break;
					case 4:
						proControlPage.BrakeConfig.Text = "Brake:4-P+Disabled";
						break;
					case 5:
						proControlPage.BrakeConfig.Text = "Brake:5-LinearBrake";
						break;
					case 6:
						proControlPage.BrakeConfig.Text = "Brake:6-P+LineBrake";
						break;
					default:
						proControlPage.BrakeConfig.Text = "Brake:7-Disabled";
						break;
					}
					switch (proControlPage.rcv_BatSel)
					{
					case 0:
						proControlPage.BatSel.Text = "BattSignal:0-OneLineComm";
						break;
					case 1:
						proControlPage.BatSel.Text = "BattSignal:1-SerialComm";
						break;
					case 2:
						proControlPage.BatSel.Text = "BattSignal:2-CAN";
						break;
					case 3:
						proControlPage.BatSel.Text = "BattSignal:3-Lithium Battery";
						break;
					case 4:
						proControlPage.BatSel.Text = "BattSignal:4-Lead-Acid Battery";
						break;
					default:
						proControlPage.BatSel.Text = "BattSignal:4-LFP Battery";
						break;
					}
					if (App.NewVersion)
					{
						if (proControlPage.rcv_PC13Config == 0)
						{
							proControlPage.PC13Config.Text = "PC13:0-NomalResponse";
						}
						else
						{
							proControlPage.PC13Config.Text = "PC13:1-RaceResponse";
						}
					}
					else
					{
						switch (proControlPage.rcv_PC13Config)
						{
						case 0:
							proControlPage.PC13Config.Text = "PC13:0-StopWhenGround";
							break;
						case 1:
							proControlPage.PC13Config.Text = "PC13:1-StopWhenDisconnect";
							break;
						case 2:
							proControlPage.PC13Config.Text = "PC13:2-CruiseWhenDisconnect";
							break;
						case 3:
							proControlPage.PC13Config.Text = "PC13:3-CruiseWhenToGround";
							break;
						default:
							proControlPage.PC13Config.Text = "PC13:4-Disabled";
							break;
						}
					}
					switch (proControlPage.rcv_ParkConfig)
					{
					case 0:
						proControlPage.ParkConfig.Text = "Park:0-ReversePark";
						break;
					case 1:
						proControlPage.ParkConfig.Text = "Park:1-SwitchPark";
						break;
					case 3:
						proControlPage.ParkConfig.Text = "Park:3-SlowDownPark";
						break;
					default:
						proControlPage.ParkConfig.Text = "Park:2-Disabled";
						break;
					}
					if (proControlPage.rcv_CurrFD == 0)
					{
						proControlPage.CurrFD.Text = "Curr-Anti-theft:0-Invalid";
					}
					else
					{
						proControlPage.CurrFD.Text = "Curr-Anti-theft:1-Valid";
					}
					switch (proControlPage.rcv_PulseFD)
					{
					case 0:
						proControlPage.PulseFD.Text = "Anti-theft Pulse:0-Invalid";
						break;
					case 1:
						proControlPage.PulseFD.Text = "Anti-theft Pulse:1 Type";
						break;
					case 2:
						proControlPage.PulseFD.Text = "Anti-theft Pulse:2 Type";
						break;
					default:
						proControlPage.PulseFD.Text = "Anti-theft Pulse:3 Type";
						break;
					}
					switch (proControlPage.rcv_FollowConfig)
					{
					case 0:
						proControlPage.FollowConfig.Text = "Follow:0-FollowEnabled";
						break;
					case 1:
						proControlPage.FollowConfig.Text = "Follow:1-Disabled";
						break;
					case 2:
						proControlPage.FollowConfig.Text = "Follow:2-EABSWhenBrake";
						break;
					default:
						proControlPage.FollowConfig.Text = "Follow:3-EABSWhenRelease";
						break;
					}
					proControlPage.QuickDown.Text = $"Release Throttle:{proControlPage.rcv_QuickDown}";
					switch (proControlPage.rcv_ECOConfig)
					{
					case 0:
						proControlPage.ECOConfig.Text = "ThrottleResponse:0-Line";
						break;
					case 1:
						proControlPage.ECOConfig.Text = "ThrottleResponse:1-Sport";
						break;
					default:
						proControlPage.ECOConfig.Text = "ThrottleResponse:2-ECO";
						break;
					}
					if (proControlPage.rcv_WeakTime == 7)
					{
						proControlPage.WeakTime.Text = $"WeakResponse:{proControlPage.rcv_WeakTime}-None";
					}
					else
					{
						proControlPage.WeakTime.Text = $"WeakResponse:{proControlPage.rcv_WeakTime}";
					}
					switch (proControlPage.rcv_WeakA)
					{
					case 0:
						proControlPage.WeakA.Text = "Weak Character:0-Fast";
						break;
					case 1:
						proControlPage.WeakA.Text = "Weak Character:1-Middle";
						break;
					default:
						proControlPage.WeakA.Text = "Weak Character:2-Slowly";
						break;
					}
					switch (proControlPage.rcv_GearConfig)
					{
					case 0:
						proControlPage.GearConfig.Text = "Gear:0-Default N";
						break;
					case 1:
						proControlPage.GearConfig.Text = "Gear:1-Default D";
						break;
					case 2:
						proControlPage.GearConfig.Text = "Gear:2-Disabled";
						break;
					case 3:
						if (App.NewVersion)
						{
							proControlPage.GearConfig.Text = "Gear:3-Default Anti-theft";
						}
						else
						{
							proControlPage.GearConfig.Text = "Gear:3-Default Button Low";
						}
						break;
					case 4:
						proControlPage.GearConfig.Text = "Gear:4-Default Button High";
						break;
					default:
						proControlPage.GearConfig.Text = "Gear:5-Default Button Middle";
						break;
					}
					switch (proControlPage.rcv_SpeedMeterConfig)
					{
					case 0:
						proControlPage.SpeedMeterConfig.Text = "SpeedoMeter:0-Pulse";
						break;
					case 1:
						proControlPage.SpeedMeterConfig.Text = "SpeedoMeter:1-Analog";
						break;
					default:
						proControlPage.SpeedMeterConfig.Text = "SpeedoMeter:2-IsolatedPulse";
						break;
					}
				}
				return true;
			});
			MessagingCenter.Subscribe(this, "ReadParaMeter", delegate(ConnectPage sender, byte[] arg)
			{
				if (arg[0] == 170 && arg.Length == 16)
				{
					if ((arg[1] & 0xC0) == 128)
					{
						int num = arg[1] & 0x7F;
						if (num < 55)
						{
							int num2 = proControlPage.FlashReadAddr[num];
							rcvframe++;
							if (App.CN)
							{
								if (proControlPage.rcv_ENMaxPhaseCurr == 401)
								{
									proControlPage.RcvFrames.Text = rcvframe.ToString("µ¡∞Êøÿ÷∆∆˜");
								}
								else if (proControlPage.rcv_kzqVersion0 > '6')
								{
									proControlPage.RcvFrames.Text = rcvframe.ToString("Ω” ’0");
								}
								else
								{
									proControlPage.RcvFrames.Text = rcvframe.ToString(" ˝æ›Ω” ’≤ªÕÍ’˚");
								}
							}
							else if (proControlPage.rcv_ENMaxPhaseCurr == 401)
							{
								proControlPage.RcvFrames.Text = rcvframe.ToString("Piracy Controller");
							}
							else if (proControlPage.rcv_kzqVersion0 > '6')
							{
								proControlPage.RcvFrames.Text = rcvframe.ToString("RcvFrames0");
							}
							else
							{
								proControlPage.RcvFrames.Text = rcvframe.ToString("Receiving...");
							}
							switch (num2)
							{
							case 161:
							case 162:
							case 163:
							case 164:
							case 165:
							case 167:
							case 168:
							case 169:
							case 170:
							case 171:
							case 172:
								_ = 172;
								break;
							case 209:
							case 210:
							case 211:
							case 212:
							case 213:
							case 215:
							case 216:
							case 217:
							case 218:
							case 219:
							case 220:
								_ = 220;
								break;
							case 226:
								proControlPage.bms = false;
								proControlPage.rcv_Bmq_Hall = (arg[3] >> 5) & 1;
								break;
							case 232:
							{
								proControlPage.rcv_DataVoltage2 = (short)(arg[5] * 256 + arg[4]);
								float num4 = (float)proControlPage.rcv_DataVoltage2 / 100f;
								if (App.CN)
								{
									proControlPage.Voltage2.Text = "…≤≥µµÁ—π£∫" + num4 + "V";
								}
								else
								{
									proControlPage.Voltage2.Text = "Brake Voltage£∫" + num4 + "V";
								}
								break;
							}
							case 0:
								proControlPage.rcv_VolCoeff = arg[3] * 256 + arg[2];
								proControlPage.rcv_PhaseACoeff = arg[7] * 256 + arg[6];
								proControlPage.rcv_LineCoeff = arg[9] * 256 + arg[8];
								proControlPage.rcv_PhaseCCoeff = arg[11] * 256 + arg[10];
								proControlPage.rcv_SaveNum = arg[13] * 256 + arg[12];
								if (App.CN)
								{
									proControlPage.VolCoeff.Text = "µÁ—πœµ ˝£∫" + proControlPage.rcv_VolCoeff;
									proControlPage.LineCoeff.Text = "œﬂµÁ¡˜œµ ˝£∫" + proControlPage.rcv_LineCoeff;
									proControlPage.PhaseACoeff.Text = "œ‡µÁ¡˜œµ ˝A:" + proControlPage.rcv_PhaseACoeff;
									proControlPage.PhaseCCoeff.Text = "œ‡µÁ¡˜œµ ˝B:" + proControlPage.rcv_PhaseCCoeff;
									proControlPage.SaveNum.Text = "±Í∂®¥Œ ˝£∫" + proControlPage.rcv_SaveNum;
								}
								else
								{
									proControlPage.VolCoeff.Text = "VoltageCoeff:" + proControlPage.rcv_VolCoeff;
									proControlPage.LineCoeff.Text = "LineCurrCoeff:" + proControlPage.rcv_LineCoeff;
									proControlPage.PhaseACoeff.Text = "PhaseCoeffA:" + proControlPage.rcv_PhaseACoeff;
									proControlPage.PhaseCCoeff.Text = "PhaseCoeffB:" + proControlPage.rcv_PhaseCCoeff;
									proControlPage.SaveNum.Text = "Save Times:" + proControlPage.rcv_SaveNum;
								}
								break;
							case 6:
							{
								proControlPage.rcv_PulseFD = (arg[2] >> 1) & 3;
								proControlPage.rcv_Protocol485 = (arg[2] >> 4) & 0xF;
								proControlPage.rcv_Arg2 = arg[2];
								proControlPage.rcv_MorseCode = arg[3];
								proControlPage.rcv_SpeedKI = arg[4];
								proControlPage.rcv_SpeedKP = arg[5];
								proControlPage.rcv_ThrottleLow = (float)(int)arg[6] / 20f;
								proControlPage.rcv_ThrottleHigh = (float)(int)arg[7] / 20f;
								int num3 = arg[9] * 256 + arg[8];
								proControlPage.FAIF.Text = num3.ToString("FAIF:0");
								proControlPage.rcv_CurveTime = arg[11] * 256 + arg[10];
								proControlPage.rcv_Direction = (arg[13] & 0x80) >> 7;
								if (App.CN)
								{
									proControlPage.Direction.Text = "µÁª˙∑ΩœÚ£∫" + proControlPage.rcv_Direction;
								}
								else
								{
									proControlPage.Direction.Text = "Motor Direction:" + proControlPage.rcv_Direction;
								}
								proControlPage.cfg11l = arg[12];
								proControlPage.rcv_NTC_PTC = (arg[12] >> 4) & 7;
								proControlPage.cfg11h = arg[13];
								proControlPage.rcv_BrakeConfig = proControlPage.cfg11l & 0xF;
								proControlPage.rcv_PC13Config = (proControlPage.cfg11h >> 3) & 1;
								proControlPage.rcv_ParkConfig = (proControlPage.cfg11h >> 5) & 3;
								proControlPage.rcv_CurrFD = (proControlPage.cfg11h >> 4) & 1;
								break;
							}
							case 12:
								proControlPage.rcv_PhaseOffset = (arg[3] * 256 + arg[2]) / 10;
								proControlPage.rcv_ZeroBattCoeff = arg[5] * 256 + arg[4];
								proControlPage.rcv_FullBattCoeff = arg[7] * 256 + arg[6];
								proControlPage.rcv_StartKI = arg[8];
								proControlPage.rcv_MidKI = arg[9];
								proControlPage.rcv_MaxKI = arg[10];
								proControlPage.rcv_StartKP = arg[11];
								proControlPage.rcv_MidKP = arg[12];
								proControlPage.rcv_MaxKP = arg[13];
								break;
							case 18:
								proControlPage.rcv_LD = arg[3] * 256 + arg[2];
								proControlPage.LD.Text = proControlPage.rcv_LD.ToString("LD:0");
								proControlPage.rcv_AlarmDelay = arg[5] * 256 + arg[4];
								proControlPage.rcv_PolePairs = arg[6];
								proControlPage.rcv_MaxSpeed = arg[9] * 256 + arg[8];
								proControlPage.rcv_RatedVoltage = (arg[13] * 256 + arg[12]) / 10;
								proControlPage.rcv_RatedPower = arg[11] * 256 + arg[10];
								proControlPage.rcv_RatedPower100 = proControlPage.rcv_RatedPower / 100;
								if (App.CN)
								{
									proControlPage.PolePairsDisplay.Text = $"º´∂‘ ˝:{proControlPage.rcv_PolePairs}";
									proControlPage.RatedVoltage.Text = "∂Ó∂®µÁ—π£∫" + proControlPage.rcv_RatedVoltage + "V";
									proControlPage.RatedPower.Text = "∂Ó∂®π¶¬ £∫" + proControlPage.rcv_RatedPower + "W";
								}
								else
								{
									proControlPage.PolePairsDisplay.Text = $"PolePairs:{proControlPage.rcv_PolePairs}";
									proControlPage.RatedVoltage.Text = "RatedVoltage:" + proControlPage.rcv_RatedVoltage + "V";
									proControlPage.RatedPower.Text = "RatedPower:" + proControlPage.rcv_RatedPower + "W";
								}
								break;
							case 24:
								proControlPage.rcv_LQ = arg[9] * 256 + arg[8];
								proControlPage.LQ.Text = proControlPage.rcv_LQ.ToString("LQ:0");
								proControlPage.rcv_RatedSpeed = arg[3] * 256 + arg[2];
								proControlPage.rcv_MaxLineCurr = (arg[5] * 256 + arg[4]) / 4;
								proControlPage.rcv_FollowConfig = arg[6] & 3;
								proControlPage.rcv_ECOConfig = (arg[6] >> 2) & 3;
								proControlPage.rcv_WeakA = (arg[6] >> 4) & 3;
								proControlPage.cfg26l = arg[6];
								proControlPage.cfg26h = arg[7];
								proControlPage.rcv_LineZero = 256;
								if (App.CN)
								{
									proControlPage.LineZero.Text = "ƒ∏œﬂµÁ—π£∫" + proControlPage.rcv_LineZero;
								}
								else
								{
									proControlPage.LineZero.Text = "BattVoltage:" + proControlPage.rcv_LineZero;
								}
								proControlPage.rcv_BattRatedCap = arg[11] * 256 + arg[10];
								proControlPage.rcv_IntRes = (ushort)(arg[13] * 256 + arg[12]);
								proControlPage.rcv_SpeedPulse = arg[7] & 0x1F;
								proControlPage.rcv_GearConfig = (arg[7] >> 5) & 7;
								if (proControlPage.rcv_GearConfig == 7)
								{
									proControlPage.rcv_GearConfig = 4;
								}
								break;
							case 30:
								proControlPage.rcv_FwReRatio = arg[3] * 256 + arg[2];
								proControlPage.rcv_LowVolProtect = (float)(arg[5] * 256 + arg[4]) / 10f;
								proControlPage.rcv_LowVolRestore = proControlPage.rcv_LowVolProtect + 2f;
								proControlPage.rcv_CustomCode0 = (char)arg[6];
								proControlPage.rcv_CustomCode1 = (char)arg[7];
								proControlPage.rcv_RelayDelay = arg[9] * 256 + arg[8];
								if (App.CN)
								{
									proControlPage.LowVolProtect.Text = "«∑—π±£ª§£∫" + proControlPage.rcv_LowVolProtect + "V";
									proControlPage.LowVolRestore.Text = "«∑—πª÷∏¥£∫" + proControlPage.rcv_LowVolRestore + "V";
									proControlPage.ModelDate.Text = $"»’∆⁄£∫{arg[10] + 2000}-{arg[11]}-{arg[12]}";
									proControlPage.ModelTime.Text = $" ±º‰£∫{arg[13]}:{proControlPage.min}:{proControlPage.hour}";
								}
								else
								{
									proControlPage.LowVolProtect.Text = "LowVolProtect:" + proControlPage.rcv_LowVolProtect + "V";
									proControlPage.LowVolRestore.Text = "LowVolRestore:" + proControlPage.rcv_LowVolRestore + "V";
									proControlPage.ModelDate.Text = $"Date:{arg[10] + 2000}-{arg[11]}-{arg[12]}";
									proControlPage.ModelTime.Text = $"Time:{arg[13]}:{proControlPage.min}:{proControlPage.hour}";
								}
								break;
							case 36:
								proControlPage.min = arg[2];
								proControlPage.hour = arg[3];
								proControlPage.rcv_HighVolProtect = (float)(arg[5] * 256 + arg[4]) / 10f;
								if (App.CN)
								{
									proControlPage.HighVolProtect.Text = "π˝—π±£ª§£∫" + proControlPage.rcv_HighVolProtect + "V";
								}
								else
								{
									proControlPage.HighVolProtect.Text = "OverVolProtect:" + proControlPage.rcv_HighVolProtect + "V";
								}
								proControlPage.rcv_CustomMaxLineCurr = (arg[7] * 256 + arg[6]) / 4;
								proControlPage.rcv_CustomMaxPhaseCurr = (arg[9] * 256 + arg[8]) / 4;
								proControlPage.rcv_BackSpeed = arg[13] * 256 + arg[12];
								proControlPage.rcv_LowSpeed = arg[11] * 256 + arg[10];
								break;
							case 42:
								proControlPage.rcv_MidSpeed = arg[3] * 256 + arg[2];
								proControlPage.rcv_Max_Dec = arg[5] * 256 + arg[4];
								proControlPage.rcv_MaxPhaseCurr = (arg[9] * 256 + arg[8]) / 4;
								proControlPage.rcv_SpeedAnalog = arg[11] * 256 + arg[10];
								proControlPage.rcv_Max_Acc = arg[13] * 256 + arg[12];
								proControlPage.rcv_FreeThrottle = arg[6];
								break;
							case 48:
								proControlPage.rcv_StopBackCurr = arg[3] * 256 + arg[2];
								proControlPage.rcv_MaxBackCurr = arg[5] * 256 + arg[4];
								proControlPage.cfg50l = arg[6];
								proControlPage.cfg50h = arg[7];
								proControlPage.cfg51l = arg[8];
								proControlPage.cfg51h = arg[9];
								proControlPage.rcv_LowSpeedLineCurr = (int)((float)(arg[6] * 100) / 128f + 0.5f);
								proControlPage.rcv_MidSpeedLineCurr = (int)((float)(arg[7] * 100) / 128f + 0.5f);
								proControlPage.rcv_LowSpeedPhaseCurr = (int)((float)(arg[8] * 100) / 128f + 0.5f);
								proControlPage.rcv_MidSpeedPhaseCurr = (int)((float)(arg[9] * 100) / 128f + 0.5f);
								proControlPage.rcv_BlockTime = arg[11] * 256 + arg[10];
								proControlPage.rcv_SpdPulseNum = (uint)(arg[13] * 256 + arg[12]);
								break;
							case 99:
								proControlPage.rcv_ENMaxLineCurr = arg[3] * 256 + arg[2];
								proControlPage.rcv_ENMaxPhaseCurr = arg[5] * 256 + arg[4];
								proControlPage.rcv_TempCoeff = arg[9] * 256 + arg[8];
								if (App.CN)
								{
									proControlPage.TempCoeff.Text = "Œ¬∂»œµ ˝£∫" + proControlPage.rcv_TempCoeff;
								}
								else
								{
									proControlPage.TempCoeff.Text = "TempCoeff:" + proControlPage.rcv_TempCoeff;
								}
								if (App.CN)
								{
									proControlPage.TempCoeff2.Text = "Œ¬∂»œµ ˝£∫" + proControlPage.rcv_TempCoeff;
								}
								else
								{
									proControlPage.TempCoeff2.Text = "TempCoeff:" + proControlPage.rcv_TempCoeff;
								}
								proControlPage.rcv_MOTORDIA = arg[6];
								break;
							case 105:
								proControlPage.rcv_BstXhBcP = arg[3] * 256 + arg[2];
								proControlPage.rcv_FwReSdhSdl = arg[5] * 256 + arg[4];
								proControlPage.rcv_ChgFdSeatVol = arg[7] * 256 + arg[6];
								proControlPage.rcv_LmtSpeed = (ushort)(arg[9] * 256 + arg[8]);
								proControlPage.rcv_ParaIndex = arg[12];
								proControlPage.rcv_SpecialCode = (char)arg[13];
								if (proControlPage.rcv_SpecialCode >= '0' && proControlPage.rcv_SpecialCode < '\u007f')
								{
									proControlPage.m_ParaIndex3 = proControlPage.rcv_SpecialCode;
								}
								else
								{
									proControlPage.m_ParaIndex3 = '_';
								}
								if (proControlPage.rcv_ParaIndex < 10)
								{
									proControlPage.m_ParaIndex2 = (char)(proControlPage.rcv_ParaIndex + 48);
								}
								else if (proControlPage.rcv_ParaIndex < 20)
								{
									proControlPage.m_ParaIndex2 = (char)(proControlPage.rcv_ParaIndex + 48 - 10);
								}
								else
								{
									proControlPage.m_ParaIndex2 = (char)proControlPage.rcv_ParaIndex;
								}
								break;
							case 124:
								proControlPage.rconfig_word1 = arg[3];
								proControlPage.rconfig_word0 = arg[2];
								proControlPage.rcv_MOE = (proControlPage.rconfig_word1 & 0x40) >> 6;
								proControlPage.rcv_QuickDown = (proControlPage.rconfig_word0 & 0xE0) >> 5;
								proControlPage.rcv_WeakTime = (proControlPage.rconfig_word0 & 0xE) >> 1;
								if ((proControlPage.rconfig_word1 & 3) == 3)
								{
									proControlPage.rcv_SpeedMeterConfig = 2;
								}
								else if ((proControlPage.rconfig_word1 & 0x81) == 129)
								{
									proControlPage.rcv_SpeedMeterConfig = 1;
								}
								else
								{
									proControlPage.rcv_SpeedMeterConfig = 0;
								}
								proControlPage.wktime = (uint)((arg[7] * 256 + arg[6]) * 65536 + arg[5] * 256 + arg[4]);
								proControlPage.distance = (uint)((App.gflash[71] << 16) + App.gflash[64]);
								break;
							case 130:
								proControlPage.rcv_kzqVersion0 = (char)arg[11];
								proControlPage.rcv_kzqVersion1 = (char)arg[12];
								proControlPage.rcv_SoftVer = arg[13];
								proControlPage.rcv_HighVolRestore = (float)(arg[5] * 256 + arg[4]) / 10f;
								proControlPage.rcv_MotorTempProtect = arg[6];
								proControlPage.rcv_MotorTempRestore = arg[7];
								proControlPage.rcv_MosTempProtect = arg[8];
								proControlPage.rcv_MosTempRestore = arg[9];
								if (App.CN)
								{
									proControlPage.HighVolRestore.Text = "π˝—πª÷∏¥£∫" + proControlPage.rcv_HighVolRestore + "V";
									proControlPage.cancomm = arg[10] & 0x3F;
									if (proControlPage.cancomm == 0)
									{
										proControlPage.CANConfig.Text = "CANÕ®–≈£∫Œﬁ–ß";
									}
									else
									{
										proControlPage.CANConfig.Text = "CANÕ®–≈£∫CAN" + proControlPage.cancomm;
									}
									proControlPage.MotorTempProtect.Text = "µÁª˙Œ¬∂»±£ª§£∫" + proControlPage.rcv_MotorTempProtect + "°„C";
									proControlPage.MotorTempRestore.Text = "µÁª˙Œ¬∂»ª÷∏¥£∫" + proControlPage.rcv_MotorTempRestore + "°„C";
									proControlPage.MosTempProtect.Text = "øÿ÷∆∆˜Œ¬∂»±£ª§£∫" + proControlPage.rcv_MosTempProtect + "°„C";
									proControlPage.MosTempRestore.Text = "øÿ÷∆∆˜Œ¬∂»ª÷∏¥" + proControlPage.rcv_MosTempRestore + "°„C";
								}
								else
								{
									proControlPage.HighVolRestore.Text = "OverVolRestore:" + proControlPage.rcv_HighVolRestore + "V";
									proControlPage.cancomm = arg[10] & 0x3F;
									if (proControlPage.cancomm == 0)
									{
										proControlPage.CANConfig.Text = "CAN: None";
									}
									else
									{
										proControlPage.CANConfig.Text = "CAN: CAN" + proControlPage.cancomm;
									}
									proControlPage.MotorTempProtect.Text = "MotorTempProtect:" + proControlPage.rcv_MotorTempProtect + "°„C";
									proControlPage.MotorTempRestore.Text = "MotorTempRestore:" + proControlPage.rcv_MotorTempRestore + "°„C";
									proControlPage.MosTempProtect.Text = "ControllerTempProtect:" + proControlPage.rcv_MosTempProtect + "°„C";
									proControlPage.MosTempRestore.Text = "ControllerTempRestore:" + proControlPage.rcv_MosTempRestore + "°„C";
								}
								break;
							case 136:
								proControlPage.rcv_Ratio500 = arg[3];
								proControlPage.rcv_Ratio1000 = arg[4];
								proControlPage.rcv_Ratio1500 = arg[5];
								proControlPage.rcv_Ratio2000 = arg[6];
								proControlPage.rcv_Ratio2500 = arg[7];
								proControlPage.rcv_Ratio3000 = arg[8];
								proControlPage.rcv_Ratio3500 = arg[9];
								proControlPage.rcv_Ratio4000 = arg[10];
								proControlPage.rcv_Ratio4500 = arg[11];
								proControlPage.rcv_Ratio5000 = arg[12];
								proControlPage.rcv_Ratio5500 = arg[13];
								break;
							case 142:
								proControlPage.rcv_Ratio6000 = arg[2];
								proControlPage.rcv_Ratio6500 = arg[3];
								proControlPage.rcv_Ratio7000 = arg[4];
								proControlPage.rcv_Ratio7500 = arg[5];
								proControlPage.rcv_Ratio8000 = arg[6];
								proControlPage.rcv_Ratio8500 = arg[7];
								proControlPage.rcv_Ratio9000 = arg[8];
								proControlPage.rcv_nratio[0] = (sbyte)arg[10];
								proControlPage.rcv_nratio[1] = (sbyte)arg[11];
								proControlPage.rcv_nratio[2] = (sbyte)arg[12];
								proControlPage.rcv_nratio[3] = (sbyte)arg[13];
								break;
							case 148:
								proControlPage.rcv_nratio[4] = (sbyte)arg[2];
								proControlPage.rcv_nratio[5] = (sbyte)arg[3];
								proControlPage.rcv_nratio[6] = (sbyte)arg[4];
								proControlPage.rcv_nratio[7] = (sbyte)arg[5];
								proControlPage.rcv_nratio[8] = (sbyte)arg[6];
								proControlPage.rcv_nratio[9] = (sbyte)arg[7];
								proControlPage.rcv_nratio[10] = (sbyte)arg[8];
								proControlPage.rcv_nratio[11] = (sbyte)arg[9];
								proControlPage.rcv_nratio[12] = (sbyte)arg[10];
								proControlPage.rcv_nratio[13] = (sbyte)arg[11];
								proControlPage.rcv_nratio[14] = (sbyte)arg[12];
								proControlPage.rcv_nratio[15] = (sbyte)arg[13];
								break;
							case 154:
								proControlPage.rcv_nratio[16] = (sbyte)arg[2];
								proControlPage.rcv_nratio[17] = (sbyte)arg[3];
								proControlPage.rcv_nratio[18] = (sbyte)arg[4];
								proControlPage.rcv_nratio[19] = (sbyte)arg[5];
								proControlPage.rcv_AN = arg[6] & 0x1F;
								proControlPage.rcv_LM = arg[7] & 0x3F;
								proControlPage.cfg156l = arg[6];
								proControlPage.cfg156h = arg[7];
								proControlPage.rcv_InitVol = (short)(arg[9] * 256 + arg[8]);
								proControlPage.rcv_Stage1Curr = arg[11] * 256 + arg[10];
								proControlPage.rcv_VolSelectRatio = arg[12];
								break;
							case 160:
							{
								for (int j = 4; j < 14; j++)
								{
									if (arg[j] > 32 && arg[j] <= 126)
									{
										proControlPage.bstr[j - 4] = arg[j];
									}
									else
									{
										proControlPage.bstr[j - 4] = 32;
									}
								}
								break;
							}
							case 166:
							{
								for (int i = 2; i < 12; i++)
								{
									if (arg[i] > 32 && arg[i] <= 126)
									{
										proControlPage.bstr[i + 8] = arg[i];
									}
									else
									{
										proControlPage.bstr[i + 8] = 32;
									}
								}
								break;
							}
							case 178:
								proControlPage.m_OneCommSec[0] = arg[6];
								proControlPage.m_OneCommSec[1] = arg[7];
								proControlPage.m_OneCommSec[2] = arg[8];
								proControlPage.m_OneCommSec[3] = arg[9];
								proControlPage.m_OneCommSec[4] = arg[10];
								proControlPage.m_OneCommSec[5] = arg[11];
								proControlPage.m_OneCommSec[6] = arg[12];
								proControlPage.m_OneCommSec[7] = arg[13];
								break;
							case 184:
								proControlPage.rcv_OneCommPos = arg[3] * 256 + arg[2];
								proControlPage.m_OneCommPS = arg[7] * 256 + arg[6];
								proControlPage.rcv_OnelineCurrCoeff = arg[9] * 256 + arg[8];
								proControlPage.rcv_GPara0 = arg[11] * 256 + arg[10];
								proControlPage.rcv_Stage1Soc = arg[12];
								proControlPage.rcv_Stage2Soc = arg[13];
								if ((arg[11] & 0x80) != 0 && !App.rcv_NewBlueKey)
								{
									App.rcv_NewBlueKey = true;
								}
								break;
							case 190:
								proControlPage.cfg190l = arg[2];
								proControlPage.cfg190h = arg[3];
								proControlPage.rcv_AccCoeff = arg[3] >> 4;
								proControlPage.rcv_BstTime = arg[5] * 256 + arg[4];
								proControlPage.rcv_BstRelease = arg[7] * 256 + arg[6];
								proControlPage.rcv_ParkTime = arg[9] * 256 + arg[8];
								proControlPage.rcv_InverseTime = arg[11] * 256 + arg[10];
								proControlPage.rcv_TorqueCoeff = arg[13] * 256 + arg[12];
								break;
							case 196:
								proControlPage.rcv_LearnVol = arg[3] * 256 + arg[2];
								proControlPage.rcv_LearnVoh = arg[5] * 256 + arg[4];
								proControlPage.rcv_ParkDiff = arg[7] * 256 + arg[6];
								proControlPage.rcv_IsInStart = arg[9] * 256 + arg[8];
								proControlPage.rcv_ThrottleInsert = arg[11] * 256 + arg[10];
								proControlPage.rcv_ExitFollowSpeed = arg[12];
								proControlPage.rcv_ReCurrRatio = arg[13];
								break;
							case 202:
								proControlPage.rcv_anglelearn = arg[2];
								proControlPage.rcv_SpdLmt_sel = arg[3] & 0xF;
								proControlPage.rcv_OneKey_sel = arg[3] >> 4;
								proControlPage.rcv_NoCanCnt = arg[4];
								proControlPage.rcv_TaRlB9D0SP = arg[5];
								proControlPage.rcv_LearnThrottle = arg[6];
								proControlPage.rcv_SpeedLowCap = arg[7];
								proControlPage.rcv_MidSpeedCap = arg[8];
								proControlPage.rcv_SpeedLimitByCap = arg[9];
								proControlPage.rcv_MinSpeedCapCoeff = arg[10];
								proControlPage.rcv_ParkCoeff = arg[11] & 0xF;
								proControlPage.rcv_BatSel = (arg[11] >> 4) & 0xF;
								proControlPage.rcv_ReIsinAcc = arg[13] * 256 + arg[12];
								break;
							case 208:
								proControlPage.m_OneCommHead = arg[3] * 256 + arg[2];
								proControlPage.rcv_BMQHALL = arg[4];
								proControlPage.rcv_DataVoltage1 = arg[5];
								proControlPage.rcv_WheelRatio = arg[6];
								proControlPage.rcv_WheelRadius = arg[7];
								proControlPage.rcv_DataVoltage4 = arg[8];
								proControlPage.rcv_WheelWidth = arg[9];
								proControlPage.rcv_RateRatio = arg[11] * 256 + arg[10];
								proControlPage.rcv_OneCommCfg = arg[13] * 256 + arg[12];
								break;
							case 250:
								proControlPage.rcv_PhaseAZero = arg[3] * 256 + arg[2];
								proControlPage.rcv_PhaseCZero = arg[5] * 256 + arg[4];
								proControlPage.old_ble = (arg[7] & 2) != 0;
								if (App.CN)
								{
									proControlPage.PhaseAZero.Text = "œ‡µÁ¡˜¡„µ„A£∫" + proControlPage.rcv_PhaseAZero;
									proControlPage.PhaseCZero.Text = "œ‡µÁ¡˜¡„µ„C£∫" + proControlPage.rcv_PhaseCZero;
								}
								else
								{
									proControlPage.PhaseAZero.Text = "PhseAZero:" + proControlPage.rcv_PhaseAZero;
									proControlPage.PhaseCZero.Text = "PhaseCZero:" + proControlPage.rcv_PhaseCZero;
								}
								break;
							}
						}
					}
					else
					{
						int num5 = 0;
						for (int k = 0; k < 14; k++)
						{
							num5 += arg[k];
						}
						if (arg[14] * 256 + arg[15] == num5)
						{
							rcvframe++;
							if (App.CN)
							{
								if (proControlPage.bms)
								{
									proControlPage.RcvFrames.Text = rcvframe.ToString("Ω” ’÷°0");
								}
								else if (proControlPage.rcv_kzqVersion0 > '6')
								{
									proControlPage.RcvFrames.Text = rcvframe.ToString("Ω” ’÷°0");
								}
								else
								{
									proControlPage.RcvFrames.Text = rcvframe.ToString(" ˝æ›Ω” ’≤ªÕÍ’˚");
								}
							}
							else if (proControlPage.bms)
							{
								proControlPage.RcvFrames.Text = rcvframe.ToString("RcvFrames0");
							}
							else if (proControlPage.rcv_kzqVersion0 > '6')
							{
								proControlPage.RcvFrames.Text = rcvframe.ToString("RcvFrames0");
							}
							else
							{
								proControlPage.RcvFrames.Text = rcvframe.ToString("Receiving...");
							}
							switch (arg[1])
							{
							case 0:
								proControlPage.bms = false;
								proControlPage.rcv_FollowConfig = arg[5] & 3;
								break;
							case 3:
								proControlPage.rcv_SpeedKP = arg[12];
								proControlPage.rcv_PhaseACoeff = arg[8] * 256 + arg[9];
								proControlPage.rcv_PhaseCCoeff = arg[10] * 256 + arg[11];
								proControlPage.rcv_PhaseAZero = arg[2] * 256 + arg[3];
								proControlPage.rcv_PhaseCZero = arg[4] * 256 + arg[5];
								proControlPage.rcv_SaveNum = arg[6];
								proControlPage.rcv_SpecialCode = (char)arg[13];
								if (App.CN)
								{
									proControlPage.PhaseACoeff.Text = "œ‡µÁ¡˜œµ ˝A:" + proControlPage.rcv_PhaseACoeff;
									proControlPage.PhaseCCoeff.Text = "œ‡µÁ¡˜œµ ˝C:" + proControlPage.rcv_PhaseCCoeff;
									proControlPage.SaveNum.Text = "±Í∂®¥Œ ˝£∫" + proControlPage.rcv_SaveNum;
									proControlPage.PhaseAZero.Text = "œ‡µÁ¡˜¡„µ„A:" + proControlPage.rcv_PhaseAZero;
									proControlPage.PhaseCZero.Text = "œ‡µÁ¡˜¡„µ„C:" + proControlPage.rcv_PhaseCZero;
								}
								else
								{
									proControlPage.PhaseACoeff.Text = "PhaseCoeffA:" + proControlPage.rcv_PhaseACoeff;
									proControlPage.PhaseCCoeff.Text = "PhaseCoeffC:" + proControlPage.rcv_PhaseCCoeff;
									proControlPage.SaveNum.Text = "Saved Times£∫" + proControlPage.rcv_SaveNum;
									proControlPage.PhaseAZero.Text = "PhaseZeroA:" + proControlPage.rcv_PhaseAZero;
									proControlPage.PhaseCZero.Text = "PhaseZeroC:" + proControlPage.rcv_PhaseCZero;
								}
								break;
							case 4:
							{
								proControlPage.rcv_ECOConfig = arg[2] & 3;
								proControlPage.rcv_WeakA = (arg[2] >> 2) & 3;
								proControlPage.rcv_VolCoeff = arg[6] * 256 + arg[7];
								proControlPage.rcv_LineCoeff = arg[8] * 256 + arg[9];
								proControlPage.rcv_TempCoeff = arg[10] * 256 + arg[11];
								proControlPage.rcv_LineZero = arg[12] * 256 + arg[13];
								float num6 = (float)proControlPage.rcv_LineZero / 10f;
								if (App.CN)
								{
									proControlPage.VolCoeff.Text = "µÁ—πœµ ˝£∫" + proControlPage.rcv_VolCoeff;
									proControlPage.LineCoeff.Text = "œﬂµÁ¡˜œµ ˝£∫" + proControlPage.rcv_LineCoeff;
									proControlPage.TempCoeff.Text = "Œ¬∂»œµ ˝£∫" + proControlPage.rcv_TempCoeff;
									proControlPage.LineZero.Text = "ƒ∏œﬂµÁ—π£∫" + num6;
								}
								else
								{
									proControlPage.VolCoeff.Text = "VoltageCoeff:" + proControlPage.rcv_VolCoeff;
									proControlPage.LineCoeff.Text = "LineCurrCoeff:" + proControlPage.rcv_LineCoeff;
									proControlPage.TempCoeff.Text = "TempCoeff:" + proControlPage.rcv_TempCoeff;
									proControlPage.LineZero.Text = "BattVoltage:" + num6;
								}
								break;
							}
							case 6:
								proControlPage.rcv_Ratio500 = arg[2];
								proControlPage.rcv_Ratio1000 = arg[3];
								proControlPage.rcv_Ratio1500 = arg[4];
								proControlPage.rcv_Ratio2000 = arg[5];
								proControlPage.rcv_Ratio2500 = arg[6];
								proControlPage.rcv_Ratio3000 = arg[7];
								proControlPage.rcv_Ratio3500 = arg[8];
								proControlPage.rcv_Ratio4000 = arg[9];
								proControlPage.rcv_Ratio4500 = arg[10];
								proControlPage.rcv_Ratio5000 = arg[11];
								proControlPage.rcv_Ratio5500 = arg[12];
								proControlPage.rcv_Ratio6000 = arg[13];
								break;
							case 7:
								proControlPage.rcv_Ratio6500 = arg[2];
								proControlPage.rcv_Ratio7000 = arg[3];
								proControlPage.rcv_Ratio7500 = arg[4];
								proControlPage.rcv_Ratio8000 = arg[5];
								proControlPage.rcv_Ratio8500 = arg[6];
								proControlPage.rcv_Ratio9000 = arg[7];
								if (App.CN)
								{
									if (arg[9] == 0)
									{
										proControlPage.CANConfig.Text = "CAN÷∏¡Ó£∫Œﬁ–ß";
									}
									else
									{
										proControlPage.CANConfig.Text = "CAN÷∏¡Ó£∫" + arg[9];
									}
								}
								else if (arg[9] == 0)
								{
									proControlPage.CANConfig.Text = "CAN£∫None";
								}
								else
								{
									proControlPage.CANConfig.Text = "CAN:" + arg[9];
								}
								proControlPage.rcv_SpeedAnalog = arg[10] * 256 + arg[11];
								proControlPage.rcv_AN = arg[12];
								proControlPage.rcv_LM = arg[13];
								break;
							case 8:
								proControlPage.rcv_MotorTempProtect = (arg[2] * 256 + arg[3]) / 100;
								proControlPage.rcv_MotorTempRestore = (arg[4] * 256 + arg[5]) / 100;
								proControlPage.rcv_MosTempProtect = (arg[6] * 256 + arg[7]) / 100;
								proControlPage.rcv_MosTempRestore = (arg[8] * 256 + arg[9]) / 100;
								proControlPage.rcv_PolePairs = arg[10];
								proControlPage.rcv_Direction = arg[11];
								proControlPage.rcv_RatedVoltage = (arg[12] * 256 + arg[13]) / 10;
								if (App.CN)
								{
									proControlPage.MotorTempProtect.Text = "µÁª˙Œ¬∂»±£ª§£∫" + proControlPage.rcv_MotorTempProtect + "°„C";
									proControlPage.MotorTempRestore.Text = "µÁª˙Œ¬∂»ª÷∏¥£∫" + proControlPage.rcv_MotorTempRestore + "°„C";
									proControlPage.MosTempProtect.Text = "øÿ÷∆∆˜Œ¬∂»±£ª§£∫" + proControlPage.rcv_MosTempProtect + "°„C";
									proControlPage.MosTempRestore.Text = "øÿ÷∆∆˜Œ¬∂»ª÷∏¥" + proControlPage.rcv_MosTempRestore + "°„C";
									proControlPage.PolePairsDisplay.Text = $"º´∂‘ ˝:{proControlPage.rcv_PolePairs}";
									proControlPage.Direction.Text = "µÁª˙∑ΩœÚ£∫" + proControlPage.rcv_Direction;
									proControlPage.RatedVoltage.Text = "∂Ó∂®µÁ—π£∫" + proControlPage.rcv_RatedVoltage + "V";
								}
								else
								{
									proControlPage.MotorTempProtect.Text = "MotorTempProtect:" + proControlPage.rcv_MotorTempProtect + "°„C";
									proControlPage.MotorTempRestore.Text = "MotorTempRestore:" + proControlPage.rcv_MotorTempRestore + "°„C";
									proControlPage.MosTempProtect.Text = "ControllerTempProtect:" + proControlPage.rcv_MosTempProtect + "°„C";
									proControlPage.MosTempRestore.Text = "ControllerTempRestore:" + proControlPage.rcv_MosTempRestore + "°„C";
									proControlPage.PolePairsDisplay.Text = $"PolePairs:{proControlPage.rcv_PolePairs}";
									proControlPage.Direction.Text = "MotorDirection:" + proControlPage.rcv_Direction;
									proControlPage.RatedVoltage.Text = "RatedVoltage:" + proControlPage.rcv_RatedVoltage + "V";
								}
								break;
							case 9:
								proControlPage.rcv_RatedSpeed = arg[4] * 256 + arg[5];
								proControlPage.rcv_MaxSpeed = arg[6] * 256 + arg[7];
								proControlPage.rcv_MidSpeed = arg[8] * 256 + arg[9];
								proControlPage.rcv_Max_Acc = arg[10] * 256 + arg[11];
								proControlPage.rconfig_word1 = arg[12];
								proControlPage.rconfig_word0 = arg[13];
								proControlPage.rcv_MOE = (proControlPage.rconfig_word1 & 0x40) >> 6;
								proControlPage.rcv_QuickDown = (proControlPage.rconfig_word0 & 0xE0) >> 5;
								proControlPage.rcv_WeakTime = (proControlPage.rconfig_word0 & 0xE) >> 1;
								if ((proControlPage.rconfig_word1 & 3) == 3)
								{
									proControlPage.rcv_SpeedMeterConfig = 2;
								}
								else if ((proControlPage.rconfig_word1 & 0x81) == 129)
								{
									proControlPage.rcv_SpeedMeterConfig = 1;
								}
								else
								{
									proControlPage.rcv_SpeedMeterConfig = 0;
								}
								break;
							case 10:
								proControlPage.rcv_MaxLineCurr = (arg[2] * 256 + arg[3]) / 4;
								proControlPage.rcv_ParaIndex = arg[5];
								if (proControlPage.rcv_ParaIndex < 10)
								{
									proControlPage.m_ParaIndex2 = (char)(proControlPage.rcv_ParaIndex + 48);
									proControlPage.m_ParaIndex3 = '_';
								}
								else if (proControlPage.rcv_ParaIndex < 20)
								{
									proControlPage.m_ParaIndex2 = (char)(proControlPage.rcv_ParaIndex + 48 - 10);
									proControlPage.m_ParaIndex3 = 'R';
								}
								else if (proControlPage.rcv_ParaIndex < 58)
								{
									proControlPage.m_ParaIndex2 = (char)proControlPage.rcv_ParaIndex;
									if (proControlPage.rcv_SpecialCode == '\0')
									{
										proControlPage.m_ParaIndex3 = '_';
									}
									else
									{
										proControlPage.m_ParaIndex3 = proControlPage.rcv_SpecialCode;
									}
								}
								else if (proControlPage.rcv_ParaIndex < 91)
								{
									proControlPage.m_ParaIndex2 = (char)proControlPage.rcv_ParaIndex;
									proControlPage.m_ParaIndex3 = '_';
								}
								else
								{
									proControlPage.m_ParaIndex2 = (char)(proControlPage.rcv_ParaIndex - 32);
									proControlPage.m_ParaIndex3 = 'R';
								}
								proControlPage.rcv_MOTORDIA = arg[6];
								proControlPage.rcv_RatedPower100 = arg[7];
								proControlPage.rcv_RatedPower = arg[7] * 100;
								if (App.CN)
								{
									proControlPage.RatedPower.Text = "∂Ó∂®π¶¬ £∫" + proControlPage.rcv_RatedPower + "W";
								}
								else
								{
									proControlPage.RatedPower.Text = "RatedPower:" + proControlPage.rcv_RatedPower + "W";
								}
								proControlPage.rcv_MaxPhaseCurr = (arg[8] * 256 + arg[9]) / 4;
								proControlPage.rcv_ThrottleLow = (float)(int)arg[12] / 20f;
								proControlPage.rcv_ThrottleHigh = (float)(int)arg[13] / 20f;
								proControlPage.rcv_SpeedKI = arg[11];
								proControlPage.rcv_CustomMaxLineCurr = proControlPage.rcv_MaxLineCurr;
								proControlPage.rcv_CustomMaxPhaseCurr = proControlPage.rcv_MaxPhaseCurr;
								break;
							case 11:
								proControlPage.rcv_HighVolProtect = (float)(arg[2] * 256 + arg[3]) / 10f;
								proControlPage.rcv_HighVolRestore = (float)(arg[4] * 256 + arg[5]) / 10f;
								proControlPage.rcv_LowVolRestore = (float)(arg[8] * 256 + arg[9]) / 10f;
								proControlPage.rcv_LowVolProtect = (float)(arg[6] * 256 + arg[7]) / 10f;
								proControlPage.rcv_StopBackCurr = (arg[10] * 256 + arg[11]) / 4;
								proControlPage.rcv_MaxBackCurr = (arg[12] * 256 + arg[13]) / 4;
								if (App.CN)
								{
									proControlPage.HighVolProtect.Text = "π˝—π±£ª§£∫" + proControlPage.rcv_HighVolProtect + "V";
									proControlPage.HighVolRestore.Text = "π˝—πª÷∏¥£∫" + proControlPage.rcv_HighVolRestore + "V";
									proControlPage.LowVolRestore.Text = "«∑—πª÷∏¥£∫" + proControlPage.rcv_LowVolRestore + "V";
									proControlPage.LowVolProtect.Text = "«∑—π±£ª§£∫" + proControlPage.rcv_LowVolProtect + "V";
								}
								else
								{
									proControlPage.HighVolProtect.Text = "OverVoltageProtect:" + proControlPage.rcv_HighVolProtect + "V";
									proControlPage.HighVolRestore.Text = "OverVoltageRestore:" + proControlPage.rcv_HighVolRestore + "V";
									proControlPage.LowVolRestore.Text = "LowVoltageRestore:" + proControlPage.rcv_LowVolRestore + "V";
									proControlPage.LowVolProtect.Text = "LowVoltageProtect:" + proControlPage.rcv_LowVolProtect + "V";
								}
								break;
							case 12:
								proControlPage.rcv_PhaseOffset = (arg[2] * 256 + arg[3]) / 10;
								proControlPage.rcv_AccCoeff = arg[4];
								proControlPage.rcv_StartKI = arg[5];
								proControlPage.rcv_MidKI = arg[6];
								proControlPage.rcv_MaxKI = arg[7];
								proControlPage.rcv_StartKP = arg[8];
								proControlPage.rcv_MidKP = arg[9];
								proControlPage.rcv_MaxKP = arg[10];
								proControlPage.rcv_SoftVer = arg[13];
								break;
							case 13:
								proControlPage.rcv_BattRatedCap = arg[7];
								proControlPage.rcv_BrakeConfig = arg[8];
								proControlPage.rcv_PC13Config = arg[9];
								proControlPage.rcv_kzqVersion0 = (char)arg[10];
								proControlPage.rcv_kzqVersion1 = (char)arg[11];
								proControlPage.rcv_BackSpeed = arg[12] * 256 + arg[13];
								break;
							case 14:
								proControlPage.rcv_CustomCode0 = (char)arg[2];
								proControlPage.rcv_CustomCode1 = (char)arg[3];
								proControlPage.rcv_NTC_PTC = arg[4];
								proControlPage.rcv_Bmq_Hall = (arg[11] >> 2) & 1;
								proControlPage.rcv_BMQHALL = proControlPage.rcv_Bmq_Hall;
								if (proControlPage.rcv_Bmq_Hall != 0)
								{
									if (proControlPage.rcv_SpecialCode == '4')
									{
										proControlPage.rcv_BMQHALL = 2;
									}
									else if (proControlPage.rcv_SpecialCode == '8')
									{
										proControlPage.rcv_BMQHALL = 3;
									}
								}
								proControlPage.rcv_SpeedPulse = arg[11] >> 3;
								proControlPage.rcv_ParkConfig = ((arg[11] >> 1) & 1) << 1;
								if (App.CN)
								{
									proControlPage.ModelDate.Text = $"»’∆⁄£∫{arg[5] + 2000}-{arg[6]}-{arg[7]}";
									proControlPage.ModelTime.Text = $" ±º‰£∫{arg[8]}:{arg[9]}:{arg[10]}";
								}
								else
								{
									proControlPage.ModelDate.Text = $"Date:{arg[5] + 2000}-{arg[6]}-{arg[7]}";
									proControlPage.ModelTime.Text = $"Time:{arg[8]}:{arg[9]}:{arg[10]}";
								}
								proControlPage.rcv_LowSpeed = arg[12] * 256 + arg[13];
								break;
							case 15:
								proControlPage.old_ble = (arg[4] & 2) != 0;
								switch (arg[8] & 3)
								{
								case 0:
									proControlPage.rcv_GearConfig = 0;
									break;
								case 1:
									proControlPage.rcv_GearConfig = 2;
									break;
								case 2:
									proControlPage.rcv_GearConfig = 1;
									break;
								default:
									if ((arg[13] & 1) == 1)
									{
										proControlPage.rcv_GearConfig = 4;
									}
									else
									{
										proControlPage.rcv_GearConfig = 3;
									}
									break;
								}
								break;
							case 18:
								if (!proControlPage.bms)
								{
									proControlPage.rcv_ZeroBattCoeff = arg[2] * 256 + arg[3];
									proControlPage.rcv_FullBattCoeff = arg[4] * 256 + arg[5];
									proControlPage.rcv_LowSpeedLineCurr = (int)((float)(arg[7] * 100) / 128f + 0.5f);
									proControlPage.rcv_MidSpeedLineCurr = (int)((float)(arg[8] * 100) / 128f + 0.5f);
									proControlPage.rcv_LowSpeedPhaseCurr = (int)((float)(arg[9] * 100) / 128f + 0.5f);
									proControlPage.rcv_MidSpeedPhaseCurr = (int)((float)(arg[10] * 100) / 128f + 0.5f);
									proControlPage.rcv_Max_Dec = arg[12];
								}
								break;
							case 19:
							{
								for (int num7 = 2; num7 < 10; num7++)
								{
									if (arg[num7] > 32 && arg[num7] <= 126)
									{
										proControlPage.bstr[num7 - 2] = arg[num7];
									}
									else
									{
										proControlPage.bstr[num7 - 2] = 32;
									}
								}
								break;
							}
							case 20:
							{
								for (int n = 2; n < 14; n++)
								{
									if (arg[n] > 32 && arg[n] <= 126)
									{
										proControlPage.bstr[n + 6] = arg[n];
									}
									else
									{
										proControlPage.bstr[n + 6] = 32;
									}
								}
								break;
							}
							case 21:
								proControlPage.rcv_ENMaxLineCurr = arg[2] * 256 + arg[3];
								proControlPage.rcv_ENMaxPhaseCurr = arg[4] * 256 + arg[5];
								proControlPage.cfg190h = arg[7];
								proControlPage.rcv_MorseCode = arg[8];
								break;
							case 22:
							{
								for (int m = 1; m < 13; m++)
								{
									proControlPage.rcv_nratio[m] = (sbyte)arg[m + 1];
								}
								proControlPage.rcv_nratio[0] = proControlPage.rcv_nratio[1];
								break;
							}
							case 23:
							{
								for (int l = 2; l < 9; l++)
								{
									proControlPage.rcv_nratio[l + 11] = (sbyte)arg[l];
								}
								proControlPage.rcv_nratio[0] = proControlPage.rcv_nratio[1];
								proControlPage.rcv_CurveTime = arg[10] * 256 + arg[11];
								proControlPage.rcv_FreeThrottle = arg[12];
								break;
							}
							case 1:
							case 2:
							case 5:
							case 16:
							case 17:
								break;
							}
						}
					}
				}
			});
		}

		private async void BindA()
		{
			if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Controller is not bound or login, Please bind or login the controller.", null, "Bind", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("øÿ÷∆∆˜Œ¥∞Û∂®µ«¬º£¨«Îœ»∞Û∂®µ«¬ºøÿ÷∆∆˜°£", null, "∞Û∂®", "»°œ˚")))
			{
				App.NotBindStat = 99;
			}
		}

		private bool NotBindingStat()
		{
			if (App.RcvRemoteCount > 0 && !App.isConnected)
			{
				return false;
			}
			if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
			{
				BindA();
				return true;
			}
			return false;
		}

		private async void BindC()
		{
			if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Controller is not bound, to protect parameters from being modified by others, it is recommended to bind the controller.", null, "Bind", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("øÿ÷∆∆˜Œ¥∞Û∂®£¨Œ™¡À±£ª§≤Œ ˝≤ª±ªÀ˚»À–ﬁ∏ƒ£¨Ω®“È∞Û∂®øÿ÷∆∆˜°£", null, "∞Û∂®", "»°œ˚")))
			{
				App.NotBindStat = 99;
			}
		}

		private bool NotOwnerStat()
		{
			if (App.RcvRemoteCount > 0 && !App.isConnected)
			{
				return false;
			}
			if (App.ownertype <= 1)
			{
				if (App.PassOk == 2)
				{
					if (App.NotBindStat >= 1 && App.NotBindStat < 100)
					{
						App.NotBindStat++;
						BindC();
						return true;
					}
					return false;
				}
				if (App.CN)
				{
					UserDialogs.Instance.Alert("÷ª”–÷˜”√ªß∫Õπ§≥ß”√ªß≤≈ƒ‹–ﬁ∏ƒ’‚∏ˆ≤Œ ˝£°");
				}
				else
				{
					UserDialogs.Instance.Alert("Only master and factory users can modify this parameter.");
				}
				return true;
			}
			return false;
		}

		private bool NotNewBlue()
		{
			if (!App.rcv_NewBlueKey)
			{
				if (App.CN)
				{
					UserDialogs.Instance.Alert("«Î π”√4567–¬¿∂—¿£°");
				}
				else
				{
					UserDialogs.Instance.Alert("Please use new BLE Module.");
				}
				return true;
			}
			return false;
		}

		private async void OnButtonMorseCodeClicked(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MorseCodeName.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			int num = 0;
			for (int i = 0; i < text.Length; i++)
			{
				num <<= 1;
				if (text[i] == '1')
				{
					num |= 1;
				}
			}
			num &= 0x7F;
			if (App.NewVersion)
			{
				WriteAddr(new byte[8]
				{
					0,
					0,
					0,
					0,
					(byte)rcv_Arg2,
					(byte)num,
					0,
					0
				}, 6, 2);
			}
			else
			{
				SendRs232Data(11, 2, (byte)num, (byte)(num >> 8));
			}
		}

		private async void RatedSpeed_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = RatedSpeed.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'P' });
			text = text.TrimEnd(new char[1] { 'p' });
			text = text.TrimEnd(new char[1] { 'R' });
			text = text.TrimEnd(new char[1] { 'r' });
			try
			{
				int num = Convert.ToInt16(text);
				if (rcv_PolePairs >= 16)
				{
					num = num * rcv_PolePairs / 4;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 24, 2);
				}
				else
				{
					num++;
					SendRs232Data(18, 5, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void RatedVoltage_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = RatedVoltage.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'V' });
			text = text.TrimEnd(new char[1] { 'v' });
			try
			{
				int num = Convert.ToInt16(text);
				num *= 10;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 23, 2);
				}
				else
				{
					num++;
					SendRs232Data(18, 4, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void RatedPower_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = RatedPower.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'W' });
			text = text.TrimEnd(new char[1] { 'w' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 22, 2);
				}
				else
				{
					SendRs232Data(18, 3, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MaxSpeed_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MaxSpeed.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'P' });
			text = text.TrimEnd(new char[1] { 'p' });
			text = text.TrimEnd(new char[1] { 'R' });
			text = text.TrimEnd(new char[1] { 'r' });
			try
			{
				int num = Convert.ToInt16(text);
				if (rcv_PolePairs >= 16)
				{
					num = num * rcv_PolePairs / 4;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 21, 2);
				}
				else
				{
					num++;
					SendRs232Data(18, 2, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void IntRes_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = IntRes.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt32(text);
				if (num > 65535 || num < 0)
				{
					UserDialogs.Instance.Toast("Invalid Value.");
				}
				else if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 29, 2);
				}
				else
				{
					SendRs232Data(15, 8, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LmtSpeed_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LmtSpeed.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'P' });
			text = text.TrimEnd(new char[1] { 'p' });
			text = text.TrimEnd(new char[1] { 'R' });
			text = text.TrimEnd(new char[1] { 'r' });
			try
			{
				int num = Convert.ToInt16(text);
				if (rcv_PolePairs >= 16)
				{
					num = num * rcv_PolePairs / 4;
				}
				if (num > 12000 || num < 128)
				{
					UserDialogs.Instance.Toast("Invalid Value.");
				}
				else if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 108, 2);
				}
				else
				{
					UserDialogs.Instance.Toast("Invalid Value In Old Version.");
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LowSpeed_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LowSpeed.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'P' });
			text = text.TrimEnd(new char[1] { 'p' });
			text = text.TrimEnd(new char[1] { 'R' });
			text = text.TrimEnd(new char[1] { 'r' });
			try
			{
				int num = Convert.ToInt16(text);
				if (rcv_PolePairs >= 16)
				{
					num = num * rcv_PolePairs / 4;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 40, 2);
				}
				else
				{
					num++;
					SendRs232Data(17, 2, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void EmptySpeed_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = EmptySpeed.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 3 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((cfg156l & 0x3F) + (num << 6)),
						cfg156h,
						0,
						0
					}, 156, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BackSpeed_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BackSpeed.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'P' });
			text = text.TrimEnd(new char[1] { 'p' });
			text = text.TrimEnd(new char[1] { 'R' });
			text = text.TrimEnd(new char[1] { 'r' });
			try
			{
				int num = Convert.ToInt16(text);
				if (rcv_PolePairs >= 16)
				{
					num = num * rcv_PolePairs / 4;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 41, 2);
				}
				else
				{
					num++;
					SendRs232Data(17, 3, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void PolePairs_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			string text = await DisplayActionSheet("PolePairs:", "cancel", "2", "3", "4", "5", "6", "7", "8", "10", "12", "14", "16", "18", "20", "22", "23", "24", "26", "28", "30", "32", "34", "35", "36", "38", "40", "42", "44", "46");
			if (!(text != "cancel") || string.IsNullOrWhiteSpace(text))
			{
				return;
			}
			int num = Convert.ToInt16(text);
			if (num <= 48 && num >= 3)
			{
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 20, 2);
				}
				else if (num >= 16 && num <= 48)
				{
					SendRs232Data(18, 1, (byte)num, 89);
				}
				else
				{
					SendRs232Data(18, 1, 4, 89);
				}
			}
		}

		private async void Direction_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = await DisplayActionSheet("Direction:", "cancel", "0", "1");
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				int num2 = num + 1;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						cfg11l,
						(byte)((cfg11h & 0x7F) + (num << 7)),
						0,
						0
					}, 11, 2);
				}
				else
				{
					SendRs232Data(18, 7, (byte)num2, (byte)(num2 >> 8));
				}
			}
		}

		private async void NTC_PTC_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = await DisplayActionSheet("NTC_PTC:", "cancel", "0-None", "1-PTC", "2-NTC230K", "3-KTY84-130", "4-Cacu", "5-KTY83-122", "6-NTC10K", "7-NTC100K");
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				int num2 = num + 1;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((cfg11l & 0x8F) + (num << 4)),
						cfg11h,
						0,
						0
					}, 11, 2);
				}
				else
				{
					SendRs232Data(17, 1, (byte)num2, (byte)(num2 >> 8));
				}
			}
		}

		private async void PhaseOffset_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = PhaseOffset.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				int num2 = ((num <= 255) ? (21760 + num) : ((num != 256) ? (43520 + num - 256) : 65281));
				if (App.NewVersion)
				{
					byte[] array = new byte[8];
					num2 = num * 10;
					array[4] = (byte)num2;
					array[5] = (byte)(num2 >> 8);
					WriteAddr(array, 12, 2);
				}
				else
				{
					SendRs232Data(10, 7, (byte)num2, (byte)(num2 >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MaxLineCurr_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MaxLineCurr.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'A' });
			text = text.TrimEnd(new char[1] { 'a' });
			try
			{
				int num = Convert.ToInt16(text);
				num = num * 4 + 1;
				if (App.NewVersion)
				{
					num--;
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 25, 2);
				}
				else
				{
					SendRs232Data(18, 27, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MaxPhaseCurr_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MaxPhaseCurr.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'A' });
			text = text.TrimEnd(new char[1] { 'a' });
			try
			{
				int num = Convert.ToInt16(text);
				num = num * 4 + 1;
				if (App.NewVersion)
				{
					num--;
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 45, 2);
				}
				else
				{
					SendRs232Data(18, 26, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void CustomMaxLineCurr_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = CustomMaxLine.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'A' });
			text = text.TrimEnd(new char[1] { 'a' });
			try
			{
				int num = Convert.ToInt16(text);
				num = num * 4 + 1;
				if (App.NewVersion)
				{
					num--;
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 38, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void CustomMaxPhaseCurr_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = CustomMaxPhase.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'A' });
			text = text.TrimEnd(new char[1] { 'a' });
			try
			{
				int num = Convert.ToInt16(text);
				num = num * 4 + 1;
				if (App.NewVersion)
				{
					num--;
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 39, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void StopBackCurr_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = StopBackCurr.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'A' });
			text = text.TrimEnd(new char[1] { 'a' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 10 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)(num >> 8),
							0,
							0
						}, 48, 2);
					}
					else
					{
						SendRs232Data(18, 24, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MaxBackCurr_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MaxBackCurr.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'A' });
			text = text.TrimEnd(new char[1] { 'a' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 20 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)(num >> 8),
							0,
							0
						}, 49, 2);
					}
					else
					{
						SendRs232Data(18, 25, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)num,
						0,
						0
					}, 136, 2);
				}
				else
				{
					SendRs232Data(12, 1, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio1000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio1000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)rcv_Ratio1500,
						0,
						0
					}, 137, 2);
				}
				else
				{
					SendRs232Data(12, 2, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio1500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio1500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_Ratio1000,
						(byte)num,
						0,
						0
					}, 137, 2);
				}
				else
				{
					SendRs232Data(12, 3, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio2000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio2000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 95 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)rcv_Ratio2500,
							0,
							0
						}, 138, 2);
					}
					else
					{
						SendRs232Data(12, 4, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio2500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio2500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 90 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)rcv_Ratio2000,
							(byte)num,
							0,
							0
						}, 138, 2);
					}
					else
					{
						SendRs232Data(12, 5, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio3000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio3000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 85 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)rcv_Ratio3500,
							0,
							0
						}, 139, 2);
					}
					else
					{
						SendRs232Data(12, 6, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio3500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio3500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 80 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)rcv_Ratio3000,
							(byte)num,
							0,
							0
						}, 139, 2);
					}
					else
					{
						SendRs232Data(12, 7, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio4000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio4000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 75 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)rcv_Ratio4500,
							0,
							0
						}, 140, 2);
					}
					else
					{
						SendRs232Data(12, 8, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio4500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio4500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 70 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)rcv_Ratio4000,
							(byte)num,
							0,
							0
						}, 140, 2);
					}
					else
					{
						SendRs232Data(12, 9, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio5000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio5000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 65 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)rcv_Ratio5500,
							0,
							0
						}, 141, 2);
					}
					else
					{
						SendRs232Data(12, 10, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio5500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio5500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 60 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)rcv_Ratio5000,
							(byte)num,
							0,
							0
						}, 141, 2);
					}
					else
					{
						SendRs232Data(12, 11, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio6000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio6000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 55 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)rcv_Ratio6500,
							0,
							0
						}, 142, 2);
					}
					else
					{
						SendRs232Data(12, 12, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio6500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio6500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 50 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)rcv_Ratio6000,
							(byte)num,
							0,
							0
						}, 142, 2);
					}
					else
					{
						SendRs232Data(12, 13, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio7000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio7000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 5 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)rcv_Ratio7500,
							0,
							0
						}, 143, 2);
					}
					else
					{
						SendRs232Data(12, 14, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio7500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio7500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_Ratio7000,
						(byte)num,
						0,
						0
					}, 143, 2);
				}
				else
				{
					SendRs232Data(12, 15, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio8000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio8000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)rcv_Ratio8500,
						0,
						0
					}, 144, 2);
				}
				else
				{
					SendRs232Data(12, 16, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio8500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio8500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_Ratio8000,
						(byte)num,
						0,
						0
					}, 144, 2);
				}
				else
				{
					SendRs232Data(12, 17, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ratio9000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ratio9000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)num,
						0,
						0
					}, 145, 2);
				}
				else
				{
					SendRs232Data(12, 18, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void FAIF_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = FAIF.Text
			});
			if (NotNewBlue() || !promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (((num <= 1542 && num >= 0) || (num <= 9374 && num >= 8192)) && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 9, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LD_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LD.Text
			});
			if (NotNewBlue() || !promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 20000 && num >= 10 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 18, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LQ_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LQ.Text
			});
			if (NotNewBlue() || !promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 20000 && num >= 10 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 27, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (num >= -30 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)num,
							0,
							0
						}, 146, 2);
					}
					else
					{
						SendRs232Data(16, 1, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio1000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio1000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (num >= -30 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)rcv_nratio[3],
							0,
							0
						}, 147, 2);
					}
					else
					{
						SendRs232Data(16, 2, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio1500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio1500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (num >= -30 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)rcv_nratio[2],
							(byte)num,
							0,
							0
						}, 147, 2);
					}
					else
					{
						SendRs232Data(12, 3, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio2000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio2000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (num >= -30 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)rcv_nratio[5],
							0,
							0
						}, 148, 2);
					}
					else
					{
						SendRs232Data(16, 4, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio2500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio2500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (num >= -30 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)rcv_nratio[4],
							(byte)num,
							0,
							0
						}, 148, 2);
					}
					else
					{
						SendRs232Data(16, 5, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio3000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio3000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (num >= -30 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)rcv_nratio[7],
							0,
							0
						}, 149, 2);
					}
					else
					{
						SendRs232Data(16, 6, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio3500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio3500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (num >= -30 || !NotNewBlue())
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)rcv_nratio[6],
							(byte)num,
							0,
							0
						}, 149, 2);
					}
					else
					{
						SendRs232Data(16, 7, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio4000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio4000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)rcv_nratio[9],
						0,
						0
					}, 150, 2);
				}
				else
				{
					SendRs232Data(16, 8, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio4500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio4500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_nratio[8],
						(byte)num,
						0,
						0
					}, 150, 2);
				}
				else
				{
					SendRs232Data(16, 9, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio5000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio5000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)rcv_nratio[11],
						0,
						0
					}, 151, 2);
				}
				else
				{
					SendRs232Data(16, 10, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio5500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio5500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_nratio[10],
						(byte)num,
						0,
						0
					}, 151, 2);
				}
				else
				{
					SendRs232Data(16, 11, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio6000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio6000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)rcv_nratio[13],
						0,
						0
					}, 152, 2);
				}
				else
				{
					SendRs232Data(16, 12, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio6500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio6500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_nratio[12],
						(byte)num,
						0,
						0
					}, 152, 2);
				}
				else
				{
					SendRs232Data(16, 13, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio7000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio7000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)rcv_nratio[15],
						0,
						0
					}, 153, 2);
				}
				else
				{
					SendRs232Data(16, 14, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio7500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio7500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_nratio[14],
						(byte)num,
						0,
						0
					}, 153, 2);
				}
				else
				{
					SendRs232Data(16, 15, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio8000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio8000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)rcv_nratio[17],
						0,
						0
					}, 154, 2);
				}
				else
				{
					SendRs232Data(16, 16, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio8500_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio8500.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_nratio[16],
						(byte)num,
						0,
						0
					}, 154, 2);
				}
				else
				{
					SendRs232Data(16, 17, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NRatio9000_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NRatio9000.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 0)
				{
					num = -num;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)num,
						0,
						0
					}, 155, 2);
				}
				else
				{
					SendRs232Data(16, 18, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LowSpeedLineCurr_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LowSpeedLineCurr.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				num = (int)((float)(num * 128) / 100f + 0.5f);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						cfg50h,
						0,
						0
					}, 50, 2);
				}
				else
				{
					SendRs232Data(14, 1, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MidSpeedLineCurr_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MidSpeedLineCurr.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				num = (int)((float)(num * 128) / 100f + 0.5f);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						cfg50l,
						(byte)num,
						0,
						0
					}, 50, 2);
				}
				else
				{
					SendRs232Data(14, 2, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LowSpeedPhaseCurr_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LowSpeedPhaseCurr.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				num = (int)((float)(num * 128) / 100f + 0.5f);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						cfg51h,
						0,
						0
					}, 51, 2);
				}
				else
				{
					SendRs232Data(14, 3, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MidSpeedPhaseCurr_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MidSpeedPhaseCurr.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				num = (int)((float)(num * 128) / 100f + 0.5f);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						cfg51l,
						(byte)num,
						0,
						0
					}, 51, 2);
				}
				else
				{
					SendRs232Data(14, 4, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ThrottleLow_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ThrottleLow.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'V' });
			text = text.TrimEnd(new char[1] { 'v' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 20f);
				if (App.NewVersion)
				{
					byte[] data = new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(rcv_ThrottleHigh * 20f),
						0,
						0
					};
					if (num >= 0 && num <= 40)
					{
						WriteAddr(data, 8, 2);
					}
				}
				else
				{
					num++;
					if (num >= 1 && num <= 41)
					{
						SendRs232Data(18, 20, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ThrottleHigh_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ThrottleHigh.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'V' });
			text = text.TrimEnd(new char[1] { 'v' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 20f);
				if (App.NewVersion)
				{
					byte[] data = new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)(rcv_ThrottleLow * 20f),
						(byte)num,
						0,
						0
					};
					if (num >= 50 && num <= 100)
					{
						WriteAddr(data, 8, 2);
					}
				}
				else
				{
					num++;
					if (num >= 51 && num <= 101)
					{
						SendRs232Data(18, 21, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LowVolProtect_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LowVolProtect.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'V' });
			text = text.TrimEnd(new char[1] { 'v' });
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 10f);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 31, 2);
				}
				else
				{
					num++;
					SendRs232Data(18, 12, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MotorTempProtect_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MotorTempProtect.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '°„' });
			text = text.TrimEnd(new char[1] { 'C' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 180)
				{
					num = 180;
				}
				if (num < 100)
				{
					num = 100;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)rcv_MotorTempRestore,
						0,
						0
					}, 132, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MotorTempRestore_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MotorTempRestore.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '°„' });
			text = text.TrimEnd(new char[1] { 'C' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num > 160)
				{
					num = 160;
				}
				if (num < 80)
				{
					num = 80;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_MotorTempProtect,
						(byte)num,
						0,
						0
					}, 132, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SpeedKP_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SpeedKP.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 128)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)rcv_SpeedKI,
							(byte)num,
							0,
							0
						}, 7, 2);
					}
					else
					{
						SendRs232Data(8, 1, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SpeedKI_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SpeedKI.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num >= 1 && num <= 128)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)rcv_SpeedKP,
							0,
							0
						}, 7, 2);
					}
					else
					{
						num++;
						SendRs232Data(18, 19, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MaxKI_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MaxKI.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num >= 1 && num <= 24)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)rcv_StartKP,
							0,
							0
						}, 16, 2);
					}
					else
					{
						SendRs232Data(18, 31, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MidKI_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MidKI.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num >= 1 && num <= 16)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)rcv_StartKI,
							(byte)num,
							0,
							0
						}, 15, 2);
					}
					else
					{
						SendRs232Data(18, 30, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void StartKI_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = StartKI.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num >= 1 && num <= 8)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)rcv_MidKI,
							0,
							0
						}, 15, 2);
					}
					else
					{
						SendRs232Data(18, 29, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void AN_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = AN.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				int num2 = num + 1;
				if (num2 >= 1 && num2 <= 32)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)((cfg156l & 0xE0) + num),
							cfg156h,
							0,
							0
						}, 156, 2);
					}
					else
					{
						SendRs232Data(15, 7, (byte)num2, (byte)(num2 >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LM_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LM.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				int num2 = num + 1;
				if (num2 >= 5 && num2 <= 83)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							cfg156l,
							(byte)((cfg156h & 0x80) + num),
							0,
							0
						}, 156, 2);
					}
					else
					{
						SendRs232Data(15, 10, (byte)num2, (byte)(num2 >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MOE_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("MOE:", "cancel", "0-Enable", "1-Disable")) : (await DisplayActionSheet("MOE:", "cancel", "0-ø™∆Ù", "1-πÿ±’")));
			if (!(text != "cancel") || string.IsNullOrWhiteSpace(text))
			{
				return;
			}
			text = text.Substring(0, 1);
			int num = Convert.ToInt16(text);
			if (num >= 0 && num <= 1)
			{
				config_word0 = rconfig_word0 | 1;
				config_word1 = rconfig_word1 | 1;
				if (num == 1)
				{
					config_word1 |= 64;
				}
				else
				{
					config_word1 &= 191;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)config_word0,
						(byte)config_word1,
						0,
						0
					}, 124, 2);
				}
				else
				{
					SendRs232Data(17, 5, (byte)config_word0, (byte)config_word1);
				}
			}
		}

		private async void ZeroSwitch_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("0SpeedSwitch:", "cancel", "0-Invalid", "1-Valid")) : (await DisplayActionSheet("0ÀŸ«–ªª:", "cancel", "0-Œﬁ–ß", "1-”––ß")));
			if (!(text != "cancel") || string.IsNullOrWhiteSpace(text))
			{
				return;
			}
			text = text.Substring(0, 1);
			int num = Convert.ToInt16(text);
			if (num >= 0 && num <= 1)
			{
				config_word0 = rconfig_word0 | 1;
				config_word1 = rconfig_word1 | 1;
				if (num == 1)
				{
					config_word1 |= 8;
				}
				else
				{
					config_word1 &= 247;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)config_word0,
						(byte)config_word1,
						0,
						0
					}, 124, 2);
				}
				else
				{
					SendRs232Data(17, 5, (byte)config_word0, (byte)config_word1);
				}
			}
		}

		private async void WeakA_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Weak Characteristic:", "cancel", "0-Fast", "1-Middle", "2-Slowly")) : (await DisplayActionSheet("»ı¥≈Ãÿ–‘:", "cancel", "0-øÏ", "1-÷–", "2-¬˝")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((cfg26l & 0xCF) + (num << 4)),
						cfg26h,
						0,
						0
					}, 26, 2);
				}
				else
				{
					num = flashdata34 + 1 + (num << 2);
					SendRs232Data(18, 15, (byte)num, (byte)(num >> 8));
				}
			}
		}

		private async void WeakTime_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Weak Response:", "cancel", "0", "1", "2", "3", "4", "5", "6", "7-None")) : (await DisplayActionSheet("»ı¥≈œÏ”¶:", "cancel", "0", "1", "2", "3", "4", "5", "6", "7-None")));
			if (!(text != "cancel") || string.IsNullOrWhiteSpace(text))
			{
				return;
			}
			text = text.Substring(0, 1);
			int num = Convert.ToInt16(text);
			if (num >= 0 && num <= 7)
			{
				config_word0 = rconfig_word0 | 1;
				config_word1 = rconfig_word1 | 1;
				config_word0 &= 241;
				config_word0 |= num << 1;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)config_word0,
						(byte)config_word1,
						0,
						0
					}, 124, 2);
				}
				else
				{
					SendRs232Data(17, 5, (byte)config_word0, (byte)config_word1);
				}
			}
		}

		private async void QuickDown_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Release Throttle:", "cancel", "0", "1", "2", "3", "4", "5", "6", "7")) : (await DisplayActionSheet("ªÿ”Õ√≈:", "cancel", "0", "1", "2", "3", "4", "5", "6", "7")));
			if (!(text != "cancel") || string.IsNullOrWhiteSpace(text))
			{
				return;
			}
			text = text.Substring(0, 1);
			int num = Convert.ToInt16(text);
			if (num >= 0 && num <= 7)
			{
				config_word0 = rconfig_word0 | 1;
				config_word1 = rconfig_word1 | 1;
				config_word0 &= 31;
				config_word0 |= num << 5;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)config_word0,
						(byte)config_word1,
						0,
						0
					}, 124, 2);
				}
				else
				{
					SendRs232Data(17, 5, (byte)config_word0, (byte)config_word1);
				}
			}
		}

		private async void Max_Acc_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Max_Acc.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num >= 2 && num <= 224)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)(num >> 8),
							0,
							0
						}, 47, 2);
					}
					else
					{
						SendRs232Data(18, 28, (byte)num, 136);
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void FullBattCoeff_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = FullBattCoeff.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num >= 1024 && num <= 1536)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)(num >> 8),
							0,
							0
						}, 14, 2);
					}
					else
					{
						SendRs232Data(18, 18, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ZeroBattCoeff_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ZeroBattCoeff.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num >= 768 && num <= 1024)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)(num >> 8),
							0,
							0
						}, 13, 2);
					}
					else
					{
						SendRs232Data(18, 17, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SpeedAnalog_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SpeedAnalog.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			if (bms)
			{
				text = text.TrimEnd(new char[1] { 'A' });
				text = text.TrimEnd(new char[1] { 'a' });
				try
				{
					int num = Convert.ToInt16(text);
					if (num >= 2 && num <= 2000)
					{
						SendRs232Data(17, 20, (byte)num, (byte)(num >> 8));
					}
					return;
				}
				catch (FormatException)
				{
					UserDialogs.Instance.Toast("FormatException Input");
					return;
				}
			}
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'P' });
			text = text.TrimEnd(new char[1] { 'p' });
			text = text.TrimEnd(new char[1] { 'R' });
			text = text.TrimEnd(new char[1] { 'r' });
			try
			{
				int num2 = Convert.ToInt16(text);
				if (rcv_PolePairs >= 16)
				{
					num2 = num2 * rcv_PolePairs / 4;
				}
				if (num2 >= 500 && num2 <= 32767)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num2,
							(byte)(num2 >> 8),
							0,
							0
						}, 46, 2);
					}
					else
					{
						SendRs232Data(17, 4, (byte)num2, (byte)(num2 >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SpeedPulse_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Speed Pulses:", "cancel", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31")) : (await DisplayActionSheet("ÀŸ∂»¬ˆ≥Â:", "cancel", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						cfg26l,
						(byte)((cfg26h & 0xE0) + num),
						0,
						0
					}, 26, 2);
				}
				else
				{
					SendRs232Data(18, 16, (byte)num, (byte)(num >> 8));
				}
			}
		}

		private async void AccCoeff_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("ECO Acc:", "cancel", "1", "2", "3", "4", "5", "6", "7", "8")) : (await DisplayActionSheet("æ≠º√º”ÀŸ:", "cancel", "1", "2", "3", "4", "5", "6", "7", "8")));
			if (!(text != "cancel") || string.IsNullOrWhiteSpace(text))
			{
				return;
			}
			int num = Convert.ToInt16(text);
			if (App.NewVersion)
			{
				if (rcv_AccCoeff != 0)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						cfg190l,
						(byte)((cfg190h & 0xF) + (num << 4)),
						0,
						0
					}, 190, 2);
				}
			}
			else
			{
				SendRs232Data(11, 1, (byte)num, (byte)(num >> 8));
			}
		}

		private async void BrakeConfig_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Brake:", "cancel", "0-StopWhenGround", "1-StopWhenFloat", "2-P+Stop", "3-P+StopGnd", "4-P+Disabled", "5-LinearBrake", "6-P+LineBrake", "7-Disabled")) : (await DisplayActionSheet("…≤≥µ:", "cancel", "0-∏°ø’––≥µ", "1-∏°ø’∂œµÁ", "2-P+∏°ø’––≥µ", "3-P+∏°ø’∂œµÁ", "4-P+Œﬁ–ß", "5-œﬂ–‘…≤≥µ", "6-P+œﬂ–‘…≤≥µ", "7-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				num &= 0x1F;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((cfg11l & 0xF0) + num),
						cfg11h,
						0,
						0
					}, 11, 2);
				}
				else
				{
					num++;
					SendRs232Data(15, 4, (byte)num, 2);
				}
			}
		}

		private async void PC13Config_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = (App.NewVersion ? ((!App.CN) ? (await DisplayActionSheet("Response Mode:", "cancel", "0-Normal Response", "1-Race Response")) : (await DisplayActionSheet("œÏ”¶ƒ£ Ω:", "cancel", "0-’˝≥£œÏ”¶", "1-»¸µ¿œÏ”¶"))) : ((!App.CN) ? (await DisplayActionSheet("PC13:", "cancel", "0-Stop When Connect to Ground", "1-Stop When Disconnect", "2-Cruise When Disconnect", "3-Cruise When Connecto to Ground", "4-Disabled")) : (await DisplayActionSheet("PC13:", "cancel", "0-∏°ø’––≥µ", "1-∏°ø’∂œµÁ", "2-∏°ø’—≤∫Ω", "3-Ω”µÿ—≤∫Ω", "4-Œﬁ–ß"))));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					num = (num & 1) << 3;
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						cfg11l,
						(byte)((cfg11h & 0xF7) + num),
						0,
						0
					}, 11, 2);
				}
				else
				{
					num &= 0x1F;
					num++;
					SendRs232Data(15, 5, (byte)num, 3);
				}
			}
		}

		private async void ParkConfig_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Park:", "cancel", "0-ReversePark", "1-SwitchPark", "3-SlowDownPark", "2-Disabled")) : (await DisplayActionSheet("◊§∆¬:", "cancel", "0-∑¿∫Û¡Ô", "1-ø™πÿ◊§∆¬", "3-ª∫Ωµ◊§∆¬", "2-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						cfg11l,
						(byte)((cfg11h & 0x9F) + (num << 5)),
						0,
						0
					}, 11, 2);
				}
				else
				{
					num = ((num == 0) ? 1 : 2);
					SendRs232Data(18, 14, (byte)num, (byte)(num >> 8));
				}
			}
		}

		private async void CurrFD_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Curr Anti-theft:", "cancel", "0-Invalid", "1-Valid")) : (await DisplayActionSheet("µÁ¡˜∑¿µ¡:", "cancel", "0-Œﬁ–ß", "1-”––ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						cfg11l,
						(byte)((cfg11h & 0xEF) + (num << 4)),
						0,
						0
					}, 11, 2);
				}
			}
		}

		private async void PulseFD_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Anti-theft Pulse:", "cancel", "0:Invalid", "1:Anti-Theft 1 Type", "2:Anti-Theft 2 Type", "3:Anti-Theft 3 Type")) : (await DisplayActionSheet("∑¿µ¡¬ˆ≥Â:", "cancel", "0-Œﬁ–ß", "1-∑¿µ¡¬ˆ≥Â1¿‡–Õ", "2-∑¿µ¡¬ˆ≥Â2¿‡–Õ", "3-∑¿µ¡¬ˆ≥Â3¿‡–Õ")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_Arg2 & 0xF9) + (num << 1)),
						(byte)rcv_MorseCode,
						0,
						0
					}, 6, 2);
				}
			}
		}

		private async void Temp70_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Temp 70:", "cancel", "0", "1", "2", "3")) : (await DisplayActionSheet("Œ¬∂»70:", "cancel", "0", "1", "2", "3")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					byte[] array = new byte[8];
					num = (rcv_TaRlB9D0SP & 0xCF) + (num << 4);
					array[4] = (byte)rcv_NoCanCnt;
					array[5] = (byte)num;
					WriteAddr(array, 203, 2);
				}
			}
		}

		private async void FastRE_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Fast Rev:", "cancel", "0-Invalid", "1-Valid")) : (await DisplayActionSheet("øÏÀŸ∫ÛÕÀ:", "cancel", "0-Œﬁ–ß", "1-”––ß")));
			if (!(text != "cancel") || string.IsNullOrWhiteSpace(text))
			{
				return;
			}
			text = text.Substring(0, 1);
			int num = Convert.ToInt16(text);
			if (App.NewVersion)
			{
				byte[] array = new byte[8]
				{
					0,
					0,
					0,
					0,
					(byte)rconfig_word0,
					0,
					0,
					0
				};
				if (num == 0)
				{
					array[5] = (byte)(rconfig_word1 & 0xEF);
				}
				else
				{
					array[5] = (byte)((rconfig_word1 & 0xEF) + 16);
				}
				WriteAddr(array, 124, 2);
			}
		}

		private async void FollowConfig_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Follow:", "cancel", "0-Follow Enabled", "1-Disabled", "2-EABS when break valid", "3-EABS when Release Throttle")) : (await DisplayActionSheet("∏˙ÀÊ:", "cancel", "0-∏˙ÀÊ”––ß", "1-Œﬁ–ß", "2-µÁ◊”…≤≥µ", "3-ªÿ”Õ√≈…≤≥µ")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				num &= 0x1F;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((cfg26l & 0xFC) + num),
						cfg26h,
						0,
						0
					}, 26, 2);
				}
				else
				{
					num++;
					SendRs232Data(18, 13, (byte)num, (byte)(num >> 8));
				}
			}
		}

		private async void ECOConfig_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("ThrottleResponse:", "cancel", "0-Line", "1-Sport", "2-ECO")) : (await DisplayActionSheet("”Õ√≈œÏ”¶:", "cancel", "0-œﬂ–‘", "1-‘À∂Ø", "2-æ≠º√")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((cfg26l & 0xF3) + (num << 2)),
						cfg26h,
						0,
						0
					}, 26, 2);
				}
				else
				{
					num = (flashdata34 & 0xFC) + num + 1;
					SendRs232Data(18, 15, (byte)num, (byte)(num >> 8));
				}
			}
		}

		private void checkblue()
		{
			App.CheckBlue = true;
			if (App.bms || App.rcv_NewBlueKey || m_ParaMode)
			{
				return;
			}
			if (App.custom == "BN" || App.custom == "CN" || App.custom == "XM" || App.custom == "XF" || App.custom == "SK" || App.custom == "XZ")
			{
				App.rcv_NewBlueKey = true;
				return;
			}
			if (rcv_kzqVersion0 >= 'H' && rcv_kzqVersion1 >= '3')
			{
				if (rcv_MOTORDIA == 1 || rcv_MOTORDIA == 5 || rcv_MOTORDIA == 6 || rcv_MOTORDIA == 7 || rcv_MOTORDIA == 8 || rcv_MOTORDIA == 9)
				{
					App.rcv_NewBlueKey = true;
				}
			}
			else if (rcv_kzqVersion0 == 'G' || rcv_kzqVersion0 == '7')
			{
				if (!(App.custom == "ND"))
				{
					App.rcv_NewBlueKey = true;
				}
			}
			else if (rcv_kzqVersion0 == 'A' && rcv_kzqVersion1 >= '2')
			{
				if (!(App.custom == "ND"))
				{
					App.rcv_NewBlueKey = true;
				}
			}
			else if (rcv_kzqVersion0 == 'B' && rcv_kzqVersion1 >= '2' && !(App.custom == "ND"))
			{
				App.rcv_NewBlueKey = true;
			}
			if (App.localAgent == "Ohter" && DateTime.Now.Year <= 2024)
			{
				App.rcv_NewBlueKey = true;
			}
		}

		private async void OnButtonResetClicked(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			if (App.NewVersion)
			{
				string text = ((!App.CN) ? (await DisplayActionSheet("Restore Way:", "0-cancel", "1-Restore Product Config", "2-Use PIN10 Key Function Config", "3-Use PIN11 Key Function Config", "4-Use Auto Learn Default Config", "5-Use BackThrottle EABS Config", "6-Use Non-EABS Config", "7-Use XM Config", "8-Reset")) : (await DisplayActionSheet("ª÷∏¥∑Ω Ω:", "0-»°œ˚", "1-ª÷∏¥≥ˆ≥ß…Ë÷√", "2- π”√10Ω≈µÁ√≈π¶ƒ‹Ω≈≈‰÷√", "3- π”√11Ω≈µÁ√≈π¶ƒ‹Ω≈≈‰÷√", "4- π”√◊‘—ßœ∞ƒ¨»œ≤Œ ˝", "5- π”√ªÿ”Õ√≈…≤≥µƒ£ Ω≤Œ ˝", "6- π”√◊‘”…ª¨––ƒ¨»œ≤Œ ˝", "7- π”√XM…Ë÷√", "8-∏¥Œª")));
				if (string.IsNullOrWhiteSpace(text))
				{
					return;
				}
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				byte[] SendRS232L = new byte[8];
				switch (num)
				{
				case 1:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Restore Prouct Config", null, "Restore", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ª÷∏¥≥ˆ≥ß…Ë÷√£¨ª÷∏¥∫Û“™µ„±£¥Ê±®æØ≤≈ª·œ˚ ß", null, "ª÷∏¥", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						SendRS232L[5] = 8;
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				case 2:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Use PIN10 Key Function Config", null, "Confirm", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ π”√10Ω≈µÁ√≈π¶ƒ‹Ω≈≈‰÷√", null, " π”√", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						SendRS232L[5] = 9;
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				case 3:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Use PIN11 Key Function Config", null, "Confirm", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ π”√11Ω≈µÁ√≈π¶ƒ‹Ω≈≈‰÷√", null, " π”√", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						SendRS232L[5] = 10;
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				case 4:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Use Auto Learn Default Config", null, "Confirm", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ π”√◊‘—ßœ∞ƒ¨»œ≤Œ ˝", null, " π”√", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						SendRS232L[5] = 11;
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				case 5:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Use BackThrottle EABS Config", null, "Confirm", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ π”√ªÿ”Õ√≈…≤≥µƒ£ Ω≤Œ ˝", null, " π”√", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						SendRS232L[5] = 12;
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				case 6:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Use Non-EABS Config", null, "Confirm", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ π”√◊‘”…ª¨––ƒ¨»œ≤Œ ˝", null, " π”√", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						SendRS232L[5] = 13;
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				case 7:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Use XM Config", null, "Confirm", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´ π”√XM≤Œ ˝", null, " π”√", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						SendRS232L[5] = 14;
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				case 8:
					if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Reset Controller Data", null, "Reset", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´∏¥Œªøÿ÷∆∆˜", null, "∏¥Œª", "»°œ˚")))
					{
						SendRS232L[4] = 136;
						if (rcv_kzqVersion0 == 'I' || rcv_kzqVersion0 == 'J' || rcv_kzqVersion0 == 'K' || rcv_kzqVersion0 == 'U' || rcv_kzqVersion0 == 'V' || rcv_kzqVersion0 == 'W')
						{
							SendRS232L[5] = 15;
						}
						else
						{
							SendRS232L[5] = 5;
						}
						WriteAddr(SendRS232L, 160, 2);
					}
					break;
				}
			}
			else if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Will Reset Controller Data", null, "Reset", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("º¥Ω´∏¥Œªøÿ÷∆∆˜", null, "∏¥Œª", "»°œ˚")))
			{
				SendRs232Data(4, 1, 0, 0);
			}
		}

		private async void ButtonMode_Clicked(object sender, EventArgs e)
		{
			await base.Navigation.PopModalAsync();
		}

		private void RowText7_Clicked(object sender, EventArgs e)
		{
			FOCProtect.IsVisible = !FOCProtect.IsVisible;
		}

		private void RowText11_Clicked(object sender, EventArgs e)
		{
			GirdText11.IsVisible = !GirdText11.IsVisible;
		}

		private async void ButtonSaveName_Clicked(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			try
			{
				bool flag;
				if (App.CN)
				{
					if (((rcv_GPara0 >> 12) & 3) != 2)
					{
						string text = await DisplayPromptAsync("√‹¬Î±£ª§", "øÿ÷∆∆˜ ‹«ø√‹¬Î±£ª§£¨«Î ‰»Î√‹¬Î", "»∑»œ", "»°œ˚", null, 30);
						if (text != null)
						{
							MessagingCenter.Send(this, "InputPassword", Encoding.UTF8.GetBytes(text));
						}
						return;
					}
					flag = await UserDialogs.Instance.ConfirmAsync("º¥Ω´±£¥Êøÿ÷∆∆˜ ˝æ›", null, "±£¥Ê", "»°œ˚");
				}
				else
				{
					if (((rcv_GPara0 >> 12) & 3) != 2)
					{
						string text2 = await DisplayPromptAsync("Password Protect", "Device password protected,please input password", "OK", "CANCEL", null, 30);
						if (text2 != null)
						{
							MessagingCenter.Send(this, "InputPassword", Encoding.UTF8.GetBytes(text2));
						}
						return;
					}
					flag = await UserDialogs.Instance.ConfirmAsync("Will Save Controller Data", null, "Save", "Cancel");
				}
				if (!flag)
				{
					return;
				}
				DateTime now = DateTime.Now;
				if (App.NewVersion)
				{
					if (App.NewData == uint.MaxValue)
					{
						int num = 0;
						for (int i = 0; i < 156; i++)
						{
							App.wflash[num] = (byte)App.gflash[i];
							num++;
							App.wflash[num] = (byte)(App.gflash[i] >> 8);
							num++;
						}
						num = 0;
						for (int j = 0; j < 192; j++)
						{
							App.cflash[num] = (byte)App.gcflash[j];
							num++;
							App.cflash[num] = (byte)(App.gcflash[j] >> 8);
							num++;
						}
						if (App.autosave != "0")
						{
							try
							{
								App.recordtime = now.ToString("yyyyMMdd_HH:mm:ss");
								string path = App.ModelName + "_" + App.recordtime + ".heb";
								string path2 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), path);
								byte[] array = new byte[696];
								App.wflash.CopyTo(array, 0);
								App.cflash.CopyTo(array, 312);
								File.WriteAllBytes(path2, array);
							}
							catch (Exception)
							{
								if (App.CN)
								{
									UserDialogs.Instance.Alert("º«¬º≤ªƒ‹◊‘∂Ø±£¥Ê£¨«ÎºÏ≤ÈŒƒº˛¥Ê¥¢»®œﬁ£°");
								}
								else
								{
									UserDialogs.Instance.Alert("Can not save record,Please check App file storage permission.");
								}
							}
						}
						App.HasParaFile = 0;
						App.NewData = 0u;
					}
					byte[] array2 = new byte[12];
					byte[] array3 = new byte[8];
					array2[4] = (byte)(now.Year - 2000);
					array2[5] = (byte)now.Month;
					array2[6] = (byte)now.Day;
					array2[7] = (byte)now.Hour;
					array2[8] = (byte)now.Minute;
					array2[9] = (byte)now.Second;
					WriteAddr(array2, 34, 6);
					Thread.Sleep(10);
					array3[4] = 136;
					array3[5] = 4;
					WriteAddr(array3, 160, 2);
				}
				else if (!App.OldPassed && App.Mark2Old && now.Month < 9 && rcv_kzqVersion0 != 'B')
				{
					string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
					string source = App.ModelName.Substring(0, 8);
					source = ((!Enumerable.Contains(source, '_')) ? (App.ModelName.Substring(0, 13) + ".hex") : (App.ModelName.Substring(0, 12) + ".hex"));
					string destinationPath = $"{folderPath}/{source}";
					if (File.Exists(destinationPath))
					{
						if ((!App.CN) ? (await UserDialogs.Instance.ConfirmAsync("Convtroller version is too low, update or not?", null, "Update", "Cancel")) : (await UserDialogs.Instance.ConfirmAsync("øÿ÷∆∆˜∞Ê±æπ˝µÕ£¨ «∑Ò…˝º∂◊Ó–¬∞Ê±æ£ø", null, "…˝º∂", "»°œ˚")))
						{
							App.fileName = destinationPath;
							App.UpdateNum = 8;
						}
					}
					else
					{
						if (App.CN)
						{
							UserDialogs.Instance.Alert("øÿ÷∆∆˜∞Ê±æπ˝µÕ£¨»±…Ÿ–¬∞ÊŒƒº˛£¨«Î¡™œµ≥ßº“°£");
						}
						else
						{
							UserDialogs.Instance.Alert("Convtroller version is too low, no update file, please contact manufacturer.");
						}
						App.UpdateNum = 1;
					}
				}
				else
				{
					SendRs232Data(21, (byte)(now.Hour + 1), (byte)(now.Minute + 1), (byte)(now.Second + 1));
					Thread.Sleep(10);
					SendRs232Data(20, (byte)(now.Year - 2000), (byte)now.Month, (byte)now.Day);
					Thread.Sleep(10);
					SendRs232Data(5, 1, 95, 95);
				}
			}
			catch (Exception ex2)
			{
				UserDialogs.Instance.Toast(ex2.ToString());
			}
		}

		private async void MidSpeed_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MidSpeed.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 'P' });
			text = text.TrimEnd(new char[1] { 'p' });
			text = text.TrimEnd(new char[1] { 'R' });
			text = text.TrimEnd(new char[1] { 'r' });
			try
			{
				int num = Convert.ToInt16(text);
				if (rcv_PolePairs >= 16)
				{
					num = num * rcv_PolePairs / 4;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 42, 2);
				}
				else
				{
					SendRs232Data(17, 6, (byte)num, (byte)(num >> 8));
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void GearConfig_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = (App.NewVersion ? ((!App.CN) ? (await DisplayActionSheet("Gear:", "cancel", "0-Default N", "1-Default D", "2-Disabled", "3-Default Anti-theft", "4-Default Button High", "5-Default Button Middle")) : (await DisplayActionSheet("µµŒª∑Ω Ω:", "cancel", "0-ƒ¨»œø’µµ", "1-ƒ¨»œ«∞Ω¯", "2-µµŒªŒﬁ–ß", "3-ƒ¨»œ∑¿µ¡", "4-ƒ¨»œµ„∂Ø∏ﬂ", "5-ƒ¨»œµ„∂Ø÷–"))) : ((!App.CN) ? (await DisplayActionSheet("Gear:", "cancel", "0-Default N", "1-Default D", "2-Disabled", "3-Default Button Low", "4-Default Button High", "5-Default Button Middle")) : (await DisplayActionSheet("µµŒª∑Ω Ω:", "cancel", "0-ƒ¨»œø’µµ", "1-ƒ¨»œ«∞Ω¯", "2-µµŒªŒﬁ–ß", "3-ƒ¨»œµ„∂ØµÕ", "4-ƒ¨»œµ„∂Ø∏ﬂ", "5-ƒ¨»œµ„∂Ø÷–"))));
			if (!(text != "cancel") || string.IsNullOrWhiteSpace(text))
			{
				return;
			}
			text = text.Substring(0, 1);
			int num = Convert.ToInt16(text);
			if (App.NewVersion)
			{
				WriteAddr(new byte[8]
				{
					0,
					0,
					0,
					0,
					cfg26l,
					(byte)((cfg26h & 0x1F) + (num << 5)),
					0,
					0
				}, 26, 2);
			}
			else
			{
				num++;
				if (num == 5)
				{
					num = 8;
				}
				SendRs232Data(13, (byte)num, 68, 95);
			}
		}

		private async void SpeedMeterConfig_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Speedometer Mode:", "cancel", "0-Pulse", "1-Analog", "2-Isolated Pulse")) : (await DisplayActionSheet("ÀŸ∂»±Ì∑Ω Ω:", "cancel", "0-¬ˆ≥Â", "1-ƒ£ƒ‚", "2-ÀŸ∂»¬ˆ≥Â")));
			if (!(text != "cancel") || string.IsNullOrWhiteSpace(text))
			{
				return;
			}
			text = text.Substring(0, 1);
			int num = Convert.ToInt16(text);
			if (App.NewVersion)
			{
				byte[] array = new byte[8]
				{
					0,
					0,
					0,
					0,
					(byte)rconfig_word0,
					0,
					0,
					0
				};
				switch (num)
				{
				case 0:
					array[5] = (byte)(rconfig_word1 & 0xFC);
					break;
				case 1:
					array[5] = (byte)((rconfig_word1 & 0x7E) + 129);
					break;
				default:
					array[5] = (byte)((rconfig_word1 & 0xFC) + 3);
					break;
				}
				WriteAddr(array, 124, 2);
			}
			else
			{
				switch (num)
				{
				case 0:
					num |= 0x101;
					num &= 0x7DFF;
					break;
				case 1:
					num |= 0x8101;
					num &= 0xFDFF;
					break;
				default:
					num |= 0x301;
					num &= 0x7FFF;
					break;
				}
				SendRs232Data(17, 5, (byte)num, (byte)(num >> 8));
			}
		}

		private async void BattRatedCap1_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BattRatedCap1.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'A' });
			text = text.TrimEnd(new char[1] { 'H' });
			text = text.TrimEnd(new char[1] { 'a' });
			text = text.TrimEnd(new char[1] { 'h' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num >= 20 && num <= 250)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)(num >> 8),
							0,
							0
						}, 28, 2);
					}
					else
					{
						SendRs232Data(15, 15, (byte)num, 136);
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void CurveTime_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = CurveTime.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 's' });
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'S' });
			try
			{
				int num = Convert.ToInt16(text);
				num /= 2;
				num--;
				if (num <= 1000 && num >= 4)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)(num >> 8),
							0,
							0
						}, 10, 2);
					}
					else
					{
						SendRs232Data(18, 34, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void PhaseExchange_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Phase Exchange:", "cancel", "0-No Exchange", "1-Exchange")) : (await DisplayActionSheet("Ωªªªœ‡œﬂ:", "cancel", "0-≤ªΩªªª", "1-Ωªªª")));
			if (!(text != "cancel") || string.IsNullOrWhiteSpace(text))
			{
				return;
			}
			text = text.Substring(0, 1);
			int num = Convert.ToInt16(text);
			if (App.NewVersion)
			{
				byte[] array = new byte[8];
				if (num != 0)
				{
					array[4] = (byte)(cfg11l | 0x80);
				}
				else
				{
					array[4] = (byte)(cfg11l & 0x7F);
				}
				array[5] = cfg11h;
				WriteAddr(array, 11, 2);
			}
		}

		private async void AlarmDelay_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = AlarmDelay.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 's' });
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'S' });
			try
			{
				int num = Convert.ToInt32(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 19, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void FwReRatio_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = FwReRatio.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt32(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 30, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void VolSelectRatio_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = VolSelectRatio.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 250 && num >= 64 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 159, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void RelayOut_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = RelayOut.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt32(text);
				if (num <= 1 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((cfg156l & 0xDF) + (num << 5)),
						cfg156h,
						0,
						0
					}, 156, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BCEnable_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BCEnable.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 1 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_RelayDelay & 0xFE) + num),
						(byte)(rcv_RelayDelay >> 8),
						0,
						0
					}, 33, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SeatEnable_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SeatEnable.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 1 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_RelayDelay & 0xFD) + (num << 1)),
						(byte)(rcv_RelayDelay >> 8),
						0,
						0
					}, 33, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void PEnable_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = PEnable.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 1 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_RelayDelay & 0xFB) + (num << 2)),
						(byte)(rcv_RelayDelay >> 8),
						0,
						0
					}, 33, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void AutoBackP_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = AutoBackP.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 1 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_RelayDelay & 0xF7) + (num << 3)),
						(byte)(rcv_RelayDelay >> 8),
						0,
						0
					}, 33, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void CruiseEnable_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = CruiseEnable.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 1 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_RelayDelay & 0xEF) + (num << 4)),
						(byte)(rcv_RelayDelay >> 8),
						0,
						0
					}, 33, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void EABSEnable_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = EABSEnable.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 1 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_RelayDelay & 0xDF) + (num << 5)),
						(byte)(rcv_RelayDelay >> 8),
						0,
						0
					}, 33, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void TuixingEnable_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = TuixingEnable.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 1 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_RelayDelay & 0xBF) + (num << 6)),
						(byte)(rcv_RelayDelay >> 8),
						0,
						0
					}, 33, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ForseTheft_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ForseTheft.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 1 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)((rcv_RelayDelay & 0x7F) + (num << 7)),
						(byte)(rcv_RelayDelay >> 8),
						0,
						0
					}, 33, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void OverSpeedAlm_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = OverSpeedAlarm.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 1 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_RelayDelay,
						(byte)(((rcv_RelayDelay >> 8) & 0xFE) + num),
						0,
						0
					}, 33, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ParkDisableBreak_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ParkDisableBreak.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 1 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_RelayDelay,
						(byte)(((rcv_RelayDelay >> 8) & 0xFD) + (num << 1)),
						0,
						0
					}, 33, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void GearRemember_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = RememberGear.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 1 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_RelayDelay,
						(byte)(((rcv_RelayDelay >> 8) & 0xFB) + (num << 2)),
						0,
						0
					}, 33, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BackEnable_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BackEnable.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 1 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_RelayDelay,
						(byte)(((rcv_RelayDelay >> 8) & 0xDF) + (num << 6)),
						0,
						0
					}, 33, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void RelayDelay1S_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = RelayDelay1S.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 1 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_RelayDelay,
						(byte)(((rcv_RelayDelay >> 8) & 0x7F) + (num << 7)),
						0,
						0
					}, 33, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void RelayDelay_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = RelayDelay.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { 'm' });
			text = text.TrimEnd(new char[1] { 's' });
			text = text.TrimEnd(new char[1] { 'M' });
			text = text.TrimEnd(new char[1] { 'S' });
			try
			{
				int num = Convert.ToInt32(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 33, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ThrottleInsert_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ThrottleInsert.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt32(text);
				if (num > 65535 || num < 0)
				{
					UserDialogs.Instance.Toast("error range");
				}
				else if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 200, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ReAcc_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ReAcc.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt32(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 207, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SpdPulseNum_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SpdPulseNum.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				uint num = Convert.ToUInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 53, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void IsinStart_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = IsinStart.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt32(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 199, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void FollowSpeed_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = FollowSpeed.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)rcv_ReCurrRatio,
						0,
						0
					}, 201, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BlockTime_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BlockTime.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 52, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void InverseTime_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = InverseTime.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt32(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 194, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ParkDiff_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ParkDiff.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt32(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 198, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ParkCoeff_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ParkCoeff.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 15 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_MinSpeedCapCoeff,
						(byte)(num + (rcv_BatSel << 4)),
						0,
						0
					}, 206, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ParkTime_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ParkTime.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				num *= 500;
				if (num <= 65535 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 193, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BstTime_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BstTime.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				num *= 500;
				if (num <= 65535 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 191, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BstRelease_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BstRelease.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				num *= 500;
				if (num <= 65535 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 192, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void FreeThrottle_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = FreeThrottle.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 192 && num >= 0)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)(num >> 8),
							0,
							0
						}, 44, 2);
					}
					else
					{
						SendRs232Data(18, 33, (byte)num, (byte)(num >> 8));
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		public int hexstr_to_uint32(string str)
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			if (str == null)
			{
				return 0;
			}
			int length = str.Length;
			if (length > 10 || length == 0)
			{
				return 0;
			}
			if (length > 1)
			{
				if (str[1] == 'x' || str[1] == 'X')
				{
					int num4 = length - 2;
					for (num2 = 2; num2 < length; num2++)
					{
						if (str[num2] >= '0' && str[num2] <= '9')
						{
							num3 = str[num2] - 48;
						}
						if (str[num2] >= 'A' && str[num2] <= 'F')
						{
							num3 = str[num2] - 65 + 10;
						}
						if (str[num2] >= 'a' && str[num2] <= 'f')
						{
							num3 = str[num2] - 97 + 10;
						}
						num4--;
						num += num3 << num4 * 4;
					}
				}
				else
				{
					int num4 = length;
					for (num2 = 0; num2 < length; num2++)
					{
						if (str[num2] >= '0' && str[num2] <= '9')
						{
							num3 = str[num2] - 48;
						}
						if (str[num2] >= 'A' && str[num2] <= 'F')
						{
							num3 = str[num2] - 65 + 10;
						}
						if (str[num2] >= 'a' && str[num2] <= 'f')
						{
							num3 = str[num2] - 97 + 10;
						}
						num4--;
						num += num3 << num4 * 4;
					}
				}
			}
			else
			{
				if (str[0] >= '0' && str[0] <= '9')
				{
					num3 = str[0] - 48;
				}
				if (str[0] >= 'A' && str[0] <= 'F')
				{
					num3 = str[0] - 65 + 10;
				}
				if (str[0] >= 'a' && str[0] <= 'f')
				{
					num3 = str[0] - 97 + 10;
				}
				num += num3;
			}
			return num;
		}

		private async void ReCurrRatio_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ReCurrRatio.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 255 && num >= 32 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_ExitFollowSpeed,
						(byte)num,
						0,
						0
					}, 201, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void RateRatio_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = RateRatio.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = (int)((Convert.ToSingle(text) + 0.0001f) * 1000f);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 212, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void WheelRadius_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = WheelRadius.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_WheelRatio,
						(byte)num,
						0,
						0
					}, 210, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void WheelWidth_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = WheelWidth.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_DataVoltage4,
						(byte)num,
						0,
						0
					}, 211, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void WheelRatio_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = WheelRatio.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)rcv_WheelRadius,
						0,
						0
					}, 210, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LearnThrottle_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LearnThrottle.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)rcv_SpeedLowCap,
						0,
						0
					}, 204, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LearnVol_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LearnVol.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 28000 && num >= 10000 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 196, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LearnVoh_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LearnVoh.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 28000 && num >= 10000 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 197, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void LowCapLimit_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = LowCapLimit.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 80 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_LearnThrottle,
						(byte)num,
						0,
						0
					}, 204, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Position_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Angle Position:", "cancel", " 0-120Hall", " 1-Encoder", " 2-Encoder4096", " 3-Encoder8192", " 4-Encoder4", " 5-Encoder5", " 6-Encoder6", " 7-Encoder7", " 8-Encoder8", " 9-Encoder9", "10-Encoder10", "11-Encoder11", "12-Encoder12", "13-AbsoluteEncoderL", "14-AbsoluteEncoderH", "15-ResolverEncoder", "16-60Hall")) : (await DisplayActionSheet("Œª÷√¥´∏–∆˜:", "cancel", " 0-120°„ªÙ∂˚", " 1-≥£πÊ±‡¬Î∆˜", " 2-±‡¬Î∆˜4096", " 3-±‡¬Î∆˜8192", " 4-±‡¬Î∆˜4", " 5-±‡¬Î∆˜5", " 6-±‡¬Î∆˜6", " 7-±‡¬Î∆˜7", " 8-±‡¬Î∆˜8", " 9-±‡¬Î∆˜9", "10-±‡¬Î∆˜10", "11-±‡¬Î∆˜11", "12-±‡¬Î∆˜12", "13-æ¯∂‘÷µ±‡¬Î∆˜L", "14-æ¯∂‘÷µ±‡¬Î∆˜H", "15-±‡¬Î∆˜15", "16-60°„ªÙ∂˚")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						0,
						0,
						0
					}, 209, 2);
				}
			}
		}

		private async void BoostPin_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Boost Pin:", "cancel", " 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Invalid")) : (await DisplayActionSheet("Boost Pin:", "cancel", " 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				num = seltable[num];
				num = (rcv_BstXhBcP & 0xFFF) + (num << 12);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 105, 2);
				}
			}
		}

		private async void XHPin_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Cruise Pin:", "cancel", " 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Invalid")) : (await DisplayActionSheet("—≤∫Ω Pin:", "cancel", " 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				num = seltable[num];
				num = (rcv_BstXhBcP & 0xF0FF) + (num << 8);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 105, 2);
				}
			}
		}

		private async void BCPin_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("SideStand Pin:", "cancel", " 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Invalid")) : (await DisplayActionSheet("±ﬂ≥≈ Pin:", "cancel", " 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				num = seltable[num];
				num = (rcv_BstXhBcP & 0xFF0F) + (num << 4);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 105, 2);
				}
			}
		}

		private async void PPin_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Pause Pin:", "cancel", " 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Invalid")) : (await DisplayActionSheet("Pµµ Pin:", "cancel", " 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				num = seltable[num];
				num = (rcv_BstXhBcP & 0xFFF0) + num;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 105, 2);
				}
			}
		}

		private async void FWPin_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Forward Pin:", "cancel", " 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Invalid")) : (await DisplayActionSheet("«∞Ω¯ Pin:", "cancel", " 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				num = seltable[num];
				num = (rcv_FwReSdhSdl & 0xFFF) + (num << 12);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 106, 2);
				}
			}
		}

		private async void REPin_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Backward Pin:", "cancel", " 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Invalid")) : (await DisplayActionSheet("∫ÛÕÀ Pin:", "cancel", " 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				num = seltable[num];
				num = (rcv_FwReSdhSdl & 0xF0FF) + (num << 8);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 106, 2);
				}
			}
		}

		private async void SDHPin_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("HighSpeed Pin:", "cancel", " 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Invalid")) : (await DisplayActionSheet("∏ﬂÀŸ Pin:", "cancel", " 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				num = seltable[num];
				num = (rcv_FwReSdhSdl & 0xFF0F) + (num << 4);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 106, 2);
				}
			}
		}

		private async void SDLPin_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("LowSpeed Pin:", "cancel", " 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Invalid")) : (await DisplayActionSheet("µÕÀŸ Pin:", "cancel", " 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				num = seltable[num];
				num = (rcv_FwReSdhSdl & 0xFFF0) + num;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 106, 2);
				}
			}
		}

		private async void SpeedLimitPin_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("SpeedLimit Pin:", "cancel", " 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Invalid")) : (await DisplayActionSheet("œﬁÀŸ Pin:", "cancel", " 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				num = seltable[num] + (rcv_OneKey_sel << 4);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_anglelearn,
						(byte)num,
						0,
						0
					}, 202, 2);
				}
			}
		}

		private async void OneKeyPairPin_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Repair Pin:", "cancel", " 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Invalid")) : (await DisplayActionSheet("“ªº¸–ﬁ∏¥ Pin:", "cancel", " 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				num = (seltable[num] << 4) + rcv_SpdLmt_sel;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_anglelearn,
						(byte)num,
						0,
						0
					}, 202, 2);
				}
			}
		}

		private async void SlowDown_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("SlowDown:", "cancel", "0None", "1", "2", "3", "4", "5", "6", "7")) : (await DisplayActionSheet("∂∏∆¬ª∫Ωµ:", "cancel", "0Œﬁ", "1", "2", "3", "4", "5", "6", "7")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				if (num <= 7 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						cfg11l,
						(byte)((cfg11h & 0xF8) + num),
						0,
						0
					}, 11, 2);
				}
			}
		}

		private async void CHGPin_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Charge Pin:", "cancel", " 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Invalid")) : (await DisplayActionSheet("≥‰µÁ Pin:", "cancel", " 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				num = seltable[num];
				num = (rcv_ChgFdSeatVol & 0xFFF) + (num << 12);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 107, 2);
				}
			}
		}

		private async void FDPin_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Steel Pin:", "cancel", " 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Invalid")) : (await DisplayActionSheet("∑¿µ¡ Pin:", "cancel", " 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				num = seltable[num];
				num = (rcv_ChgFdSeatVol & 0xF0FF) + (num << 8);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 107, 2);
				}
			}
		}

		private async void SEATPin_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("HighSpeed Pin:", "cancel", " 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Invalid")) : (await DisplayActionSheet("◊¯Õ∞ Pin:", "cancel", " 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				num = seltable[num];
				num = (rcv_ChgFdSeatVol & 0xFF0F) + (num << 4);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 107, 2);
				}
			}
		}

		private async void SwitchVolPin_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("LowSpeed Pin:", "cancel", " 0-NC", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Invalid")) : (await DisplayActionSheet("—°‘ÒµÁ—π Pin:", "cancel", " 0-≥£±’", " 1-PIN2", " 2-PIN3", " 3-PIN5", " 4-PIN8", " 5-PIN9", " 6-PIN14", " 7-PIN15", " 8-PIN17", " 9-PIN18", "10-PIN24", "11-PD1", "12-PB4", "13-Œﬁ–ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				num = seltable[num];
				num = (rcv_ChgFdSeatVol & 0xFFF0) + num;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 107, 2);
				}
			}
		}

		private async void SPModeConfig_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("HighLowSpeed:", "cancel", " 0-HighOnly", " 1-AddDec", " 2-ButtonHighLow", " 3-ButtonLowMid", " 4-Button3SpeedLow", " 5-Button3SpeedMid", " 6-Button3SpeedHigh", " 7-Button4SpeedLow", " 8-Button4Speed2", " 9-Button4Speed3", "10-Button4SpeedHigh", "11-Line3Speed", "12-CommGear", "13-CANGear", "14-Line3SpeedLow", "15-Line3SpeedHigh")) : (await DisplayActionSheet("∏ﬂµÕÀŸ:", "cancel", " 0-Ωˆ∏ﬂÀŸ", " 1-º”ºıµµ", " 2-µ„∂Ø∏ﬂµÕÀŸ", " 3-µ„∂ØµÕ÷–ÀŸ", " 4-µ„∂Ø»˝ÀŸµÕ", " 5-µ„∂Ø»˝ÀŸ÷–", " 6-µ„∂Ø»˝ÀŸ∏ﬂ", " 7-µ„∂ØÀƒÀŸµÕ", " 8-µ„∂ØÀƒÀŸ2", " 9-µ„∂ØÀƒÀŸ3", "10-µ„∂ØÀƒÀŸ∏ﬂ", "11-≤¶∂Ø»˝ÀŸ", "12-¥Æø⁄µ≤Œª", "13-CANµ≤Œª", "14-≤¶∂Ø»˝ÀŸµÕ", "15-≤¶∂Ø»˝ÀŸ∏ﬂ")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					byte[] array = new byte[8];
					num = (rcv_TaRlB9D0SP & 0xF0) + num;
					array[4] = (byte)rcv_NoCanCnt;
					array[5] = (byte)num;
					WriteAddr(array, 203, 2);
				}
			}
		}

		private async void LongBack_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Push RE:", "cancel", "0-Invalid", "1-Valid")) : (await DisplayActionSheet("≥§∞¥∫ÛÕÀ:", "cancel", "0-Œﬁ–ß", "1-”––ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					byte[] array = new byte[8];
					num = (rcv_TaRlB9D0SP & 0xBF) + (num << 6);
					array[4] = (byte)rcv_NoCanCnt;
					array[5] = (byte)num;
					WriteAddr(array, 203, 2);
				}
			}
		}

		private async void Max_Dec_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Max_Dec.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num >= 5 && num <= 224)
				{
					if (App.NewVersion)
					{
						WriteAddr(new byte[8]
						{
							0,
							0,
							0,
							0,
							(byte)num,
							(byte)(num >> 8),
							0,
							0
						}, 43, 2);
					}
					else
					{
						SendRs232Data(18, 35, (byte)num, 134);
					}
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MiSpeedCap_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MidSpeedCap.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 255 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)rcv_SpeedLimitByCap,
						0,
						0
					}, 205, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void MidSpeedCapCoeff_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = MidSpeedCapCoeff.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 15 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(rcv_ParkCoeff + (rcv_BatSel << 4)),
						0,
						0
					}, 206, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Stage1Curr_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Stage1Curr.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt32(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 158, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Stage2Soc_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Stage2Soc.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 255 && num >= 0 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_Stage1Soc,
						(byte)num,
						0,
						0
					}, 189, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void TorqueCoeff_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = TorqueCoeff.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 32767 && num >= 500 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 195, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void NoCanCnt_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = NoCanCnt.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				text = text.TrimEnd(new char[1] { 's' });
				text = text.TrimEnd(new char[1] { 'S' });
				text = text.TrimEnd(new char[1] { 'M' });
				text = text.TrimEnd(new char[1] { 'm' });
				int num = Convert.ToInt16(text);
				num /= 10;
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)rcv_TaRlB9D0SP,
						0,
						0
					}, 203, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ThrottleLost_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Throttle Lost Alm:", "cancel", "0-Invaild", "1-Valid")) : (await DisplayActionSheet("”Õ√≈∂™ ß∏ÊæØ:", "cancel", "0-Œﬁ–ß", "1-”––ß")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				if (num >= 0 && num <= 1 && App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)((rcv_TaRlB9D0SP & 0x7F) + (num << 7)),
						0,
						0
					}, 203, 2);
				}
			}
		}

		private async void BatSel_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("Batt Signal:", "cancel", "0-One Line", "1-Serial", "2-CAN", "3-Lithium ", "4-Lead-acid", "4-LFP")) : (await DisplayActionSheet("µÁ≥ÿ–≈∫≈:", "cancel", "0-“ªœﬂÕ®", "1-¥Æø⁄", "2-CAN", "3-ÔÆµÁ≥ÿ", "4-«¶À·", "5-Ã˙ÔÆ")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_MinSpeedCapCoeff,
						(byte)(rcv_ParkCoeff + (num << 4)),
						0,
						0
					}, 206, 2);
				}
			}
		}

		private async void RxdSel_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (!NotNewBlue())
			{
				string text = await DisplayActionSheet("RXD ‰≥ˆ:", "cancel", "0-RXD_AF", "1-RXD_OD", "2-RXD_PP");
				if (text != "cancel")
				{
					string.IsNullOrWhiteSpace(text);
				}
			}
		}

		private async void CanSel_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = await DisplayActionSheet("CANÀŸ∂»:", "cancel", "0-250K", "1-500K", "2-1M");
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					byte[] array = new byte[8];
					m_GPara0 = (rcv_GPara0 & 0xF0FF) + (num switch
					{
						0 => 8, 
						1 => 4, 
						_ => 2, 
					} << 8);
					array[4] = (byte)m_GPara0;
					array[5] = (byte)(m_GPara0 >> 8);
					WriteAddr(array, 188, 2);
				}
			}
		}

		private async void ReleasePTime_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("BackPTime:", "cancel", " 0-3s", " 1-4s", " 2-5s", " 3-6s", " 4-8s", " 5-10s", " 6-12s", " 7-16s", " 8-20s", " 9-25s", "10-30s", "11-40s", "12-50s", "13-60s", "14-90s", "15-120s", "16-150s", "17-180s", "18-240s", "19-300s", "20-xxxs")) : (await DisplayActionSheet("ªÿPµµ—” ±:", "cancel", " 0-3√Î", " 1-4√Î", " 2-5√Î", " 3-6√Î", " 4-8√Î", " 5-10√Î", " 6-12√Î", " 7-16√Î", " 8-20√Î", " 9-25√Î", "10-30√Î", "11-40√Î", "12-50√Î", "13-60√Î", "14-90√Î", "15-120√Î", "16-150√Î", "17-180√Î", "18-240√Î", "19-300√Î", "20-Œﬁœﬁ")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					byte[] array = new byte[8];
					m_GPara0 = (rcv_GPara0 & 0xFFE0) + num;
					array[4] = (byte)m_GPara0;
					array[5] = (byte)(m_GPara0 >> 8);
					WriteAddr(array, 188, 2);
				}
			}
		}

		private async void SeatDelay_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SeatDelay.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 7 && num >= 1 && App.NewVersion)
				{
					byte[] array = new byte[8];
					m_GPara0 = (rcv_GPara0 & 0xFF1F) + (num << 5);
					array[4] = (byte)m_GPara0;
					array[5] = (byte)(m_GPara0 >> 8);
					WriteAddr(array, 188, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Idle_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = await DisplayActionSheet("Step:", "cancel", "0-0.5ms", "1-0.9ms", "2-1.5ms", "3-1.9ms");
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					byte[] array = new byte[8];
					m_OneCommCfg = (rcv_OneCommCfg & 0xFFFC) + num;
					array[4] = (byte)m_OneCommCfg;
					array[5] = (byte)(m_OneCommCfg >> 8);
					WriteAddr(array, 213, 2);
				}
			}
		}

		private async void Stop_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = await DisplayActionSheet("Stop:", "cancel", "0-24ms", "1-55ms", "2-124ms", "3-216ms");
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 1);
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					byte[] array = new byte[8];
					m_OneCommCfg = (rcv_OneCommCfg & 0xFFF3) + (num << 2);
					array[4] = (byte)m_OneCommCfg;
					array[5] = (byte)(m_OneCommCfg >> 8);
					WriteAddr(array, 213, 2);
				}
			}
		}

		private async void Pulse_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Pulse.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt32(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(m_OneCommPS >> 8),
						0,
						0
					}, 186, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SQH_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SQH.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt32(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)m_OneCommPS,
						(byte)num,
						0,
						0
					}, 186, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void ESQH_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = ESQH.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt32(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)rcv_OneCommCfg,
						(byte)num,
						0,
						0
					}, 213, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void DATA0_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = DATA0.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(m_OneCommHead >> 8),
						0,
						0
					}, 208, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void DATA1_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = DATA1.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)m_OneCommHead,
						(byte)num,
						0,
						0
					}, 208, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SEC0_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SEC0.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)m_OneCommSec[1],
						0,
						0
					}, 180, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SEC1_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SEC1.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)m_OneCommSec[0],
						(byte)num,
						0,
						0
					}, 180, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SEC2_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SEC2.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)m_OneCommSec[3],
						0,
						0
					}, 181, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SEC3_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SEC3.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)m_OneCommSec[2],
						(byte)num,
						0,
						0
					}, 181, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SEC4_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SEC4.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)m_OneCommSec[5],
						0,
						0
					}, 182, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SEC5_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SEC5.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)m_OneCommSec[4],
						(byte)num,
						0,
						0
					}, 182, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SEC6_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SEC6.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)m_OneCommSec[7],
						0,
						0
					}, 183, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void SEC7_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = SEC7.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)m_OneCommSec[6],
						(byte)num,
						0,
						0
					}, 183, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Ppos_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = Ppos.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 15 && App.NewVersion)
				{
					byte[] array = new byte[8];
					m_OneCommPos = (rcv_OneCommPos & 0xFFF0) + num;
					array[4] = (byte)m_OneCommPos;
					array[5] = (byte)(m_OneCommPos >> 8);
					WriteAddr(array, 184, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void BCPos_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = BCPos.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 15 && App.NewVersion)
				{
					byte[] array = new byte[8];
					m_OneCommPos = (rcv_OneCommPos & 0xFF0F) + (num << 4);
					array[4] = (byte)m_OneCommPos;
					array[5] = (byte)(m_OneCommPos >> 8);
					WriteAddr(array, 184, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void HBarPos_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = HBarPos.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 15 && App.NewVersion)
				{
					byte[] array = new byte[8];
					m_OneCommPos = (rcv_OneCommPos & 0xF0FF) + (num << 8);
					array[4] = (byte)m_OneCommPos;
					array[5] = (byte)(m_OneCommPos >> 8);
					WriteAddr(array, 184, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void FDPos_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = FDPos.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (num <= 15 && App.NewVersion)
				{
					byte[] array = new byte[8];
					m_OneCommPos = (rcv_OneCommPos & 0xFFF) + (num << 12);
					array[4] = (byte)m_OneCommPos;
					array[5] = (byte)(m_OneCommPos >> 8);
					WriteAddr(array, 184, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void OneLineCurrCoeff_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = OneLineCurrCoeff.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			text = text.TrimEnd(new char[1] { '%' });
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 187, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private async void Byte89Sel_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("ByteOption:", "cancel", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")) : (await DisplayActionSheet("◊÷Ω⁄—°œÓ:", "cancel", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					byte[] array = new byte[8];
					m_OneCommCfg = (rcv_OneCommCfg & 0xFF0F) + (num << 4);
					array[4] = (byte)m_OneCommCfg;
					array[5] = (byte)(m_OneCommCfg >> 8);
					WriteAddr(array, 213, 2);
				}
			}
		}

		private void RowText1_Clicked_1(object sender, EventArgs e)
		{
			DateTimeGrid.IsVisible = !DateTimeGrid.IsVisible;
		}

		private void RowText2_Clicked(object sender, EventArgs e)
		{
			Motopara.IsVisible = !Motopara.IsVisible;
		}

		private void RowText4_Clicked(object sender, EventArgs e)
		{
			SpeedRatioPara.IsVisible = !SpeedRatioPara.IsVisible;
		}

		private void NRowText4_Clicked(object sender, EventArgs e)
		{
			NSpeedRatioPara.IsVisible = !NSpeedRatioPara.IsVisible;
		}

		private void RowText5_Clicked(object sender, EventArgs e)
		{
			RowText5Para.IsVisible = !RowText5Para.IsVisible;
		}

		private void RowText8_Clicked(object sender, EventArgs e)
		{
			RowText8Para.IsVisible = !RowText8Para.IsVisible;
		}

		private void RowTextFunc_Clicked(object sender, EventArgs e)
		{
			RowTextFuncPara.IsVisible = !RowTextFuncPara.IsVisible;
		}

		private void RowTextProduct_Clicked(object sender, EventArgs e)
		{
			RowTextProductPara.IsVisible = !RowTextProductPara.IsVisible;
		}

		private void RowTextOneLine_Clicked(object sender, EventArgs e)
		{
			RowTextOneLinePara.IsVisible = !RowTextOneLinePara.IsVisible;
		}

		private async void CurrLimitWay_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("LowVol Way:", "cancel", " 0-Vol2V", " 1-Vol4V", " 2-Vol8V", " 3-Vol12V", " 4-Vol16V", " 5-Soc5%", " 6-Soc6%", " 7-Soc7%", " 8-Soc8%", " 9-Soc9%", "10-Soc10%", "11-SOP", "12-Other")) : (await DisplayActionSheet("«∑—π∑Ω Ω:", "cancel", " 0-µÁ—π2V", " 1-µÁ—π4V", " 2-µÁ—π8V", " 3-µÁ—π12V", " 4-µÁ—π16V", " 5-πÍÀŸµÁ¡ø5%", " 6-πÍÀŸµÁ¡ø6%", " 7-πÍÀŸµÁ¡ø7%", " 8-πÍÀŸµÁ¡ø8%", " 9-πÍÀŸµÁ¡ø9%", "10-πÍÀŸµÁ¡ø10%", "11-SOP÷µ", "12-∆‰À˚")));
			if (text != "cancel" && !string.IsNullOrWhiteSpace(text))
			{
				text = text.Substring(0, 2);
				int num = Convert.ToInt16(text);
				if (App.NewVersion && rcv_AccCoeff != 0)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						cfg190h,
						0,
						0
					}, 190, 2);
				}
			}
		}

		private async void SpecialWeak_SelectedIndexChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			string text = ((!App.CN) ? (await DisplayActionSheet("DeepWeak:", "cancel", " 0-Normal", " 1-Special")) : (await DisplayActionSheet("…Ó∂»»ı¥≈:", "cancel", " 0-’˝≥£", " 1-Ãÿ ‚")));
			if (!(text != "cancel") || string.IsNullOrWhiteSpace(text))
			{
				return;
			}
			text = text.Substring(0, 2);
			int num = Convert.ToInt16(text);
			if (num >= 0 && num <= 1)
			{
				config_word0 = rconfig_word0 | 1;
				config_word1 = rconfig_word1 | 1;
				if (num == 1)
				{
					config_word1 |= 4;
				}
				else
				{
					config_word1 &= 251;
				}
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)config_word0,
						(byte)config_word1,
						0,
						0
					}, 124, 2);
				}
			}
		}

		private void Protocol485_TextChanged(object sender, EventArgs e)
		{
		}

		private async void TempCoeff2_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = TempCoeff2.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt32(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						(byte)(num >> 8),
						0,
						0
					}, 102, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		private void SendRs232Data(byte mcmd, byte scmd, byte va1, byte va2)
		{
			byte[] array = new byte[8];
			array[0] = 170;
			array[1] = mcmd;
			array[2] = (byte)(~array[1]);
			array[3] = scmd;
			array[4] = va1;
			array[5] = va2;
			array[6] = (byte)(array[0] + array[1] + array[2] + array[3] + array[4] + array[5]);
			array[7] = (byte)(~array[6]);
			MessagingCenter.Send(this, "WriteParaMeter", array);
		}

		private void WriteAddr(byte[] data, byte addr, byte len)
		{
			data[0] = 170;
			len += 4;
			data[1] = (byte)(192 + len);
			data[2] = addr;
			data[3] = addr;
			byte b = 60;
			byte b2 = 127;
			byte b3;
			for (b3 = 0; b3 < len; b3++)
			{
				int num = b ^ data[b3];
				b = (byte)(b2 ^ crctablehi[num]);
				b2 = crctablelo[num];
			}
			data[b3] = b;
			data[b3 + 1] = b2;
			MessagingCenter.Send(this, "WriteParaMeter", data);
		}

		private void CustomCode_TextChanged(object sender, EventArgs e)
		{
		}

		private async void CANConfig_TextChanged(object sender, EventArgs e)
		{
			if (NotBindingStat() || NotOwnerStat() || NotNewBlue())
			{
				return;
			}
			PromptResult promptResult = await UserDialogs.Instance.PromptAsync(new PromptConfig
			{
				InputType = InputType.Name,
				OkText = "OK",
				CancelText = "Cancel",
				Title = CANConfig.Text
			});
			if (!promptResult.Ok || string.IsNullOrWhiteSpace(promptResult.Text))
			{
				return;
			}
			string text = promptResult.Text;
			try
			{
				int num = Convert.ToInt16(text);
				if (App.NewVersion)
				{
					WriteAddr(new byte[8]
					{
						0,
						0,
						0,
						0,
						(byte)num,
						0,
						0,
						0
					}, 134, 2);
				}
			}
			catch (FormatException)
			{
				UserDialogs.Instance.Toast("FormatException Input");
			}
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			if (ResourceLoader.IsEnabled && ResourceLoader.CanProvideContentFor(new ResourceLoader.ResourceLoadingQuery
			{
				AssemblyName = typeof(ProControlPage).GetTypeInfo().Assembly.GetName(),
				ResourcePath = "ProControlPage.xaml",
				Instance = this
			}))
			{
				__InitComponentRuntime();
				return;
			}
			if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
			{
				__InitComponentRuntime();
				return;
			}
			RowDefinition rowDefinition;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 9, 18);
			RowDefinition rowDefinition2;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition2 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 10, 18);
			Label label;
			VisualDiagnostics.RegisterSourceInfo(label = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 14, 22);
			ColumnDefinition columnDefinition;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 17, 30);
			ColumnDefinition columnDefinition2;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition2 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 18, 30);
			RowDefinition rowDefinition3;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition3 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 22, 34);
			RowDefinition rowDefinition4;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition4 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 23, 34);
			RowDefinition rowDefinition5;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition5 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 24, 34);
			RowDefinition rowDefinition6;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition6 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 25, 34);
			Label label2;
			VisualDiagnostics.RegisterSourceInfo(label2 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 28, 34);
			Label label3;
			VisualDiagnostics.RegisterSourceInfo(label3 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 29, 34);
			StackLayout stackLayout;
			VisualDiagnostics.RegisterSourceInfo(stackLayout = new StackLayout(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 27, 30);
			Label label4;
			VisualDiagnostics.RegisterSourceInfo(label4 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 32, 34);
			Label label5;
			VisualDiagnostics.RegisterSourceInfo(label5 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 33, 34);
			StackLayout stackLayout2;
			VisualDiagnostics.RegisterSourceInfo(stackLayout2 = new StackLayout(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 31, 30);
			Label label6;
			VisualDiagnostics.RegisterSourceInfo(label6 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 36, 34);
			Label label7;
			VisualDiagnostics.RegisterSourceInfo(label7 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 37, 34);
			StackLayout stackLayout3;
			VisualDiagnostics.RegisterSourceInfo(stackLayout3 = new StackLayout(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 35, 30);
			Label label8;
			VisualDiagnostics.RegisterSourceInfo(label8 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 40, 34);
			Label label9;
			VisualDiagnostics.RegisterSourceInfo(label9 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 41, 34);
			StackLayout stackLayout4;
			VisualDiagnostics.RegisterSourceInfo(stackLayout4 = new StackLayout(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 39, 30);
			Grid grid;
			VisualDiagnostics.RegisterSourceInfo(grid = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 20, 26);
			Grid grid2;
			VisualDiagnostics.RegisterSourceInfo(grid2 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 15, 22);
			Label label10;
			VisualDiagnostics.RegisterSourceInfo(label10 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 46, 26);
			StackLayout stackLayout5;
			VisualDiagnostics.RegisterSourceInfo(stackLayout5 = new StackLayout(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 45, 22);
			ColumnDefinition columnDefinition3;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition3 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 50, 30);
			ColumnDefinition columnDefinition4;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition4 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 51, 30);
			Label label11;
			VisualDiagnostics.RegisterSourceInfo(label11 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 53, 26);
			Label label12;
			VisualDiagnostics.RegisterSourceInfo(label12 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 54, 26);
			Xamarin.Forms.Button button;
			VisualDiagnostics.RegisterSourceInfo(button = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 55, 26);
			Xamarin.Forms.Button button2;
			VisualDiagnostics.RegisterSourceInfo(button2 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 56, 26);
			Grid grid3;
			VisualDiagnostics.RegisterSourceInfo(grid3 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 48, 22);
			Xamarin.Forms.Button button3;
			VisualDiagnostics.RegisterSourceInfo(button3 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 58, 22);
			ColumnDefinition columnDefinition5;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition5 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 61, 30);
			ColumnDefinition columnDefinition6;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition6 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 62, 30);
			Label label13;
			VisualDiagnostics.RegisterSourceInfo(label13 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 64, 26);
			Label label14;
			VisualDiagnostics.RegisterSourceInfo(label14 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 65, 26);
			Grid grid4;
			VisualDiagnostics.RegisterSourceInfo(grid4 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 59, 22);
			Xamarin.Forms.Button button4;
			VisualDiagnostics.RegisterSourceInfo(button4 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 68, 22);
			RowDefinition rowDefinition7;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition7 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 73, 30);
			RowDefinition rowDefinition8;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition8 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 74, 30);
			RowDefinition rowDefinition9;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition9 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 75, 30);
			RowDefinition rowDefinition10;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition10 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 76, 30);
			RowDefinition rowDefinition11;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition11 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 77, 30);
			RowDefinition rowDefinition12;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition12 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 78, 30);
			RowDefinition rowDefinition13;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition13 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 79, 30);
			ColumnDefinition columnDefinition7;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition7 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 82, 30);
			ColumnDefinition columnDefinition8;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition8 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 83, 30);
			Label label15;
			VisualDiagnostics.RegisterSourceInfo(label15 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 85, 26);
			Label label16;
			VisualDiagnostics.RegisterSourceInfo(label16 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 86, 26);
			Label label17;
			VisualDiagnostics.RegisterSourceInfo(label17 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 87, 26);
			Label label18;
			VisualDiagnostics.RegisterSourceInfo(label18 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 88, 26);
			Label label19;
			VisualDiagnostics.RegisterSourceInfo(label19 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 89, 26);
			Label label20;
			VisualDiagnostics.RegisterSourceInfo(label20 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 90, 26);
			Label label21;
			VisualDiagnostics.RegisterSourceInfo(label21 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 91, 26);
			Label label22;
			VisualDiagnostics.RegisterSourceInfo(label22 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 92, 26);
			Label label23;
			VisualDiagnostics.RegisterSourceInfo(label23 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 93, 26);
			Label label24;
			VisualDiagnostics.RegisterSourceInfo(label24 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 94, 26);
			Label label25;
			VisualDiagnostics.RegisterSourceInfo(label25 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 95, 26);
			Label label26;
			VisualDiagnostics.RegisterSourceInfo(label26 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 96, 26);
			Label label27;
			VisualDiagnostics.RegisterSourceInfo(label27 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 97, 26);
			Label label28;
			VisualDiagnostics.RegisterSourceInfo(label28 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 98, 26);
			Label label29;
			VisualDiagnostics.RegisterSourceInfo(label29 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 99, 26);
			Label label30;
			VisualDiagnostics.RegisterSourceInfo(label30 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 100, 26);
			Xamarin.Forms.Button button5;
			VisualDiagnostics.RegisterSourceInfo(button5 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 103, 26);
			Xamarin.Forms.Button button6;
			VisualDiagnostics.RegisterSourceInfo(button6 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 104, 26);
			Xamarin.Forms.Button button7;
			VisualDiagnostics.RegisterSourceInfo(button7 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 105, 26);
			Xamarin.Forms.Button button8;
			VisualDiagnostics.RegisterSourceInfo(button8 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 106, 26);
			Xamarin.Forms.Button button9;
			VisualDiagnostics.RegisterSourceInfo(button9 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 107, 26);
			Xamarin.Forms.Button button10;
			VisualDiagnostics.RegisterSourceInfo(button10 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 108, 26);
			Xamarin.Forms.Button button11;
			VisualDiagnostics.RegisterSourceInfo(button11 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 109, 26);
			Xamarin.Forms.Button button12;
			VisualDiagnostics.RegisterSourceInfo(button12 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 110, 26);
			Xamarin.Forms.Button button13;
			VisualDiagnostics.RegisterSourceInfo(button13 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 112, 26);
			Xamarin.Forms.Button button14;
			VisualDiagnostics.RegisterSourceInfo(button14 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 113, 26);
			Xamarin.Forms.Button button15;
			VisualDiagnostics.RegisterSourceInfo(button15 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 114, 26);
			Xamarin.Forms.Button button16;
			VisualDiagnostics.RegisterSourceInfo(button16 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 115, 26);
			Xamarin.Forms.Button button17;
			VisualDiagnostics.RegisterSourceInfo(button17 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 116, 26);
			Xamarin.Forms.Button button18;
			VisualDiagnostics.RegisterSourceInfo(button18 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 117, 26);
			Xamarin.Forms.Button button19;
			VisualDiagnostics.RegisterSourceInfo(button19 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 118, 26);
			Xamarin.Forms.Button button20;
			VisualDiagnostics.RegisterSourceInfo(button20 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 119, 26);
			Grid grid5;
			VisualDiagnostics.RegisterSourceInfo(grid5 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 71, 22);
			RowDefinition rowDefinition14;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition14 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 124, 30);
			RowDefinition rowDefinition15;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition15 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 125, 30);
			RowDefinition rowDefinition16;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition16 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 126, 30);
			RowDefinition rowDefinition17;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition17 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 127, 30);
			ColumnDefinition columnDefinition9;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition9 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 130, 30);
			ColumnDefinition columnDefinition10;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition10 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 131, 30);
			Label label31;
			VisualDiagnostics.RegisterSourceInfo(label31 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 133, 26);
			Label label32;
			VisualDiagnostics.RegisterSourceInfo(label32 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 134, 26);
			Label label33;
			VisualDiagnostics.RegisterSourceInfo(label33 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 135, 26);
			Label label34;
			VisualDiagnostics.RegisterSourceInfo(label34 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 136, 26);
			Label label35;
			VisualDiagnostics.RegisterSourceInfo(label35 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 137, 26);
			Label label36;
			VisualDiagnostics.RegisterSourceInfo(label36 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 138, 26);
			Label label37;
			VisualDiagnostics.RegisterSourceInfo(label37 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 139, 26);
			Label label38;
			VisualDiagnostics.RegisterSourceInfo(label38 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 140, 26);
			Xamarin.Forms.Button button21;
			VisualDiagnostics.RegisterSourceInfo(button21 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 142, 26);
			Xamarin.Forms.Button button22;
			VisualDiagnostics.RegisterSourceInfo(button22 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 143, 26);
			Xamarin.Forms.Button button23;
			VisualDiagnostics.RegisterSourceInfo(button23 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 144, 26);
			Xamarin.Forms.Button button24;
			VisualDiagnostics.RegisterSourceInfo(button24 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 145, 26);
			Xamarin.Forms.Button button25;
			VisualDiagnostics.RegisterSourceInfo(button25 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 146, 26);
			Xamarin.Forms.Button button26;
			VisualDiagnostics.RegisterSourceInfo(button26 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 147, 26);
			Xamarin.Forms.Button button27;
			VisualDiagnostics.RegisterSourceInfo(button27 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 148, 26);
			Xamarin.Forms.Button button28;
			VisualDiagnostics.RegisterSourceInfo(button28 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 149, 26);
			Grid grid6;
			VisualDiagnostics.RegisterSourceInfo(grid6 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 122, 22);
			Xamarin.Forms.Button button29;
			VisualDiagnostics.RegisterSourceInfo(button29 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 152, 22);
			RowDefinition rowDefinition18;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition18 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 155, 30);
			RowDefinition rowDefinition19;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition19 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 156, 30);
			RowDefinition rowDefinition20;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition20 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 157, 30);
			RowDefinition rowDefinition21;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition21 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 158, 30);
			RowDefinition rowDefinition22;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition22 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 159, 30);
			RowDefinition rowDefinition23;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition23 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 160, 30);
			RowDefinition rowDefinition24;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition24 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 161, 30);
			RowDefinition rowDefinition25;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition25 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 162, 30);
			RowDefinition rowDefinition26;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition26 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 163, 30);
			RowDefinition rowDefinition27;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition27 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 164, 30);
			RowDefinition rowDefinition28;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition28 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 165, 30);
			ColumnDefinition columnDefinition11;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition11 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 168, 30);
			ColumnDefinition columnDefinition12;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition12 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 169, 30);
			Label label39;
			VisualDiagnostics.RegisterSourceInfo(label39 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 171, 26);
			Label label40;
			VisualDiagnostics.RegisterSourceInfo(label40 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 172, 26);
			Label label41;
			VisualDiagnostics.RegisterSourceInfo(label41 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 173, 26);
			Label label42;
			VisualDiagnostics.RegisterSourceInfo(label42 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 174, 26);
			Label label43;
			VisualDiagnostics.RegisterSourceInfo(label43 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 175, 26);
			Label label44;
			VisualDiagnostics.RegisterSourceInfo(label44 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 176, 26);
			Label label45;
			VisualDiagnostics.RegisterSourceInfo(label45 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 177, 26);
			Label label46;
			VisualDiagnostics.RegisterSourceInfo(label46 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 178, 26);
			Label label47;
			VisualDiagnostics.RegisterSourceInfo(label47 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 179, 26);
			Label label48;
			VisualDiagnostics.RegisterSourceInfo(label48 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 180, 26);
			Label label49;
			VisualDiagnostics.RegisterSourceInfo(label49 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 181, 26);
			Label label50;
			VisualDiagnostics.RegisterSourceInfo(label50 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 182, 26);
			Label label51;
			VisualDiagnostics.RegisterSourceInfo(label51 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 183, 26);
			Label label52;
			VisualDiagnostics.RegisterSourceInfo(label52 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 184, 26);
			Label label53;
			VisualDiagnostics.RegisterSourceInfo(label53 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 185, 26);
			Label label54;
			VisualDiagnostics.RegisterSourceInfo(label54 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 186, 26);
			Label label55;
			VisualDiagnostics.RegisterSourceInfo(label55 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 187, 26);
			Label label56;
			VisualDiagnostics.RegisterSourceInfo(label56 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 188, 26);
			Label label57;
			VisualDiagnostics.RegisterSourceInfo(label57 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 189, 26);
			Label label58;
			VisualDiagnostics.RegisterSourceInfo(label58 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 190, 26);
			Label label59;
			VisualDiagnostics.RegisterSourceInfo(label59 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 191, 26);
			Label label60;
			VisualDiagnostics.RegisterSourceInfo(label60 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 192, 26);
			Xamarin.Forms.Button button30;
			VisualDiagnostics.RegisterSourceInfo(button30 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 194, 26);
			Xamarin.Forms.Button button31;
			VisualDiagnostics.RegisterSourceInfo(button31 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 195, 26);
			Xamarin.Forms.Button button32;
			VisualDiagnostics.RegisterSourceInfo(button32 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 196, 26);
			Xamarin.Forms.Button button33;
			VisualDiagnostics.RegisterSourceInfo(button33 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 197, 26);
			Xamarin.Forms.Button button34;
			VisualDiagnostics.RegisterSourceInfo(button34 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 198, 26);
			Xamarin.Forms.Button button35;
			VisualDiagnostics.RegisterSourceInfo(button35 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 199, 26);
			Xamarin.Forms.Button button36;
			VisualDiagnostics.RegisterSourceInfo(button36 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 200, 26);
			Xamarin.Forms.Button button37;
			VisualDiagnostics.RegisterSourceInfo(button37 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 201, 26);
			Xamarin.Forms.Button button38;
			VisualDiagnostics.RegisterSourceInfo(button38 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 202, 26);
			Xamarin.Forms.Button button39;
			VisualDiagnostics.RegisterSourceInfo(button39 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 203, 26);
			Xamarin.Forms.Button button40;
			VisualDiagnostics.RegisterSourceInfo(button40 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 204, 26);
			Xamarin.Forms.Button button41;
			VisualDiagnostics.RegisterSourceInfo(button41 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 205, 26);
			Xamarin.Forms.Button button42;
			VisualDiagnostics.RegisterSourceInfo(button42 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 206, 26);
			Xamarin.Forms.Button button43;
			VisualDiagnostics.RegisterSourceInfo(button43 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 207, 26);
			Xamarin.Forms.Button button44;
			VisualDiagnostics.RegisterSourceInfo(button44 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 208, 26);
			Xamarin.Forms.Button button45;
			VisualDiagnostics.RegisterSourceInfo(button45 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 209, 26);
			Xamarin.Forms.Button button46;
			VisualDiagnostics.RegisterSourceInfo(button46 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 210, 26);
			Xamarin.Forms.Button button47;
			VisualDiagnostics.RegisterSourceInfo(button47 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 211, 26);
			Xamarin.Forms.Button button48;
			VisualDiagnostics.RegisterSourceInfo(button48 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 212, 26);
			Xamarin.Forms.Button button49;
			VisualDiagnostics.RegisterSourceInfo(button49 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 213, 26);
			Xamarin.Forms.Button button50;
			VisualDiagnostics.RegisterSourceInfo(button50 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 214, 26);
			Xamarin.Forms.Button button51;
			VisualDiagnostics.RegisterSourceInfo(button51 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 215, 26);
			Grid grid7;
			VisualDiagnostics.RegisterSourceInfo(grid7 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 153, 22);
			Xamarin.Forms.Button button52;
			VisualDiagnostics.RegisterSourceInfo(button52 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 217, 22);
			RowDefinition rowDefinition29;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition29 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 220, 30);
			RowDefinition rowDefinition30;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition30 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 221, 30);
			RowDefinition rowDefinition31;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition31 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 222, 30);
			ColumnDefinition columnDefinition13;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition13 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 225, 30);
			ColumnDefinition columnDefinition14;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition14 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 226, 30);
			Label label61;
			VisualDiagnostics.RegisterSourceInfo(label61 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 228, 26);
			Label label62;
			VisualDiagnostics.RegisterSourceInfo(label62 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 229, 26);
			Label label63;
			VisualDiagnostics.RegisterSourceInfo(label63 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 230, 26);
			Label label64;
			VisualDiagnostics.RegisterSourceInfo(label64 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 231, 26);
			Label label65;
			VisualDiagnostics.RegisterSourceInfo(label65 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 232, 26);
			Label label66;
			VisualDiagnostics.RegisterSourceInfo(label66 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 233, 26);
			Xamarin.Forms.Button button53;
			VisualDiagnostics.RegisterSourceInfo(button53 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 235, 26);
			Xamarin.Forms.Button button54;
			VisualDiagnostics.RegisterSourceInfo(button54 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 236, 26);
			Xamarin.Forms.Button button55;
			VisualDiagnostics.RegisterSourceInfo(button55 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 237, 26);
			Xamarin.Forms.Button button56;
			VisualDiagnostics.RegisterSourceInfo(button56 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 238, 26);
			Xamarin.Forms.Button button57;
			VisualDiagnostics.RegisterSourceInfo(button57 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 239, 26);
			Xamarin.Forms.Button button58;
			VisualDiagnostics.RegisterSourceInfo(button58 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 240, 26);
			Grid grid8;
			VisualDiagnostics.RegisterSourceInfo(grid8 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 218, 22);
			Xamarin.Forms.Button button59;
			VisualDiagnostics.RegisterSourceInfo(button59 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 242, 22);
			RowDefinition rowDefinition32;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition32 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 245, 30);
			RowDefinition rowDefinition33;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition33 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 246, 30);
			ColumnDefinition columnDefinition15;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition15 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 249, 30);
			ColumnDefinition columnDefinition16;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition16 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 250, 30);
			Label label67;
			VisualDiagnostics.RegisterSourceInfo(label67 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 252, 26);
			Label label68;
			VisualDiagnostics.RegisterSourceInfo(label68 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 253, 26);
			Label label69;
			VisualDiagnostics.RegisterSourceInfo(label69 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 254, 26);
			Xamarin.Forms.Button button60;
			VisualDiagnostics.RegisterSourceInfo(button60 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 255, 26);
			Xamarin.Forms.Button button61;
			VisualDiagnostics.RegisterSourceInfo(button61 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 256, 26);
			Xamarin.Forms.Button button62;
			VisualDiagnostics.RegisterSourceInfo(button62 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 257, 26);
			Grid grid9;
			VisualDiagnostics.RegisterSourceInfo(grid9 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 243, 22);
			RowDefinition rowDefinition34;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition34 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 261, 30);
			RowDefinition rowDefinition35;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition35 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 262, 30);
			RowDefinition rowDefinition36;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition36 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 263, 30);
			RowDefinition rowDefinition37;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition37 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 264, 30);
			RowDefinition rowDefinition38;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition38 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 265, 30);
			RowDefinition rowDefinition39;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition39 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 266, 30);
			RowDefinition rowDefinition40;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition40 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 267, 30);
			RowDefinition rowDefinition41;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition41 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 268, 30);
			RowDefinition rowDefinition42;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition42 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 269, 30);
			RowDefinition rowDefinition43;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition43 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 270, 30);
			ColumnDefinition columnDefinition17;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition17 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 273, 30);
			ColumnDefinition columnDefinition18;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition18 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 274, 30);
			Label label70;
			VisualDiagnostics.RegisterSourceInfo(label70 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 276, 26);
			Label label71;
			VisualDiagnostics.RegisterSourceInfo(label71 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 277, 26);
			Label label72;
			VisualDiagnostics.RegisterSourceInfo(label72 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 279, 26);
			Label label73;
			VisualDiagnostics.RegisterSourceInfo(label73 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 280, 26);
			Label label74;
			VisualDiagnostics.RegisterSourceInfo(label74 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 281, 26);
			Label label75;
			VisualDiagnostics.RegisterSourceInfo(label75 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 282, 26);
			Label label76;
			VisualDiagnostics.RegisterSourceInfo(label76 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 283, 26);
			Label label77;
			VisualDiagnostics.RegisterSourceInfo(label77 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 284, 26);
			Label label78;
			VisualDiagnostics.RegisterSourceInfo(label78 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 285, 26);
			Label label79;
			VisualDiagnostics.RegisterSourceInfo(label79 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 286, 26);
			Label label80;
			VisualDiagnostics.RegisterSourceInfo(label80 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 287, 26);
			Label label81;
			VisualDiagnostics.RegisterSourceInfo(label81 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 288, 26);
			Label label82;
			VisualDiagnostics.RegisterSourceInfo(label82 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 289, 26);
			Label label83;
			VisualDiagnostics.RegisterSourceInfo(label83 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 290, 26);
			Label label84;
			VisualDiagnostics.RegisterSourceInfo(label84 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 291, 26);
			Label label85;
			VisualDiagnostics.RegisterSourceInfo(label85 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 292, 26);
			Label label86;
			VisualDiagnostics.RegisterSourceInfo(label86 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 293, 26);
			Label label87;
			VisualDiagnostics.RegisterSourceInfo(label87 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 294, 26);
			Label label88;
			VisualDiagnostics.RegisterSourceInfo(label88 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 295, 26);
			Label label89;
			VisualDiagnostics.RegisterSourceInfo(label89 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 296, 26);
			Xamarin.Forms.Button button63;
			VisualDiagnostics.RegisterSourceInfo(button63 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 298, 26);
			Xamarin.Forms.Button button64;
			VisualDiagnostics.RegisterSourceInfo(button64 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 300, 26);
			Xamarin.Forms.Button button65;
			VisualDiagnostics.RegisterSourceInfo(button65 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 301, 26);
			Xamarin.Forms.Button button66;
			VisualDiagnostics.RegisterSourceInfo(button66 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 302, 26);
			Xamarin.Forms.Button button67;
			VisualDiagnostics.RegisterSourceInfo(button67 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 303, 26);
			Xamarin.Forms.Button button68;
			VisualDiagnostics.RegisterSourceInfo(button68 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 304, 26);
			Xamarin.Forms.Button button69;
			VisualDiagnostics.RegisterSourceInfo(button69 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 305, 26);
			Xamarin.Forms.Button button70;
			VisualDiagnostics.RegisterSourceInfo(button70 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 306, 26);
			Xamarin.Forms.Button button71;
			VisualDiagnostics.RegisterSourceInfo(button71 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 307, 26);
			Xamarin.Forms.Button button72;
			VisualDiagnostics.RegisterSourceInfo(button72 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 308, 26);
			Xamarin.Forms.Button button73;
			VisualDiagnostics.RegisterSourceInfo(button73 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 309, 26);
			Xamarin.Forms.Button button74;
			VisualDiagnostics.RegisterSourceInfo(button74 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 310, 26);
			Xamarin.Forms.Button button75;
			VisualDiagnostics.RegisterSourceInfo(button75 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 311, 26);
			Xamarin.Forms.Button button76;
			VisualDiagnostics.RegisterSourceInfo(button76 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 312, 26);
			Xamarin.Forms.Button button77;
			VisualDiagnostics.RegisterSourceInfo(button77 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 313, 26);
			Xamarin.Forms.Button button78;
			VisualDiagnostics.RegisterSourceInfo(button78 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 314, 26);
			Xamarin.Forms.Button button79;
			VisualDiagnostics.RegisterSourceInfo(button79 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 315, 26);
			Xamarin.Forms.Button button80;
			VisualDiagnostics.RegisterSourceInfo(button80 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 316, 26);
			Xamarin.Forms.Button button81;
			VisualDiagnostics.RegisterSourceInfo(button81 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 317, 26);
			Grid grid10;
			VisualDiagnostics.RegisterSourceInfo(grid10 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 259, 22);
			Xamarin.Forms.Button button82;
			VisualDiagnostics.RegisterSourceInfo(button82 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 319, 22);
			RowDefinition rowDefinition44;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition44 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 322, 30);
			RowDefinition rowDefinition45;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition45 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 323, 30);
			RowDefinition rowDefinition46;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition46 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 324, 30);
			RowDefinition rowDefinition47;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition47 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 325, 30);
			RowDefinition rowDefinition48;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition48 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 326, 30);
			RowDefinition rowDefinition49;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition49 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 327, 30);
			RowDefinition rowDefinition50;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition50 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 328, 30);
			RowDefinition rowDefinition51;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition51 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 329, 30);
			RowDefinition rowDefinition52;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition52 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 330, 30);
			ColumnDefinition columnDefinition19;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition19 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 333, 30);
			ColumnDefinition columnDefinition20;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition20 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 334, 30);
			Label label90;
			VisualDiagnostics.RegisterSourceInfo(label90 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 336, 26);
			Label label91;
			VisualDiagnostics.RegisterSourceInfo(label91 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 337, 26);
			Label label92;
			VisualDiagnostics.RegisterSourceInfo(label92 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 338, 26);
			Label label93;
			VisualDiagnostics.RegisterSourceInfo(label93 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 339, 26);
			Label label94;
			VisualDiagnostics.RegisterSourceInfo(label94 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 340, 26);
			Label label95;
			VisualDiagnostics.RegisterSourceInfo(label95 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 341, 26);
			Label label96;
			VisualDiagnostics.RegisterSourceInfo(label96 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 342, 26);
			Label label97;
			VisualDiagnostics.RegisterSourceInfo(label97 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 343, 26);
			Label label98;
			VisualDiagnostics.RegisterSourceInfo(label98 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 344, 26);
			Label label99;
			VisualDiagnostics.RegisterSourceInfo(label99 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 345, 26);
			Label label100;
			VisualDiagnostics.RegisterSourceInfo(label100 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 346, 26);
			Label label101;
			VisualDiagnostics.RegisterSourceInfo(label101 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 347, 26);
			Label label102;
			VisualDiagnostics.RegisterSourceInfo(label102 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 348, 26);
			Label label103;
			VisualDiagnostics.RegisterSourceInfo(label103 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 349, 26);
			Label label104;
			VisualDiagnostics.RegisterSourceInfo(label104 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 351, 26);
			Label label105;
			VisualDiagnostics.RegisterSourceInfo(label105 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 352, 26);
			Label label106;
			VisualDiagnostics.RegisterSourceInfo(label106 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 353, 26);
			Label label107;
			VisualDiagnostics.RegisterSourceInfo(label107 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 354, 26);
			Label label108;
			VisualDiagnostics.RegisterSourceInfo(label108 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 355, 26);
			Label label109;
			VisualDiagnostics.RegisterSourceInfo(label109 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 356, 26);
			Xamarin.Forms.Button button83;
			VisualDiagnostics.RegisterSourceInfo(button83 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 359, 26);
			Xamarin.Forms.Button button84;
			VisualDiagnostics.RegisterSourceInfo(button84 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 360, 26);
			Xamarin.Forms.Button button85;
			VisualDiagnostics.RegisterSourceInfo(button85 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 361, 26);
			Xamarin.Forms.Button button86;
			VisualDiagnostics.RegisterSourceInfo(button86 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 362, 26);
			Xamarin.Forms.Button button87;
			VisualDiagnostics.RegisterSourceInfo(button87 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 363, 26);
			Xamarin.Forms.Button button88;
			VisualDiagnostics.RegisterSourceInfo(button88 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 364, 26);
			Xamarin.Forms.Button button89;
			VisualDiagnostics.RegisterSourceInfo(button89 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 365, 26);
			Xamarin.Forms.Button button90;
			VisualDiagnostics.RegisterSourceInfo(button90 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 366, 26);
			Xamarin.Forms.Button button91;
			VisualDiagnostics.RegisterSourceInfo(button91 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 367, 26);
			Xamarin.Forms.Button button92;
			VisualDiagnostics.RegisterSourceInfo(button92 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 368, 26);
			Xamarin.Forms.Button button93;
			VisualDiagnostics.RegisterSourceInfo(button93 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 369, 26);
			Xamarin.Forms.Button button94;
			VisualDiagnostics.RegisterSourceInfo(button94 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 370, 26);
			Xamarin.Forms.Button button95;
			VisualDiagnostics.RegisterSourceInfo(button95 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 371, 26);
			Xamarin.Forms.Button button96;
			VisualDiagnostics.RegisterSourceInfo(button96 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 372, 26);
			Xamarin.Forms.Button button97;
			VisualDiagnostics.RegisterSourceInfo(button97 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 374, 26);
			Xamarin.Forms.Button button98;
			VisualDiagnostics.RegisterSourceInfo(button98 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 375, 26);
			Xamarin.Forms.Button button99;
			VisualDiagnostics.RegisterSourceInfo(button99 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 377, 26);
			Xamarin.Forms.Button button100;
			VisualDiagnostics.RegisterSourceInfo(button100 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 378, 26);
			Xamarin.Forms.Button button101;
			VisualDiagnostics.RegisterSourceInfo(button101 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 379, 26);
			Xamarin.Forms.Button button102;
			VisualDiagnostics.RegisterSourceInfo(button102 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 380, 26);
			Grid grid11;
			VisualDiagnostics.RegisterSourceInfo(grid11 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 320, 22);
			RowDefinition rowDefinition53;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition53 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 385, 30);
			RowDefinition rowDefinition54;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition54 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 386, 30);
			RowDefinition rowDefinition55;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition55 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 387, 30);
			ColumnDefinition columnDefinition21;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition21 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 390, 30);
			ColumnDefinition columnDefinition22;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition22 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 391, 30);
			Label label110;
			VisualDiagnostics.RegisterSourceInfo(label110 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 394, 26);
			Label label111;
			VisualDiagnostics.RegisterSourceInfo(label111 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 395, 26);
			Label label112;
			VisualDiagnostics.RegisterSourceInfo(label112 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 396, 26);
			Label label113;
			VisualDiagnostics.RegisterSourceInfo(label113 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 397, 26);
			Label label114;
			VisualDiagnostics.RegisterSourceInfo(label114 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 398, 26);
			Xamarin.Forms.Button button103;
			VisualDiagnostics.RegisterSourceInfo(button103 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 401, 26);
			Xamarin.Forms.Button button104;
			VisualDiagnostics.RegisterSourceInfo(button104 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 402, 26);
			Xamarin.Forms.Button button105;
			VisualDiagnostics.RegisterSourceInfo(button105 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 403, 26);
			Xamarin.Forms.Button button106;
			VisualDiagnostics.RegisterSourceInfo(button106 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 404, 26);
			Xamarin.Forms.Button button107;
			VisualDiagnostics.RegisterSourceInfo(button107 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 405, 26);
			Grid grid12;
			VisualDiagnostics.RegisterSourceInfo(grid12 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 383, 22);
			Xamarin.Forms.Button button108;
			VisualDiagnostics.RegisterSourceInfo(button108 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 408, 22);
			RowDefinition rowDefinition56;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition56 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 411, 30);
			RowDefinition rowDefinition57;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition57 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 412, 30);
			RowDefinition rowDefinition58;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition58 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 413, 30);
			RowDefinition rowDefinition59;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition59 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 414, 30);
			ColumnDefinition columnDefinition23;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition23 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 417, 30);
			ColumnDefinition columnDefinition24;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition24 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 418, 30);
			Label label115;
			VisualDiagnostics.RegisterSourceInfo(label115 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 420, 26);
			Label label116;
			VisualDiagnostics.RegisterSourceInfo(label116 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 421, 26);
			Label label117;
			VisualDiagnostics.RegisterSourceInfo(label117 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 422, 26);
			Label label118;
			VisualDiagnostics.RegisterSourceInfo(label118 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 423, 26);
			Label label119;
			VisualDiagnostics.RegisterSourceInfo(label119 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 424, 26);
			Label label120;
			VisualDiagnostics.RegisterSourceInfo(label120 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 425, 26);
			Label label121;
			VisualDiagnostics.RegisterSourceInfo(label121 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 426, 26);
			Label label122;
			VisualDiagnostics.RegisterSourceInfo(label122 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 427, 26);
			Xamarin.Forms.Button button109;
			VisualDiagnostics.RegisterSourceInfo(button109 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 429, 26);
			Xamarin.Forms.Button button110;
			VisualDiagnostics.RegisterSourceInfo(button110 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 430, 26);
			Xamarin.Forms.Button button111;
			VisualDiagnostics.RegisterSourceInfo(button111 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 431, 26);
			Xamarin.Forms.Button button112;
			VisualDiagnostics.RegisterSourceInfo(button112 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 432, 26);
			Xamarin.Forms.Button button113;
			VisualDiagnostics.RegisterSourceInfo(button113 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 434, 26);
			Xamarin.Forms.Button button114;
			VisualDiagnostics.RegisterSourceInfo(button114 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 435, 26);
			Xamarin.Forms.Button button115;
			VisualDiagnostics.RegisterSourceInfo(button115 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 436, 26);
			Xamarin.Forms.Button button116;
			VisualDiagnostics.RegisterSourceInfo(button116 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 437, 26);
			Grid grid13;
			VisualDiagnostics.RegisterSourceInfo(grid13 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 409, 22);
			RowDefinition rowDefinition60;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition60 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 442, 30);
			RowDefinition rowDefinition61;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition61 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 443, 30);
			RowDefinition rowDefinition62;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition62 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 444, 30);
			RowDefinition rowDefinition63;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition63 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 445, 30);
			RowDefinition rowDefinition64;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition64 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 446, 30);
			RowDefinition rowDefinition65;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition65 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 447, 30);
			RowDefinition rowDefinition66;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition66 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 448, 30);
			RowDefinition rowDefinition67;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition67 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 449, 30);
			RowDefinition rowDefinition68;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition68 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 450, 30);
			RowDefinition rowDefinition69;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition69 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 451, 30);
			RowDefinition rowDefinition70;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition70 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 452, 30);
			RowDefinition rowDefinition71;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition71 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 453, 30);
			RowDefinition rowDefinition72;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition72 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 454, 30);
			ColumnDefinition columnDefinition25;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition25 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 457, 30);
			ColumnDefinition columnDefinition26;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition26 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 458, 30);
			Label label123;
			VisualDiagnostics.RegisterSourceInfo(label123 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 460, 26);
			Label label124;
			VisualDiagnostics.RegisterSourceInfo(label124 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 461, 26);
			Label label125;
			VisualDiagnostics.RegisterSourceInfo(label125 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 462, 26);
			Label label126;
			VisualDiagnostics.RegisterSourceInfo(label126 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 463, 26);
			Label label127;
			VisualDiagnostics.RegisterSourceInfo(label127 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 464, 26);
			Label label128;
			VisualDiagnostics.RegisterSourceInfo(label128 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 465, 26);
			Label label129;
			VisualDiagnostics.RegisterSourceInfo(label129 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 466, 26);
			Label label130;
			VisualDiagnostics.RegisterSourceInfo(label130 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 467, 26);
			Label label131;
			VisualDiagnostics.RegisterSourceInfo(label131 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 468, 26);
			Label label132;
			VisualDiagnostics.RegisterSourceInfo(label132 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 469, 26);
			Label label133;
			VisualDiagnostics.RegisterSourceInfo(label133 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 470, 26);
			Label label134;
			VisualDiagnostics.RegisterSourceInfo(label134 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 471, 26);
			Label label135;
			VisualDiagnostics.RegisterSourceInfo(label135 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 472, 26);
			Label label136;
			VisualDiagnostics.RegisterSourceInfo(label136 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 473, 26);
			Label label137;
			VisualDiagnostics.RegisterSourceInfo(label137 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 474, 26);
			Label label138;
			VisualDiagnostics.RegisterSourceInfo(label138 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 475, 26);
			Label label139;
			VisualDiagnostics.RegisterSourceInfo(label139 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 476, 26);
			Label label140;
			VisualDiagnostics.RegisterSourceInfo(label140 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 477, 26);
			Label label141;
			VisualDiagnostics.RegisterSourceInfo(label141 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 478, 26);
			Label label142;
			VisualDiagnostics.RegisterSourceInfo(label142 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 479, 26);
			Label label143;
			VisualDiagnostics.RegisterSourceInfo(label143 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 480, 26);
			Label label144;
			VisualDiagnostics.RegisterSourceInfo(label144 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 481, 26);
			Label label145;
			VisualDiagnostics.RegisterSourceInfo(label145 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 482, 26);
			Label label146;
			VisualDiagnostics.RegisterSourceInfo(label146 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 483, 26);
			Label label147;
			VisualDiagnostics.RegisterSourceInfo(label147 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 484, 26);
			Xamarin.Forms.Button button117;
			VisualDiagnostics.RegisterSourceInfo(button117 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 486, 26);
			Xamarin.Forms.Button button118;
			VisualDiagnostics.RegisterSourceInfo(button118 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 487, 26);
			Xamarin.Forms.Button button119;
			VisualDiagnostics.RegisterSourceInfo(button119 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 488, 26);
			Xamarin.Forms.Button button120;
			VisualDiagnostics.RegisterSourceInfo(button120 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 489, 26);
			Xamarin.Forms.Button button121;
			VisualDiagnostics.RegisterSourceInfo(button121 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 490, 26);
			Xamarin.Forms.Button button122;
			VisualDiagnostics.RegisterSourceInfo(button122 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 491, 26);
			Xamarin.Forms.Button button123;
			VisualDiagnostics.RegisterSourceInfo(button123 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 492, 26);
			Xamarin.Forms.Button button124;
			VisualDiagnostics.RegisterSourceInfo(button124 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 493, 26);
			Xamarin.Forms.Button button125;
			VisualDiagnostics.RegisterSourceInfo(button125 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 494, 26);
			Xamarin.Forms.Button button126;
			VisualDiagnostics.RegisterSourceInfo(button126 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 495, 26);
			Xamarin.Forms.Button button127;
			VisualDiagnostics.RegisterSourceInfo(button127 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 496, 26);
			Xamarin.Forms.Button button128;
			VisualDiagnostics.RegisterSourceInfo(button128 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 497, 26);
			Xamarin.Forms.Button button129;
			VisualDiagnostics.RegisterSourceInfo(button129 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 498, 26);
			Xamarin.Forms.Button button130;
			VisualDiagnostics.RegisterSourceInfo(button130 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 499, 26);
			Xamarin.Forms.Button button131;
			VisualDiagnostics.RegisterSourceInfo(button131 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 500, 26);
			Xamarin.Forms.Button button132;
			VisualDiagnostics.RegisterSourceInfo(button132 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 501, 26);
			Xamarin.Forms.Button button133;
			VisualDiagnostics.RegisterSourceInfo(button133 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 502, 26);
			Xamarin.Forms.Button button134;
			VisualDiagnostics.RegisterSourceInfo(button134 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 503, 26);
			Xamarin.Forms.Button button135;
			VisualDiagnostics.RegisterSourceInfo(button135 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 504, 26);
			Xamarin.Forms.Button button136;
			VisualDiagnostics.RegisterSourceInfo(button136 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 505, 26);
			Xamarin.Forms.Button button137;
			VisualDiagnostics.RegisterSourceInfo(button137 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 506, 26);
			Xamarin.Forms.Button button138;
			VisualDiagnostics.RegisterSourceInfo(button138 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 507, 26);
			Xamarin.Forms.Button button139;
			VisualDiagnostics.RegisterSourceInfo(button139 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 508, 26);
			Xamarin.Forms.Button button140;
			VisualDiagnostics.RegisterSourceInfo(button140 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 509, 26);
			Xamarin.Forms.Button button141;
			VisualDiagnostics.RegisterSourceInfo(button141 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 510, 26);
			Grid grid14;
			VisualDiagnostics.RegisterSourceInfo(grid14 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 440, 22);
			Xamarin.Forms.Button button142;
			VisualDiagnostics.RegisterSourceInfo(button142 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 512, 22);
			RowDefinition rowDefinition73;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition73 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 515, 30);
			RowDefinition rowDefinition74;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition74 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 516, 30);
			RowDefinition rowDefinition75;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition75 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 517, 30);
			RowDefinition rowDefinition76;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition76 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 518, 30);
			ColumnDefinition columnDefinition27;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition27 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 521, 30);
			ColumnDefinition columnDefinition28;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition28 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 522, 30);
			Label label148;
			VisualDiagnostics.RegisterSourceInfo(label148 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 524, 26);
			Label label149;
			VisualDiagnostics.RegisterSourceInfo(label149 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 525, 26);
			Label label150;
			VisualDiagnostics.RegisterSourceInfo(label150 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 526, 26);
			Label label151;
			VisualDiagnostics.RegisterSourceInfo(label151 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 527, 26);
			Label label152;
			VisualDiagnostics.RegisterSourceInfo(label152 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 528, 26);
			Label label153;
			VisualDiagnostics.RegisterSourceInfo(label153 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 529, 26);
			Label label154;
			VisualDiagnostics.RegisterSourceInfo(label154 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 530, 26);
			Label label155;
			VisualDiagnostics.RegisterSourceInfo(label155 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 531, 26);
			Label label156;
			VisualDiagnostics.RegisterSourceInfo(label156 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 533, 26);
			Label label157;
			VisualDiagnostics.RegisterSourceInfo(label157 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 534, 26);
			Xamarin.Forms.Button button143;
			VisualDiagnostics.RegisterSourceInfo(button143 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 536, 26);
			Xamarin.Forms.Button button144;
			VisualDiagnostics.RegisterSourceInfo(button144 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 537, 26);
			Xamarin.Forms.Button button145;
			VisualDiagnostics.RegisterSourceInfo(button145 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 538, 26);
			Xamarin.Forms.Button button146;
			VisualDiagnostics.RegisterSourceInfo(button146 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 540, 26);
			Xamarin.Forms.Button button147;
			VisualDiagnostics.RegisterSourceInfo(button147 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 541, 26);
			Grid grid15;
			VisualDiagnostics.RegisterSourceInfo(grid15 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 513, 22);
			RowDefinition rowDefinition77;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition77 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 545, 30);
			RowDefinition rowDefinition78;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition78 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 546, 30);
			RowDefinition rowDefinition79;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition79 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 547, 30);
			RowDefinition rowDefinition80;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition80 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 548, 30);
			ColumnDefinition columnDefinition29;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition29 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 551, 30);
			ColumnDefinition columnDefinition30;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition30 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 552, 30);
			Label label158;
			VisualDiagnostics.RegisterSourceInfo(label158 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 554, 26);
			Label label159;
			VisualDiagnostics.RegisterSourceInfo(label159 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 555, 26);
			Label label160;
			VisualDiagnostics.RegisterSourceInfo(label160 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 556, 26);
			Label label161;
			VisualDiagnostics.RegisterSourceInfo(label161 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 557, 26);
			Label label162;
			VisualDiagnostics.RegisterSourceInfo(label162 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 558, 26);
			Label label163;
			VisualDiagnostics.RegisterSourceInfo(label163 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 559, 26);
			Label label164;
			VisualDiagnostics.RegisterSourceInfo(label164 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 560, 26);
			Label label165;
			VisualDiagnostics.RegisterSourceInfo(label165 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 561, 26);
			Label label166;
			VisualDiagnostics.RegisterSourceInfo(label166 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 562, 26);
			Label label167;
			VisualDiagnostics.RegisterSourceInfo(label167 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 563, 26);
			Label label168;
			VisualDiagnostics.RegisterSourceInfo(label168 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 564, 26);
			Label label169;
			VisualDiagnostics.RegisterSourceInfo(label169 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 565, 26);
			Label label170;
			VisualDiagnostics.RegisterSourceInfo(label170 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 566, 26);
			Label label171;
			VisualDiagnostics.RegisterSourceInfo(label171 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 567, 26);
			Xamarin.Forms.Button button148;
			VisualDiagnostics.RegisterSourceInfo(button148 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 569, 26);
			Xamarin.Forms.Button button149;
			VisualDiagnostics.RegisterSourceInfo(button149 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 570, 26);
			Xamarin.Forms.Button button150;
			VisualDiagnostics.RegisterSourceInfo(button150 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 571, 26);
			Xamarin.Forms.Button button151;
			VisualDiagnostics.RegisterSourceInfo(button151 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 572, 26);
			Xamarin.Forms.Button button152;
			VisualDiagnostics.RegisterSourceInfo(button152 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 573, 26);
			Xamarin.Forms.Button button153;
			VisualDiagnostics.RegisterSourceInfo(button153 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 574, 26);
			Xamarin.Forms.Button button154;
			VisualDiagnostics.RegisterSourceInfo(button154 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 575, 26);
			Xamarin.Forms.Button button155;
			VisualDiagnostics.RegisterSourceInfo(button155 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 576, 26);
			Xamarin.Forms.Button button156;
			VisualDiagnostics.RegisterSourceInfo(button156 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 577, 26);
			Xamarin.Forms.Button button157;
			VisualDiagnostics.RegisterSourceInfo(button157 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 578, 26);
			Xamarin.Forms.Button button158;
			VisualDiagnostics.RegisterSourceInfo(button158 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 579, 26);
			Xamarin.Forms.Button button159;
			VisualDiagnostics.RegisterSourceInfo(button159 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 580, 26);
			Xamarin.Forms.Button button160;
			VisualDiagnostics.RegisterSourceInfo(button160 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 581, 26);
			Xamarin.Forms.Button button161;
			VisualDiagnostics.RegisterSourceInfo(button161 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 582, 26);
			Grid grid16;
			VisualDiagnostics.RegisterSourceInfo(grid16 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 543, 22);
			Xamarin.Forms.Button button162;
			VisualDiagnostics.RegisterSourceInfo(button162 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 584, 22);
			RowDefinition rowDefinition81;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition81 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 587, 30);
			RowDefinition rowDefinition82;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition82 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 588, 30);
			RowDefinition rowDefinition83;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition83 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 589, 30);
			RowDefinition rowDefinition84;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition84 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 590, 30);
			RowDefinition rowDefinition85;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition85 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 591, 30);
			RowDefinition rowDefinition86;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition86 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 592, 30);
			ColumnDefinition columnDefinition31;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition31 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 595, 30);
			ColumnDefinition columnDefinition32;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition32 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 596, 30);
			Label label172;
			VisualDiagnostics.RegisterSourceInfo(label172 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 598, 26);
			Label label173;
			VisualDiagnostics.RegisterSourceInfo(label173 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 599, 26);
			Label label174;
			VisualDiagnostics.RegisterSourceInfo(label174 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 600, 26);
			Label label175;
			VisualDiagnostics.RegisterSourceInfo(label175 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 601, 26);
			Label label176;
			VisualDiagnostics.RegisterSourceInfo(label176 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 602, 26);
			Label label177;
			VisualDiagnostics.RegisterSourceInfo(label177 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 603, 26);
			Label label178;
			VisualDiagnostics.RegisterSourceInfo(label178 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 604, 26);
			Label label179;
			VisualDiagnostics.RegisterSourceInfo(label179 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 605, 26);
			Label label180;
			VisualDiagnostics.RegisterSourceInfo(label180 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 606, 26);
			Label label181;
			VisualDiagnostics.RegisterSourceInfo(label181 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 607, 26);
			Label label182;
			VisualDiagnostics.RegisterSourceInfo(label182 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 608, 26);
			Label label183;
			VisualDiagnostics.RegisterSourceInfo(label183 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 609, 26);
			Xamarin.Forms.Button button163;
			VisualDiagnostics.RegisterSourceInfo(button163 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 611, 26);
			Xamarin.Forms.Button button164;
			VisualDiagnostics.RegisterSourceInfo(button164 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 612, 26);
			Xamarin.Forms.Button button165;
			VisualDiagnostics.RegisterSourceInfo(button165 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 613, 26);
			Xamarin.Forms.Button button166;
			VisualDiagnostics.RegisterSourceInfo(button166 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 614, 26);
			Xamarin.Forms.Button button167;
			VisualDiagnostics.RegisterSourceInfo(button167 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 615, 26);
			Xamarin.Forms.Button button168;
			VisualDiagnostics.RegisterSourceInfo(button168 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 616, 26);
			Xamarin.Forms.Button button169;
			VisualDiagnostics.RegisterSourceInfo(button169 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 617, 26);
			Xamarin.Forms.Button button170;
			VisualDiagnostics.RegisterSourceInfo(button170 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 618, 26);
			Xamarin.Forms.Button button171;
			VisualDiagnostics.RegisterSourceInfo(button171 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 619, 26);
			Grid grid17;
			VisualDiagnostics.RegisterSourceInfo(grid17 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 585, 22);
			Xamarin.Forms.Button button172;
			VisualDiagnostics.RegisterSourceInfo(button172 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 621, 22);
			RowDefinition rowDefinition87;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition87 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 624, 30);
			RowDefinition rowDefinition88;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition88 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 625, 30);
			RowDefinition rowDefinition89;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition89 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 626, 30);
			RowDefinition rowDefinition90;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition90 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 627, 30);
			RowDefinition rowDefinition91;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition91 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 628, 30);
			RowDefinition rowDefinition92;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition92 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 629, 30);
			RowDefinition rowDefinition93;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition93 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 630, 30);
			RowDefinition rowDefinition94;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition94 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 631, 30);
			ColumnDefinition columnDefinition33;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition33 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 634, 30);
			ColumnDefinition columnDefinition34;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition34 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 635, 30);
			Label label184;
			VisualDiagnostics.RegisterSourceInfo(label184 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 637, 26);
			Label label185;
			VisualDiagnostics.RegisterSourceInfo(label185 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 638, 26);
			Label label186;
			VisualDiagnostics.RegisterSourceInfo(label186 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 639, 26);
			Label label187;
			VisualDiagnostics.RegisterSourceInfo(label187 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 640, 26);
			Label label188;
			VisualDiagnostics.RegisterSourceInfo(label188 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 641, 26);
			Label label189;
			VisualDiagnostics.RegisterSourceInfo(label189 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 642, 26);
			Label label190;
			VisualDiagnostics.RegisterSourceInfo(label190 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 643, 26);
			Label label191;
			VisualDiagnostics.RegisterSourceInfo(label191 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 644, 26);
			Label label192;
			VisualDiagnostics.RegisterSourceInfo(label192 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 645, 26);
			Label label193;
			VisualDiagnostics.RegisterSourceInfo(label193 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 646, 26);
			Label label194;
			VisualDiagnostics.RegisterSourceInfo(label194 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 647, 26);
			Label label195;
			VisualDiagnostics.RegisterSourceInfo(label195 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 648, 26);
			Label label196;
			VisualDiagnostics.RegisterSourceInfo(label196 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 649, 26);
			Label label197;
			VisualDiagnostics.RegisterSourceInfo(label197 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 650, 26);
			Label label198;
			VisualDiagnostics.RegisterSourceInfo(label198 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 651, 26);
			Label label199;
			VisualDiagnostics.RegisterSourceInfo(label199 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 652, 26);
			Label label200;
			VisualDiagnostics.RegisterSourceInfo(label200 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 653, 26);
			Label label201;
			VisualDiagnostics.RegisterSourceInfo(label201 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 654, 26);
			Label label202;
			VisualDiagnostics.RegisterSourceInfo(label202 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 655, 26);
			Label label203;
			VisualDiagnostics.RegisterSourceInfo(label203 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 656, 26);
			Label label204;
			VisualDiagnostics.RegisterSourceInfo(label204 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 657, 26);
			Label label205;
			VisualDiagnostics.RegisterSourceInfo(label205 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 658, 26);
			Label label206;
			VisualDiagnostics.RegisterSourceInfo(label206 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 660, 26);
			Label label207;
			VisualDiagnostics.RegisterSourceInfo(label207 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 661, 26);
			Label label208;
			VisualDiagnostics.RegisterSourceInfo(label208 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 662, 26);
			Label label209;
			VisualDiagnostics.RegisterSourceInfo(label209 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 663, 26);
			Label label210;
			VisualDiagnostics.RegisterSourceInfo(label210 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 664, 26);
			Label label211;
			VisualDiagnostics.RegisterSourceInfo(label211 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 665, 26);
			Label label212;
			VisualDiagnostics.RegisterSourceInfo(label212 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 666, 26);
			Label label213;
			VisualDiagnostics.RegisterSourceInfo(label213 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 667, 26);
			Label label214;
			VisualDiagnostics.RegisterSourceInfo(label214 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 668, 26);
			Label label215;
			VisualDiagnostics.RegisterSourceInfo(label215 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 669, 26);
			Label label216;
			VisualDiagnostics.RegisterSourceInfo(label216 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 670, 26);
			Label label217;
			VisualDiagnostics.RegisterSourceInfo(label217 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 671, 26);
			Label label218;
			VisualDiagnostics.RegisterSourceInfo(label218 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 672, 26);
			Label label219;
			VisualDiagnostics.RegisterSourceInfo(label219 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 673, 26);
			Label label220;
			VisualDiagnostics.RegisterSourceInfo(label220 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 674, 26);
			Xamarin.Forms.Button button173;
			VisualDiagnostics.RegisterSourceInfo(button173 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 676, 26);
			Xamarin.Forms.Button button174;
			VisualDiagnostics.RegisterSourceInfo(button174 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 677, 26);
			Xamarin.Forms.Button button175;
			VisualDiagnostics.RegisterSourceInfo(button175 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 678, 26);
			Xamarin.Forms.Button button176;
			VisualDiagnostics.RegisterSourceInfo(button176 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 679, 26);
			Xamarin.Forms.Button button177;
			VisualDiagnostics.RegisterSourceInfo(button177 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 680, 26);
			Xamarin.Forms.Button button178;
			VisualDiagnostics.RegisterSourceInfo(button178 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 681, 26);
			Xamarin.Forms.Button button179;
			VisualDiagnostics.RegisterSourceInfo(button179 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 682, 26);
			Xamarin.Forms.Button button180;
			VisualDiagnostics.RegisterSourceInfo(button180 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 683, 26);
			Xamarin.Forms.Button button181;
			VisualDiagnostics.RegisterSourceInfo(button181 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 684, 26);
			Xamarin.Forms.Button button182;
			VisualDiagnostics.RegisterSourceInfo(button182 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 685, 26);
			Xamarin.Forms.Button button183;
			VisualDiagnostics.RegisterSourceInfo(button183 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 686, 26);
			Xamarin.Forms.Button button184;
			VisualDiagnostics.RegisterSourceInfo(button184 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 687, 26);
			Xamarin.Forms.Button button185;
			VisualDiagnostics.RegisterSourceInfo(button185 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 688, 26);
			Xamarin.Forms.Button button186;
			VisualDiagnostics.RegisterSourceInfo(button186 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 689, 26);
			Xamarin.Forms.Button button187;
			VisualDiagnostics.RegisterSourceInfo(button187 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 690, 26);
			Xamarin.Forms.Button button188;
			VisualDiagnostics.RegisterSourceInfo(button188 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 691, 26);
			Xamarin.Forms.Button button189;
			VisualDiagnostics.RegisterSourceInfo(button189 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 692, 26);
			Xamarin.Forms.Button button190;
			VisualDiagnostics.RegisterSourceInfo(button190 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 693, 26);
			Xamarin.Forms.Button button191;
			VisualDiagnostics.RegisterSourceInfo(button191 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 694, 26);
			Xamarin.Forms.Button button192;
			VisualDiagnostics.RegisterSourceInfo(button192 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 695, 26);
			Xamarin.Forms.Button button193;
			VisualDiagnostics.RegisterSourceInfo(button193 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 696, 26);
			Xamarin.Forms.Button button194;
			VisualDiagnostics.RegisterSourceInfo(button194 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 697, 26);
			Xamarin.Forms.Button button195;
			VisualDiagnostics.RegisterSourceInfo(button195 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 699, 26);
			Xamarin.Forms.Button button196;
			VisualDiagnostics.RegisterSourceInfo(button196 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 700, 26);
			Xamarin.Forms.Button button197;
			VisualDiagnostics.RegisterSourceInfo(button197 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 701, 26);
			Xamarin.Forms.Button button198;
			VisualDiagnostics.RegisterSourceInfo(button198 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 702, 26);
			Xamarin.Forms.Button button199;
			VisualDiagnostics.RegisterSourceInfo(button199 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 703, 26);
			Xamarin.Forms.Button button200;
			VisualDiagnostics.RegisterSourceInfo(button200 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 704, 26);
			Xamarin.Forms.Button button201;
			VisualDiagnostics.RegisterSourceInfo(button201 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 705, 26);
			Xamarin.Forms.Button button202;
			VisualDiagnostics.RegisterSourceInfo(button202 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 706, 26);
			Xamarin.Forms.Button button203;
			VisualDiagnostics.RegisterSourceInfo(button203 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 707, 26);
			Xamarin.Forms.Button button204;
			VisualDiagnostics.RegisterSourceInfo(button204 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 708, 26);
			Xamarin.Forms.Button button205;
			VisualDiagnostics.RegisterSourceInfo(button205 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 709, 26);
			Xamarin.Forms.Button button206;
			VisualDiagnostics.RegisterSourceInfo(button206 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 710, 26);
			Xamarin.Forms.Button button207;
			VisualDiagnostics.RegisterSourceInfo(button207 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 711, 26);
			Xamarin.Forms.Button button208;
			VisualDiagnostics.RegisterSourceInfo(button208 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 712, 26);
			Xamarin.Forms.Button button209;
			VisualDiagnostics.RegisterSourceInfo(button209 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 713, 26);
			Grid grid18;
			VisualDiagnostics.RegisterSourceInfo(grid18 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 622, 22);
			Xamarin.Forms.Button button210;
			VisualDiagnostics.RegisterSourceInfo(button210 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 716, 22);
			RowDefinition rowDefinition95;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition95 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 719, 30);
			RowDefinition rowDefinition96;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition96 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 720, 30);
			RowDefinition rowDefinition97;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition97 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 721, 30);
			RowDefinition rowDefinition98;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition98 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 722, 30);
			RowDefinition rowDefinition99;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition99 = new RowDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 723, 30);
			ColumnDefinition columnDefinition35;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition35 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 726, 30);
			ColumnDefinition columnDefinition36;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition36 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 727, 30);
			Label label221;
			VisualDiagnostics.RegisterSourceInfo(label221 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 729, 26);
			Label label222;
			VisualDiagnostics.RegisterSourceInfo(label222 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 730, 26);
			Label label223;
			VisualDiagnostics.RegisterSourceInfo(label223 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 731, 26);
			Label label224;
			VisualDiagnostics.RegisterSourceInfo(label224 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 732, 26);
			Label label225;
			VisualDiagnostics.RegisterSourceInfo(label225 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 733, 26);
			Label label226;
			VisualDiagnostics.RegisterSourceInfo(label226 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 734, 26);
			Label label227;
			VisualDiagnostics.RegisterSourceInfo(label227 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 735, 26);
			Label label228;
			VisualDiagnostics.RegisterSourceInfo(label228 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 736, 26);
			Label label229;
			VisualDiagnostics.RegisterSourceInfo(label229 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 737, 26);
			Grid grid19;
			VisualDiagnostics.RegisterSourceInfo(grid19 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 717, 22);
			StackLayout stackLayout6;
			VisualDiagnostics.RegisterSourceInfo(stackLayout6 = new StackLayout(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 13, 18);
			Xamarin.Forms.ScrollView scrollView;
			VisualDiagnostics.RegisterSourceInfo(scrollView = new Xamarin.Forms.ScrollView(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 12, 14);
			ColumnDefinition columnDefinition37;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition37 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 744, 22);
			ColumnDefinition columnDefinition38;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition38 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 745, 22);
			ColumnDefinition columnDefinition39;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition39 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 746, 22);
			ColumnDefinition columnDefinition40;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition40 = new ColumnDefinition(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 747, 22);
			Xamarin.Forms.Button button211;
			VisualDiagnostics.RegisterSourceInfo(button211 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 749, 18);
			Xamarin.Forms.Button button212;
			VisualDiagnostics.RegisterSourceInfo(button212 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 752, 18);
			Xamarin.Forms.Button button213;
			VisualDiagnostics.RegisterSourceInfo(button213 = new Xamarin.Forms.Button(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 755, 18);
			Label label230;
			VisualDiagnostics.RegisterSourceInfo(label230 = new Label(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 758, 18);
			Grid grid20;
			VisualDiagnostics.RegisterSourceInfo(grid20 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 742, 14);
			Grid grid21;
			VisualDiagnostics.RegisterSourceInfo(grid21 = new Grid(), new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 7, 10);
			ProControlPage proControlPage;
			VisualDiagnostics.RegisterSourceInfo(proControlPage = this, new Uri("ProControlPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 2, 2);
			NameScope nameScope = (NameScope)(NameScope.GetNameScope(proControlPage) ?? new NameScope());
			NameScope.SetNameScope(proControlPage, nameScope);
			((INameScope)nameScope).RegisterName("girdall", (object)grid21);
			if (grid21.StyleId == null)
			{
				grid21.StyleId = "girdall";
			}
			((INameScope)nameScope).RegisterName("DetailView", (object)scrollView);
			if (scrollView.StyleId == null)
			{
				scrollView.StyleId = "DetailView";
			}
			((INameScope)nameScope).RegisterName("RowText0", (object)label);
			if (label.StyleId == null)
			{
				label.StyleId = "RowText0";
			}
			((INameScope)nameScope).RegisterName("ModelFactoryName", (object)label2);
			if (label2.StyleId == null)
			{
				label2.StyleId = "ModelFactoryName";
			}
			((INameScope)nameScope).RegisterName("ModelName", (object)label3);
			if (label3.StyleId == null)
			{
				label3.StyleId = "ModelName";
			}
			((INameScope)nameScope).RegisterName("ModelTypeName", (object)label4);
			if (label4.StyleId == null)
			{
				label4.StyleId = "ModelTypeName";
			}
			((INameScope)nameScope).RegisterName("ModelType", (object)label5);
			if (label5.StyleId == null)
			{
				label5.StyleId = "ModelType";
			}
			((INameScope)nameScope).RegisterName("ModelPowerName", (object)label6);
			if (label6.StyleId == null)
			{
				label6.StyleId = "ModelPowerName";
			}
			((INameScope)nameScope).RegisterName("ModelPower", (object)label7);
			if (label7.StyleId == null)
			{
				label7.StyleId = "ModelPower";
			}
			((INameScope)nameScope).RegisterName("ModelCurrName", (object)label8);
			if (label8.StyleId == null)
			{
				label8.StyleId = "ModelCurrName";
			}
			((INameScope)nameScope).RegisterName("ModelCurr", (object)label9);
			if (label9.StyleId == null)
			{
				label9.StyleId = "ModelCurr";
			}
			((INameScope)nameScope).RegisterName("ModelNumber", (object)label10);
			if (label10.StyleId == null)
			{
				label10.StyleId = "ModelNumber";
			}
			((INameScope)nameScope).RegisterName("CustomCode", (object)label11);
			if (label11.StyleId == null)
			{
				label11.StyleId = "CustomCode";
			}
			((INameScope)nameScope).RegisterName("MorseCodeName", (object)label12);
			if (label12.StyleId == null)
			{
				label12.StyleId = "MorseCodeName";
			}
			((INameScope)nameScope).RegisterName("RowDateTime", (object)button3);
			if (button3.StyleId == null)
			{
				button3.StyleId = "RowDateTime";
			}
			((INameScope)nameScope).RegisterName("DateTimeGrid", (object)grid4);
			if (grid4.StyleId == null)
			{
				grid4.StyleId = "DateTimeGrid";
			}
			((INameScope)nameScope).RegisterName("ModelDate", (object)label13);
			if (label13.StyleId == null)
			{
				label13.StyleId = "ModelDate";
			}
			((INameScope)nameScope).RegisterName("ModelTime", (object)label14);
			if (label14.StyleId == null)
			{
				label14.StyleId = "ModelTime";
			}
			((INameScope)nameScope).RegisterName("RowText2", (object)button4);
			if (button4.StyleId == null)
			{
				button4.StyleId = "RowText2";
			}
			((INameScope)nameScope).RegisterName("Motopara", (object)grid5);
			if (grid5.StyleId == null)
			{
				grid5.StyleId = "Motopara";
			}
			((INameScope)nameScope).RegisterName("PositionDetect", (object)label15);
			if (label15.StyleId == null)
			{
				label15.StyleId = "PositionDetect";
			}
			((INameScope)nameScope).RegisterName("NTC_PTC", (object)label16);
			if (label16.StyleId == null)
			{
				label16.StyleId = "NTC_PTC";
			}
			((INameScope)nameScope).RegisterName("PhaseOffset", (object)label17);
			if (label17.StyleId == null)
			{
				label17.StyleId = "PhaseOffset";
			}
			((INameScope)nameScope).RegisterName("PolePairsDisplay", (object)label18);
			if (label18.StyleId == null)
			{
				label18.StyleId = "PolePairsDisplay";
			}
			((INameScope)nameScope).RegisterName("Direction", (object)label19);
			if (label19.StyleId == null)
			{
				label19.StyleId = "Direction";
			}
			((INameScope)nameScope).RegisterName("RatedSpeed", (object)label20);
			if (label20.StyleId == null)
			{
				label20.StyleId = "RatedSpeed";
			}
			((INameScope)nameScope).RegisterName("RatedVoltage", (object)label21);
			if (label21.StyleId == null)
			{
				label21.StyleId = "RatedVoltage";
			}
			((INameScope)nameScope).RegisterName("RatedPower", (object)label22);
			if (label22.StyleId == null)
			{
				label22.StyleId = "RatedPower";
			}
			((INameScope)nameScope).RegisterName("MaxSpeed", (object)label23);
			if (label23.StyleId == null)
			{
				label23.StyleId = "MaxSpeed";
			}
			((INameScope)nameScope).RegisterName("BackSpeed", (object)label24);
			if (label24.StyleId == null)
			{
				label24.StyleId = "BackSpeed";
			}
			((INameScope)nameScope).RegisterName("MaxLineCurr", (object)label25);
			if (label25.StyleId == null)
			{
				label25.StyleId = "MaxLineCurr";
			}
			((INameScope)nameScope).RegisterName("MaxPhaseCurr", (object)label26);
			if (label26.StyleId == null)
			{
				label26.StyleId = "MaxPhaseCurr";
			}
			((INameScope)nameScope).RegisterName("ECOConfig", (object)label27);
			if (label27.StyleId == null)
			{
				label27.StyleId = "ECOConfig";
			}
			((INameScope)nameScope).RegisterName("Max_Acc", (object)label28);
			if (label28.StyleId == null)
			{
				label28.StyleId = "Max_Acc";
			}
			((INameScope)nameScope).RegisterName("CustomMaxLine", (object)label29);
			if (label29.StyleId == null)
			{
				label29.StyleId = "CustomMaxLine";
			}
			((INameScope)nameScope).RegisterName("CustomMaxPhase", (object)label30);
			if (label30.StyleId == null)
			{
				label30.StyleId = "CustomMaxPhase";
			}
			((INameScope)nameScope).RegisterName("Motopara2", (object)grid6);
			if (grid6.StyleId == null)
			{
				grid6.StyleId = "Motopara2";
			}
			((INameScope)nameScope).RegisterName("PhaseExchange", (object)label31);
			if (label31.StyleId == null)
			{
				label31.StyleId = "PhaseExchange";
			}
			((INameScope)nameScope).RegisterName("AccCoeff", (object)label32);
			if (label32.StyleId == null)
			{
				label32.StyleId = "AccCoeff";
			}
			((INameScope)nameScope).RegisterName("WeakA", (object)label33);
			if (label33.StyleId == null)
			{
				label33.StyleId = "WeakA";
			}
			((INameScope)nameScope).RegisterName("WeakTime", (object)label34);
			if (label34.StyleId == null)
			{
				label34.StyleId = "WeakTime";
			}
			((INameScope)nameScope).RegisterName("Max_Dec", (object)label35);
			if (label35.StyleId == null)
			{
				label35.StyleId = "Max_Dec";
			}
			((INameScope)nameScope).RegisterName("QuickDown", (object)label36);
			if (label36.StyleId == null)
			{
				label36.StyleId = "QuickDown";
			}
			((INameScope)nameScope).RegisterName("ThrottleLow", (object)label37);
			if (label37.StyleId == null)
			{
				label37.StyleId = "ThrottleLow";
			}
			((INameScope)nameScope).RegisterName("ThrottleHigh", (object)label38);
			if (label38.StyleId == null)
			{
				label38.StyleId = "ThrottleHigh";
			}
			((INameScope)nameScope).RegisterName("PhaseExchangeB", (object)button21);
			if (button21.StyleId == null)
			{
				button21.StyleId = "PhaseExchangeB";
			}
			((INameScope)nameScope).RegisterName("Max_DecB", (object)button25);
			if (button25.StyleId == null)
			{
				button25.StyleId = "Max_DecB";
			}
			((INameScope)nameScope).RegisterName("RowText4", (object)button29);
			if (button29.StyleId == null)
			{
				button29.StyleId = "RowText4";
			}
			((INameScope)nameScope).RegisterName("SpeedRatioPara", (object)grid7);
			if (grid7.StyleId == null)
			{
				grid7.StyleId = "SpeedRatioPara";
			}
			((INameScope)nameScope).RegisterName("Ratio500", (object)label39);
			if (label39.StyleId == null)
			{
				label39.StyleId = "Ratio500";
			}
			((INameScope)nameScope).RegisterName("Ratio1000", (object)label40);
			if (label40.StyleId == null)
			{
				label40.StyleId = "Ratio1000";
			}
			((INameScope)nameScope).RegisterName("Ratio1500", (object)label41);
			if (label41.StyleId == null)
			{
				label41.StyleId = "Ratio1500";
			}
			((INameScope)nameScope).RegisterName("Ratio2000", (object)label42);
			if (label42.StyleId == null)
			{
				label42.StyleId = "Ratio2000";
			}
			((INameScope)nameScope).RegisterName("Ratio2500", (object)label43);
			if (label43.StyleId == null)
			{
				label43.StyleId = "Ratio2500";
			}
			((INameScope)nameScope).RegisterName("Ratio3000", (object)label44);
			if (label44.StyleId == null)
			{
				label44.StyleId = "Ratio3000";
			}
			((INameScope)nameScope).RegisterName("Ratio3500", (object)label45);
			if (label45.StyleId == null)
			{
				label45.StyleId = "Ratio3500";
			}
			((INameScope)nameScope).RegisterName("Ratio4000", (object)label46);
			if (label46.StyleId == null)
			{
				label46.StyleId = "Ratio4000";
			}
			((INameScope)nameScope).RegisterName("Ratio4500", (object)label47);
			if (label47.StyleId == null)
			{
				label47.StyleId = "Ratio4500";
			}
			((INameScope)nameScope).RegisterName("Ratio5000", (object)label48);
			if (label48.StyleId == null)
			{
				label48.StyleId = "Ratio5000";
			}
			((INameScope)nameScope).RegisterName("Ratio5500", (object)label49);
			if (label49.StyleId == null)
			{
				label49.StyleId = "Ratio5500";
			}
			((INameScope)nameScope).RegisterName("Ratio6000", (object)label50);
			if (label50.StyleId == null)
			{
				label50.StyleId = "Ratio6000";
			}
			((INameScope)nameScope).RegisterName("Ratio6500", (object)label51);
			if (label51.StyleId == null)
			{
				label51.StyleId = "Ratio6500";
			}
			((INameScope)nameScope).RegisterName("Ratio7000", (object)label52);
			if (label52.StyleId == null)
			{
				label52.StyleId = "Ratio7000";
			}
			((INameScope)nameScope).RegisterName("Ratio7500", (object)label53);
			if (label53.StyleId == null)
			{
				label53.StyleId = "Ratio7500";
			}
			((INameScope)nameScope).RegisterName("Ratio8000", (object)label54);
			if (label54.StyleId == null)
			{
				label54.StyleId = "Ratio8000";
			}
			((INameScope)nameScope).RegisterName("Ratio8500", (object)label55);
			if (label55.StyleId == null)
			{
				label55.StyleId = "Ratio8500";
			}
			((INameScope)nameScope).RegisterName("Ratio9000", (object)label56);
			if (label56.StyleId == null)
			{
				label56.StyleId = "Ratio9000";
			}
			((INameScope)nameScope).RegisterName("LD", (object)label57);
			if (label57.StyleId == null)
			{
				label57.StyleId = "LD";
			}
			((INameScope)nameScope).RegisterName("LQ", (object)label58);
			if (label58.StyleId == null)
			{
				label58.StyleId = "LQ";
			}
			((INameScope)nameScope).RegisterName("FAIF", (object)label59);
			if (label59.StyleId == null)
			{
				label59.StyleId = "FAIF";
			}
			((INameScope)nameScope).RegisterName("LmtSpeed", (object)label60);
			if (label60.StyleId == null)
			{
				label60.StyleId = "LmtSpeed";
			}
			((INameScope)nameScope).RegisterName("RowText5", (object)button52);
			if (button52.StyleId == null)
			{
				button52.StyleId = "RowText5";
			}
			((INameScope)nameScope).RegisterName("RowText5Para", (object)grid8);
			if (grid8.StyleId == null)
			{
				grid8.StyleId = "RowText5Para";
			}
			((INameScope)nameScope).RegisterName("LowSpeedLineCurr", (object)label61);
			if (label61.StyleId == null)
			{
				label61.StyleId = "LowSpeedLineCurr";
			}
			((INameScope)nameScope).RegisterName("MidSpeedLineCurr", (object)label62);
			if (label62.StyleId == null)
			{
				label62.StyleId = "MidSpeedLineCurr";
			}
			((INameScope)nameScope).RegisterName("LowSpeedPhaseCurr", (object)label63);
			if (label63.StyleId == null)
			{
				label63.StyleId = "LowSpeedPhaseCurr";
			}
			((INameScope)nameScope).RegisterName("MidSpeedPhaseCurr", (object)label64);
			if (label64.StyleId == null)
			{
				label64.StyleId = "MidSpeedPhaseCurr";
			}
			((INameScope)nameScope).RegisterName("LowSpeed", (object)label65);
			if (label65.StyleId == null)
			{
				label65.StyleId = "LowSpeed";
			}
			((INameScope)nameScope).RegisterName("MidSpeed", (object)label66);
			if (label66.StyleId == null)
			{
				label66.StyleId = "MidSpeed";
			}
			((INameScope)nameScope).RegisterName("NRowText4", (object)button59);
			if (button59.StyleId == null)
			{
				button59.StyleId = "NRowText4";
			}
			((INameScope)nameScope).RegisterName("NSpeedRatioPara", (object)grid9);
			if (grid9.StyleId == null)
			{
				grid9.StyleId = "NSpeedRatioPara";
			}
			((INameScope)nameScope).RegisterName("StopBackCurr", (object)label67);
			if (label67.StyleId == null)
			{
				label67.StyleId = "StopBackCurr";
			}
			((INameScope)nameScope).RegisterName("MaxBackCurr", (object)label68);
			if (label68.StyleId == null)
			{
				label68.StyleId = "MaxBackCurr";
			}
			((INameScope)nameScope).RegisterName("BattRatedCap1", (object)label69);
			if (label69.StyleId == null)
			{
				label69.StyleId = "BattRatedCap1";
			}
			((INameScope)nameScope).RegisterName("NSpeedRatioParaE", (object)grid10);
			if (grid10.StyleId == null)
			{
				grid10.StyleId = "NSpeedRatioParaE";
			}
			((INameScope)nameScope).RegisterName("FreeThrottle", (object)label70);
			if (label70.StyleId == null)
			{
				label70.StyleId = "FreeThrottle";
			}
			((INameScope)nameScope).RegisterName("Voltage2", (object)label71);
			if (label71.StyleId == null)
			{
				label71.StyleId = "Voltage2";
			}
			((INameScope)nameScope).RegisterName("NRatio500", (object)label72);
			if (label72.StyleId == null)
			{
				label72.StyleId = "NRatio500";
			}
			((INameScope)nameScope).RegisterName("NRatio1000", (object)label73);
			if (label73.StyleId == null)
			{
				label73.StyleId = "NRatio1000";
			}
			((INameScope)nameScope).RegisterName("NRatio1500", (object)label74);
			if (label74.StyleId == null)
			{
				label74.StyleId = "NRatio1500";
			}
			((INameScope)nameScope).RegisterName("NRatio2000", (object)label75);
			if (label75.StyleId == null)
			{
				label75.StyleId = "NRatio2000";
			}
			((INameScope)nameScope).RegisterName("NRatio2500", (object)label76);
			if (label76.StyleId == null)
			{
				label76.StyleId = "NRatio2500";
			}
			((INameScope)nameScope).RegisterName("NRatio3000", (object)label77);
			if (label77.StyleId == null)
			{
				label77.StyleId = "NRatio3000";
			}
			((INameScope)nameScope).RegisterName("NRatio3500", (object)label78);
			if (label78.StyleId == null)
			{
				label78.StyleId = "NRatio3500";
			}
			((INameScope)nameScope).RegisterName("NRatio4000", (object)label79);
			if (label79.StyleId == null)
			{
				label79.StyleId = "NRatio4000";
			}
			((INameScope)nameScope).RegisterName("NRatio4500", (object)label80);
			if (label80.StyleId == null)
			{
				label80.StyleId = "NRatio4500";
			}
			((INameScope)nameScope).RegisterName("NRatio5000", (object)label81);
			if (label81.StyleId == null)
			{
				label81.StyleId = "NRatio5000";
			}
			((INameScope)nameScope).RegisterName("NRatio5500", (object)label82);
			if (label82.StyleId == null)
			{
				label82.StyleId = "NRatio5500";
			}
			((INameScope)nameScope).RegisterName("NRatio6000", (object)label83);
			if (label83.StyleId == null)
			{
				label83.StyleId = "NRatio6000";
			}
			((INameScope)nameScope).RegisterName("NRatio6500", (object)label84);
			if (label84.StyleId == null)
			{
				label84.StyleId = "NRatio6500";
			}
			((INameScope)nameScope).RegisterName("NRatio7000", (object)label85);
			if (label85.StyleId == null)
			{
				label85.StyleId = "NRatio7000";
			}
			((INameScope)nameScope).RegisterName("NRatio7500", (object)label86);
			if (label86.StyleId == null)
			{
				label86.StyleId = "NRatio7500";
			}
			((INameScope)nameScope).RegisterName("NRatio8000", (object)label87);
			if (label87.StyleId == null)
			{
				label87.StyleId = "NRatio8000";
			}
			((INameScope)nameScope).RegisterName("NRatio8500", (object)label88);
			if (label88.StyleId == null)
			{
				label88.StyleId = "NRatio8500";
			}
			((INameScope)nameScope).RegisterName("NRatio9000", (object)label89);
			if (label89.StyleId == null)
			{
				label89.StyleId = "NRatio9000";
			}
			((INameScope)nameScope).RegisterName("RowTextFunc", (object)button82);
			if (button82.StyleId == null)
			{
				button82.StyleId = "RowTextFunc";
			}
			((INameScope)nameScope).RegisterName("RowTextFuncPara", (object)grid11);
			if (grid11.StyleId == null)
			{
				grid11.StyleId = "RowTextFuncPara";
			}
			((INameScope)nameScope).RegisterName("BoostPin", (object)label90);
			if (label90.StyleId == null)
			{
				label90.StyleId = "BoostPin";
			}
			((INameScope)nameScope).RegisterName("XHPin", (object)label91);
			if (label91.StyleId == null)
			{
				label91.StyleId = "XHPin";
			}
			((INameScope)nameScope).RegisterName("BCPin", (object)label92);
			if (label92.StyleId == null)
			{
				label92.StyleId = "BCPin";
			}
			((INameScope)nameScope).RegisterName("PPin", (object)label93);
			if (label93.StyleId == null)
			{
				label93.StyleId = "PPin";
			}
			((INameScope)nameScope).RegisterName("FWPin", (object)label94);
			if (label94.StyleId == null)
			{
				label94.StyleId = "FWPin";
			}
			((INameScope)nameScope).RegisterName("REPin", (object)label95);
			if (label95.StyleId == null)
			{
				label95.StyleId = "REPin";
			}
			((INameScope)nameScope).RegisterName("SDHPin", (object)label96);
			if (label96.StyleId == null)
			{
				label96.StyleId = "SDHPin";
			}
			((INameScope)nameScope).RegisterName("SDLPin", (object)label97);
			if (label97.StyleId == null)
			{
				label97.StyleId = "SDLPin";
			}
			((INameScope)nameScope).RegisterName("CHGPin", (object)label98);
			if (label98.StyleId == null)
			{
				label98.StyleId = "CHGPin";
			}
			((INameScope)nameScope).RegisterName("FDPin", (object)label99);
			if (label99.StyleId == null)
			{
				label99.StyleId = "FDPin";
			}
			((INameScope)nameScope).RegisterName("SEATPin", (object)label100);
			if (label100.StyleId == null)
			{
				label100.StyleId = "SEATPin";
			}
			((INameScope)nameScope).RegisterName("SpeedLimitPin", (object)label101);
			if (label101.StyleId == null)
			{
				label101.StyleId = "SpeedLimitPin";
			}
			((INameScope)nameScope).RegisterName("SwitchVolPin", (object)label102);
			if (label102.StyleId == null)
			{
				label102.StyleId = "SwitchVolPin";
			}
			((INameScope)nameScope).RegisterName("OneKeyPairPin", (object)label103);
			if (label103.StyleId == null)
			{
				label103.StyleId = "OneKeyPairPin";
			}
			((INameScope)nameScope).RegisterName("BstTime", (object)label104);
			if (label104.StyleId == null)
			{
				label104.StyleId = "BstTime";
			}
			((INameScope)nameScope).RegisterName("BstRelease", (object)label105);
			if (label105.StyleId == null)
			{
				label105.StyleId = "BstRelease";
			}
			((INameScope)nameScope).RegisterName("SPModeConfig", (object)label106);
			if (label106.StyleId == null)
			{
				label106.StyleId = "SPModeConfig";
			}
			((INameScope)nameScope).RegisterName("LongBack", (object)label107);
			if (label107.StyleId == null)
			{
				label107.StyleId = "LongBack";
			}
			((INameScope)nameScope).RegisterName("EmptySpeed", (object)label108);
			if (label108.StyleId == null)
			{
				label108.StyleId = "EmptySpeed";
			}
			((INameScope)nameScope).RegisterName("SlowDown", (object)label109);
			if (label109.StyleId == null)
			{
				label109.StyleId = "SlowDown";
			}
			((INameScope)nameScope).RegisterName("RowTextFuncParaE", (object)grid12);
			if (grid12.StyleId == null)
			{
				grid12.StyleId = "RowTextFuncParaE";
			}
			((INameScope)nameScope).RegisterName("GearConfig", (object)label110);
			if (label110.StyleId == null)
			{
				label110.StyleId = "GearConfig";
			}
			((INameScope)nameScope).RegisterName("BrakeConfig", (object)label111);
			if (label111.StyleId == null)
			{
				label111.StyleId = "BrakeConfig";
			}
			((INameScope)nameScope).RegisterName("PC13Config", (object)label112);
			if (label112.StyleId == null)
			{
				label112.StyleId = "PC13Config";
			}
			((INameScope)nameScope).RegisterName("ParkConfig", (object)label113);
			if (label113.StyleId == null)
			{
				label113.StyleId = "ParkConfig";
			}
			((INameScope)nameScope).RegisterName("FollowConfig", (object)label114);
			if (label114.StyleId == null)
			{
				label114.StyleId = "FollowConfig";
			}
			((INameScope)nameScope).RegisterName("RowTextOneLine", (object)button108);
			if (button108.StyleId == null)
			{
				button108.StyleId = "RowTextOneLine";
			}
			((INameScope)nameScope).RegisterName("RowTextOneLinePara", (object)grid13);
			if (grid13.StyleId == null)
			{
				grid13.StyleId = "RowTextOneLinePara";
			}
			((INameScope)nameScope).RegisterName("SpeedPulse", (object)label115);
			if (label115.StyleId == null)
			{
				label115.StyleId = "SpeedPulse";
			}
			((INameScope)nameScope).RegisterName("SpdPulseNum", (object)label116);
			if (label116.StyleId == null)
			{
				label116.StyleId = "SpdPulseNum";
			}
			((INameScope)nameScope).RegisterName("SpeedMeterConfig", (object)label117);
			if (label117.StyleId == null)
			{
				label117.StyleId = "SpeedMeterConfig";
			}
			((INameScope)nameScope).RegisterName("SpeedAnalog", (object)label118);
			if (label118.StyleId == null)
			{
				label118.StyleId = "SpeedAnalog";
			}
			((INameScope)nameScope).RegisterName("CANConfig", (object)label119);
			if (label119.StyleId == null)
			{
				label119.StyleId = "CANConfig";
			}
			((INameScope)nameScope).RegisterName("NoCanCnt", (object)label120);
			if (label120.StyleId == null)
			{
				label120.StyleId = "NoCanCnt";
			}
			((INameScope)nameScope).RegisterName("CanSel", (object)label121);
			if (label121.StyleId == null)
			{
				label121.StyleId = "CanSel";
			}
			((INameScope)nameScope).RegisterName("TorqueCoeff", (object)label122);
			if (label122.StyleId == null)
			{
				label122.StyleId = "TorqueCoeff";
			}
			((INameScope)nameScope).RegisterName("SpeedPulseButton", (object)button109);
			if (button109.StyleId == null)
			{
				button109.StyleId = "SpeedPulseButton";
			}
			((INameScope)nameScope).RegisterName("RowTextOneLineParaE", (object)grid14);
			if (grid14.StyleId == null)
			{
				grid14.StyleId = "RowTextOneLineParaE";
			}
			((INameScope)nameScope).RegisterName("Idle", (object)label123);
			if (label123.StyleId == null)
			{
				label123.StyleId = "Idle";
			}
			((INameScope)nameScope).RegisterName("Stop", (object)label124);
			if (label124.StyleId == null)
			{
				label124.StyleId = "Stop";
			}
			((INameScope)nameScope).RegisterName("ESQH", (object)label125);
			if (label125.StyleId == null)
			{
				label125.StyleId = "ESQH";
			}
			((INameScope)nameScope).RegisterName("Pulse", (object)label126);
			if (label126.StyleId == null)
			{
				label126.StyleId = "Pulse";
			}
			((INameScope)nameScope).RegisterName("SQH", (object)label127);
			if (label127.StyleId == null)
			{
				label127.StyleId = "SQH";
			}
			((INameScope)nameScope).RegisterName("DATA0", (object)label128);
			if (label128.StyleId == null)
			{
				label128.StyleId = "DATA0";
			}
			((INameScope)nameScope).RegisterName("DATA1", (object)label129);
			if (label129.StyleId == null)
			{
				label129.StyleId = "DATA1";
			}
			((INameScope)nameScope).RegisterName("SEC0", (object)label130);
			if (label130.StyleId == null)
			{
				label130.StyleId = "SEC0";
			}
			((INameScope)nameScope).RegisterName("SEC1", (object)label131);
			if (label131.StyleId == null)
			{
				label131.StyleId = "SEC1";
			}
			((INameScope)nameScope).RegisterName("SEC2", (object)label132);
			if (label132.StyleId == null)
			{
				label132.StyleId = "SEC2";
			}
			((INameScope)nameScope).RegisterName("SEC3", (object)label133);
			if (label133.StyleId == null)
			{
				label133.StyleId = "SEC3";
			}
			((INameScope)nameScope).RegisterName("SEC4", (object)label134);
			if (label134.StyleId == null)
			{
				label134.StyleId = "SEC4";
			}
			((INameScope)nameScope).RegisterName("SEC5", (object)label135);
			if (label135.StyleId == null)
			{
				label135.StyleId = "SEC5";
			}
			((INameScope)nameScope).RegisterName("SEC6", (object)label136);
			if (label136.StyleId == null)
			{
				label136.StyleId = "SEC6";
			}
			((INameScope)nameScope).RegisterName("SEC7", (object)label137);
			if (label137.StyleId == null)
			{
				label137.StyleId = "SEC7";
			}
			((INameScope)nameScope).RegisterName("Ppos", (object)label138);
			if (label138.StyleId == null)
			{
				label138.StyleId = "Ppos";
			}
			((INameScope)nameScope).RegisterName("BCPos", (object)label139);
			if (label139.StyleId == null)
			{
				label139.StyleId = "BCPos";
			}
			((INameScope)nameScope).RegisterName("HBarPos", (object)label140);
			if (label140.StyleId == null)
			{
				label140.StyleId = "HBarPos";
			}
			((INameScope)nameScope).RegisterName("FDPos", (object)label141);
			if (label141.StyleId == null)
			{
				label141.StyleId = "FDPos";
			}
			((INameScope)nameScope).RegisterName("OneLineCurrCoeff", (object)label142);
			if (label142.StyleId == null)
			{
				label142.StyleId = "OneLineCurrCoeff";
			}
			((INameScope)nameScope).RegisterName("Byte89Sel", (object)label143);
			if (label143.StyleId == null)
			{
				label143.StyleId = "Byte89Sel";
			}
			((INameScope)nameScope).RegisterName("WheelWidth", (object)label144);
			if (label144.StyleId == null)
			{
				label144.StyleId = "WheelWidth";
			}
			((INameScope)nameScope).RegisterName("WheelRatio", (object)label145);
			if (label145.StyleId == null)
			{
				label145.StyleId = "WheelRatio";
			}
			((INameScope)nameScope).RegisterName("WheelRadius", (object)label146);
			if (label146.StyleId == null)
			{
				label146.StyleId = "WheelRadius";
			}
			((INameScope)nameScope).RegisterName("RateRatio", (object)label147);
			if (label147.StyleId == null)
			{
				label147.StyleId = "RateRatio";
			}
			((INameScope)nameScope).RegisterName("RowText7", (object)button142);
			if (button142.StyleId == null)
			{
				button142.StyleId = "RowText7";
			}
			((INameScope)nameScope).RegisterName("FOCProtect", (object)grid15);
			if (grid15.StyleId == null)
			{
				grid15.StyleId = "FOCProtect";
			}
			((INameScope)nameScope).RegisterName("HighVolProtect", (object)label148);
			if (label148.StyleId == null)
			{
				label148.StyleId = "HighVolProtect";
			}
			((INameScope)nameScope).RegisterName("HighVolRestore", (object)label149);
			if (label149.StyleId == null)
			{
				label149.StyleId = "HighVolRestore";
			}
			((INameScope)nameScope).RegisterName("LowVolProtect", (object)label150);
			if (label150.StyleId == null)
			{
				label150.StyleId = "LowVolProtect";
			}
			((INameScope)nameScope).RegisterName("LowVolRestore", (object)label151);
			if (label151.StyleId == null)
			{
				label151.StyleId = "LowVolRestore";
			}
			((INameScope)nameScope).RegisterName("MotorTempProtect", (object)label152);
			if (label152.StyleId == null)
			{
				label152.StyleId = "MotorTempProtect";
			}
			((INameScope)nameScope).RegisterName("MotorTempRestore", (object)label153);
			if (label153.StyleId == null)
			{
				label153.StyleId = "MotorTempRestore";
			}
			((INameScope)nameScope).RegisterName("MosTempProtect", (object)label154);
			if (label154.StyleId == null)
			{
				label154.StyleId = "MosTempProtect";
			}
			((INameScope)nameScope).RegisterName("MosTempRestore", (object)label155);
			if (label155.StyleId == null)
			{
				label155.StyleId = "MosTempRestore";
			}
			((INameScope)nameScope).RegisterName("ZeroBattCoeff", (object)label156);
			if (label156.StyleId == null)
			{
				label156.StyleId = "ZeroBattCoeff";
			}
			((INameScope)nameScope).RegisterName("FullBattCoeff", (object)label157);
			if (label157.StyleId == null)
			{
				label157.StyleId = "FullBattCoeff";
			}
			((INameScope)nameScope).RegisterName("FOC2Protect", (object)grid16);
			if (grid16.StyleId == null)
			{
				grid16.StyleId = "FOC2Protect";
			}
			((INameScope)nameScope).RegisterName("ThrottleLost", (object)label158);
			if (label158.StyleId == null)
			{
				label158.StyleId = "ThrottleLost";
			}
			((INameScope)nameScope).RegisterName("ThrottleInsert", (object)label159);
			if (label159.StyleId == null)
			{
				label159.StyleId = "ThrottleInsert";
			}
			((INameScope)nameScope).RegisterName("ReleasePTime", (object)label160);
			if (label160.StyleId == null)
			{
				label160.StyleId = "ReleasePTime";
			}
			((INameScope)nameScope).RegisterName("SeatDelay", (object)label161);
			if (label161.StyleId == null)
			{
				label161.StyleId = "SeatDelay";
			}
			((INameScope)nameScope).RegisterName("BlockTime", (object)label162);
			if (label162.StyleId == null)
			{
				label162.StyleId = "BlockTime";
			}
			((INameScope)nameScope).RegisterName("ParkTime", (object)label163);
			if (label163.StyleId == null)
			{
				label163.StyleId = "ParkTime";
			}
			((INameScope)nameScope).RegisterName("MidSpeedCap", (object)label164);
			if (label164.StyleId == null)
			{
				label164.StyleId = "MidSpeedCap";
			}
			((INameScope)nameScope).RegisterName("LowCapLimit", (object)label165);
			if (label165.StyleId == null)
			{
				label165.StyleId = "LowCapLimit";
			}
			((INameScope)nameScope).RegisterName("MidSpeedCapCoeff", (object)label166);
			if (label166.StyleId == null)
			{
				label166.StyleId = "MidSpeedCapCoeff";
			}
			((INameScope)nameScope).RegisterName("Stage1Curr", (object)label167);
			if (label167.StyleId == null)
			{
				label167.StyleId = "Stage1Curr";
			}
			((INameScope)nameScope).RegisterName("BatSel", (object)label168);
			if (label168.StyleId == null)
			{
				label168.StyleId = "BatSel";
			}
			((INameScope)nameScope).RegisterName("CurrLimitWay", (object)label169);
			if (label169.StyleId == null)
			{
				label169.StyleId = "CurrLimitWay";
			}
			((INameScope)nameScope).RegisterName("IntRes", (object)label170);
			if (label170.StyleId == null)
			{
				label170.StyleId = "IntRes";
			}
			((INameScope)nameScope).RegisterName("TempCoeff2", (object)label171);
			if (label171.StyleId == null)
			{
				label171.StyleId = "TempCoeff2";
			}
			((INameScope)nameScope).RegisterName("ThrottleLostB", (object)button148);
			if (button148.StyleId == null)
			{
				button148.StyleId = "ThrottleLostB";
			}
			((INameScope)nameScope).RegisterName("ThrottleInsertB", (object)button149);
			if (button149.StyleId == null)
			{
				button149.StyleId = "ThrottleInsertB";
			}
			((INameScope)nameScope).RegisterName("ReleasePTimeB", (object)button150);
			if (button150.StyleId == null)
			{
				button150.StyleId = "ReleasePTimeB";
			}
			((INameScope)nameScope).RegisterName("SeatDelayB", (object)button151);
			if (button151.StyleId == null)
			{
				button151.StyleId = "SeatDelayB";
			}
			((INameScope)nameScope).RegisterName("BlockTimeB", (object)button152);
			if (button152.StyleId == null)
			{
				button152.StyleId = "BlockTimeB";
			}
			((INameScope)nameScope).RegisterName("ParkTimeB", (object)button153);
			if (button153.StyleId == null)
			{
				button153.StyleId = "ParkTimeB";
			}
			((INameScope)nameScope).RegisterName("MidSpeedCapB", (object)button154);
			if (button154.StyleId == null)
			{
				button154.StyleId = "MidSpeedCapB";
			}
			((INameScope)nameScope).RegisterName("LowCapLimitB", (object)button155);
			if (button155.StyleId == null)
			{
				button155.StyleId = "LowCapLimitB";
			}
			((INameScope)nameScope).RegisterName("MidSpeedCapCoeffB", (object)button156);
			if (button156.StyleId == null)
			{
				button156.StyleId = "MidSpeedCapCoeffB";
			}
			((INameScope)nameScope).RegisterName("Stage1CurrB", (object)button157);
			if (button157.StyleId == null)
			{
				button157.StyleId = "Stage1CurrB";
			}
			((INameScope)nameScope).RegisterName("BatSelB", (object)button158);
			if (button158.StyleId == null)
			{
				button158.StyleId = "BatSelB";
			}
			((INameScope)nameScope).RegisterName("CurrLimitWayB", (object)button159);
			if (button159.StyleId == null)
			{
				button159.StyleId = "CurrLimitWayB";
			}
			((INameScope)nameScope).RegisterName("IntResB", (object)button160);
			if (button160.StyleId == null)
			{
				button160.StyleId = "IntResB";
			}
			((INameScope)nameScope).RegisterName("TempCoeff2B", (object)button161);
			if (button161.StyleId == null)
			{
				button161.StyleId = "TempCoeff2B";
			}
			((INameScope)nameScope).RegisterName("RowText8", (object)button162);
			if (button162.StyleId == null)
			{
				button162.StyleId = "RowText8";
			}
			((INameScope)nameScope).RegisterName("RowText8Para", (object)grid17);
			if (grid17.StyleId == null)
			{
				grid17.StyleId = "RowText8Para";
			}
			((INameScope)nameScope).RegisterName("AN", (object)label172);
			if (label172.StyleId == null)
			{
				label172.StyleId = "AN";
			}
			((INameScope)nameScope).RegisterName("LM", (object)label173);
			if (label173.StyleId == null)
			{
				label173.StyleId = "LM";
			}
			((INameScope)nameScope).RegisterName("StartKI", (object)label174);
			if (label174.StyleId == null)
			{
				label174.StyleId = "StartKI";
			}
			((INameScope)nameScope).RegisterName("StartKP", (object)label175);
			if (label175.StyleId == null)
			{
				label175.StyleId = "StartKP";
			}
			((INameScope)nameScope).RegisterName("MidKI", (object)label176);
			if (label176.StyleId == null)
			{
				label176.StyleId = "MidKI";
			}
			((INameScope)nameScope).RegisterName("MidKP", (object)label177);
			if (label177.StyleId == null)
			{
				label177.StyleId = "MidKP";
			}
			((INameScope)nameScope).RegisterName("MaxKI", (object)label178);
			if (label178.StyleId == null)
			{
				label178.StyleId = "MaxKI";
			}
			((INameScope)nameScope).RegisterName("MaxKP", (object)label179);
			if (label179.StyleId == null)
			{
				label179.StyleId = "MaxKP";
			}
			((INameScope)nameScope).RegisterName("SpeedKI", (object)label180);
			if (label180.StyleId == null)
			{
				label180.StyleId = "SpeedKI";
			}
			((INameScope)nameScope).RegisterName("SpeedKP", (object)label181);
			if (label181.StyleId == null)
			{
				label181.StyleId = "SpeedKP";
			}
			((INameScope)nameScope).RegisterName("MOE", (object)label182);
			if (label182.StyleId == null)
			{
				label182.StyleId = "MOE";
			}
			((INameScope)nameScope).RegisterName("CurveTime", (object)label183);
			if (label183.StyleId == null)
			{
				label183.StyleId = "CurveTime";
			}
			((INameScope)nameScope).RegisterName("MOEB", (object)button170);
			if (button170.StyleId == null)
			{
				button170.StyleId = "MOEB";
			}
			((INameScope)nameScope).RegisterName("CurveTimeB", (object)button171);
			if (button171.StyleId == null)
			{
				button171.StyleId = "CurveTimeB";
			}
			((INameScope)nameScope).RegisterName("RowTextProduct", (object)button172);
			if (button172.StyleId == null)
			{
				button172.StyleId = "RowTextProduct";
			}
			((INameScope)nameScope).RegisterName("RowTextProductPara", (object)grid18);
			if (grid18.StyleId == null)
			{
				grid18.StyleId = "RowTextProductPara";
			}
			((INameScope)nameScope).RegisterName("ReCurrRatio", (object)label184);
			if (label184.StyleId == null)
			{
				label184.StyleId = "ReCurrRatio";
			}
			((INameScope)nameScope).RegisterName("FwReRatio", (object)label185);
			if (label185.StyleId == null)
			{
				label185.StyleId = "FwReRatio";
			}
			((INameScope)nameScope).RegisterName("VolSelectRatio", (object)label186);
			if (label186.StyleId == null)
			{
				label186.StyleId = "VolSelectRatio";
			}
			((INameScope)nameScope).RegisterName("Stage2Soc", (object)label187);
			if (label187.StyleId == null)
			{
				label187.StyleId = "Stage2Soc";
			}
			((INameScope)nameScope).RegisterName("ReAcc", (object)label188);
			if (label188.StyleId == null)
			{
				label188.StyleId = "ReAcc";
			}
			((INameScope)nameScope).RegisterName("AlarmDelay", (object)label189);
			if (label189.StyleId == null)
			{
				label189.StyleId = "AlarmDelay";
			}
			((INameScope)nameScope).RegisterName("RelayDelay", (object)label190);
			if (label190.StyleId == null)
			{
				label190.StyleId = "RelayDelay";
			}
			((INameScope)nameScope).RegisterName("RelayOut", (object)label191);
			if (label191.StyleId == null)
			{
				label191.StyleId = "RelayOut";
			}
			((INameScope)nameScope).RegisterName("BCEnable", (object)label192);
			if (label192.StyleId == null)
			{
				label192.StyleId = "BCEnable";
			}
			((INameScope)nameScope).RegisterName("SeatEnable", (object)label193);
			if (label193.StyleId == null)
			{
				label193.StyleId = "SeatEnable";
			}
			((INameScope)nameScope).RegisterName("PEnable", (object)label194);
			if (label194.StyleId == null)
			{
				label194.StyleId = "PEnable";
			}
			((INameScope)nameScope).RegisterName("AutoBackP", (object)label195);
			if (label195.StyleId == null)
			{
				label195.StyleId = "AutoBackP";
			}
			((INameScope)nameScope).RegisterName("CruiseEnable", (object)label196);
			if (label196.StyleId == null)
			{
				label196.StyleId = "CruiseEnable";
			}
			((INameScope)nameScope).RegisterName("EABSEnable", (object)label197);
			if (label197.StyleId == null)
			{
				label197.StyleId = "EABSEnable";
			}
			((INameScope)nameScope).RegisterName("TuixingEnable", (object)label198);
			if (label198.StyleId == null)
			{
				label198.StyleId = "TuixingEnable";
			}
			((INameScope)nameScope).RegisterName("ForseTheft", (object)label199);
			if (label199.StyleId == null)
			{
				label199.StyleId = "ForseTheft";
			}
			((INameScope)nameScope).RegisterName("OverSpeedAlarm", (object)label200);
			if (label200.StyleId == null)
			{
				label200.StyleId = "OverSpeedAlarm";
			}
			((INameScope)nameScope).RegisterName("ParkDisableBreak", (object)label201);
			if (label201.StyleId == null)
			{
				label201.StyleId = "ParkDisableBreak";
			}
			((INameScope)nameScope).RegisterName("RememberGear", (object)label202);
			if (label202.StyleId == null)
			{
				label202.StyleId = "RememberGear";
			}
			((INameScope)nameScope).RegisterName("BackEnable", (object)label203);
			if (label203.StyleId == null)
			{
				label203.StyleId = "BackEnable";
			}
			((INameScope)nameScope).RegisterName("RelayDelay1S", (object)label204);
			if (label204.StyleId == null)
			{
				label204.StyleId = "RelayDelay1S";
			}
			((INameScope)nameScope).RegisterName("ZeroSwitch", (object)label205);
			if (label205.StyleId == null)
			{
				label205.StyleId = "ZeroSwitch";
			}
			((INameScope)nameScope).RegisterName("IsinStart", (object)label206);
			if (label206.StyleId == null)
			{
				label206.StyleId = "IsinStart";
			}
			((INameScope)nameScope).RegisterName("FollowSpeed", (object)label207);
			if (label207.StyleId == null)
			{
				label207.StyleId = "FollowSpeed";
			}
			((INameScope)nameScope).RegisterName("CurrFD", (object)label208);
			if (label208.StyleId == null)
			{
				label208.StyleId = "CurrFD";
			}
			((INameScope)nameScope).RegisterName("PulseFD", (object)label209);
			if (label209.StyleId == null)
			{
				label209.StyleId = "PulseFD";
			}
			((INameScope)nameScope).RegisterName("Temp70", (object)label210);
			if (label210.StyleId == null)
			{
				label210.StyleId = "Temp70";
			}
			((INameScope)nameScope).RegisterName("FastRE", (object)label211);
			if (label211.StyleId == null)
			{
				label211.StyleId = "FastRE";
			}
			((INameScope)nameScope).RegisterName("InverseTime", (object)label212);
			if (label212.StyleId == null)
			{
				label212.StyleId = "InverseTime";
			}
			((INameScope)nameScope).RegisterName("ParkDiff", (object)label213);
			if (label213.StyleId == null)
			{
				label213.StyleId = "ParkDiff";
			}
			((INameScope)nameScope).RegisterName("ParkCoeff", (object)label214);
			if (label214.StyleId == null)
			{
				label214.StyleId = "ParkCoeff";
			}
			((INameScope)nameScope).RegisterName("RxdSel", (object)label215);
			if (label215.StyleId == null)
			{
				label215.StyleId = "RxdSel";
			}
			((INameScope)nameScope).RegisterName("LearnThrottle", (object)label216);
			if (label216.StyleId == null)
			{
				label216.StyleId = "LearnThrottle";
			}
			((INameScope)nameScope).RegisterName("LearnVol", (object)label217);
			if (label217.StyleId == null)
			{
				label217.StyleId = "LearnVol";
			}
			((INameScope)nameScope).RegisterName("LearnVoh", (object)label218);
			if (label218.StyleId == null)
			{
				label218.StyleId = "LearnVoh";
			}
			((INameScope)nameScope).RegisterName("SpecialWeak", (object)label219);
			if (label219.StyleId == null)
			{
				label219.StyleId = "SpecialWeak";
			}
			((INameScope)nameScope).RegisterName("Protocol485", (object)label220);
			if (label220.StyleId == null)
			{
				label220.StyleId = "Protocol485";
			}
			((INameScope)nameScope).RegisterName("RowText11", (object)button210);
			if (button210.StyleId == null)
			{
				button210.StyleId = "RowText11";
			}
			((INameScope)nameScope).RegisterName("GirdText11", (object)grid19);
			if (grid19.StyleId == null)
			{
				grid19.StyleId = "GirdText11";
			}
			((INameScope)nameScope).RegisterName("LineCoeff", (object)label221);
			if (label221.StyleId == null)
			{
				label221.StyleId = "LineCoeff";
			}
			((INameScope)nameScope).RegisterName("LineZero", (object)label222);
			if (label222.StyleId == null)
			{
				label222.StyleId = "LineZero";
			}
			((INameScope)nameScope).RegisterName("PhaseACoeff", (object)label223);
			if (label223.StyleId == null)
			{
				label223.StyleId = "PhaseACoeff";
			}
			((INameScope)nameScope).RegisterName("PhaseCCoeff", (object)label224);
			if (label224.StyleId == null)
			{
				label224.StyleId = "PhaseCCoeff";
			}
			((INameScope)nameScope).RegisterName("PhaseAZero", (object)label225);
			if (label225.StyleId == null)
			{
				label225.StyleId = "PhaseAZero";
			}
			((INameScope)nameScope).RegisterName("PhaseCZero", (object)label226);
			if (label226.StyleId == null)
			{
				label226.StyleId = "PhaseCZero";
			}
			((INameScope)nameScope).RegisterName("TempCoeff", (object)label227);
			if (label227.StyleId == null)
			{
				label227.StyleId = "TempCoeff";
			}
			((INameScope)nameScope).RegisterName("VolCoeff", (object)label228);
			if (label228.StyleId == null)
			{
				label228.StyleId = "VolCoeff";
			}
			((INameScope)nameScope).RegisterName("SaveNum", (object)label229);
			if (label229.StyleId == null)
			{
				label229.StyleId = "SaveNum";
			}
			((INameScope)nameScope).RegisterName("ResetName", (object)button211);
			if (button211.StyleId == null)
			{
				button211.StyleId = "ResetName";
			}
			((INameScope)nameScope).RegisterName("SaveName", (object)button212);
			if (button212.StyleId == null)
			{
				button212.StyleId = "SaveName";
			}
			((INameScope)nameScope).RegisterName("ParaMode", (object)button213);
			if (button213.StyleId == null)
			{
				button213.StyleId = "ParaMode";
			}
			((INameScope)nameScope).RegisterName("RcvFrames", (object)label230);
			if (label230.StyleId == null)
			{
				label230.StyleId = "RcvFrames";
			}
			girdall = grid21;
			DetailView = scrollView;
			RowText0 = label;
			ModelFactoryName = label2;
			ModelName = label3;
			ModelTypeName = label4;
			ModelType = label5;
			ModelPowerName = label6;
			ModelPower = label7;
			ModelCurrName = label8;
			ModelCurr = label9;
			ModelNumber = label10;
			CustomCode = label11;
			MorseCodeName = label12;
			RowDateTime = button3;
			DateTimeGrid = grid4;
			ModelDate = label13;
			ModelTime = label14;
			RowText2 = button4;
			Motopara = grid5;
			PositionDetect = label15;
			NTC_PTC = label16;
			PhaseOffset = label17;
			PolePairsDisplay = label18;
			Direction = label19;
			RatedSpeed = label20;
			RatedVoltage = label21;
			RatedPower = label22;
			MaxSpeed = label23;
			BackSpeed = label24;
			MaxLineCurr = label25;
			MaxPhaseCurr = label26;
			ECOConfig = label27;
			Max_Acc = label28;
			CustomMaxLine = label29;
			CustomMaxPhase = label30;
			Motopara2 = grid6;
			PhaseExchange = label31;
			AccCoeff = label32;
			WeakA = label33;
			WeakTime = label34;
			Max_Dec = label35;
			QuickDown = label36;
			ThrottleLow = label37;
			ThrottleHigh = label38;
			PhaseExchangeB = button21;
			Max_DecB = button25;
			RowText4 = button29;
			SpeedRatioPara = grid7;
			Ratio500 = label39;
			Ratio1000 = label40;
			Ratio1500 = label41;
			Ratio2000 = label42;
			Ratio2500 = label43;
			Ratio3000 = label44;
			Ratio3500 = label45;
			Ratio4000 = label46;
			Ratio4500 = label47;
			Ratio5000 = label48;
			Ratio5500 = label49;
			Ratio6000 = label50;
			Ratio6500 = label51;
			Ratio7000 = label52;
			Ratio7500 = label53;
			Ratio8000 = label54;
			Ratio8500 = label55;
			Ratio9000 = label56;
			LD = label57;
			LQ = label58;
			FAIF = label59;
			LmtSpeed = label60;
			RowText5 = button52;
			RowText5Para = grid8;
			LowSpeedLineCurr = label61;
			MidSpeedLineCurr = label62;
			LowSpeedPhaseCurr = label63;
			MidSpeedPhaseCurr = label64;
			LowSpeed = label65;
			MidSpeed = label66;
			NRowText4 = button59;
			NSpeedRatioPara = grid9;
			StopBackCurr = label67;
			MaxBackCurr = label68;
			BattRatedCap1 = label69;
			NSpeedRatioParaE = grid10;
			FreeThrottle = label70;
			Voltage2 = label71;
			NRatio500 = label72;
			NRatio1000 = label73;
			NRatio1500 = label74;
			NRatio2000 = label75;
			NRatio2500 = label76;
			NRatio3000 = label77;
			NRatio3500 = label78;
			NRatio4000 = label79;
			NRatio4500 = label80;
			NRatio5000 = label81;
			NRatio5500 = label82;
			NRatio6000 = label83;
			NRatio6500 = label84;
			NRatio7000 = label85;
			NRatio7500 = label86;
			NRatio8000 = label87;
			NRatio8500 = label88;
			NRatio9000 = label89;
			RowTextFunc = button82;
			RowTextFuncPara = grid11;
			BoostPin = label90;
			XHPin = label91;
			BCPin = label92;
			PPin = label93;
			FWPin = label94;
			REPin = label95;
			SDHPin = label96;
			SDLPin = label97;
			CHGPin = label98;
			FDPin = label99;
			SEATPin = label100;
			SpeedLimitPin = label101;
			SwitchVolPin = label102;
			OneKeyPairPin = label103;
			BstTime = label104;
			BstRelease = label105;
			SPModeConfig = label106;
			LongBack = label107;
			EmptySpeed = label108;
			SlowDown = label109;
			RowTextFuncParaE = grid12;
			GearConfig = label110;
			BrakeConfig = label111;
			PC13Config = label112;
			ParkConfig = label113;
			FollowConfig = label114;
			RowTextOneLine = button108;
			RowTextOneLinePara = grid13;
			SpeedPulse = label115;
			SpdPulseNum = label116;
			SpeedMeterConfig = label117;
			SpeedAnalog = label118;
			CANConfig = label119;
			NoCanCnt = label120;
			CanSel = label121;
			TorqueCoeff = label122;
			SpeedPulseButton = button109;
			RowTextOneLineParaE = grid14;
			Idle = label123;
			Stop = label124;
			ESQH = label125;
			Pulse = label126;
			SQH = label127;
			DATA0 = label128;
			DATA1 = label129;
			SEC0 = label130;
			SEC1 = label131;
			SEC2 = label132;
			SEC3 = label133;
			SEC4 = label134;
			SEC5 = label135;
			SEC6 = label136;
			SEC7 = label137;
			Ppos = label138;
			BCPos = label139;
			HBarPos = label140;
			FDPos = label141;
			OneLineCurrCoeff = label142;
			Byte89Sel = label143;
			WheelWidth = label144;
			WheelRatio = label145;
			WheelRadius = label146;
			RateRatio = label147;
			RowText7 = button142;
			FOCProtect = grid15;
			HighVolProtect = label148;
			HighVolRestore = label149;
			LowVolProtect = label150;
			LowVolRestore = label151;
			MotorTempProtect = label152;
			MotorTempRestore = label153;
			MosTempProtect = label154;
			MosTempRestore = label155;
			ZeroBattCoeff = label156;
			FullBattCoeff = label157;
			FOC2Protect = grid16;
			ThrottleLost = label158;
			ThrottleInsert = label159;
			ReleasePTime = label160;
			SeatDelay = label161;
			BlockTime = label162;
			ParkTime = label163;
			MidSpeedCap = label164;
			LowCapLimit = label165;
			MidSpeedCapCoeff = label166;
			Stage1Curr = label167;
			BatSel = label168;
			CurrLimitWay = label169;
			IntRes = label170;
			TempCoeff2 = label171;
			ThrottleLostB = button148;
			ThrottleInsertB = button149;
			ReleasePTimeB = button150;
			SeatDelayB = button151;
			BlockTimeB = button152;
			ParkTimeB = button153;
			MidSpeedCapB = button154;
			LowCapLimitB = button155;
			MidSpeedCapCoeffB = button156;
			Stage1CurrB = button157;
			BatSelB = button158;
			CurrLimitWayB = button159;
			IntResB = button160;
			TempCoeff2B = button161;
			RowText8 = button162;
			RowText8Para = grid17;
			AN = label172;
			LM = label173;
			StartKI = label174;
			StartKP = label175;
			MidKI = label176;
			MidKP = label177;
			MaxKI = label178;
			MaxKP = label179;
			SpeedKI = label180;
			SpeedKP = label181;
			MOE = label182;
			CurveTime = label183;
			MOEB = button170;
			CurveTimeB = button171;
			RowTextProduct = button172;
			RowTextProductPara = grid18;
			ReCurrRatio = label184;
			FwReRatio = label185;
			VolSelectRatio = label186;
			Stage2Soc = label187;
			ReAcc = label188;
			AlarmDelay = label189;
			RelayDelay = label190;
			RelayOut = label191;
			BCEnable = label192;
			SeatEnable = label193;
			PEnable = label194;
			AutoBackP = label195;
			CruiseEnable = label196;
			EABSEnable = label197;
			TuixingEnable = label198;
			ForseTheft = label199;
			OverSpeedAlarm = label200;
			ParkDisableBreak = label201;
			RememberGear = label202;
			BackEnable = label203;
			RelayDelay1S = label204;
			ZeroSwitch = label205;
			IsinStart = label206;
			FollowSpeed = label207;
			CurrFD = label208;
			PulseFD = label209;
			Temp70 = label210;
			FastRE = label211;
			InverseTime = label212;
			ParkDiff = label213;
			ParkCoeff = label214;
			RxdSel = label215;
			LearnThrottle = label216;
			LearnVol = label217;
			LearnVoh = label218;
			SpecialWeak = label219;
			Protocol485 = label220;
			RowText11 = button210;
			GirdText11 = grid19;
			LineCoeff = label221;
			LineZero = label222;
			PhaseACoeff = label223;
			PhaseCCoeff = label224;
			PhaseAZero = label225;
			PhaseCZero = label226;
			TempCoeff = label227;
			VolCoeff = label228;
			SaveNum = label229;
			ResetName = button211;
			SaveName = button212;
			ParaMode = button213;
			RcvFrames = label230;
			grid21.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid21.SetValue(CompressedLayout.IsHeadlessProperty, true);
			rowDefinition.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("93*"));
			((DefinitionCollection<RowDefinition>)grid21.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition);
			rowDefinition2.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("7*"));
			((DefinitionCollection<RowDefinition>)grid21.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition2);
			scrollView.SetValue(Grid.RowProperty, 0);
			scrollView.SetValue(Grid.ColumnProperty, 0);
			label.SetValue(Label.TextProperty, "–Õ∫≈");
			label.SetValue(Label.TextColorProperty, Color.SaddleBrown);
			label.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			BindableProperty fontSizeProperty = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
			Type typeFromHandle = typeof(IProvideValueTarget);
			object[] array = new object[0 + 5];
			array[0] = label;
			array[1] = stackLayout6;
			array[2] = scrollView;
			array[3] = grid21;
			array[4] = proControlPage;
			object service;
			xamlServiceProvider.Add(typeFromHandle, service = new SimpleValueTargetProvider(array, Label.FontSizeProperty, nameScope));
			xamlServiceProvider.Add(typeof(IReferenceProvider), service);
			Type typeFromHandle2 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
			xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(14, 114)));
			label.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider));
			label.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			label.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(label);
			grid2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid2.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid2.SetValue(Grid.RowSpacingProperty, 0.0);
			columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("65*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
			columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("35*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
			grid.SetValue(Grid.RowProperty, 0);
			grid.SetValue(Grid.ColumnProperty, 0);
			grid.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			grid.SetValue(Grid.ColumnSpacingProperty, 0.0);
			grid.SetValue(Grid.RowSpacingProperty, 0.0);
			rowDefinition3.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition3);
			rowDefinition4.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("25"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition4);
			rowDefinition5.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition5);
			rowDefinition6.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition6);
			stackLayout.SetValue(Grid.RowProperty, 0);
			stackLayout.SetValue(Grid.ColumnProperty, 0);
			stackLayout.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout.SetValue(StackLayout.SpacingProperty, 0.0);
			stackLayout.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			stackLayout.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label2.SetValue(Label.TextProperty, "ƒœæ©‘∂«˝");
			label2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Black);
			label2.SetValue(Label.TextColorProperty, Color.White);
			BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
			Type typeFromHandle3 = typeof(IProvideValueTarget);
			object[] array2 = new object[0 + 8];
			array2[0] = label2;
			array2[1] = stackLayout;
			array2[2] = grid;
			array2[3] = grid2;
			array2[4] = stackLayout6;
			array2[5] = scrollView;
			array2[6] = grid21;
			array2[7] = proControlPage;
			object service2;
			xamlServiceProvider2.Add(typeFromHandle3, service2 = new SimpleValueTargetProvider(array2, Label.FontSizeProperty, nameScope));
			xamlServiceProvider2.Add(typeof(IReferenceProvider), service2);
			Type typeFromHandle4 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
			xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(28, 120)));
			label2.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("Large", (IServiceProvider)xamlServiceProvider2));
			label2.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout.Children.Add(label2);
			label3.SetValue(Label.TextProperty, "”¿¥≈Õ¨≤Ωøÿ÷∆∆˜");
			label3.SetValue(Grid.RowProperty, 0);
			label3.SetValue(Grid.ColumnProperty, 0);
			label3.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
			Type typeFromHandle5 = typeof(IProvideValueTarget);
			object[] array3 = new object[0 + 8];
			array3[0] = label3;
			array3[1] = stackLayout;
			array3[2] = grid;
			array3[3] = grid2;
			array3[4] = stackLayout6;
			array3[5] = scrollView;
			array3[6] = grid21;
			array3[7] = proControlPage;
			object service3;
			xamlServiceProvider3.Add(typeFromHandle5, service3 = new SimpleValueTargetProvider(array3, Label.FontSizeProperty, nameScope));
			xamlServiceProvider3.Add(typeof(IReferenceProvider), service3);
			Type typeFromHandle6 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
			xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(29, 121)));
			label3.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider3));
			label3.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout.Children.Add(label3);
			grid.Children.Add(stackLayout);
			stackLayout2.SetValue(Grid.RowProperty, 1);
			stackLayout2.SetValue(Grid.ColumnProperty, 0);
			stackLayout2.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout2.SetValue(StackLayout.SpacingProperty, 10.0);
			stackLayout2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			stackLayout2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label4.SetValue(Label.TextProperty, "–Õ∫≈");
			label4.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
			Type typeFromHandle7 = typeof(IProvideValueTarget);
			object[] array4 = new object[0 + 8];
			array4[0] = label4;
			array4[1] = stackLayout2;
			array4[2] = grid;
			array4[3] = grid2;
			array4[4] = stackLayout6;
			array4[5] = scrollView;
			array4[6] = grid21;
			array4[7] = proControlPage;
			object service4;
			xamlServiceProvider4.Add(typeFromHandle7, service4 = new SimpleValueTargetProvider(array4, Label.FontSizeProperty, nameScope));
			xamlServiceProvider4.Add(typeof(IReferenceProvider), service4);
			Type typeFromHandle8 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
			xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(32, 91)));
			label4.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider4));
			label4.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout2.Children.Add(label4);
			label5.SetValue(Label.TextProperty, "SA72V150_418_1_697");
			label5.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			label5.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty5 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
			Type typeFromHandle9 = typeof(IProvideValueTarget);
			object[] array5 = new object[0 + 8];
			array5[0] = label5;
			array5[1] = stackLayout2;
			array5[2] = grid;
			array5[3] = grid2;
			array5[4] = stackLayout6;
			array5[5] = scrollView;
			array5[6] = grid21;
			array5[7] = proControlPage;
			object service5;
			xamlServiceProvider5.Add(typeFromHandle9, service5 = new SimpleValueTargetProvider(array5, Label.FontSizeProperty, nameScope));
			xamlServiceProvider5.Add(typeof(IReferenceProvider), service5);
			Type typeFromHandle10 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
			xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(33, 125)));
			label5.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider5));
			label5.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout2.Children.Add(label5);
			grid.Children.Add(stackLayout2);
			stackLayout3.SetValue(Grid.RowProperty, 2);
			stackLayout3.SetValue(Grid.ColumnProperty, 0);
			stackLayout3.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout3.SetValue(StackLayout.SpacingProperty, 10.0);
			stackLayout3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			stackLayout3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label6.SetValue(Label.TextProperty, "µÁ—π/π¶¬ ");
			label6.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
			Type typeFromHandle11 = typeof(IProvideValueTarget);
			object[] array6 = new object[0 + 8];
			array6[0] = label6;
			array6[1] = stackLayout3;
			array6[2] = grid;
			array6[3] = grid2;
			array6[4] = stackLayout6;
			array6[5] = scrollView;
			array6[6] = grid21;
			array6[7] = proControlPage;
			object service6;
			xamlServiceProvider6.Add(typeFromHandle11, service6 = new SimpleValueTargetProvider(array6, Label.FontSizeProperty, nameScope));
			xamlServiceProvider6.Add(typeof(IReferenceProvider), service6);
			Type typeFromHandle12 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
			xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(36, 95)));
			label6.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider6));
			label6.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label6.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout3.Children.Add(label6);
			label7.SetValue(Label.TextProperty, "72V/5KW");
			label7.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty7 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
			Type typeFromHandle13 = typeof(IProvideValueTarget);
			object[] array7 = new object[0 + 8];
			array7[0] = label7;
			array7[1] = stackLayout3;
			array7[2] = grid;
			array7[3] = grid2;
			array7[4] = stackLayout6;
			array7[5] = scrollView;
			array7[6] = grid21;
			array7[7] = proControlPage;
			object service7;
			xamlServiceProvider7.Add(typeFromHandle13, service7 = new SimpleValueTargetProvider(array7, Label.FontSizeProperty, nameScope));
			xamlServiceProvider7.Add(typeof(IReferenceProvider), service7);
			Type typeFromHandle14 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
			xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(37, 93)));
			label7.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider7));
			label7.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label7.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout3.Children.Add(label7);
			grid.Children.Add(stackLayout3);
			stackLayout4.SetValue(Grid.RowProperty, 3);
			stackLayout4.SetValue(Grid.ColumnProperty, 0);
			stackLayout4.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout4.SetValue(StackLayout.SpacingProperty, 10.0);
			stackLayout4.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			stackLayout4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label8.SetValue(Label.TextProperty, "œﬂµÁ¡˜/œ‡µÁ¡˜");
			label8.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
			Type typeFromHandle15 = typeof(IProvideValueTarget);
			object[] array8 = new object[0 + 8];
			array8[0] = label8;
			array8[1] = stackLayout4;
			array8[2] = grid;
			array8[3] = grid2;
			array8[4] = stackLayout6;
			array8[5] = scrollView;
			array8[6] = grid21;
			array8[7] = proControlPage;
			object service8;
			xamlServiceProvider8.Add(typeFromHandle15, service8 = new SimpleValueTargetProvider(array8, Label.FontSizeProperty, nameScope));
			xamlServiceProvider8.Add(typeof(IReferenceProvider), service8);
			Type typeFromHandle16 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
			xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(40, 96)));
			label8.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider8));
			label8.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label8.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label8.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout4.Children.Add(label8);
			label9.SetValue(Label.TextProperty, "100A/300A");
			label9.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty9 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter9 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
			Type typeFromHandle17 = typeof(IProvideValueTarget);
			object[] array9 = new object[0 + 8];
			array9[0] = label9;
			array9[1] = stackLayout4;
			array9[2] = grid;
			array9[3] = grid2;
			array9[4] = stackLayout6;
			array9[5] = scrollView;
			array9[6] = grid21;
			array9[7] = proControlPage;
			object service9;
			xamlServiceProvider9.Add(typeFromHandle17, service9 = new SimpleValueTargetProvider(array9, Label.FontSizeProperty, nameScope));
			xamlServiceProvider9.Add(typeof(IReferenceProvider), service9);
			Type typeFromHandle18 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
			xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(41, 94)));
			label9.SetValue(fontSizeProperty9, ((IExtendedTypeConverter)fontSizeConverter9).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider9));
			label9.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label9.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label9.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout4.Children.Add(label9);
			grid.Children.Add(stackLayout4);
			grid2.Children.Add(grid);
			stackLayout6.Children.Add(grid2);
			stackLayout5.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout5.SetValue(StackLayout.SpacingProperty, 10.0);
			stackLayout5.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			stackLayout5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label10.SetValue(Label.TextProperty, "±‡∫≈");
			label10.SetValue(Label.TextColorProperty, Color.Black);
			label10.SetValue(Label.FontAttributesProperty, new FontAttributesConverter().ConvertFromInvariantString("Bold"));
			BindableProperty fontSizeProperty10 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter10 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
			Type typeFromHandle19 = typeof(IProvideValueTarget);
			object[] array10 = new object[0 + 6];
			array10[0] = label10;
			array10[1] = stackLayout5;
			array10[2] = stackLayout6;
			array10[3] = scrollView;
			array10[4] = grid21;
			array10[5] = proControlPage;
			object service10;
			xamlServiceProvider10.Add(typeFromHandle19, service10 = new SimpleValueTargetProvider(array10, Label.FontSizeProperty, nameScope));
			xamlServiceProvider10.Add(typeof(IReferenceProvider), service10);
			Type typeFromHandle20 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
			xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(46, 105)));
			label10.SetValue(fontSizeProperty10, ((IExtendedTypeConverter)fontSizeConverter10).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider10));
			label10.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label10.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label10.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout5.Children.Add(label10);
			stackLayout6.Children.Add(stackLayout5);
			grid3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			columnDefinition3.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition3);
			columnDefinition4.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition4);
			label11.SetValue(Grid.RowProperty, 0);
			label11.SetValue(Grid.ColumnProperty, 0);
			label11.SetValue(Label.TextProperty, "øÕªß¥˙¬Î");
			label11.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label11.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label11.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty11 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter11 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
			Type typeFromHandle21 = typeof(IProvideValueTarget);
			object[] array11 = new object[0 + 6];
			array11[0] = label11;
			array11[1] = grid3;
			array11[2] = stackLayout6;
			array11[3] = scrollView;
			array11[4] = grid21;
			array11[5] = proControlPage;
			object service11;
			xamlServiceProvider11.Add(typeFromHandle21, service11 = new SimpleValueTargetProvider(array11, Label.FontSizeProperty, nameScope));
			xamlServiceProvider11.Add(typeof(IReferenceProvider), service11);
			Type typeFromHandle22 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
			xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(53, 164)));
			label11.SetValue(fontSizeProperty11, ((IExtendedTypeConverter)fontSizeConverter11).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider11));
			label11.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label11.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
			label11.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid3.Children.Add(label11);
			label12.SetValue(Grid.RowProperty, 0);
			label12.SetValue(Grid.ColumnProperty, 1);
			label12.SetValue(Label.TextProperty, "000000");
			label12.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label12.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label12.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty12 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter12 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
			Type typeFromHandle23 = typeof(IProvideValueTarget);
			object[] array12 = new object[0 + 6];
			array12[0] = label12;
			array12[1] = grid3;
			array12[2] = stackLayout6;
			array12[3] = scrollView;
			array12[4] = grid21;
			array12[5] = proControlPage;
			object service12;
			xamlServiceProvider12.Add(typeFromHandle23, service12 = new SimpleValueTargetProvider(array12, Label.FontSizeProperty, nameScope));
			xamlServiceProvider12.Add(typeof(IReferenceProvider), service12);
			Type typeFromHandle24 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
			xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(54, 168)));
			label12.SetValue(fontSizeProperty12, ((IExtendedTypeConverter)fontSizeConverter12).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider12));
			label12.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label12.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
			label12.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid3.Children.Add(label12);
			button.SetValue(Grid.RowProperty, 0);
			button.SetValue(Grid.ColumnProperty, 0);
			button.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 30.0);
			button.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button.Clicked += proControlPage.CustomCode_TextChanged;
			button.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty13 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter13 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
			Type typeFromHandle25 = typeof(IProvideValueTarget);
			object[] array13 = new object[0 + 6];
			array13[0] = button;
			array13[1] = grid3;
			array13[2] = stackLayout6;
			array13[3] = scrollView;
			array13[4] = grid21;
			array13[5] = proControlPage;
			object service13;
			xamlServiceProvider13.Add(typeFromHandle25, service13 = new SimpleValueTargetProvider(array13, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider13.Add(typeof(IReferenceProvider), service13);
			Type typeFromHandle26 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
			xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(55, 188)));
			button.SetValue(fontSizeProperty13, ((IExtendedTypeConverter)fontSizeConverter13).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider13));
			button.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
			button.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid3.Children.Add(button);
			button2.SetValue(Grid.RowProperty, 0);
			button2.SetValue(Grid.ColumnProperty, 1);
			button2.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 30.0);
			button2.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button2.Clicked += proControlPage.OnButtonMorseCodeClicked;
			button2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button2.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty14 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter14 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
			Type typeFromHandle27 = typeof(IProvideValueTarget);
			object[] array14 = new object[0 + 6];
			array14[0] = button2;
			array14[1] = grid3;
			array14[2] = stackLayout6;
			array14[3] = scrollView;
			array14[4] = grid21;
			array14[5] = proControlPage;
			object service14;
			xamlServiceProvider14.Add(typeFromHandle27, service14 = new SimpleValueTargetProvider(array14, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider14.Add(typeof(IReferenceProvider), service14);
			Type typeFromHandle28 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
			xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(56, 188)));
			button2.SetValue(fontSizeProperty14, ((IExtendedTypeConverter)fontSizeConverter14).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider14));
			button2.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
			button2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid3.Children.Add(button2);
			stackLayout6.Children.Add(grid3);
			button3.Clicked += proControlPage.RowText1_Clicked_1;
			button3.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 4000.0);
			button3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			button3.SetValue(Xamarin.Forms.Button.TextProperty, "»’∆⁄ ±º‰");
			button3.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty15 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter15 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider15 = new XamlServiceProvider();
			Type typeFromHandle29 = typeof(IProvideValueTarget);
			object[] array15 = new object[0 + 5];
			array15[0] = button3;
			array15[1] = stackLayout6;
			array15[2] = scrollView;
			array15[3] = grid21;
			array15[4] = proControlPage;
			object service15;
			xamlServiceProvider15.Add(typeFromHandle29, service15 = new SimpleValueTargetProvider(array15, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider15.Add(typeof(IReferenceProvider), service15);
			Type typeFromHandle30 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver15 = new XmlNamespaceResolver();
			xmlNamespaceResolver15.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver15.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider15.Add(typeFromHandle30, new XamlTypeResolver(xmlNamespaceResolver15, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider15.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(58, 189)));
			button3.SetValue(fontSizeProperty15, ((IExtendedTypeConverter)fontSizeConverter15).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider15));
			button3.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			stackLayout6.Children.Add(button3);
			grid4.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			columnDefinition5.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid4.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition5);
			columnDefinition6.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid4.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition6);
			label13.SetValue(Label.TextProperty, "»’∆⁄");
			label13.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label13.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label13.SetValue(Grid.RowProperty, 0);
			label13.SetValue(Grid.ColumnProperty, 0);
			label13.SetValue(Label.TextColorProperty, Color.DarkGray);
			BindableProperty fontSizeProperty16 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter16 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider16 = new XamlServiceProvider();
			Type typeFromHandle31 = typeof(IProvideValueTarget);
			object[] array16 = new object[0 + 6];
			array16[0] = label13;
			array16[1] = grid4;
			array16[2] = stackLayout6;
			array16[3] = scrollView;
			array16[4] = grid21;
			array16[5] = proControlPage;
			object service16;
			xamlServiceProvider16.Add(typeFromHandle31, service16 = new SimpleValueTargetProvider(array16, Label.FontSizeProperty, nameScope));
			xamlServiceProvider16.Add(typeof(IReferenceProvider), service16);
			Type typeFromHandle32 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver16 = new XmlNamespaceResolver();
			xmlNamespaceResolver16.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver16.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider16.Add(typeFromHandle32, new XamlTypeResolver(xmlNamespaceResolver16, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider16.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(64, 163)));
			label13.SetValue(fontSizeProperty16, ((IExtendedTypeConverter)fontSizeConverter16).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider16));
			label13.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label13.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label13.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label13);
			label14.SetValue(Label.TextProperty, " ±º‰");
			label14.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label14.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label14.SetValue(Grid.RowProperty, 0);
			label14.SetValue(Grid.ColumnProperty, 1);
			label14.SetValue(Label.TextColorProperty, Color.DarkGray);
			BindableProperty fontSizeProperty17 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter17 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider17 = new XamlServiceProvider();
			Type typeFromHandle33 = typeof(IProvideValueTarget);
			object[] array17 = new object[0 + 6];
			array17[0] = label14;
			array17[1] = grid4;
			array17[2] = stackLayout6;
			array17[3] = scrollView;
			array17[4] = grid21;
			array17[5] = proControlPage;
			object service17;
			xamlServiceProvider17.Add(typeFromHandle33, service17 = new SimpleValueTargetProvider(array17, Label.FontSizeProperty, nameScope));
			xamlServiceProvider17.Add(typeof(IReferenceProvider), service17);
			Type typeFromHandle34 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver17 = new XmlNamespaceResolver();
			xmlNamespaceResolver17.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver17.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider17.Add(typeFromHandle34, new XamlTypeResolver(xmlNamespaceResolver17, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider17.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(65, 162)));
			label14.SetValue(fontSizeProperty17, ((IExtendedTypeConverter)fontSizeConverter17).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider17));
			label14.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label14.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label14.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid4.Children.Add(label14);
			stackLayout6.Children.Add(grid4);
			button4.Clicked += proControlPage.RowText2_Clicked;
			button4.SetValue(Xamarin.Forms.Button.TextProperty, "≤Œ ˝");
			button4.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty18 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter18 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider18 = new XamlServiceProvider();
			Type typeFromHandle35 = typeof(IProvideValueTarget);
			object[] array18 = new object[0 + 5];
			array18[0] = button4;
			array18[1] = stackLayout6;
			array18[2] = scrollView;
			array18[3] = grid21;
			array18[4] = proControlPage;
			object service18;
			xamlServiceProvider18.Add(typeFromHandle35, service18 = new SimpleValueTargetProvider(array18, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider18.Add(typeof(IReferenceProvider), service18);
			Type typeFromHandle36 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver18 = new XmlNamespaceResolver();
			xmlNamespaceResolver18.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver18.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider18.Add(typeFromHandle36, new XamlTypeResolver(xmlNamespaceResolver18, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider18.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(68, 109)));
			button4.SetValue(fontSizeProperty18, ((IExtendedTypeConverter)fontSizeConverter18).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider18));
			button4.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button4.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(button4);
			grid5.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition7.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition7);
			rowDefinition8.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition8);
			rowDefinition9.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition9);
			rowDefinition10.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition10);
			rowDefinition11.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition11);
			rowDefinition12.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition12);
			rowDefinition13.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid5.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition13);
			columnDefinition7.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid5.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition7);
			columnDefinition8.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid5.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition8);
			label15.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label15.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label15.SetValue(Label.TextProperty, "Œª÷√¥´∏–∆˜:      ");
			label15.SetValue(Grid.RowProperty, 0);
			label15.SetValue(Grid.ColumnProperty, 0);
			label15.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty19 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter19 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider19 = new XamlServiceProvider();
			Type typeFromHandle37 = typeof(IProvideValueTarget);
			object[] array19 = new object[0 + 6];
			array19[0] = label15;
			array19[1] = grid5;
			array19[2] = stackLayout6;
			array19[3] = scrollView;
			array19[4] = grid21;
			array19[5] = proControlPage;
			object service19;
			xamlServiceProvider19.Add(typeFromHandle37, service19 = new SimpleValueTargetProvider(array19, Label.FontSizeProperty, nameScope));
			xamlServiceProvider19.Add(typeof(IReferenceProvider), service19);
			Type typeFromHandle38 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver19 = new XmlNamespaceResolver();
			xmlNamespaceResolver19.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver19.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider19.Add(typeFromHandle38, new XamlTypeResolver(xmlNamespaceResolver19, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider19.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(85, 173)));
			label15.SetValue(fontSizeProperty19, ((IExtendedTypeConverter)fontSizeConverter19).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider19));
			label15.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label15.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label15.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label15);
			label16.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label16.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label16.SetValue(Label.TextProperty, "Œ¬∂»¥´∏–∆˜:0006-KTY-121");
			label16.SetValue(Grid.RowProperty, 0);
			label16.SetValue(Grid.ColumnProperty, 1);
			label16.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty20 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter20 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider20 = new XamlServiceProvider();
			Type typeFromHandle39 = typeof(IProvideValueTarget);
			object[] array20 = new object[0 + 6];
			array20[0] = label16;
			array20[1] = grid5;
			array20[2] = stackLayout6;
			array20[3] = scrollView;
			array20[4] = grid21;
			array20[5] = proControlPage;
			object service20;
			xamlServiceProvider20.Add(typeFromHandle39, service20 = new SimpleValueTargetProvider(array20, Label.FontSizeProperty, nameScope));
			xamlServiceProvider20.Add(typeof(IReferenceProvider), service20);
			Type typeFromHandle40 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver20 = new XmlNamespaceResolver();
			xmlNamespaceResolver20.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver20.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider20.Add(typeFromHandle40, new XamlTypeResolver(xmlNamespaceResolver20, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider20.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(86, 173)));
			label16.SetValue(fontSizeProperty20, ((IExtendedTypeConverter)fontSizeConverter20).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider20));
			label16.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label16.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label16.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label16);
			label17.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label17.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label17.SetValue(Label.TextProperty, "œ‡“∆:00000");
			label17.SetValue(Grid.RowProperty, 1);
			label17.SetValue(Grid.ColumnProperty, 0);
			label17.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty21 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter21 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider21 = new XamlServiceProvider();
			Type typeFromHandle41 = typeof(IProvideValueTarget);
			object[] array21 = new object[0 + 6];
			array21[0] = label17;
			array21[1] = grid5;
			array21[2] = stackLayout6;
			array21[3] = scrollView;
			array21[4] = grid21;
			array21[5] = proControlPage;
			object service21;
			xamlServiceProvider21.Add(typeFromHandle41, service21 = new SimpleValueTargetProvider(array21, Label.FontSizeProperty, nameScope));
			xamlServiceProvider21.Add(typeof(IReferenceProvider), service21);
			Type typeFromHandle42 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver21 = new XmlNamespaceResolver();
			xmlNamespaceResolver21.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver21.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider21.Add(typeFromHandle42, new XamlTypeResolver(xmlNamespaceResolver21, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider21.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(87, 166)));
			label17.SetValue(fontSizeProperty21, ((IExtendedTypeConverter)fontSizeConverter21).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider21));
			label17.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label17.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label17.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label17);
			label18.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label18.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label18.SetValue(Label.TextProperty, "º´∂‘ ˝: 16");
			label18.SetValue(Grid.RowProperty, 1);
			label18.SetValue(Grid.ColumnProperty, 1);
			label18.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty22 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter22 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider22 = new XamlServiceProvider();
			Type typeFromHandle43 = typeof(IProvideValueTarget);
			object[] array22 = new object[0 + 6];
			array22[0] = label18;
			array22[1] = grid5;
			array22[2] = stackLayout6;
			array22[3] = scrollView;
			array22[4] = grid21;
			array22[5] = proControlPage;
			object service22;
			xamlServiceProvider22.Add(typeFromHandle43, service22 = new SimpleValueTargetProvider(array22, Label.FontSizeProperty, nameScope));
			xamlServiceProvider22.Add(typeof(IReferenceProvider), service22);
			Type typeFromHandle44 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver22 = new XmlNamespaceResolver();
			xmlNamespaceResolver22.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver22.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider22.Add(typeFromHandle44, new XamlTypeResolver(xmlNamespaceResolver22, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider22.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(88, 170)));
			label18.SetValue(fontSizeProperty22, ((IExtendedTypeConverter)fontSizeConverter22).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider22));
			label18.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label18.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label18.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label18);
			label19.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label19.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label19.SetValue(Label.TextProperty, "µÁª˙∑ΩœÚ:000");
			label19.SetValue(Grid.RowProperty, 2);
			label19.SetValue(Grid.ColumnProperty, 0);
			label19.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty23 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter23 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider23 = new XamlServiceProvider();
			Type typeFromHandle45 = typeof(IProvideValueTarget);
			object[] array23 = new object[0 + 6];
			array23[0] = label19;
			array23[1] = grid5;
			array23[2] = stackLayout6;
			array23[3] = scrollView;
			array23[4] = grid21;
			array23[5] = proControlPage;
			object service23;
			xamlServiceProvider23.Add(typeFromHandle45, service23 = new SimpleValueTargetProvider(array23, Label.FontSizeProperty, nameScope));
			xamlServiceProvider23.Add(typeof(IReferenceProvider), service23);
			Type typeFromHandle46 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver23 = new XmlNamespaceResolver();
			xmlNamespaceResolver23.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver23.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider23.Add(typeFromHandle46, new XamlTypeResolver(xmlNamespaceResolver23, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider23.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(89, 165)));
			label19.SetValue(fontSizeProperty23, ((IExtendedTypeConverter)fontSizeConverter23).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider23));
			label19.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label19.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label19.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label19);
			label20.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label20.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label20.SetValue(Label.TextProperty, "∂Ó∂®◊™ÀŸ:300000rpm");
			label20.SetValue(Grid.RowProperty, 2);
			label20.SetValue(Grid.ColumnProperty, 1);
			label20.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty24 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter24 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider24 = new XamlServiceProvider();
			Type typeFromHandle47 = typeof(IProvideValueTarget);
			object[] array24 = new object[0 + 6];
			array24[0] = label20;
			array24[1] = grid5;
			array24[2] = stackLayout6;
			array24[3] = scrollView;
			array24[4] = grid21;
			array24[5] = proControlPage;
			object service24;
			xamlServiceProvider24.Add(typeFromHandle47, service24 = new SimpleValueTargetProvider(array24, Label.FontSizeProperty, nameScope));
			xamlServiceProvider24.Add(typeof(IReferenceProvider), service24);
			Type typeFromHandle48 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver24 = new XmlNamespaceResolver();
			xmlNamespaceResolver24.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver24.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider24.Add(typeFromHandle48, new XamlTypeResolver(xmlNamespaceResolver24, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider24.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(90, 172)));
			label20.SetValue(fontSizeProperty24, ((IExtendedTypeConverter)fontSizeConverter24).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider24));
			label20.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label20.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label20.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label20);
			label21.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label21.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label21.SetValue(Label.TextProperty, "∂Ó∂®µÁ—π: 144V");
			label21.SetValue(Grid.RowProperty, 3);
			label21.SetValue(Grid.ColumnProperty, 0);
			label21.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty25 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter25 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider25 = new XamlServiceProvider();
			Type typeFromHandle49 = typeof(IProvideValueTarget);
			object[] array25 = new object[0 + 6];
			array25[0] = label21;
			array25[1] = grid5;
			array25[2] = stackLayout6;
			array25[3] = scrollView;
			array25[4] = grid21;
			array25[5] = proControlPage;
			object service25;
			xamlServiceProvider25.Add(typeFromHandle49, service25 = new SimpleValueTargetProvider(array25, Label.FontSizeProperty, nameScope));
			xamlServiceProvider25.Add(typeof(IReferenceProvider), service25);
			Type typeFromHandle50 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver25 = new XmlNamespaceResolver();
			xmlNamespaceResolver25.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver25.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider25.Add(typeFromHandle50, new XamlTypeResolver(xmlNamespaceResolver25, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider25.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(91, 169)));
			label21.SetValue(fontSizeProperty25, ((IExtendedTypeConverter)fontSizeConverter25).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider25));
			label21.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label21.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label21.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label21);
			label22.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label22.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label22.SetValue(Label.TextProperty, "∂Ó∂®π¶¬ :020000W");
			label22.SetValue(Grid.RowProperty, 3);
			label22.SetValue(Grid.ColumnProperty, 1);
			label22.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty26 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter26 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider26 = new XamlServiceProvider();
			Type typeFromHandle51 = typeof(IProvideValueTarget);
			object[] array26 = new object[0 + 6];
			array26[0] = label22;
			array26[1] = grid5;
			array26[2] = stackLayout6;
			array26[3] = scrollView;
			array26[4] = grid21;
			array26[5] = proControlPage;
			object service26;
			xamlServiceProvider26.Add(typeFromHandle51, service26 = new SimpleValueTargetProvider(array26, Label.FontSizeProperty, nameScope));
			xamlServiceProvider26.Add(typeof(IReferenceProvider), service26);
			Type typeFromHandle52 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver26 = new XmlNamespaceResolver();
			xmlNamespaceResolver26.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver26.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider26.Add(typeFromHandle52, new XamlTypeResolver(xmlNamespaceResolver26, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider26.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(92, 169)));
			label22.SetValue(fontSizeProperty26, ((IExtendedTypeConverter)fontSizeConverter26).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider26));
			label22.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label22.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label22.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label22);
			label23.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label23.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label23.SetValue(Label.TextProperty, "◊Ó∏ﬂ◊™ÀŸ:0000000rpm");
			label23.SetValue(Grid.RowProperty, 4);
			label23.SetValue(Grid.ColumnProperty, 0);
			label23.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty27 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter27 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider27 = new XamlServiceProvider();
			Type typeFromHandle53 = typeof(IProvideValueTarget);
			object[] array27 = new object[0 + 6];
			array27[0] = label23;
			array27[1] = grid5;
			array27[2] = stackLayout6;
			array27[3] = scrollView;
			array27[4] = grid21;
			array27[5] = proControlPage;
			object service27;
			xamlServiceProvider27.Add(typeFromHandle53, service27 = new SimpleValueTargetProvider(array27, Label.FontSizeProperty, nameScope));
			xamlServiceProvider27.Add(typeof(IReferenceProvider), service27);
			Type typeFromHandle54 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver27 = new XmlNamespaceResolver();
			xmlNamespaceResolver27.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver27.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider27.Add(typeFromHandle54, new XamlTypeResolver(xmlNamespaceResolver27, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider27.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(93, 171)));
			label23.SetValue(fontSizeProperty27, ((IExtendedTypeConverter)fontSizeConverter27).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider27));
			label23.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label23.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label23.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label23);
			label24.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label24.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label24.SetValue(Label.TextProperty, "∫ÛÕÀ◊™ÀŸ:012000rpm");
			label24.SetValue(Grid.RowProperty, 4);
			label24.SetValue(Grid.ColumnProperty, 1);
			label24.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty28 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter28 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider28 = new XamlServiceProvider();
			Type typeFromHandle55 = typeof(IProvideValueTarget);
			object[] array28 = new object[0 + 6];
			array28[0] = label24;
			array28[1] = grid5;
			array28[2] = stackLayout6;
			array28[3] = scrollView;
			array28[4] = grid21;
			array28[5] = proControlPage;
			object service28;
			xamlServiceProvider28.Add(typeFromHandle55, service28 = new SimpleValueTargetProvider(array28, Label.FontSizeProperty, nameScope));
			xamlServiceProvider28.Add(typeof(IReferenceProvider), service28);
			Type typeFromHandle56 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver28 = new XmlNamespaceResolver();
			xmlNamespaceResolver28.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver28.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider28.Add(typeFromHandle56, new XamlTypeResolver(xmlNamespaceResolver28, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider28.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(94, 171)));
			label24.SetValue(fontSizeProperty28, ((IExtendedTypeConverter)fontSizeConverter28).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider28));
			label24.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label24.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label24.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label24);
			label25.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label25.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label25.SetValue(Label.TextProperty, "◊Ó¥ÛœﬂµÁ¡˜£∫ 0000A");
			label25.SetValue(Grid.RowProperty, 5);
			label25.SetValue(Grid.ColumnProperty, 0);
			label25.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty29 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter29 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider29 = new XamlServiceProvider();
			Type typeFromHandle57 = typeof(IProvideValueTarget);
			object[] array29 = new object[0 + 6];
			array29[0] = label25;
			array29[1] = grid5;
			array29[2] = stackLayout6;
			array29[3] = scrollView;
			array29[4] = grid21;
			array29[5] = proControlPage;
			object service29;
			xamlServiceProvider29.Add(typeFromHandle57, service29 = new SimpleValueTargetProvider(array29, Label.FontSizeProperty, nameScope));
			xamlServiceProvider29.Add(typeof(IReferenceProvider), service29);
			Type typeFromHandle58 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver29 = new XmlNamespaceResolver();
			xmlNamespaceResolver29.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver29.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider29.Add(typeFromHandle58, new XamlTypeResolver(xmlNamespaceResolver29, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider29.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(95, 172)));
			label25.SetValue(fontSizeProperty29, ((IExtendedTypeConverter)fontSizeConverter29).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider29));
			label25.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label25.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label25.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label25);
			label26.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label26.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label26.SetValue(Label.TextProperty, "◊Ó¥Ûœ‡µÁ¡˜£∫ 0000A");
			label26.SetValue(Grid.RowProperty, 5);
			label26.SetValue(Grid.ColumnProperty, 1);
			label26.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty30 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter30 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider30 = new XamlServiceProvider();
			Type typeFromHandle59 = typeof(IProvideValueTarget);
			object[] array30 = new object[0 + 6];
			array30[0] = label26;
			array30[1] = grid5;
			array30[2] = stackLayout6;
			array30[3] = scrollView;
			array30[4] = grid21;
			array30[5] = proControlPage;
			object service30;
			xamlServiceProvider30.Add(typeFromHandle59, service30 = new SimpleValueTargetProvider(array30, Label.FontSizeProperty, nameScope));
			xamlServiceProvider30.Add(typeof(IReferenceProvider), service30);
			Type typeFromHandle60 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver30 = new XmlNamespaceResolver();
			xmlNamespaceResolver30.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver30.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider30.Add(typeFromHandle60, new XamlTypeResolver(xmlNamespaceResolver30, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider30.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(96, 174)));
			label26.SetValue(fontSizeProperty30, ((IExtendedTypeConverter)fontSizeConverter30).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider30));
			label26.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label26.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label26.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label26);
			label27.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label27.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label27.SetValue(Label.TextProperty, "”Õ√≈œÏ”¶: 000000");
			label27.SetValue(Grid.RowProperty, 6);
			label27.SetValue(Grid.ColumnProperty, 0);
			label27.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty31 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter31 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider31 = new XamlServiceProvider();
			Type typeFromHandle61 = typeof(IProvideValueTarget);
			object[] array31 = new object[0 + 6];
			array31[0] = label27;
			array31[1] = grid5;
			array31[2] = stackLayout6;
			array31[3] = scrollView;
			array31[4] = grid21;
			array31[5] = proControlPage;
			object service31;
			xamlServiceProvider31.Add(typeFromHandle61, service31 = new SimpleValueTargetProvider(array31, Label.FontSizeProperty, nameScope));
			xamlServiceProvider31.Add(typeof(IReferenceProvider), service31);
			Type typeFromHandle62 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver31 = new XmlNamespaceResolver();
			xmlNamespaceResolver31.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver31.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider31.Add(typeFromHandle62, new XamlTypeResolver(xmlNamespaceResolver31, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider31.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(97, 171)));
			label27.SetValue(fontSizeProperty31, ((IExtendedTypeConverter)fontSizeConverter31).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider31));
			label27.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label27.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label27.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label27);
			label28.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label28.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label28.SetValue(Label.TextProperty, "º”ÀŸ¡È√Ù∂»: 255");
			label28.SetValue(Grid.RowProperty, 6);
			label28.SetValue(Grid.ColumnProperty, 1);
			label28.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty32 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter32 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider32 = new XamlServiceProvider();
			Type typeFromHandle63 = typeof(IProvideValueTarget);
			object[] array32 = new object[0 + 6];
			array32[0] = label28;
			array32[1] = grid5;
			array32[2] = stackLayout6;
			array32[3] = scrollView;
			array32[4] = grid21;
			array32[5] = proControlPage;
			object service32;
			xamlServiceProvider32.Add(typeFromHandle63, service32 = new SimpleValueTargetProvider(array32, Label.FontSizeProperty, nameScope));
			xamlServiceProvider32.Add(typeof(IReferenceProvider), service32);
			Type typeFromHandle64 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver32 = new XmlNamespaceResolver();
			xmlNamespaceResolver32.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver32.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider32.Add(typeFromHandle64, new XamlTypeResolver(xmlNamespaceResolver32, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider32.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(98, 166)));
			label28.SetValue(fontSizeProperty32, ((IExtendedTypeConverter)fontSizeConverter32).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider32));
			label28.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label28.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label28.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label28);
			label29.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label29.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label29.SetValue(Label.TextProperty, "øÕªß◊Ó¥ÛœﬂµÁ¡˜: 0000A");
			label29.SetValue(Grid.RowProperty, 7);
			label29.SetValue(Grid.ColumnProperty, 0);
			label29.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty33 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter33 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider33 = new XamlServiceProvider();
			Type typeFromHandle65 = typeof(IProvideValueTarget);
			object[] array33 = new object[0 + 6];
			array33[0] = label29;
			array33[1] = grid5;
			array33[2] = stackLayout6;
			array33[3] = scrollView;
			array33[4] = grid21;
			array33[5] = proControlPage;
			object service33;
			xamlServiceProvider33.Add(typeFromHandle65, service33 = new SimpleValueTargetProvider(array33, Label.FontSizeProperty, nameScope));
			xamlServiceProvider33.Add(typeof(IReferenceProvider), service33);
			Type typeFromHandle66 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver33 = new XmlNamespaceResolver();
			xmlNamespaceResolver33.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver33.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider33.Add(typeFromHandle66, new XamlTypeResolver(xmlNamespaceResolver33, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider33.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(99, 177)));
			label29.SetValue(fontSizeProperty33, ((IExtendedTypeConverter)fontSizeConverter33).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider33));
			label29.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label29.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label29.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label29);
			label30.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label30.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label30.SetValue(Label.TextProperty, "øÕªß◊Ó¥Ûœ‡µÁ¡˜: 0000A");
			label30.SetValue(Grid.RowProperty, 7);
			label30.SetValue(Grid.ColumnProperty, 1);
			label30.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty34 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter34 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider34 = new XamlServiceProvider();
			Type typeFromHandle67 = typeof(IProvideValueTarget);
			object[] array34 = new object[0 + 6];
			array34[0] = label30;
			array34[1] = grid5;
			array34[2] = stackLayout6;
			array34[3] = scrollView;
			array34[4] = grid21;
			array34[5] = proControlPage;
			object service34;
			xamlServiceProvider34.Add(typeFromHandle67, service34 = new SimpleValueTargetProvider(array34, Label.FontSizeProperty, nameScope));
			xamlServiceProvider34.Add(typeof(IReferenceProvider), service34);
			Type typeFromHandle68 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver34 = new XmlNamespaceResolver();
			xmlNamespaceResolver34.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver34.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider34.Add(typeFromHandle68, new XamlTypeResolver(xmlNamespaceResolver34, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider34.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(100, 177)));
			label30.SetValue(fontSizeProperty34, ((IExtendedTypeConverter)fontSizeConverter34).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider34));
			label30.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label30.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label30.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(label30);
			button5.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button5.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button5.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button5.Clicked += proControlPage.Position_SelectedIndexChanged;
			button5.SetValue(Grid.RowProperty, 0);
			button5.SetValue(Grid.ColumnProperty, 0);
			button5.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty35 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter35 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider35 = new XamlServiceProvider();
			Type typeFromHandle69 = typeof(IProvideValueTarget);
			object[] array35 = new object[0 + 6];
			array35[0] = button5;
			array35[1] = grid5;
			array35[2] = stackLayout6;
			array35[3] = scrollView;
			array35[4] = grid21;
			array35[5] = proControlPage;
			object service35;
			xamlServiceProvider35.Add(typeFromHandle69, service35 = new SimpleValueTargetProvider(array35, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider35.Add(typeof(IReferenceProvider), service35);
			Type typeFromHandle70 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver35 = new XmlNamespaceResolver();
			xmlNamespaceResolver35.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver35.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider35.Add(typeFromHandle70, new XamlTypeResolver(xmlNamespaceResolver35, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider35.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(103, 190)));
			button5.SetValue(fontSizeProperty35, ((IExtendedTypeConverter)fontSizeConverter35).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider35));
			button5.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button5);
			button6.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button6.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button6.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button6.Clicked += proControlPage.NTC_PTC_SelectedIndexChanged;
			button6.SetValue(Grid.RowProperty, 0);
			button6.SetValue(Grid.ColumnProperty, 1);
			button6.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty36 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter36 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider36 = new XamlServiceProvider();
			Type typeFromHandle71 = typeof(IProvideValueTarget);
			object[] array36 = new object[0 + 6];
			array36[0] = button6;
			array36[1] = grid5;
			array36[2] = stackLayout6;
			array36[3] = scrollView;
			array36[4] = grid21;
			array36[5] = proControlPage;
			object service36;
			xamlServiceProvider36.Add(typeFromHandle71, service36 = new SimpleValueTargetProvider(array36, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider36.Add(typeof(IReferenceProvider), service36);
			Type typeFromHandle72 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver36 = new XmlNamespaceResolver();
			xmlNamespaceResolver36.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver36.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider36.Add(typeFromHandle72, new XamlTypeResolver(xmlNamespaceResolver36, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider36.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(104, 193)));
			button6.SetValue(fontSizeProperty36, ((IExtendedTypeConverter)fontSizeConverter36).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider36));
			button6.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button6.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button6);
			button7.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button7.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button7.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button7.Clicked += proControlPage.PhaseOffset_TextChanged;
			button7.SetValue(Grid.RowProperty, 1);
			button7.SetValue(Grid.ColumnProperty, 0);
			button7.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty37 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter37 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider37 = new XamlServiceProvider();
			Type typeFromHandle73 = typeof(IProvideValueTarget);
			object[] array37 = new object[0 + 6];
			array37[0] = button7;
			array37[1] = grid5;
			array37[2] = stackLayout6;
			array37[3] = scrollView;
			array37[4] = grid21;
			array37[5] = proControlPage;
			object service37;
			xamlServiceProvider37.Add(typeFromHandle73, service37 = new SimpleValueTargetProvider(array37, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider37.Add(typeof(IReferenceProvider), service37);
			Type typeFromHandle74 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver37 = new XmlNamespaceResolver();
			xmlNamespaceResolver37.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver37.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider37.Add(typeFromHandle74, new XamlTypeResolver(xmlNamespaceResolver37, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider37.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(105, 185)));
			button7.SetValue(fontSizeProperty37, ((IExtendedTypeConverter)fontSizeConverter37).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider37));
			button7.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button7.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button7);
			button8.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button8.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button8.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button8.Clicked += proControlPage.PolePairs_SelectedIndexChanged;
			button8.SetValue(Grid.RowProperty, 1);
			button8.SetValue(Grid.ColumnProperty, 1);
			button8.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty38 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter38 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider38 = new XamlServiceProvider();
			Type typeFromHandle75 = typeof(IProvideValueTarget);
			object[] array38 = new object[0 + 6];
			array38[0] = button8;
			array38[1] = grid5;
			array38[2] = stackLayout6;
			array38[3] = scrollView;
			array38[4] = grid21;
			array38[5] = proControlPage;
			object service38;
			xamlServiceProvider38.Add(typeFromHandle75, service38 = new SimpleValueTargetProvider(array38, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider38.Add(typeof(IReferenceProvider), service38);
			Type typeFromHandle76 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver38 = new XmlNamespaceResolver();
			xmlNamespaceResolver38.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver38.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider38.Add(typeFromHandle76, new XamlTypeResolver(xmlNamespaceResolver38, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider38.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(106, 193)));
			button8.SetValue(fontSizeProperty38, ((IExtendedTypeConverter)fontSizeConverter38).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider38));
			button8.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button8.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button8.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button8);
			button9.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button9.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button9.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button9.Clicked += proControlPage.Direction_SelectedIndexChanged;
			button9.SetValue(Grid.RowProperty, 2);
			button9.SetValue(Grid.ColumnProperty, 0);
			button9.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty39 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter39 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider39 = new XamlServiceProvider();
			Type typeFromHandle77 = typeof(IProvideValueTarget);
			object[] array39 = new object[0 + 6];
			array39[0] = button9;
			array39[1] = grid5;
			array39[2] = stackLayout6;
			array39[3] = scrollView;
			array39[4] = grid21;
			array39[5] = proControlPage;
			object service39;
			xamlServiceProvider39.Add(typeFromHandle77, service39 = new SimpleValueTargetProvider(array39, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider39.Add(typeof(IReferenceProvider), service39);
			Type typeFromHandle78 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver39 = new XmlNamespaceResolver();
			xmlNamespaceResolver39.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver39.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider39.Add(typeFromHandle78, new XamlTypeResolver(xmlNamespaceResolver39, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider39.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(107, 193)));
			button9.SetValue(fontSizeProperty39, ((IExtendedTypeConverter)fontSizeConverter39).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider39));
			button9.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button9.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button9.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button9);
			button10.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button10.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button10.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button10.Clicked += proControlPage.RatedSpeed_TextChanged;
			button10.SetValue(Grid.RowProperty, 2);
			button10.SetValue(Grid.ColumnProperty, 1);
			button10.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty40 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter40 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider40 = new XamlServiceProvider();
			Type typeFromHandle79 = typeof(IProvideValueTarget);
			object[] array40 = new object[0 + 6];
			array40[0] = button10;
			array40[1] = grid5;
			array40[2] = stackLayout6;
			array40[3] = scrollView;
			array40[4] = grid21;
			array40[5] = proControlPage;
			object service40;
			xamlServiceProvider40.Add(typeFromHandle79, service40 = new SimpleValueTargetProvider(array40, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider40.Add(typeof(IReferenceProvider), service40);
			Type typeFromHandle80 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver40 = new XmlNamespaceResolver();
			xmlNamespaceResolver40.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver40.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider40.Add(typeFromHandle80, new XamlTypeResolver(xmlNamespaceResolver40, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider40.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(108, 185)));
			button10.SetValue(fontSizeProperty40, ((IExtendedTypeConverter)fontSizeConverter40).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider40));
			button10.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button10.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button10.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button10);
			button11.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button11.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button11.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button11.Clicked += proControlPage.RatedVoltage_TextChanged;
			button11.SetValue(Grid.RowProperty, 3);
			button11.SetValue(Grid.ColumnProperty, 0);
			button11.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty41 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter41 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider41 = new XamlServiceProvider();
			Type typeFromHandle81 = typeof(IProvideValueTarget);
			object[] array41 = new object[0 + 6];
			array41[0] = button11;
			array41[1] = grid5;
			array41[2] = stackLayout6;
			array41[3] = scrollView;
			array41[4] = grid21;
			array41[5] = proControlPage;
			object service41;
			xamlServiceProvider41.Add(typeFromHandle81, service41 = new SimpleValueTargetProvider(array41, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider41.Add(typeof(IReferenceProvider), service41);
			Type typeFromHandle82 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver41 = new XmlNamespaceResolver();
			xmlNamespaceResolver41.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver41.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider41.Add(typeFromHandle82, new XamlTypeResolver(xmlNamespaceResolver41, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider41.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(109, 187)));
			button11.SetValue(fontSizeProperty41, ((IExtendedTypeConverter)fontSizeConverter41).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider41));
			button11.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button11.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button11.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button11);
			button12.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button12.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button12.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button12.Clicked += proControlPage.RatedPower_TextChanged;
			button12.SetValue(Grid.RowProperty, 3);
			button12.SetValue(Grid.ColumnProperty, 1);
			button12.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty42 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter42 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider42 = new XamlServiceProvider();
			Type typeFromHandle83 = typeof(IProvideValueTarget);
			object[] array42 = new object[0 + 6];
			array42[0] = button12;
			array42[1] = grid5;
			array42[2] = stackLayout6;
			array42[3] = scrollView;
			array42[4] = grid21;
			array42[5] = proControlPage;
			object service42;
			xamlServiceProvider42.Add(typeFromHandle83, service42 = new SimpleValueTargetProvider(array42, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider42.Add(typeof(IReferenceProvider), service42);
			Type typeFromHandle84 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver42 = new XmlNamespaceResolver();
			xmlNamespaceResolver42.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver42.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider42.Add(typeFromHandle84, new XamlTypeResolver(xmlNamespaceResolver42, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider42.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(110, 185)));
			button12.SetValue(fontSizeProperty42, ((IExtendedTypeConverter)fontSizeConverter42).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider42));
			button12.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button12.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button12.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button12);
			button13.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button13.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button13.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button13.Clicked += proControlPage.MaxSpeed_TextChanged;
			button13.SetValue(Grid.RowProperty, 4);
			button13.SetValue(Grid.ColumnProperty, 0);
			button13.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty43 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter43 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider43 = new XamlServiceProvider();
			Type typeFromHandle85 = typeof(IProvideValueTarget);
			object[] array43 = new object[0 + 6];
			array43[0] = button13;
			array43[1] = grid5;
			array43[2] = stackLayout6;
			array43[3] = scrollView;
			array43[4] = grid21;
			array43[5] = proControlPage;
			object service43;
			xamlServiceProvider43.Add(typeFromHandle85, service43 = new SimpleValueTargetProvider(array43, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider43.Add(typeof(IReferenceProvider), service43);
			Type typeFromHandle86 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver43 = new XmlNamespaceResolver();
			xmlNamespaceResolver43.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver43.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider43.Add(typeFromHandle86, new XamlTypeResolver(xmlNamespaceResolver43, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider43.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(112, 181)));
			button13.SetValue(fontSizeProperty43, ((IExtendedTypeConverter)fontSizeConverter43).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider43));
			button13.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button13.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button13.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button13);
			button14.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button14.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button14.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button14.Clicked += proControlPage.BackSpeed_TextChanged;
			button14.SetValue(Grid.RowProperty, 4);
			button14.SetValue(Grid.ColumnProperty, 1);
			button14.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty44 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter44 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider44 = new XamlServiceProvider();
			Type typeFromHandle87 = typeof(IProvideValueTarget);
			object[] array44 = new object[0 + 6];
			array44[0] = button14;
			array44[1] = grid5;
			array44[2] = stackLayout6;
			array44[3] = scrollView;
			array44[4] = grid21;
			array44[5] = proControlPage;
			object service44;
			xamlServiceProvider44.Add(typeFromHandle87, service44 = new SimpleValueTargetProvider(array44, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider44.Add(typeof(IReferenceProvider), service44);
			Type typeFromHandle88 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver44 = new XmlNamespaceResolver();
			xmlNamespaceResolver44.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver44.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider44.Add(typeFromHandle88, new XamlTypeResolver(xmlNamespaceResolver44, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider44.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(113, 183)));
			button14.SetValue(fontSizeProperty44, ((IExtendedTypeConverter)fontSizeConverter44).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider44));
			button14.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button14.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button14.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button14);
			button15.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button15.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button15.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button15.Clicked += proControlPage.MaxLineCurr_TextChanged;
			button15.SetValue(Grid.RowProperty, 5);
			button15.SetValue(Grid.ColumnProperty, 0);
			button15.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty45 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter45 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider45 = new XamlServiceProvider();
			Type typeFromHandle89 = typeof(IProvideValueTarget);
			object[] array45 = new object[0 + 6];
			array45[0] = button15;
			array45[1] = grid5;
			array45[2] = stackLayout6;
			array45[3] = scrollView;
			array45[4] = grid21;
			array45[5] = proControlPage;
			object service45;
			xamlServiceProvider45.Add(typeFromHandle89, service45 = new SimpleValueTargetProvider(array45, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider45.Add(typeof(IReferenceProvider), service45);
			Type typeFromHandle90 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver45 = new XmlNamespaceResolver();
			xmlNamespaceResolver45.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver45.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider45.Add(typeFromHandle90, new XamlTypeResolver(xmlNamespaceResolver45, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider45.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(114, 188)));
			button15.SetValue(fontSizeProperty45, ((IExtendedTypeConverter)fontSizeConverter45).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider45));
			button15.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button15.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button15.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button15);
			button16.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button16.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button16.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button16.Clicked += proControlPage.MaxPhaseCurr_TextChanged;
			button16.SetValue(Grid.RowProperty, 5);
			button16.SetValue(Grid.ColumnProperty, 1);
			button16.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty46 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter46 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider46 = new XamlServiceProvider();
			Type typeFromHandle91 = typeof(IProvideValueTarget);
			object[] array46 = new object[0 + 6];
			array46[0] = button16;
			array46[1] = grid5;
			array46[2] = stackLayout6;
			array46[3] = scrollView;
			array46[4] = grid21;
			array46[5] = proControlPage;
			object service46;
			xamlServiceProvider46.Add(typeFromHandle91, service46 = new SimpleValueTargetProvider(array46, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider46.Add(typeof(IReferenceProvider), service46);
			Type typeFromHandle92 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver46 = new XmlNamespaceResolver();
			xmlNamespaceResolver46.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver46.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider46.Add(typeFromHandle92, new XamlTypeResolver(xmlNamespaceResolver46, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider46.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(115, 188)));
			button16.SetValue(fontSizeProperty46, ((IExtendedTypeConverter)fontSizeConverter46).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider46));
			button16.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button16.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button16.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button16);
			button17.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button17.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button17.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button17.Clicked += proControlPage.ECOConfig_SelectedIndexChanged;
			button17.SetValue(Grid.RowProperty, 6);
			button17.SetValue(Grid.ColumnProperty, 0);
			button17.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty47 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter47 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider47 = new XamlServiceProvider();
			Type typeFromHandle93 = typeof(IProvideValueTarget);
			object[] array47 = new object[0 + 6];
			array47[0] = button17;
			array47[1] = grid5;
			array47[2] = stackLayout6;
			array47[3] = scrollView;
			array47[4] = grid21;
			array47[5] = proControlPage;
			object service47;
			xamlServiceProvider47.Add(typeFromHandle93, service47 = new SimpleValueTargetProvider(array47, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider47.Add(typeof(IReferenceProvider), service47);
			Type typeFromHandle94 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver47 = new XmlNamespaceResolver();
			xmlNamespaceResolver47.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver47.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider47.Add(typeFromHandle94, new XamlTypeResolver(xmlNamespaceResolver47, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider47.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(116, 191)));
			button17.SetValue(fontSizeProperty47, ((IExtendedTypeConverter)fontSizeConverter47).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider47));
			button17.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button17.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button17.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button17);
			button18.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button18.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button18.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button18.Clicked += proControlPage.Max_Acc_TextChanged;
			button18.SetValue(Grid.RowProperty, 6);
			button18.SetValue(Grid.ColumnProperty, 1);
			button18.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty48 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter48 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider48 = new XamlServiceProvider();
			Type typeFromHandle95 = typeof(IProvideValueTarget);
			object[] array48 = new object[0 + 6];
			array48[0] = button18;
			array48[1] = grid5;
			array48[2] = stackLayout6;
			array48[3] = scrollView;
			array48[4] = grid21;
			array48[5] = proControlPage;
			object service48;
			xamlServiceProvider48.Add(typeFromHandle95, service48 = new SimpleValueTargetProvider(array48, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider48.Add(typeof(IReferenceProvider), service48);
			Type typeFromHandle96 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver48 = new XmlNamespaceResolver();
			xmlNamespaceResolver48.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver48.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider48.Add(typeFromHandle96, new XamlTypeResolver(xmlNamespaceResolver48, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider48.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(117, 182)));
			button18.SetValue(fontSizeProperty48, ((IExtendedTypeConverter)fontSizeConverter48).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider48));
			button18.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button18.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button18.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button18);
			button19.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button19.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button19.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button19.Clicked += proControlPage.CustomMaxLineCurr_TextChanged;
			button19.SetValue(Grid.RowProperty, 7);
			button19.SetValue(Grid.ColumnProperty, 0);
			button19.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty49 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter49 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider49 = new XamlServiceProvider();
			Type typeFromHandle97 = typeof(IProvideValueTarget);
			object[] array49 = new object[0 + 6];
			array49[0] = button19;
			array49[1] = grid5;
			array49[2] = stackLayout6;
			array49[3] = scrollView;
			array49[4] = grid21;
			array49[5] = proControlPage;
			object service49;
			xamlServiceProvider49.Add(typeFromHandle97, service49 = new SimpleValueTargetProvider(array49, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider49.Add(typeof(IReferenceProvider), service49);
			Type typeFromHandle98 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver49 = new XmlNamespaceResolver();
			xmlNamespaceResolver49.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver49.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider49.Add(typeFromHandle98, new XamlTypeResolver(xmlNamespaceResolver49, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider49.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(118, 194)));
			button19.SetValue(fontSizeProperty49, ((IExtendedTypeConverter)fontSizeConverter49).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider49));
			button19.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button19.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button19.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button19);
			button20.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button20.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button20.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button20.Clicked += proControlPage.CustomMaxPhaseCurr_TextChanged;
			button20.SetValue(Grid.RowProperty, 7);
			button20.SetValue(Grid.ColumnProperty, 1);
			button20.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty50 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter50 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider50 = new XamlServiceProvider();
			Type typeFromHandle99 = typeof(IProvideValueTarget);
			object[] array50 = new object[0 + 6];
			array50[0] = button20;
			array50[1] = grid5;
			array50[2] = stackLayout6;
			array50[3] = scrollView;
			array50[4] = grid21;
			array50[5] = proControlPage;
			object service50;
			xamlServiceProvider50.Add(typeFromHandle99, service50 = new SimpleValueTargetProvider(array50, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider50.Add(typeof(IReferenceProvider), service50);
			Type typeFromHandle100 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver50 = new XmlNamespaceResolver();
			xmlNamespaceResolver50.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver50.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider50.Add(typeFromHandle100, new XamlTypeResolver(xmlNamespaceResolver50, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider50.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(119, 194)));
			button20.SetValue(fontSizeProperty50, ((IExtendedTypeConverter)fontSizeConverter50).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider50));
			button20.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button20.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button20.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid5.Children.Add(button20);
			stackLayout6.Children.Add(grid5);
			grid6.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition14.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition14);
			rowDefinition15.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition15);
			rowDefinition16.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition16);
			rowDefinition17.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid6.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition17);
			columnDefinition9.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid6.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition9);
			columnDefinition10.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid6.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition10);
			label31.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label31.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label31.SetValue(Label.TextProperty, "œ‡œﬂΩªªª:≤ªΩªªª");
			label31.SetValue(Grid.RowProperty, 0);
			label31.SetValue(Grid.ColumnProperty, 0);
			label31.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty51 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter51 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider51 = new XamlServiceProvider();
			Type typeFromHandle101 = typeof(IProvideValueTarget);
			object[] array51 = new object[0 + 6];
			array51[0] = label31;
			array51[1] = grid6;
			array51[2] = stackLayout6;
			array51[3] = scrollView;
			array51[4] = grid21;
			array51[5] = proControlPage;
			object service51;
			xamlServiceProvider51.Add(typeFromHandle101, service51 = new SimpleValueTargetProvider(array51, Label.FontSizeProperty, nameScope));
			xamlServiceProvider51.Add(typeof(IReferenceProvider), service51);
			Type typeFromHandle102 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver51 = new XmlNamespaceResolver();
			xmlNamespaceResolver51.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver51.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider51.Add(typeFromHandle102, new XamlTypeResolver(xmlNamespaceResolver51, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider51.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(133, 170)));
			label31.SetValue(fontSizeProperty51, ((IExtendedTypeConverter)fontSizeConverter51).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider51));
			label31.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label31.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label31.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label31);
			label32.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label32.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label32.SetValue(Label.TextProperty, "æ≠º√º”ÀŸ: 8");
			label32.SetValue(Grid.RowProperty, 0);
			label32.SetValue(Grid.ColumnProperty, 1);
			label32.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty52 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter52 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider52 = new XamlServiceProvider();
			Type typeFromHandle103 = typeof(IProvideValueTarget);
			object[] array52 = new object[0 + 6];
			array52[0] = label32;
			array52[1] = grid6;
			array52[2] = stackLayout6;
			array52[3] = scrollView;
			array52[4] = grid21;
			array52[5] = proControlPage;
			object service52;
			xamlServiceProvider52.Add(typeFromHandle103, service52 = new SimpleValueTargetProvider(array52, Label.FontSizeProperty, nameScope));
			xamlServiceProvider52.Add(typeof(IReferenceProvider), service52);
			Type typeFromHandle104 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver52 = new XmlNamespaceResolver();
			xmlNamespaceResolver52.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver52.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider52.Add(typeFromHandle104, new XamlTypeResolver(xmlNamespaceResolver52, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider52.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(134, 164)));
			label32.SetValue(fontSizeProperty52, ((IExtendedTypeConverter)fontSizeConverter52).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider52));
			label32.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label32.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label32.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label32);
			label33.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label33.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label33.SetValue(Label.TextProperty, "»ı¥≈Ãÿ–‘: Slow");
			label33.SetValue(Grid.RowProperty, 1);
			label33.SetValue(Grid.ColumnProperty, 0);
			label33.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty53 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter53 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider53 = new XamlServiceProvider();
			Type typeFromHandle105 = typeof(IProvideValueTarget);
			object[] array53 = new object[0 + 6];
			array53[0] = label33;
			array53[1] = grid6;
			array53[2] = stackLayout6;
			array53[3] = scrollView;
			array53[4] = grid21;
			array53[5] = proControlPage;
			object service53;
			xamlServiceProvider53.Add(typeFromHandle105, service53 = new SimpleValueTargetProvider(array53, Label.FontSizeProperty, nameScope));
			xamlServiceProvider53.Add(typeof(IReferenceProvider), service53);
			Type typeFromHandle106 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver53 = new XmlNamespaceResolver();
			xmlNamespaceResolver53.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver53.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider53.Add(typeFromHandle106, new XamlTypeResolver(xmlNamespaceResolver53, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider53.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(135, 165)));
			label33.SetValue(fontSizeProperty53, ((IExtendedTypeConverter)fontSizeConverter53).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider53));
			label33.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label33.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label33.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label33);
			label34.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label34.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label34.SetValue(Label.TextProperty, "»ı¥≈œÏ”¶: 7");
			label34.SetValue(Grid.RowProperty, 1);
			label34.SetValue(Grid.ColumnProperty, 1);
			label34.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty54 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter54 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider54 = new XamlServiceProvider();
			Type typeFromHandle107 = typeof(IProvideValueTarget);
			object[] array54 = new object[0 + 6];
			array54[0] = label34;
			array54[1] = grid6;
			array54[2] = stackLayout6;
			array54[3] = scrollView;
			array54[4] = grid21;
			array54[5] = proControlPage;
			object service54;
			xamlServiceProvider54.Add(typeFromHandle107, service54 = new SimpleValueTargetProvider(array54, Label.FontSizeProperty, nameScope));
			xamlServiceProvider54.Add(typeof(IReferenceProvider), service54);
			Type typeFromHandle108 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver54 = new XmlNamespaceResolver();
			xmlNamespaceResolver54.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver54.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider54.Add(typeFromHandle108, new XamlTypeResolver(xmlNamespaceResolver54, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider54.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(136, 165)));
			label34.SetValue(fontSizeProperty54, ((IExtendedTypeConverter)fontSizeConverter54).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider54));
			label34.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label34.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label34.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label34);
			label35.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label35.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label35.SetValue(Label.TextProperty, "ºıÀŸ¡È√Ù∂»: 255");
			label35.SetValue(Grid.RowProperty, 2);
			label35.SetValue(Grid.ColumnProperty, 0);
			label35.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty55 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter55 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider55 = new XamlServiceProvider();
			Type typeFromHandle109 = typeof(IProvideValueTarget);
			object[] array55 = new object[0 + 6];
			array55[0] = label35;
			array55[1] = grid6;
			array55[2] = stackLayout6;
			array55[3] = scrollView;
			array55[4] = grid21;
			array55[5] = proControlPage;
			object service55;
			xamlServiceProvider55.Add(typeFromHandle109, service55 = new SimpleValueTargetProvider(array55, Label.FontSizeProperty, nameScope));
			xamlServiceProvider55.Add(typeof(IReferenceProvider), service55);
			Type typeFromHandle110 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver55 = new XmlNamespaceResolver();
			xmlNamespaceResolver55.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver55.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider55.Add(typeFromHandle110, new XamlTypeResolver(xmlNamespaceResolver55, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider55.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(137, 166)));
			label35.SetValue(fontSizeProperty55, ((IExtendedTypeConverter)fontSizeConverter55).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider55));
			label35.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label35.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label35.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label35);
			label36.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label36.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label36.SetValue(Label.TextProperty, "ªÿ”Õ√≈: 7");
			label36.SetValue(Grid.RowProperty, 2);
			label36.SetValue(Grid.ColumnProperty, 1);
			label36.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty56 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter56 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider56 = new XamlServiceProvider();
			Type typeFromHandle111 = typeof(IProvideValueTarget);
			object[] array56 = new object[0 + 6];
			array56[0] = label36;
			array56[1] = grid6;
			array56[2] = stackLayout6;
			array56[3] = scrollView;
			array56[4] = grid21;
			array56[5] = proControlPage;
			object service56;
			xamlServiceProvider56.Add(typeFromHandle111, service56 = new SimpleValueTargetProvider(array56, Label.FontSizeProperty, nameScope));
			xamlServiceProvider56.Add(typeof(IReferenceProvider), service56);
			Type typeFromHandle112 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver56 = new XmlNamespaceResolver();
			xmlNamespaceResolver56.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver56.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider56.Add(typeFromHandle112, new XamlTypeResolver(xmlNamespaceResolver56, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider56.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(138, 164)));
			label36.SetValue(fontSizeProperty56, ((IExtendedTypeConverter)fontSizeConverter56).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider56));
			label36.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label36.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label36.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label36);
			label37.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label37.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label37.SetValue(Label.TextProperty, "”Õ√≈µÕ„–÷µ");
			label37.SetValue(Grid.RowProperty, 3);
			label37.SetValue(Grid.ColumnProperty, 0);
			label37.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty57 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter57 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider57 = new XamlServiceProvider();
			Type typeFromHandle113 = typeof(IProvideValueTarget);
			object[] array57 = new object[0 + 6];
			array57[0] = label37;
			array57[1] = grid6;
			array57[2] = stackLayout6;
			array57[3] = scrollView;
			array57[4] = grid21;
			array57[5] = proControlPage;
			object service57;
			xamlServiceProvider57.Add(typeFromHandle113, service57 = new SimpleValueTargetProvider(array57, Label.FontSizeProperty, nameScope));
			xamlServiceProvider57.Add(typeof(IReferenceProvider), service57);
			Type typeFromHandle114 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver57 = new XmlNamespaceResolver();
			xmlNamespaceResolver57.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver57.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider57.Add(typeFromHandle114, new XamlTypeResolver(xmlNamespaceResolver57, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider57.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(139, 163)));
			label37.SetValue(fontSizeProperty57, ((IExtendedTypeConverter)fontSizeConverter57).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider57));
			label37.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label37.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label37.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label37);
			label38.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label38.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label38.SetValue(Label.TextProperty, "”Õ√≈∏ﬂ„–÷µ");
			label38.SetValue(Grid.RowProperty, 3);
			label38.SetValue(Grid.ColumnProperty, 1);
			label38.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty58 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter58 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider58 = new XamlServiceProvider();
			Type typeFromHandle115 = typeof(IProvideValueTarget);
			object[] array58 = new object[0 + 6];
			array58[0] = label38;
			array58[1] = grid6;
			array58[2] = stackLayout6;
			array58[3] = scrollView;
			array58[4] = grid21;
			array58[5] = proControlPage;
			object service58;
			xamlServiceProvider58.Add(typeFromHandle115, service58 = new SimpleValueTargetProvider(array58, Label.FontSizeProperty, nameScope));
			xamlServiceProvider58.Add(typeof(IReferenceProvider), service58);
			Type typeFromHandle116 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver58 = new XmlNamespaceResolver();
			xmlNamespaceResolver58.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver58.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider58.Add(typeFromHandle116, new XamlTypeResolver(xmlNamespaceResolver58, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider58.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(140, 165)));
			label38.SetValue(fontSizeProperty58, ((IExtendedTypeConverter)fontSizeConverter58).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider58));
			label38.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label38.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label38.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(label38);
			button21.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button21.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button21.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button21.Clicked += proControlPage.PhaseExchange_TextChanged;
			button21.SetValue(Grid.RowProperty, 0);
			button21.SetValue(Grid.ColumnProperty, 0);
			button21.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty59 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter59 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider59 = new XamlServiceProvider();
			Type typeFromHandle117 = typeof(IProvideValueTarget);
			object[] array59 = new object[0 + 6];
			array59[0] = button21;
			array59[1] = grid6;
			array59[2] = stackLayout6;
			array59[3] = scrollView;
			array59[4] = grid21;
			array59[5] = proControlPage;
			object service59;
			xamlServiceProvider59.Add(typeFromHandle117, service59 = new SimpleValueTargetProvider(array59, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider59.Add(typeof(IReferenceProvider), service59);
			Type typeFromHandle118 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver59 = new XmlNamespaceResolver();
			xmlNamespaceResolver59.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver59.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider59.Add(typeFromHandle118, new XamlTypeResolver(xmlNamespaceResolver59, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider59.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(142, 212)));
			button21.SetValue(fontSizeProperty59, ((IExtendedTypeConverter)fontSizeConverter59).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider59));
			button21.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button21.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button21.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button21);
			button22.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button22.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button22.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button22.Clicked += proControlPage.AccCoeff_SelectedIndexChanged;
			button22.SetValue(Grid.RowProperty, 0);
			button22.SetValue(Grid.ColumnProperty, 1);
			button22.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty60 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter60 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider60 = new XamlServiceProvider();
			Type typeFromHandle119 = typeof(IProvideValueTarget);
			object[] array60 = new object[0 + 6];
			array60[0] = button22;
			array60[1] = grid6;
			array60[2] = stackLayout6;
			array60[3] = scrollView;
			array60[4] = grid21;
			array60[5] = proControlPage;
			object service60;
			xamlServiceProvider60.Add(typeFromHandle119, service60 = new SimpleValueTargetProvider(array60, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider60.Add(typeof(IReferenceProvider), service60);
			Type typeFromHandle120 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver60 = new XmlNamespaceResolver();
			xmlNamespaceResolver60.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver60.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider60.Add(typeFromHandle120, new XamlTypeResolver(xmlNamespaceResolver60, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider60.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(143, 190)));
			button22.SetValue(fontSizeProperty60, ((IExtendedTypeConverter)fontSizeConverter60).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider60));
			button22.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button22.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button22.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button22);
			button23.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button23.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button23.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button23.Clicked += proControlPage.WeakA_SelectedIndexChanged;
			button23.SetValue(Grid.RowProperty, 1);
			button23.SetValue(Grid.ColumnProperty, 0);
			button23.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty61 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter61 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider61 = new XamlServiceProvider();
			Type typeFromHandle121 = typeof(IProvideValueTarget);
			object[] array61 = new object[0 + 6];
			array61[0] = button23;
			array61[1] = grid6;
			array61[2] = stackLayout6;
			array61[3] = scrollView;
			array61[4] = grid21;
			array61[5] = proControlPage;
			object service61;
			xamlServiceProvider61.Add(typeFromHandle121, service61 = new SimpleValueTargetProvider(array61, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider61.Add(typeof(IReferenceProvider), service61);
			Type typeFromHandle122 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver61 = new XmlNamespaceResolver();
			xmlNamespaceResolver61.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver61.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider61.Add(typeFromHandle122, new XamlTypeResolver(xmlNamespaceResolver61, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider61.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(144, 189)));
			button23.SetValue(fontSizeProperty61, ((IExtendedTypeConverter)fontSizeConverter61).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider61));
			button23.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button23.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button23.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button23);
			button24.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button24.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button24.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button24.Clicked += proControlPage.WeakTime_SelectedIndexChanged;
			button24.SetValue(Grid.RowProperty, 1);
			button24.SetValue(Grid.ColumnProperty, 1);
			button24.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty62 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter62 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider62 = new XamlServiceProvider();
			Type typeFromHandle123 = typeof(IProvideValueTarget);
			object[] array62 = new object[0 + 6];
			array62[0] = button24;
			array62[1] = grid6;
			array62[2] = stackLayout6;
			array62[3] = scrollView;
			array62[4] = grid21;
			array62[5] = proControlPage;
			object service62;
			xamlServiceProvider62.Add(typeFromHandle123, service62 = new SimpleValueTargetProvider(array62, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider62.Add(typeof(IReferenceProvider), service62);
			Type typeFromHandle124 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver62 = new XmlNamespaceResolver();
			xmlNamespaceResolver62.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver62.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider62.Add(typeFromHandle124, new XamlTypeResolver(xmlNamespaceResolver62, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider62.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(145, 195)));
			button24.SetValue(fontSizeProperty62, ((IExtendedTypeConverter)fontSizeConverter62).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider62));
			button24.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button24.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button24.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button24);
			button25.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button25.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button25.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button25.Clicked += proControlPage.Max_Dec_TextChanged;
			button25.SetValue(Grid.RowProperty, 2);
			button25.SetValue(Grid.ColumnProperty, 0);
			button25.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty63 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter63 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider63 = new XamlServiceProvider();
			Type typeFromHandle125 = typeof(IProvideValueTarget);
			object[] array63 = new object[0 + 6];
			array63[0] = button25;
			array63[1] = grid6;
			array63[2] = stackLayout6;
			array63[3] = scrollView;
			array63[4] = grid21;
			array63[5] = proControlPage;
			object service63;
			xamlServiceProvider63.Add(typeFromHandle125, service63 = new SimpleValueTargetProvider(array63, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider63.Add(typeof(IReferenceProvider), service63);
			Type typeFromHandle126 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver63 = new XmlNamespaceResolver();
			xmlNamespaceResolver63.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver63.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider63.Add(typeFromHandle126, new XamlTypeResolver(xmlNamespaceResolver63, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider63.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(146, 200)));
			button25.SetValue(fontSizeProperty63, ((IExtendedTypeConverter)fontSizeConverter63).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider63));
			button25.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button25.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button25.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button25);
			button26.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button26.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button26.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button26.Clicked += proControlPage.QuickDown_SelectedIndexChanged;
			button26.SetValue(Grid.RowProperty, 2);
			button26.SetValue(Grid.ColumnProperty, 1);
			button26.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty64 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter64 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider64 = new XamlServiceProvider();
			Type typeFromHandle127 = typeof(IProvideValueTarget);
			object[] array64 = new object[0 + 6];
			array64[0] = button26;
			array64[1] = grid6;
			array64[2] = stackLayout6;
			array64[3] = scrollView;
			array64[4] = grid21;
			array64[5] = proControlPage;
			object service64;
			xamlServiceProvider64.Add(typeFromHandle127, service64 = new SimpleValueTargetProvider(array64, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider64.Add(typeof(IReferenceProvider), service64);
			Type typeFromHandle128 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver64 = new XmlNamespaceResolver();
			xmlNamespaceResolver64.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver64.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider64.Add(typeFromHandle128, new XamlTypeResolver(xmlNamespaceResolver64, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider64.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(147, 195)));
			button26.SetValue(fontSizeProperty64, ((IExtendedTypeConverter)fontSizeConverter64).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider64));
			button26.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button26.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button26.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button26);
			button27.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button27.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button27.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button27.Clicked += proControlPage.ThrottleLow_TextChanged;
			button27.SetValue(Grid.RowProperty, 3);
			button27.SetValue(Grid.ColumnProperty, 0);
			button27.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty65 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter65 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider65 = new XamlServiceProvider();
			Type typeFromHandle129 = typeof(IProvideValueTarget);
			object[] array65 = new object[0 + 6];
			array65[0] = button27;
			array65[1] = grid6;
			array65[2] = stackLayout6;
			array65[3] = scrollView;
			array65[4] = grid21;
			array65[5] = proControlPage;
			object service65;
			xamlServiceProvider65.Add(typeFromHandle129, service65 = new SimpleValueTargetProvider(array65, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider65.Add(typeof(IReferenceProvider), service65);
			Type typeFromHandle130 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver65 = new XmlNamespaceResolver();
			xmlNamespaceResolver65.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver65.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider65.Add(typeFromHandle130, new XamlTypeResolver(xmlNamespaceResolver65, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider65.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(148, 190)));
			button27.SetValue(fontSizeProperty65, ((IExtendedTypeConverter)fontSizeConverter65).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider65));
			button27.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button27.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button27.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button27);
			button28.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button28.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button28.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button28.Clicked += proControlPage.ThrottleHigh_TextChanged;
			button28.SetValue(Grid.RowProperty, 3);
			button28.SetValue(Grid.ColumnProperty, 1);
			button28.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty66 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter66 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider66 = new XamlServiceProvider();
			Type typeFromHandle131 = typeof(IProvideValueTarget);
			object[] array66 = new object[0 + 6];
			array66[0] = button28;
			array66[1] = grid6;
			array66[2] = stackLayout6;
			array66[3] = scrollView;
			array66[4] = grid21;
			array66[5] = proControlPage;
			object service66;
			xamlServiceProvider66.Add(typeFromHandle131, service66 = new SimpleValueTargetProvider(array66, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider66.Add(typeof(IReferenceProvider), service66);
			Type typeFromHandle132 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver66 = new XmlNamespaceResolver();
			xmlNamespaceResolver66.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver66.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider66.Add(typeFromHandle132, new XamlTypeResolver(xmlNamespaceResolver66, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider66.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(149, 188)));
			button28.SetValue(fontSizeProperty66, ((IExtendedTypeConverter)fontSizeConverter66).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider66));
			button28.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button28.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button28.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid6.Children.Add(button28);
			stackLayout6.Children.Add(grid6);
			button29.Clicked += proControlPage.RowText4_Clicked;
			button29.SetValue(Xamarin.Forms.Button.TextProperty, "œﬁ¡˜");
			button29.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty67 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter67 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider67 = new XamlServiceProvider();
			Type typeFromHandle133 = typeof(IProvideValueTarget);
			object[] array67 = new object[0 + 5];
			array67[0] = button29;
			array67[1] = stackLayout6;
			array67[2] = scrollView;
			array67[3] = grid21;
			array67[4] = proControlPage;
			object service67;
			xamlServiceProvider67.Add(typeFromHandle133, service67 = new SimpleValueTargetProvider(array67, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider67.Add(typeof(IReferenceProvider), service67);
			Type typeFromHandle134 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver67 = new XmlNamespaceResolver();
			xmlNamespaceResolver67.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver67.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider67.Add(typeFromHandle134, new XamlTypeResolver(xmlNamespaceResolver67, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider67.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(152, 108)));
			button29.SetValue(fontSizeProperty67, ((IExtendedTypeConverter)fontSizeConverter67).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider67));
			button29.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button29.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(button29);
			grid7.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition18.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition18);
			rowDefinition19.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition19);
			rowDefinition20.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition20);
			rowDefinition21.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition21);
			rowDefinition22.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition22);
			rowDefinition23.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition23);
			rowDefinition24.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition24);
			rowDefinition25.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition25);
			rowDefinition26.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition26);
			rowDefinition27.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition27);
			rowDefinition28.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid7.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition28);
			columnDefinition11.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid7.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition11);
			columnDefinition12.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid7.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition12);
			label39.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label39.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label39.SetValue(Label.TextProperty, "500RPM£∫ 000%");
			label39.SetValue(Grid.RowProperty, 0);
			label39.SetValue(Grid.ColumnProperty, 0);
			label39.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty68 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter68 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider68 = new XamlServiceProvider();
			Type typeFromHandle135 = typeof(IProvideValueTarget);
			object[] array68 = new object[0 + 6];
			array68[0] = label39;
			array68[1] = grid7;
			array68[2] = stackLayout6;
			array68[3] = scrollView;
			array68[4] = grid21;
			array68[5] = proControlPage;
			object service68;
			xamlServiceProvider68.Add(typeFromHandle135, service68 = new SimpleValueTargetProvider(array68, Label.FontSizeProperty, nameScope));
			xamlServiceProvider68.Add(typeof(IReferenceProvider), service68);
			Type typeFromHandle136 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver68 = new XmlNamespaceResolver();
			xmlNamespaceResolver68.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver68.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider68.Add(typeFromHandle136, new XamlTypeResolver(xmlNamespaceResolver68, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider68.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(171, 167)));
			label39.SetValue(fontSizeProperty68, ((IExtendedTypeConverter)fontSizeConverter68).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider68));
			label39.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label39.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label39.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label39);
			label40.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label40.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label40.SetValue(Label.TextProperty, "1000RPM£∫ 000%");
			label40.SetValue(Grid.RowProperty, 0);
			label40.SetValue(Grid.ColumnProperty, 1);
			label40.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty69 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter69 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider69 = new XamlServiceProvider();
			Type typeFromHandle137 = typeof(IProvideValueTarget);
			object[] array69 = new object[0 + 6];
			array69[0] = label40;
			array69[1] = grid7;
			array69[2] = stackLayout6;
			array69[3] = scrollView;
			array69[4] = grid21;
			array69[5] = proControlPage;
			object service69;
			xamlServiceProvider69.Add(typeFromHandle137, service69 = new SimpleValueTargetProvider(array69, Label.FontSizeProperty, nameScope));
			xamlServiceProvider69.Add(typeof(IReferenceProvider), service69);
			Type typeFromHandle138 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver69 = new XmlNamespaceResolver();
			xmlNamespaceResolver69.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver69.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider69.Add(typeFromHandle138, new XamlTypeResolver(xmlNamespaceResolver69, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider69.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(172, 169)));
			label40.SetValue(fontSizeProperty69, ((IExtendedTypeConverter)fontSizeConverter69).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider69));
			label40.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label40.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label40.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label40);
			label41.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label41.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label41.SetValue(Label.TextProperty, "1500RPM£∫ 000%");
			label41.SetValue(Grid.RowProperty, 1);
			label41.SetValue(Grid.ColumnProperty, 0);
			label41.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty70 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter70 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider70 = new XamlServiceProvider();
			Type typeFromHandle139 = typeof(IProvideValueTarget);
			object[] array70 = new object[0 + 6];
			array70[0] = label41;
			array70[1] = grid7;
			array70[2] = stackLayout6;
			array70[3] = scrollView;
			array70[4] = grid21;
			array70[5] = proControlPage;
			object service70;
			xamlServiceProvider70.Add(typeFromHandle139, service70 = new SimpleValueTargetProvider(array70, Label.FontSizeProperty, nameScope));
			xamlServiceProvider70.Add(typeof(IReferenceProvider), service70);
			Type typeFromHandle140 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver70 = new XmlNamespaceResolver();
			xmlNamespaceResolver70.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver70.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider70.Add(typeFromHandle140, new XamlTypeResolver(xmlNamespaceResolver70, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider70.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(173, 170)));
			label41.SetValue(fontSizeProperty70, ((IExtendedTypeConverter)fontSizeConverter70).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider70));
			label41.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label41.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label41.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label41);
			label42.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label42.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label42.SetValue(Label.TextProperty, "2000RPM£∫ 000%");
			label42.SetValue(Grid.RowProperty, 1);
			label42.SetValue(Grid.ColumnProperty, 1);
			label42.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty71 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter71 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider71 = new XamlServiceProvider();
			Type typeFromHandle141 = typeof(IProvideValueTarget);
			object[] array71 = new object[0 + 6];
			array71[0] = label42;
			array71[1] = grid7;
			array71[2] = stackLayout6;
			array71[3] = scrollView;
			array71[4] = grid21;
			array71[5] = proControlPage;
			object service71;
			xamlServiceProvider71.Add(typeFromHandle141, service71 = new SimpleValueTargetProvider(array71, Label.FontSizeProperty, nameScope));
			xamlServiceProvider71.Add(typeof(IReferenceProvider), service71);
			Type typeFromHandle142 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver71 = new XmlNamespaceResolver();
			xmlNamespaceResolver71.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver71.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider71.Add(typeFromHandle142, new XamlTypeResolver(xmlNamespaceResolver71, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider71.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(174, 170)));
			label42.SetValue(fontSizeProperty71, ((IExtendedTypeConverter)fontSizeConverter71).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider71));
			label42.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label42.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label42.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label42);
			label43.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label43.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label43.SetValue(Label.TextProperty, "2500RPM£∫ 000%");
			label43.SetValue(Grid.RowProperty, 2);
			label43.SetValue(Grid.ColumnProperty, 0);
			label43.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty72 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter72 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider72 = new XamlServiceProvider();
			Type typeFromHandle143 = typeof(IProvideValueTarget);
			object[] array72 = new object[0 + 6];
			array72[0] = label43;
			array72[1] = grid7;
			array72[2] = stackLayout6;
			array72[3] = scrollView;
			array72[4] = grid21;
			array72[5] = proControlPage;
			object service72;
			xamlServiceProvider72.Add(typeFromHandle143, service72 = new SimpleValueTargetProvider(array72, Label.FontSizeProperty, nameScope));
			xamlServiceProvider72.Add(typeof(IReferenceProvider), service72);
			Type typeFromHandle144 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver72 = new XmlNamespaceResolver();
			xmlNamespaceResolver72.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver72.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider72.Add(typeFromHandle144, new XamlTypeResolver(xmlNamespaceResolver72, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider72.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(175, 169)));
			label43.SetValue(fontSizeProperty72, ((IExtendedTypeConverter)fontSizeConverter72).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider72));
			label43.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label43.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label43.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label43);
			label44.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label44.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label44.SetValue(Label.TextProperty, "3000RPM£∫ 000%");
			label44.SetValue(Grid.RowProperty, 2);
			label44.SetValue(Grid.ColumnProperty, 1);
			label44.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty73 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter73 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider73 = new XamlServiceProvider();
			Type typeFromHandle145 = typeof(IProvideValueTarget);
			object[] array73 = new object[0 + 6];
			array73[0] = label44;
			array73[1] = grid7;
			array73[2] = stackLayout6;
			array73[3] = scrollView;
			array73[4] = grid21;
			array73[5] = proControlPage;
			object service73;
			xamlServiceProvider73.Add(typeFromHandle145, service73 = new SimpleValueTargetProvider(array73, Label.FontSizeProperty, nameScope));
			xamlServiceProvider73.Add(typeof(IReferenceProvider), service73);
			Type typeFromHandle146 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver73 = new XmlNamespaceResolver();
			xmlNamespaceResolver73.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver73.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider73.Add(typeFromHandle146, new XamlTypeResolver(xmlNamespaceResolver73, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider73.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(176, 169)));
			label44.SetValue(fontSizeProperty73, ((IExtendedTypeConverter)fontSizeConverter73).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider73));
			label44.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label44.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label44.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label44);
			label45.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label45.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label45.SetValue(Label.TextProperty, "3500RPM£∫ 000%");
			label45.SetValue(Grid.RowProperty, 3);
			label45.SetValue(Grid.ColumnProperty, 0);
			label45.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty74 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter74 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider74 = new XamlServiceProvider();
			Type typeFromHandle147 = typeof(IProvideValueTarget);
			object[] array74 = new object[0 + 6];
			array74[0] = label45;
			array74[1] = grid7;
			array74[2] = stackLayout6;
			array74[3] = scrollView;
			array74[4] = grid21;
			array74[5] = proControlPage;
			object service74;
			xamlServiceProvider74.Add(typeFromHandle147, service74 = new SimpleValueTargetProvider(array74, Label.FontSizeProperty, nameScope));
			xamlServiceProvider74.Add(typeof(IReferenceProvider), service74);
			Type typeFromHandle148 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver74 = new XmlNamespaceResolver();
			xmlNamespaceResolver74.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver74.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider74.Add(typeFromHandle148, new XamlTypeResolver(xmlNamespaceResolver74, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider74.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(177, 169)));
			label45.SetValue(fontSizeProperty74, ((IExtendedTypeConverter)fontSizeConverter74).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider74));
			label45.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label45.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label45.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label45);
			label46.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label46.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label46.SetValue(Label.TextProperty, "4000RPM£∫ 000%");
			label46.SetValue(Grid.RowProperty, 3);
			label46.SetValue(Grid.ColumnProperty, 1);
			label46.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty75 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter75 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider75 = new XamlServiceProvider();
			Type typeFromHandle149 = typeof(IProvideValueTarget);
			object[] array75 = new object[0 + 6];
			array75[0] = label46;
			array75[1] = grid7;
			array75[2] = stackLayout6;
			array75[3] = scrollView;
			array75[4] = grid21;
			array75[5] = proControlPage;
			object service75;
			xamlServiceProvider75.Add(typeFromHandle149, service75 = new SimpleValueTargetProvider(array75, Label.FontSizeProperty, nameScope));
			xamlServiceProvider75.Add(typeof(IReferenceProvider), service75);
			Type typeFromHandle150 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver75 = new XmlNamespaceResolver();
			xmlNamespaceResolver75.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver75.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider75.Add(typeFromHandle150, new XamlTypeResolver(xmlNamespaceResolver75, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider75.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(178, 171)));
			label46.SetValue(fontSizeProperty75, ((IExtendedTypeConverter)fontSizeConverter75).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider75));
			label46.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label46.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label46.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label46);
			label47.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label47.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label47.SetValue(Label.TextProperty, "4500RPM£∫ 000%");
			label47.SetValue(Grid.RowProperty, 4);
			label47.SetValue(Grid.ColumnProperty, 0);
			label47.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty76 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter76 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider76 = new XamlServiceProvider();
			Type typeFromHandle151 = typeof(IProvideValueTarget);
			object[] array76 = new object[0 + 6];
			array76[0] = label47;
			array76[1] = grid7;
			array76[2] = stackLayout6;
			array76[3] = scrollView;
			array76[4] = grid21;
			array76[5] = proControlPage;
			object service76;
			xamlServiceProvider76.Add(typeFromHandle151, service76 = new SimpleValueTargetProvider(array76, Label.FontSizeProperty, nameScope));
			xamlServiceProvider76.Add(typeof(IReferenceProvider), service76);
			Type typeFromHandle152 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver76 = new XmlNamespaceResolver();
			xmlNamespaceResolver76.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver76.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider76.Add(typeFromHandle152, new XamlTypeResolver(xmlNamespaceResolver76, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider76.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(179, 169)));
			label47.SetValue(fontSizeProperty76, ((IExtendedTypeConverter)fontSizeConverter76).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider76));
			label47.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label47.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label47.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label47);
			label48.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label48.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label48.SetValue(Label.TextProperty, "5000RPM£∫ 000%");
			label48.SetValue(Grid.RowProperty, 4);
			label48.SetValue(Grid.ColumnProperty, 1);
			label48.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty77 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter77 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider77 = new XamlServiceProvider();
			Type typeFromHandle153 = typeof(IProvideValueTarget);
			object[] array77 = new object[0 + 6];
			array77[0] = label48;
			array77[1] = grid7;
			array77[2] = stackLayout6;
			array77[3] = scrollView;
			array77[4] = grid21;
			array77[5] = proControlPage;
			object service77;
			xamlServiceProvider77.Add(typeFromHandle153, service77 = new SimpleValueTargetProvider(array77, Label.FontSizeProperty, nameScope));
			xamlServiceProvider77.Add(typeof(IReferenceProvider), service77);
			Type typeFromHandle154 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver77 = new XmlNamespaceResolver();
			xmlNamespaceResolver77.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver77.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider77.Add(typeFromHandle154, new XamlTypeResolver(xmlNamespaceResolver77, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider77.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(180, 170)));
			label48.SetValue(fontSizeProperty77, ((IExtendedTypeConverter)fontSizeConverter77).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider77));
			label48.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label48.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label48.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label48);
			label49.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label49.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label49.SetValue(Label.TextProperty, "5500RPM£∫ 000%");
			label49.SetValue(Grid.RowProperty, 5);
			label49.SetValue(Grid.ColumnProperty, 0);
			label49.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty78 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter78 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider78 = new XamlServiceProvider();
			Type typeFromHandle155 = typeof(IProvideValueTarget);
			object[] array78 = new object[0 + 6];
			array78[0] = label49;
			array78[1] = grid7;
			array78[2] = stackLayout6;
			array78[3] = scrollView;
			array78[4] = grid21;
			array78[5] = proControlPage;
			object service78;
			xamlServiceProvider78.Add(typeFromHandle155, service78 = new SimpleValueTargetProvider(array78, Label.FontSizeProperty, nameScope));
			xamlServiceProvider78.Add(typeof(IReferenceProvider), service78);
			Type typeFromHandle156 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver78 = new XmlNamespaceResolver();
			xmlNamespaceResolver78.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver78.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider78.Add(typeFromHandle156, new XamlTypeResolver(xmlNamespaceResolver78, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider78.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(181, 170)));
			label49.SetValue(fontSizeProperty78, ((IExtendedTypeConverter)fontSizeConverter78).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider78));
			label49.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label49.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label49.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label49);
			label50.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label50.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label50.SetValue(Label.TextProperty, "6000RPM£∫ 000%");
			label50.SetValue(Grid.RowProperty, 5);
			label50.SetValue(Grid.ColumnProperty, 1);
			label50.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty79 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter79 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider79 = new XamlServiceProvider();
			Type typeFromHandle157 = typeof(IProvideValueTarget);
			object[] array79 = new object[0 + 6];
			array79[0] = label50;
			array79[1] = grid7;
			array79[2] = stackLayout6;
			array79[3] = scrollView;
			array79[4] = grid21;
			array79[5] = proControlPage;
			object service79;
			xamlServiceProvider79.Add(typeFromHandle157, service79 = new SimpleValueTargetProvider(array79, Label.FontSizeProperty, nameScope));
			xamlServiceProvider79.Add(typeof(IReferenceProvider), service79);
			Type typeFromHandle158 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver79 = new XmlNamespaceResolver();
			xmlNamespaceResolver79.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver79.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider79.Add(typeFromHandle158, new XamlTypeResolver(xmlNamespaceResolver79, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider79.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(182, 169)));
			label50.SetValue(fontSizeProperty79, ((IExtendedTypeConverter)fontSizeConverter79).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider79));
			label50.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label50.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label50.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label50);
			label51.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label51.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label51.SetValue(Label.TextProperty, "6500RPM£∫ 000%");
			label51.SetValue(Grid.RowProperty, 6);
			label51.SetValue(Grid.ColumnProperty, 0);
			label51.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty80 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter80 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider80 = new XamlServiceProvider();
			Type typeFromHandle159 = typeof(IProvideValueTarget);
			object[] array80 = new object[0 + 6];
			array80[0] = label51;
			array80[1] = grid7;
			array80[2] = stackLayout6;
			array80[3] = scrollView;
			array80[4] = grid21;
			array80[5] = proControlPage;
			object service80;
			xamlServiceProvider80.Add(typeFromHandle159, service80 = new SimpleValueTargetProvider(array80, Label.FontSizeProperty, nameScope));
			xamlServiceProvider80.Add(typeof(IReferenceProvider), service80);
			Type typeFromHandle160 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver80 = new XmlNamespaceResolver();
			xmlNamespaceResolver80.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver80.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider80.Add(typeFromHandle160, new XamlTypeResolver(xmlNamespaceResolver80, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider80.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(183, 170)));
			label51.SetValue(fontSizeProperty80, ((IExtendedTypeConverter)fontSizeConverter80).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider80));
			label51.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label51.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label51.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label51);
			label52.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label52.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label52.SetValue(Label.TextProperty, "7000RPM£∫ 000%");
			label52.SetValue(Grid.RowProperty, 6);
			label52.SetValue(Grid.ColumnProperty, 1);
			label52.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty81 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter81 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider81 = new XamlServiceProvider();
			Type typeFromHandle161 = typeof(IProvideValueTarget);
			object[] array81 = new object[0 + 6];
			array81[0] = label52;
			array81[1] = grid7;
			array81[2] = stackLayout6;
			array81[3] = scrollView;
			array81[4] = grid21;
			array81[5] = proControlPage;
			object service81;
			xamlServiceProvider81.Add(typeFromHandle161, service81 = new SimpleValueTargetProvider(array81, Label.FontSizeProperty, nameScope));
			xamlServiceProvider81.Add(typeof(IReferenceProvider), service81);
			Type typeFromHandle162 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver81 = new XmlNamespaceResolver();
			xmlNamespaceResolver81.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver81.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider81.Add(typeFromHandle162, new XamlTypeResolver(xmlNamespaceResolver81, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider81.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(184, 169)));
			label52.SetValue(fontSizeProperty81, ((IExtendedTypeConverter)fontSizeConverter81).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider81));
			label52.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label52.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label52.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label52);
			label53.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label53.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label53.SetValue(Label.TextProperty, "7500RPM£∫ 000%");
			label53.SetValue(Grid.RowProperty, 7);
			label53.SetValue(Grid.ColumnProperty, 0);
			label53.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty82 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter82 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider82 = new XamlServiceProvider();
			Type typeFromHandle163 = typeof(IProvideValueTarget);
			object[] array82 = new object[0 + 6];
			array82[0] = label53;
			array82[1] = grid7;
			array82[2] = stackLayout6;
			array82[3] = scrollView;
			array82[4] = grid21;
			array82[5] = proControlPage;
			object service82;
			xamlServiceProvider82.Add(typeFromHandle163, service82 = new SimpleValueTargetProvider(array82, Label.FontSizeProperty, nameScope));
			xamlServiceProvider82.Add(typeof(IReferenceProvider), service82);
			Type typeFromHandle164 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver82 = new XmlNamespaceResolver();
			xmlNamespaceResolver82.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver82.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider82.Add(typeFromHandle164, new XamlTypeResolver(xmlNamespaceResolver82, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider82.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(185, 169)));
			label53.SetValue(fontSizeProperty82, ((IExtendedTypeConverter)fontSizeConverter82).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider82));
			label53.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label53.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label53.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label53);
			label54.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label54.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label54.SetValue(Label.TextProperty, "8000RPM£∫ 000%");
			label54.SetValue(Grid.RowProperty, 7);
			label54.SetValue(Grid.ColumnProperty, 1);
			label54.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty83 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter83 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider83 = new XamlServiceProvider();
			Type typeFromHandle165 = typeof(IProvideValueTarget);
			object[] array83 = new object[0 + 6];
			array83[0] = label54;
			array83[1] = grid7;
			array83[2] = stackLayout6;
			array83[3] = scrollView;
			array83[4] = grid21;
			array83[5] = proControlPage;
			object service83;
			xamlServiceProvider83.Add(typeFromHandle165, service83 = new SimpleValueTargetProvider(array83, Label.FontSizeProperty, nameScope));
			xamlServiceProvider83.Add(typeof(IReferenceProvider), service83);
			Type typeFromHandle166 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver83 = new XmlNamespaceResolver();
			xmlNamespaceResolver83.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver83.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider83.Add(typeFromHandle166, new XamlTypeResolver(xmlNamespaceResolver83, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider83.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(186, 171)));
			label54.SetValue(fontSizeProperty83, ((IExtendedTypeConverter)fontSizeConverter83).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider83));
			label54.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label54.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label54.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label54);
			label55.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label55.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label55.SetValue(Label.TextProperty, "8500RPM£∫ 000%");
			label55.SetValue(Grid.RowProperty, 8);
			label55.SetValue(Grid.ColumnProperty, 0);
			label55.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty84 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter84 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider84 = new XamlServiceProvider();
			Type typeFromHandle167 = typeof(IProvideValueTarget);
			object[] array84 = new object[0 + 6];
			array84[0] = label55;
			array84[1] = grid7;
			array84[2] = stackLayout6;
			array84[3] = scrollView;
			array84[4] = grid21;
			array84[5] = proControlPage;
			object service84;
			xamlServiceProvider84.Add(typeFromHandle167, service84 = new SimpleValueTargetProvider(array84, Label.FontSizeProperty, nameScope));
			xamlServiceProvider84.Add(typeof(IReferenceProvider), service84);
			Type typeFromHandle168 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver84 = new XmlNamespaceResolver();
			xmlNamespaceResolver84.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver84.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider84.Add(typeFromHandle168, new XamlTypeResolver(xmlNamespaceResolver84, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider84.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(187, 170)));
			label55.SetValue(fontSizeProperty84, ((IExtendedTypeConverter)fontSizeConverter84).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider84));
			label55.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label55.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label55.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label55);
			label56.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label56.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label56.SetValue(Label.TextProperty, "9000RPM£∫ 000%");
			label56.SetValue(Grid.RowProperty, 8);
			label56.SetValue(Grid.ColumnProperty, 1);
			label56.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty85 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter85 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider85 = new XamlServiceProvider();
			Type typeFromHandle169 = typeof(IProvideValueTarget);
			object[] array85 = new object[0 + 6];
			array85[0] = label56;
			array85[1] = grid7;
			array85[2] = stackLayout6;
			array85[3] = scrollView;
			array85[4] = grid21;
			array85[5] = proControlPage;
			object service85;
			xamlServiceProvider85.Add(typeFromHandle169, service85 = new SimpleValueTargetProvider(array85, Label.FontSizeProperty, nameScope));
			xamlServiceProvider85.Add(typeof(IReferenceProvider), service85);
			Type typeFromHandle170 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver85 = new XmlNamespaceResolver();
			xmlNamespaceResolver85.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver85.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider85.Add(typeFromHandle170, new XamlTypeResolver(xmlNamespaceResolver85, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider85.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(188, 171)));
			label56.SetValue(fontSizeProperty85, ((IExtendedTypeConverter)fontSizeConverter85).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider85));
			label56.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label56.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label56.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label56);
			label57.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label57.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label57.SetValue(Label.TextProperty, "LD: 000");
			label57.SetValue(Grid.RowProperty, 9);
			label57.SetValue(Grid.ColumnProperty, 0);
			label57.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty86 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter86 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider86 = new XamlServiceProvider();
			Type typeFromHandle171 = typeof(IProvideValueTarget);
			object[] array86 = new object[0 + 6];
			array86[0] = label57;
			array86[1] = grid7;
			array86[2] = stackLayout6;
			array86[3] = scrollView;
			array86[4] = grid21;
			array86[5] = proControlPage;
			object service86;
			xamlServiceProvider86.Add(typeFromHandle171, service86 = new SimpleValueTargetProvider(array86, Label.FontSizeProperty, nameScope));
			xamlServiceProvider86.Add(typeof(IReferenceProvider), service86);
			Type typeFromHandle172 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver86 = new XmlNamespaceResolver();
			xmlNamespaceResolver86.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver86.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider86.Add(typeFromHandle172, new XamlTypeResolver(xmlNamespaceResolver86, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider86.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(189, 156)));
			label57.SetValue(fontSizeProperty86, ((IExtendedTypeConverter)fontSizeConverter86).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider86));
			label57.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label57.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label57.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label57);
			label58.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label58.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label58.SetValue(Label.TextProperty, "LQ: 000");
			label58.SetValue(Grid.RowProperty, 9);
			label58.SetValue(Grid.ColumnProperty, 1);
			label58.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty87 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter87 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider87 = new XamlServiceProvider();
			Type typeFromHandle173 = typeof(IProvideValueTarget);
			object[] array87 = new object[0 + 6];
			array87[0] = label58;
			array87[1] = grid7;
			array87[2] = stackLayout6;
			array87[3] = scrollView;
			array87[4] = grid21;
			array87[5] = proControlPage;
			object service87;
			xamlServiceProvider87.Add(typeFromHandle173, service87 = new SimpleValueTargetProvider(array87, Label.FontSizeProperty, nameScope));
			xamlServiceProvider87.Add(typeof(IReferenceProvider), service87);
			Type typeFromHandle174 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver87 = new XmlNamespaceResolver();
			xmlNamespaceResolver87.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver87.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider87.Add(typeFromHandle174, new XamlTypeResolver(xmlNamespaceResolver87, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider87.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(190, 156)));
			label58.SetValue(fontSizeProperty87, ((IExtendedTypeConverter)fontSizeConverter87).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider87));
			label58.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label58.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label58.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label58);
			label59.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label59.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label59.SetValue(Label.TextProperty, "FAIF: 000");
			label59.SetValue(Grid.RowProperty, 10);
			label59.SetValue(Grid.ColumnProperty, 0);
			label59.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty88 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter88 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider88 = new XamlServiceProvider();
			Type typeFromHandle175 = typeof(IProvideValueTarget);
			object[] array88 = new object[0 + 6];
			array88[0] = label59;
			array88[1] = grid7;
			array88[2] = stackLayout6;
			array88[3] = scrollView;
			array88[4] = grid21;
			array88[5] = proControlPage;
			object service88;
			xamlServiceProvider88.Add(typeFromHandle175, service88 = new SimpleValueTargetProvider(array88, Label.FontSizeProperty, nameScope));
			xamlServiceProvider88.Add(typeof(IReferenceProvider), service88);
			Type typeFromHandle176 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver88 = new XmlNamespaceResolver();
			xmlNamespaceResolver88.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver88.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider88.Add(typeFromHandle176, new XamlTypeResolver(xmlNamespaceResolver88, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider88.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(191, 161)));
			label59.SetValue(fontSizeProperty88, ((IExtendedTypeConverter)fontSizeConverter88).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider88));
			label59.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label59.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label59.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label59);
			label60.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label60.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label60.SetValue(Label.TextProperty, "LmtSpeed: 000");
			label60.SetValue(Grid.RowProperty, 10);
			label60.SetValue(Grid.ColumnProperty, 1);
			label60.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty89 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter89 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider89 = new XamlServiceProvider();
			Type typeFromHandle177 = typeof(IProvideValueTarget);
			object[] array89 = new object[0 + 6];
			array89[0] = label60;
			array89[1] = grid7;
			array89[2] = stackLayout6;
			array89[3] = scrollView;
			array89[4] = grid21;
			array89[5] = proControlPage;
			object service89;
			xamlServiceProvider89.Add(typeFromHandle177, service89 = new SimpleValueTargetProvider(array89, Label.FontSizeProperty, nameScope));
			xamlServiceProvider89.Add(typeof(IReferenceProvider), service89);
			Type typeFromHandle178 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver89 = new XmlNamespaceResolver();
			xmlNamespaceResolver89.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver89.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider89.Add(typeFromHandle178, new XamlTypeResolver(xmlNamespaceResolver89, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider89.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(192, 169)));
			label60.SetValue(fontSizeProperty89, ((IExtendedTypeConverter)fontSizeConverter89).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider89));
			label60.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label60.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label60.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(label60);
			button30.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button30.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button30.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button30.Clicked += proControlPage.Ratio500_TextChanged;
			button30.SetValue(Grid.RowProperty, 0);
			button30.SetValue(Grid.ColumnProperty, 0);
			button30.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty90 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter90 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider90 = new XamlServiceProvider();
			Type typeFromHandle179 = typeof(IProvideValueTarget);
			object[] array90 = new object[0 + 6];
			array90[0] = button30;
			array90[1] = grid7;
			array90[2] = stackLayout6;
			array90[3] = scrollView;
			array90[4] = grid21;
			array90[5] = proControlPage;
			object service90;
			xamlServiceProvider90.Add(typeFromHandle179, service90 = new SimpleValueTargetProvider(array90, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider90.Add(typeof(IReferenceProvider), service90);
			Type typeFromHandle180 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver90 = new XmlNamespaceResolver();
			xmlNamespaceResolver90.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver90.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider90.Add(typeFromHandle180, new XamlTypeResolver(xmlNamespaceResolver90, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider90.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(194, 184)));
			button30.SetValue(fontSizeProperty90, ((IExtendedTypeConverter)fontSizeConverter90).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider90));
			button30.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button30.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button30.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button30);
			button31.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button31.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button31.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button31.Clicked += proControlPage.Ratio1000_TextChanged;
			button31.SetValue(Grid.RowProperty, 0);
			button31.SetValue(Grid.ColumnProperty, 1);
			button31.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty91 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter91 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider91 = new XamlServiceProvider();
			Type typeFromHandle181 = typeof(IProvideValueTarget);
			object[] array91 = new object[0 + 6];
			array91[0] = button31;
			array91[1] = grid7;
			array91[2] = stackLayout6;
			array91[3] = scrollView;
			array91[4] = grid21;
			array91[5] = proControlPage;
			object service91;
			xamlServiceProvider91.Add(typeFromHandle181, service91 = new SimpleValueTargetProvider(array91, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider91.Add(typeof(IReferenceProvider), service91);
			Type typeFromHandle182 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver91 = new XmlNamespaceResolver();
			xmlNamespaceResolver91.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver91.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider91.Add(typeFromHandle182, new XamlTypeResolver(xmlNamespaceResolver91, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider91.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(195, 188)));
			button31.SetValue(fontSizeProperty91, ((IExtendedTypeConverter)fontSizeConverter91).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider91));
			button31.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button31.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button31.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button31);
			button32.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button32.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button32.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button32.Clicked += proControlPage.Ratio1500_TextChanged;
			button32.SetValue(Grid.RowProperty, 1);
			button32.SetValue(Grid.ColumnProperty, 0);
			button32.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty92 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter92 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider92 = new XamlServiceProvider();
			Type typeFromHandle183 = typeof(IProvideValueTarget);
			object[] array92 = new object[0 + 6];
			array92[0] = button32;
			array92[1] = grid7;
			array92[2] = stackLayout6;
			array92[3] = scrollView;
			array92[4] = grid21;
			array92[5] = proControlPage;
			object service92;
			xamlServiceProvider92.Add(typeFromHandle183, service92 = new SimpleValueTargetProvider(array92, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider92.Add(typeof(IReferenceProvider), service92);
			Type typeFromHandle184 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver92 = new XmlNamespaceResolver();
			xmlNamespaceResolver92.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver92.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider92.Add(typeFromHandle184, new XamlTypeResolver(xmlNamespaceResolver92, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider92.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(196, 186)));
			button32.SetValue(fontSizeProperty92, ((IExtendedTypeConverter)fontSizeConverter92).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider92));
			button32.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button32.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button32.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button32);
			button33.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button33.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button33.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button33.Clicked += proControlPage.Ratio2000_TextChanged;
			button33.SetValue(Grid.RowProperty, 1);
			button33.SetValue(Grid.ColumnProperty, 1);
			button33.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty93 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter93 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider93 = new XamlServiceProvider();
			Type typeFromHandle185 = typeof(IProvideValueTarget);
			object[] array93 = new object[0 + 6];
			array93[0] = button33;
			array93[1] = grid7;
			array93[2] = stackLayout6;
			array93[3] = scrollView;
			array93[4] = grid21;
			array93[5] = proControlPage;
			object service93;
			xamlServiceProvider93.Add(typeFromHandle185, service93 = new SimpleValueTargetProvider(array93, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider93.Add(typeof(IReferenceProvider), service93);
			Type typeFromHandle186 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver93 = new XmlNamespaceResolver();
			xmlNamespaceResolver93.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver93.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider93.Add(typeFromHandle186, new XamlTypeResolver(xmlNamespaceResolver93, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider93.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(197, 184)));
			button33.SetValue(fontSizeProperty93, ((IExtendedTypeConverter)fontSizeConverter93).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider93));
			button33.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button33.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button33.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button33);
			button34.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button34.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button34.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button34.Clicked += proControlPage.Ratio2500_TextChanged;
			button34.SetValue(Grid.RowProperty, 2);
			button34.SetValue(Grid.ColumnProperty, 0);
			button34.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty94 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter94 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider94 = new XamlServiceProvider();
			Type typeFromHandle187 = typeof(IProvideValueTarget);
			object[] array94 = new object[0 + 6];
			array94[0] = button34;
			array94[1] = grid7;
			array94[2] = stackLayout6;
			array94[3] = scrollView;
			array94[4] = grid21;
			array94[5] = proControlPage;
			object service94;
			xamlServiceProvider94.Add(typeFromHandle187, service94 = new SimpleValueTargetProvider(array94, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider94.Add(typeof(IReferenceProvider), service94);
			Type typeFromHandle188 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver94 = new XmlNamespaceResolver();
			xmlNamespaceResolver94.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver94.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider94.Add(typeFromHandle188, new XamlTypeResolver(xmlNamespaceResolver94, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider94.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(198, 184)));
			button34.SetValue(fontSizeProperty94, ((IExtendedTypeConverter)fontSizeConverter94).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider94));
			button34.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button34.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button34.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button34);
			button35.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button35.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button35.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button35.Clicked += proControlPage.Ratio3000_TextChanged;
			button35.SetValue(Grid.RowProperty, 2);
			button35.SetValue(Grid.ColumnProperty, 1);
			button35.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty95 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter95 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider95 = new XamlServiceProvider();
			Type typeFromHandle189 = typeof(IProvideValueTarget);
			object[] array95 = new object[0 + 6];
			array95[0] = button35;
			array95[1] = grid7;
			array95[2] = stackLayout6;
			array95[3] = scrollView;
			array95[4] = grid21;
			array95[5] = proControlPage;
			object service95;
			xamlServiceProvider95.Add(typeFromHandle189, service95 = new SimpleValueTargetProvider(array95, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider95.Add(typeof(IReferenceProvider), service95);
			Type typeFromHandle190 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver95 = new XmlNamespaceResolver();
			xmlNamespaceResolver95.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver95.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider95.Add(typeFromHandle190, new XamlTypeResolver(xmlNamespaceResolver95, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider95.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(199, 187)));
			button35.SetValue(fontSizeProperty95, ((IExtendedTypeConverter)fontSizeConverter95).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider95));
			button35.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button35.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button35.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button35);
			button36.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button36.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button36.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button36.Clicked += proControlPage.Ratio3500_TextChanged;
			button36.SetValue(Grid.RowProperty, 3);
			button36.SetValue(Grid.ColumnProperty, 0);
			button36.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty96 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter96 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider96 = new XamlServiceProvider();
			Type typeFromHandle191 = typeof(IProvideValueTarget);
			object[] array96 = new object[0 + 6];
			array96[0] = button36;
			array96[1] = grid7;
			array96[2] = stackLayout6;
			array96[3] = scrollView;
			array96[4] = grid21;
			array96[5] = proControlPage;
			object service96;
			xamlServiceProvider96.Add(typeFromHandle191, service96 = new SimpleValueTargetProvider(array96, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider96.Add(typeof(IReferenceProvider), service96);
			Type typeFromHandle192 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver96 = new XmlNamespaceResolver();
			xmlNamespaceResolver96.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver96.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider96.Add(typeFromHandle192, new XamlTypeResolver(xmlNamespaceResolver96, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider96.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(200, 186)));
			button36.SetValue(fontSizeProperty96, ((IExtendedTypeConverter)fontSizeConverter96).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider96));
			button36.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button36.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button36.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button36);
			button37.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button37.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button37.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button37.Clicked += proControlPage.Ratio4000_TextChanged;
			button37.SetValue(Grid.RowProperty, 3);
			button37.SetValue(Grid.ColumnProperty, 1);
			button37.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty97 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter97 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider97 = new XamlServiceProvider();
			Type typeFromHandle193 = typeof(IProvideValueTarget);
			object[] array97 = new object[0 + 6];
			array97[0] = button37;
			array97[1] = grid7;
			array97[2] = stackLayout6;
			array97[3] = scrollView;
			array97[4] = grid21;
			array97[5] = proControlPage;
			object service97;
			xamlServiceProvider97.Add(typeFromHandle193, service97 = new SimpleValueTargetProvider(array97, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider97.Add(typeof(IReferenceProvider), service97);
			Type typeFromHandle194 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver97 = new XmlNamespaceResolver();
			xmlNamespaceResolver97.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver97.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider97.Add(typeFromHandle194, new XamlTypeResolver(xmlNamespaceResolver97, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider97.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(201, 186)));
			button37.SetValue(fontSizeProperty97, ((IExtendedTypeConverter)fontSizeConverter97).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider97));
			button37.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button37.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button37.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button37);
			button38.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button38.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button38.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button38.Clicked += proControlPage.Ratio4500_TextChanged;
			button38.SetValue(Grid.RowProperty, 4);
			button38.SetValue(Grid.ColumnProperty, 0);
			button38.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty98 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter98 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider98 = new XamlServiceProvider();
			Type typeFromHandle195 = typeof(IProvideValueTarget);
			object[] array98 = new object[0 + 6];
			array98[0] = button38;
			array98[1] = grid7;
			array98[2] = stackLayout6;
			array98[3] = scrollView;
			array98[4] = grid21;
			array98[5] = proControlPage;
			object service98;
			xamlServiceProvider98.Add(typeFromHandle195, service98 = new SimpleValueTargetProvider(array98, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider98.Add(typeof(IReferenceProvider), service98);
			Type typeFromHandle196 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver98 = new XmlNamespaceResolver();
			xmlNamespaceResolver98.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver98.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider98.Add(typeFromHandle196, new XamlTypeResolver(xmlNamespaceResolver98, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider98.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(202, 186)));
			button38.SetValue(fontSizeProperty98, ((IExtendedTypeConverter)fontSizeConverter98).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider98));
			button38.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button38.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button38.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button38);
			button39.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button39.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button39.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button39.Clicked += proControlPage.Ratio5000_TextChanged;
			button39.SetValue(Grid.RowProperty, 4);
			button39.SetValue(Grid.ColumnProperty, 1);
			button39.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty99 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter99 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider99 = new XamlServiceProvider();
			Type typeFromHandle197 = typeof(IProvideValueTarget);
			object[] array99 = new object[0 + 6];
			array99[0] = button39;
			array99[1] = grid7;
			array99[2] = stackLayout6;
			array99[3] = scrollView;
			array99[4] = grid21;
			array99[5] = proControlPage;
			object service99;
			xamlServiceProvider99.Add(typeFromHandle197, service99 = new SimpleValueTargetProvider(array99, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider99.Add(typeof(IReferenceProvider), service99);
			Type typeFromHandle198 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver99 = new XmlNamespaceResolver();
			xmlNamespaceResolver99.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver99.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider99.Add(typeFromHandle198, new XamlTypeResolver(xmlNamespaceResolver99, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider99.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(203, 187)));
			button39.SetValue(fontSizeProperty99, ((IExtendedTypeConverter)fontSizeConverter99).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider99));
			button39.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button39.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button39.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button39);
			button40.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button40.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button40.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button40.Clicked += proControlPage.Ratio5500_TextChanged;
			button40.SetValue(Grid.RowProperty, 5);
			button40.SetValue(Grid.ColumnProperty, 0);
			button40.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty100 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter100 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider100 = new XamlServiceProvider();
			Type typeFromHandle199 = typeof(IProvideValueTarget);
			object[] array100 = new object[0 + 6];
			array100[0] = button40;
			array100[1] = grid7;
			array100[2] = stackLayout6;
			array100[3] = scrollView;
			array100[4] = grid21;
			array100[5] = proControlPage;
			object service100;
			xamlServiceProvider100.Add(typeFromHandle199, service100 = new SimpleValueTargetProvider(array100, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider100.Add(typeof(IReferenceProvider), service100);
			Type typeFromHandle200 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver100 = new XmlNamespaceResolver();
			xmlNamespaceResolver100.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver100.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider100.Add(typeFromHandle200, new XamlTypeResolver(xmlNamespaceResolver100, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider100.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(204, 185)));
			button40.SetValue(fontSizeProperty100, ((IExtendedTypeConverter)fontSizeConverter100).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider100));
			button40.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button40.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button40.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button40);
			button41.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button41.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button41.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button41.Clicked += proControlPage.Ratio6000_TextChanged;
			button41.SetValue(Grid.RowProperty, 5);
			button41.SetValue(Grid.ColumnProperty, 1);
			button41.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty101 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter101 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider101 = new XamlServiceProvider();
			Type typeFromHandle201 = typeof(IProvideValueTarget);
			object[] array101 = new object[0 + 6];
			array101[0] = button41;
			array101[1] = grid7;
			array101[2] = stackLayout6;
			array101[3] = scrollView;
			array101[4] = grid21;
			array101[5] = proControlPage;
			object service101;
			xamlServiceProvider101.Add(typeFromHandle201, service101 = new SimpleValueTargetProvider(array101, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider101.Add(typeof(IReferenceProvider), service101);
			Type typeFromHandle202 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver101 = new XmlNamespaceResolver();
			xmlNamespaceResolver101.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver101.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider101.Add(typeFromHandle202, new XamlTypeResolver(xmlNamespaceResolver101, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider101.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(205, 185)));
			button41.SetValue(fontSizeProperty101, ((IExtendedTypeConverter)fontSizeConverter101).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider101));
			button41.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button41.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button41.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button41);
			button42.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button42.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button42.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button42.Clicked += proControlPage.Ratio6500_TextChanged;
			button42.SetValue(Grid.RowProperty, 6);
			button42.SetValue(Grid.ColumnProperty, 0);
			button42.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty102 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter102 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider102 = new XamlServiceProvider();
			Type typeFromHandle203 = typeof(IProvideValueTarget);
			object[] array102 = new object[0 + 6];
			array102[0] = button42;
			array102[1] = grid7;
			array102[2] = stackLayout6;
			array102[3] = scrollView;
			array102[4] = grid21;
			array102[5] = proControlPage;
			object service102;
			xamlServiceProvider102.Add(typeFromHandle203, service102 = new SimpleValueTargetProvider(array102, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider102.Add(typeof(IReferenceProvider), service102);
			Type typeFromHandle204 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver102 = new XmlNamespaceResolver();
			xmlNamespaceResolver102.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver102.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider102.Add(typeFromHandle204, new XamlTypeResolver(xmlNamespaceResolver102, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider102.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(206, 183)));
			button42.SetValue(fontSizeProperty102, ((IExtendedTypeConverter)fontSizeConverter102).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider102));
			button42.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button42.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button42.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button42);
			button43.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button43.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button43.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button43.Clicked += proControlPage.Ratio7000_TextChanged;
			button43.SetValue(Grid.RowProperty, 6);
			button43.SetValue(Grid.ColumnProperty, 1);
			button43.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty103 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter103 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider103 = new XamlServiceProvider();
			Type typeFromHandle205 = typeof(IProvideValueTarget);
			object[] array103 = new object[0 + 6];
			array103[0] = button43;
			array103[1] = grid7;
			array103[2] = stackLayout6;
			array103[3] = scrollView;
			array103[4] = grid21;
			array103[5] = proControlPage;
			object service103;
			xamlServiceProvider103.Add(typeFromHandle205, service103 = new SimpleValueTargetProvider(array103, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider103.Add(typeof(IReferenceProvider), service103);
			Type typeFromHandle206 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver103 = new XmlNamespaceResolver();
			xmlNamespaceResolver103.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver103.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider103.Add(typeFromHandle206, new XamlTypeResolver(xmlNamespaceResolver103, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider103.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(207, 186)));
			button43.SetValue(fontSizeProperty103, ((IExtendedTypeConverter)fontSizeConverter103).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider103));
			button43.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button43.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button43.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button43);
			button44.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button44.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button44.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button44.Clicked += proControlPage.Ratio7500_TextChanged;
			button44.SetValue(Grid.RowProperty, 7);
			button44.SetValue(Grid.ColumnProperty, 0);
			button44.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty104 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter104 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider104 = new XamlServiceProvider();
			Type typeFromHandle207 = typeof(IProvideValueTarget);
			object[] array104 = new object[0 + 6];
			array104[0] = button44;
			array104[1] = grid7;
			array104[2] = stackLayout6;
			array104[3] = scrollView;
			array104[4] = grid21;
			array104[5] = proControlPage;
			object service104;
			xamlServiceProvider104.Add(typeFromHandle207, service104 = new SimpleValueTargetProvider(array104, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider104.Add(typeof(IReferenceProvider), service104);
			Type typeFromHandle208 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver104 = new XmlNamespaceResolver();
			xmlNamespaceResolver104.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver104.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider104.Add(typeFromHandle208, new XamlTypeResolver(xmlNamespaceResolver104, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider104.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(208, 185)));
			button44.SetValue(fontSizeProperty104, ((IExtendedTypeConverter)fontSizeConverter104).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider104));
			button44.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button44.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button44.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button44);
			button45.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button45.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button45.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button45.Clicked += proControlPage.Ratio8000_TextChanged;
			button45.SetValue(Grid.RowProperty, 7);
			button45.SetValue(Grid.ColumnProperty, 1);
			button45.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty105 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter105 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider105 = new XamlServiceProvider();
			Type typeFromHandle209 = typeof(IProvideValueTarget);
			object[] array105 = new object[0 + 6];
			array105[0] = button45;
			array105[1] = grid7;
			array105[2] = stackLayout6;
			array105[3] = scrollView;
			array105[4] = grid21;
			array105[5] = proControlPage;
			object service105;
			xamlServiceProvider105.Add(typeFromHandle209, service105 = new SimpleValueTargetProvider(array105, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider105.Add(typeof(IReferenceProvider), service105);
			Type typeFromHandle210 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver105 = new XmlNamespaceResolver();
			xmlNamespaceResolver105.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver105.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider105.Add(typeFromHandle210, new XamlTypeResolver(xmlNamespaceResolver105, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider105.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(209, 186)));
			button45.SetValue(fontSizeProperty105, ((IExtendedTypeConverter)fontSizeConverter105).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider105));
			button45.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button45.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button45.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button45);
			button46.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button46.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button46.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button46.Clicked += proControlPage.Ratio8500_TextChanged;
			button46.SetValue(Grid.RowProperty, 8);
			button46.SetValue(Grid.ColumnProperty, 0);
			button46.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty106 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter106 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider106 = new XamlServiceProvider();
			Type typeFromHandle211 = typeof(IProvideValueTarget);
			object[] array106 = new object[0 + 6];
			array106[0] = button46;
			array106[1] = grid7;
			array106[2] = stackLayout6;
			array106[3] = scrollView;
			array106[4] = grid21;
			array106[5] = proControlPage;
			object service106;
			xamlServiceProvider106.Add(typeFromHandle211, service106 = new SimpleValueTargetProvider(array106, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider106.Add(typeof(IReferenceProvider), service106);
			Type typeFromHandle212 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver106 = new XmlNamespaceResolver();
			xmlNamespaceResolver106.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver106.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider106.Add(typeFromHandle212, new XamlTypeResolver(xmlNamespaceResolver106, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider106.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(210, 185)));
			button46.SetValue(fontSizeProperty106, ((IExtendedTypeConverter)fontSizeConverter106).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider106));
			button46.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button46.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button46.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button46);
			button47.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button47.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button47.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button47.Clicked += proControlPage.Ratio9000_TextChanged;
			button47.SetValue(Grid.RowProperty, 8);
			button47.SetValue(Grid.ColumnProperty, 1);
			button47.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty107 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter107 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider107 = new XamlServiceProvider();
			Type typeFromHandle213 = typeof(IProvideValueTarget);
			object[] array107 = new object[0 + 6];
			array107[0] = button47;
			array107[1] = grid7;
			array107[2] = stackLayout6;
			array107[3] = scrollView;
			array107[4] = grid21;
			array107[5] = proControlPage;
			object service107;
			xamlServiceProvider107.Add(typeFromHandle213, service107 = new SimpleValueTargetProvider(array107, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider107.Add(typeof(IReferenceProvider), service107);
			Type typeFromHandle214 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver107 = new XmlNamespaceResolver();
			xmlNamespaceResolver107.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver107.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider107.Add(typeFromHandle214, new XamlTypeResolver(xmlNamespaceResolver107, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider107.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(211, 185)));
			button47.SetValue(fontSizeProperty107, ((IExtendedTypeConverter)fontSizeConverter107).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider107));
			button47.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button47.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button47.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button47);
			button48.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button48.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button48.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button48.Clicked += proControlPage.LD_TextChanged;
			button48.SetValue(Grid.RowProperty, 9);
			button48.SetValue(Grid.ColumnProperty, 0);
			button48.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty108 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter108 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider108 = new XamlServiceProvider();
			Type typeFromHandle215 = typeof(IProvideValueTarget);
			object[] array108 = new object[0 + 6];
			array108[0] = button48;
			array108[1] = grid7;
			array108[2] = stackLayout6;
			array108[3] = scrollView;
			array108[4] = grid21;
			array108[5] = proControlPage;
			object service108;
			xamlServiceProvider108.Add(typeFromHandle215, service108 = new SimpleValueTargetProvider(array108, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider108.Add(typeof(IReferenceProvider), service108);
			Type typeFromHandle216 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver108 = new XmlNamespaceResolver();
			xmlNamespaceResolver108.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver108.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider108.Add(typeFromHandle216, new XamlTypeResolver(xmlNamespaceResolver108, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider108.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(212, 178)));
			button48.SetValue(fontSizeProperty108, ((IExtendedTypeConverter)fontSizeConverter108).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider108));
			button48.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button48.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button48.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button48);
			button49.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button49.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button49.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button49.Clicked += proControlPage.LQ_TextChanged;
			button49.SetValue(Grid.RowProperty, 9);
			button49.SetValue(Grid.ColumnProperty, 1);
			button49.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty109 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter109 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider109 = new XamlServiceProvider();
			Type typeFromHandle217 = typeof(IProvideValueTarget);
			object[] array109 = new object[0 + 6];
			array109[0] = button49;
			array109[1] = grid7;
			array109[2] = stackLayout6;
			array109[3] = scrollView;
			array109[4] = grid21;
			array109[5] = proControlPage;
			object service109;
			xamlServiceProvider109.Add(typeFromHandle217, service109 = new SimpleValueTargetProvider(array109, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider109.Add(typeof(IReferenceProvider), service109);
			Type typeFromHandle218 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver109 = new XmlNamespaceResolver();
			xmlNamespaceResolver109.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver109.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider109.Add(typeFromHandle218, new XamlTypeResolver(xmlNamespaceResolver109, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider109.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(213, 178)));
			button49.SetValue(fontSizeProperty109, ((IExtendedTypeConverter)fontSizeConverter109).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider109));
			button49.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button49.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button49.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button49);
			button50.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button50.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button50.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button50.Clicked += proControlPage.FAIF_TextChanged;
			button50.SetValue(Grid.RowProperty, 10);
			button50.SetValue(Grid.ColumnProperty, 0);
			button50.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty110 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter110 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider110 = new XamlServiceProvider();
			Type typeFromHandle219 = typeof(IProvideValueTarget);
			object[] array110 = new object[0 + 6];
			array110[0] = button50;
			array110[1] = grid7;
			array110[2] = stackLayout6;
			array110[3] = scrollView;
			array110[4] = grid21;
			array110[5] = proControlPage;
			object service110;
			xamlServiceProvider110.Add(typeFromHandle219, service110 = new SimpleValueTargetProvider(array110, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider110.Add(typeof(IReferenceProvider), service110);
			Type typeFromHandle220 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver110 = new XmlNamespaceResolver();
			xmlNamespaceResolver110.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver110.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider110.Add(typeFromHandle220, new XamlTypeResolver(xmlNamespaceResolver110, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider110.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(214, 181)));
			button50.SetValue(fontSizeProperty110, ((IExtendedTypeConverter)fontSizeConverter110).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider110));
			button50.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button50.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button50.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button50);
			button51.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button51.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button51.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button51.Clicked += proControlPage.LmtSpeed_TextChanged;
			button51.SetValue(Grid.RowProperty, 10);
			button51.SetValue(Grid.ColumnProperty, 1);
			button51.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty111 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter111 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider111 = new XamlServiceProvider();
			Type typeFromHandle221 = typeof(IProvideValueTarget);
			object[] array111 = new object[0 + 6];
			array111[0] = button51;
			array111[1] = grid7;
			array111[2] = stackLayout6;
			array111[3] = scrollView;
			array111[4] = grid21;
			array111[5] = proControlPage;
			object service111;
			xamlServiceProvider111.Add(typeFromHandle221, service111 = new SimpleValueTargetProvider(array111, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider111.Add(typeof(IReferenceProvider), service111);
			Type typeFromHandle222 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver111 = new XmlNamespaceResolver();
			xmlNamespaceResolver111.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver111.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider111.Add(typeFromHandle222, new XamlTypeResolver(xmlNamespaceResolver111, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider111.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(215, 185)));
			button51.SetValue(fontSizeProperty111, ((IExtendedTypeConverter)fontSizeConverter111).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider111));
			button51.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button51.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button51.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid7.Children.Add(button51);
			stackLayout6.Children.Add(grid7);
			button52.Clicked += proControlPage.RowText5_Clicked;
			button52.SetValue(Xamarin.Forms.Button.TextProperty, "»˝µµÀŸ∂»œﬁ¡˜±»¿˝");
			button52.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty112 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter112 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider112 = new XamlServiceProvider();
			Type typeFromHandle223 = typeof(IProvideValueTarget);
			object[] array112 = new object[0 + 5];
			array112[0] = button52;
			array112[1] = stackLayout6;
			array112[2] = scrollView;
			array112[3] = grid21;
			array112[4] = proControlPage;
			object service112;
			xamlServiceProvider112.Add(typeFromHandle223, service112 = new SimpleValueTargetProvider(array112, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider112.Add(typeof(IReferenceProvider), service112);
			Type typeFromHandle224 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver112 = new XmlNamespaceResolver();
			xmlNamespaceResolver112.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver112.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider112.Add(typeFromHandle224, new XamlTypeResolver(xmlNamespaceResolver112, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider112.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(217, 115)));
			button52.SetValue(fontSizeProperty112, ((IExtendedTypeConverter)fontSizeConverter112).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider112));
			button52.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button52.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(button52);
			grid8.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition29.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid8.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition29);
			rowDefinition30.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid8.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition30);
			rowDefinition31.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid8.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition31);
			columnDefinition13.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid8.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition13);
			columnDefinition14.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid8.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition14);
			label61.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label61.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label61.SetValue(Label.TextProperty, "µÕÀŸœﬂµÁ¡˜£∫000%");
			label61.SetValue(Grid.RowProperty, 0);
			label61.SetValue(Grid.ColumnProperty, 0);
			label61.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty113 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter113 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider113 = new XamlServiceProvider();
			Type typeFromHandle225 = typeof(IProvideValueTarget);
			object[] array113 = new object[0 + 6];
			array113[0] = label61;
			array113[1] = grid8;
			array113[2] = stackLayout6;
			array113[3] = scrollView;
			array113[4] = grid21;
			array113[5] = proControlPage;
			object service113;
			xamlServiceProvider113.Add(typeFromHandle225, service113 = new SimpleValueTargetProvider(array113, Label.FontSizeProperty, nameScope));
			xamlServiceProvider113.Add(typeof(IReferenceProvider), service113);
			Type typeFromHandle226 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver113 = new XmlNamespaceResolver();
			xmlNamespaceResolver113.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver113.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider113.Add(typeFromHandle226, new XamlTypeResolver(xmlNamespaceResolver113, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider113.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(228, 173)));
			label61.SetValue(fontSizeProperty113, ((IExtendedTypeConverter)fontSizeConverter113).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider113));
			label61.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label61.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label61.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid8.Children.Add(label61);
			label62.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label62.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label62.SetValue(Label.TextProperty, "÷–ÀŸœﬂµÁ¡˜£∫000%");
			label62.SetValue(Grid.RowProperty, 0);
			label62.SetValue(Grid.ColumnProperty, 1);
			label62.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty114 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter114 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider114 = new XamlServiceProvider();
			Type typeFromHandle227 = typeof(IProvideValueTarget);
			object[] array114 = new object[0 + 6];
			array114[0] = label62;
			array114[1] = grid8;
			array114[2] = stackLayout6;
			array114[3] = scrollView;
			array114[4] = grid21;
			array114[5] = proControlPage;
			object service114;
			xamlServiceProvider114.Add(typeFromHandle227, service114 = new SimpleValueTargetProvider(array114, Label.FontSizeProperty, nameScope));
			xamlServiceProvider114.Add(typeof(IReferenceProvider), service114);
			Type typeFromHandle228 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver114 = new XmlNamespaceResolver();
			xmlNamespaceResolver114.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver114.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider114.Add(typeFromHandle228, new XamlTypeResolver(xmlNamespaceResolver114, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider114.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(229, 172)));
			label62.SetValue(fontSizeProperty114, ((IExtendedTypeConverter)fontSizeConverter114).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider114));
			label62.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label62.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label62.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid8.Children.Add(label62);
			label63.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label63.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label63.SetValue(Label.TextProperty, "µÕÀŸœ‡µÁ¡˜£∫000%");
			label63.SetValue(Grid.RowProperty, 1);
			label63.SetValue(Grid.ColumnProperty, 0);
			label63.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty115 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter115 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider115 = new XamlServiceProvider();
			Type typeFromHandle229 = typeof(IProvideValueTarget);
			object[] array115 = new object[0 + 6];
			array115[0] = label63;
			array115[1] = grid8;
			array115[2] = stackLayout6;
			array115[3] = scrollView;
			array115[4] = grid21;
			array115[5] = proControlPage;
			object service115;
			xamlServiceProvider115.Add(typeFromHandle229, service115 = new SimpleValueTargetProvider(array115, Label.FontSizeProperty, nameScope));
			xamlServiceProvider115.Add(typeof(IReferenceProvider), service115);
			Type typeFromHandle230 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver115 = new XmlNamespaceResolver();
			xmlNamespaceResolver115.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver115.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider115.Add(typeFromHandle230, new XamlTypeResolver(xmlNamespaceResolver115, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider115.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(230, 173)));
			label63.SetValue(fontSizeProperty115, ((IExtendedTypeConverter)fontSizeConverter115).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider115));
			label63.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label63.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label63.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid8.Children.Add(label63);
			label64.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label64.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label64.SetValue(Label.TextProperty, "÷–ÀŸœ‡µÁ¡˜£∫000%");
			label64.SetValue(Grid.RowProperty, 1);
			label64.SetValue(Grid.ColumnProperty, 1);
			label64.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty116 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter116 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider116 = new XamlServiceProvider();
			Type typeFromHandle231 = typeof(IProvideValueTarget);
			object[] array116 = new object[0 + 6];
			array116[0] = label64;
			array116[1] = grid8;
			array116[2] = stackLayout6;
			array116[3] = scrollView;
			array116[4] = grid21;
			array116[5] = proControlPage;
			object service116;
			xamlServiceProvider116.Add(typeFromHandle231, service116 = new SimpleValueTargetProvider(array116, Label.FontSizeProperty, nameScope));
			xamlServiceProvider116.Add(typeof(IReferenceProvider), service116);
			Type typeFromHandle232 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver116 = new XmlNamespaceResolver();
			xmlNamespaceResolver116.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver116.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider116.Add(typeFromHandle232, new XamlTypeResolver(xmlNamespaceResolver116, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider116.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(231, 174)));
			label64.SetValue(fontSizeProperty116, ((IExtendedTypeConverter)fontSizeConverter116).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider116));
			label64.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label64.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label64.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid8.Children.Add(label64);
			label65.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label65.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label65.SetValue(Label.TextProperty, "µÕÀŸÀŸ∂»£∫00000RPM");
			label65.SetValue(Grid.RowProperty, 2);
			label65.SetValue(Grid.ColumnProperty, 0);
			label65.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty117 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter117 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider117 = new XamlServiceProvider();
			Type typeFromHandle233 = typeof(IProvideValueTarget);
			object[] array117 = new object[0 + 6];
			array117[0] = label65;
			array117[1] = grid8;
			array117[2] = stackLayout6;
			array117[3] = scrollView;
			array117[4] = grid21;
			array117[5] = proControlPage;
			object service117;
			xamlServiceProvider117.Add(typeFromHandle233, service117 = new SimpleValueTargetProvider(array117, Label.FontSizeProperty, nameScope));
			xamlServiceProvider117.Add(typeof(IReferenceProvider), service117);
			Type typeFromHandle234 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver117 = new XmlNamespaceResolver();
			xmlNamespaceResolver117.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver117.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider117.Add(typeFromHandle234, new XamlTypeResolver(xmlNamespaceResolver117, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider117.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(232, 168)));
			label65.SetValue(fontSizeProperty117, ((IExtendedTypeConverter)fontSizeConverter117).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider117));
			label65.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label65.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label65.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid8.Children.Add(label65);
			label66.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label66.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label66.SetValue(Label.TextProperty, "÷–ÀŸÀŸ∂»£∫00000RPM");
			label66.SetValue(Grid.RowProperty, 2);
			label66.SetValue(Grid.ColumnProperty, 1);
			label66.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty118 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter118 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider118 = new XamlServiceProvider();
			Type typeFromHandle235 = typeof(IProvideValueTarget);
			object[] array118 = new object[0 + 6];
			array118[0] = label66;
			array118[1] = grid8;
			array118[2] = stackLayout6;
			array118[3] = scrollView;
			array118[4] = grid21;
			array118[5] = proControlPage;
			object service118;
			xamlServiceProvider118.Add(typeFromHandle235, service118 = new SimpleValueTargetProvider(array118, Label.FontSizeProperty, nameScope));
			xamlServiceProvider118.Add(typeof(IReferenceProvider), service118);
			Type typeFromHandle236 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver118 = new XmlNamespaceResolver();
			xmlNamespaceResolver118.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver118.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider118.Add(typeFromHandle236, new XamlTypeResolver(xmlNamespaceResolver118, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider118.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(233, 168)));
			label66.SetValue(fontSizeProperty118, ((IExtendedTypeConverter)fontSizeConverter118).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider118));
			label66.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label66.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label66.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid8.Children.Add(label66);
			button53.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button53.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button53.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button53.Clicked += proControlPage.LowSpeedLineCurr_TextChanged;
			button53.SetValue(Grid.RowProperty, 0);
			button53.SetValue(Grid.ColumnProperty, 0);
			button53.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty119 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter119 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider119 = new XamlServiceProvider();
			Type typeFromHandle237 = typeof(IProvideValueTarget);
			object[] array119 = new object[0 + 6];
			array119[0] = button53;
			array119[1] = grid8;
			array119[2] = stackLayout6;
			array119[3] = scrollView;
			array119[4] = grid21;
			array119[5] = proControlPage;
			object service119;
			xamlServiceProvider119.Add(typeFromHandle237, service119 = new SimpleValueTargetProvider(array119, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider119.Add(typeof(IReferenceProvider), service119);
			Type typeFromHandle238 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver119 = new XmlNamespaceResolver();
			xmlNamespaceResolver119.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver119.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider119.Add(typeFromHandle238, new XamlTypeResolver(xmlNamespaceResolver119, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider119.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(235, 192)));
			button53.SetValue(fontSizeProperty119, ((IExtendedTypeConverter)fontSizeConverter119).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider119));
			button53.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button53.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button53.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid8.Children.Add(button53);
			button54.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button54.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button54.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button54.Clicked += proControlPage.MidSpeedLineCurr_TextChanged;
			button54.SetValue(Grid.RowProperty, 0);
			button54.SetValue(Grid.ColumnProperty, 1);
			button54.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty120 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter120 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider120 = new XamlServiceProvider();
			Type typeFromHandle239 = typeof(IProvideValueTarget);
			object[] array120 = new object[0 + 6];
			array120[0] = button54;
			array120[1] = grid8;
			array120[2] = stackLayout6;
			array120[3] = scrollView;
			array120[4] = grid21;
			array120[5] = proControlPage;
			object service120;
			xamlServiceProvider120.Add(typeFromHandle239, service120 = new SimpleValueTargetProvider(array120, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider120.Add(typeof(IReferenceProvider), service120);
			Type typeFromHandle240 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver120 = new XmlNamespaceResolver();
			xmlNamespaceResolver120.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver120.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider120.Add(typeFromHandle240, new XamlTypeResolver(xmlNamespaceResolver120, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider120.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(236, 191)));
			button54.SetValue(fontSizeProperty120, ((IExtendedTypeConverter)fontSizeConverter120).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider120));
			button54.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button54.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button54.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid8.Children.Add(button54);
			button55.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button55.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button55.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button55.Clicked += proControlPage.LowSpeedPhaseCurr_TextChanged;
			button55.SetValue(Grid.RowProperty, 1);
			button55.SetValue(Grid.ColumnProperty, 0);
			button55.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty121 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter121 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider121 = new XamlServiceProvider();
			Type typeFromHandle241 = typeof(IProvideValueTarget);
			object[] array121 = new object[0 + 6];
			array121[0] = button55;
			array121[1] = grid8;
			array121[2] = stackLayout6;
			array121[3] = scrollView;
			array121[4] = grid21;
			array121[5] = proControlPage;
			object service121;
			xamlServiceProvider121.Add(typeFromHandle241, service121 = new SimpleValueTargetProvider(array121, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider121.Add(typeof(IReferenceProvider), service121);
			Type typeFromHandle242 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver121 = new XmlNamespaceResolver();
			xmlNamespaceResolver121.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver121.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider121.Add(typeFromHandle242, new XamlTypeResolver(xmlNamespaceResolver121, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider121.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(237, 193)));
			button55.SetValue(fontSizeProperty121, ((IExtendedTypeConverter)fontSizeConverter121).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider121));
			button55.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button55.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button55.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid8.Children.Add(button55);
			button56.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button56.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button56.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button56.Clicked += proControlPage.MidSpeedPhaseCurr_TextChanged;
			button56.SetValue(Grid.RowProperty, 1);
			button56.SetValue(Grid.ColumnProperty, 1);
			button56.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty122 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter122 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider122 = new XamlServiceProvider();
			Type typeFromHandle243 = typeof(IProvideValueTarget);
			object[] array122 = new object[0 + 6];
			array122[0] = button56;
			array122[1] = grid8;
			array122[2] = stackLayout6;
			array122[3] = scrollView;
			array122[4] = grid21;
			array122[5] = proControlPage;
			object service122;
			xamlServiceProvider122.Add(typeFromHandle243, service122 = new SimpleValueTargetProvider(array122, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider122.Add(typeof(IReferenceProvider), service122);
			Type typeFromHandle244 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver122 = new XmlNamespaceResolver();
			xmlNamespaceResolver122.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver122.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider122.Add(typeFromHandle244, new XamlTypeResolver(xmlNamespaceResolver122, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider122.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(238, 191)));
			button56.SetValue(fontSizeProperty122, ((IExtendedTypeConverter)fontSizeConverter122).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider122));
			button56.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button56.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button56.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid8.Children.Add(button56);
			button57.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button57.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button57.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button57.Clicked += proControlPage.LowSpeed_TextChanged;
			button57.SetValue(Grid.RowProperty, 2);
			button57.SetValue(Grid.ColumnProperty, 0);
			button57.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty123 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter123 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider123 = new XamlServiceProvider();
			Type typeFromHandle245 = typeof(IProvideValueTarget);
			object[] array123 = new object[0 + 6];
			array123[0] = button57;
			array123[1] = grid8;
			array123[2] = stackLayout6;
			array123[3] = scrollView;
			array123[4] = grid21;
			array123[5] = proControlPage;
			object service123;
			xamlServiceProvider123.Add(typeFromHandle245, service123 = new SimpleValueTargetProvider(array123, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider123.Add(typeof(IReferenceProvider), service123);
			Type typeFromHandle246 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver123 = new XmlNamespaceResolver();
			xmlNamespaceResolver123.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver123.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider123.Add(typeFromHandle246, new XamlTypeResolver(xmlNamespaceResolver123, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider123.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(239, 183)));
			button57.SetValue(fontSizeProperty123, ((IExtendedTypeConverter)fontSizeConverter123).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider123));
			button57.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button57.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button57.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid8.Children.Add(button57);
			button58.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button58.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button58.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button58.Clicked += proControlPage.MidSpeed_TextChanged;
			button58.SetValue(Grid.RowProperty, 2);
			button58.SetValue(Grid.ColumnProperty, 1);
			button58.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty124 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter124 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider124 = new XamlServiceProvider();
			Type typeFromHandle247 = typeof(IProvideValueTarget);
			object[] array124 = new object[0 + 6];
			array124[0] = button58;
			array124[1] = grid8;
			array124[2] = stackLayout6;
			array124[3] = scrollView;
			array124[4] = grid21;
			array124[5] = proControlPage;
			object service124;
			xamlServiceProvider124.Add(typeFromHandle247, service124 = new SimpleValueTargetProvider(array124, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider124.Add(typeof(IReferenceProvider), service124);
			Type typeFromHandle248 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver124 = new XmlNamespaceResolver();
			xmlNamespaceResolver124.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver124.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider124.Add(typeFromHandle248, new XamlTypeResolver(xmlNamespaceResolver124, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider124.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(240, 185)));
			button58.SetValue(fontSizeProperty124, ((IExtendedTypeConverter)fontSizeConverter124).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider124));
			button58.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button58.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button58.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid8.Children.Add(button58);
			stackLayout6.Children.Add(grid8);
			button59.Clicked += proControlPage.NRowText4_Clicked;
			button59.SetValue(Xamarin.Forms.Button.TextProperty, "ƒ‹¡øªÿ¿°");
			button59.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty125 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter125 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider125 = new XamlServiceProvider();
			Type typeFromHandle249 = typeof(IProvideValueTarget);
			object[] array125 = new object[0 + 5];
			array125[0] = button59;
			array125[1] = stackLayout6;
			array125[2] = scrollView;
			array125[3] = grid21;
			array125[4] = proControlPage;
			object service125;
			xamlServiceProvider125.Add(typeFromHandle249, service125 = new SimpleValueTargetProvider(array125, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider125.Add(typeof(IReferenceProvider), service125);
			Type typeFromHandle250 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver125 = new XmlNamespaceResolver();
			xmlNamespaceResolver125.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver125.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider125.Add(typeFromHandle250, new XamlTypeResolver(xmlNamespaceResolver125, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider125.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(242, 113)));
			button59.SetValue(fontSizeProperty125, ((IExtendedTypeConverter)fontSizeConverter125).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider125));
			button59.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button59.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(button59);
			grid9.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition32.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid9.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition32);
			rowDefinition33.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid9.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition33);
			columnDefinition15.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid9.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition15);
			columnDefinition16.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid9.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition16);
			label67.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label67.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label67.SetValue(Label.TextProperty, "Õ£÷πªÿ¡˜£∫ 000A");
			label67.SetValue(Grid.RowProperty, 0);
			label67.SetValue(Grid.ColumnProperty, 0);
			label67.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty126 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter126 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider126 = new XamlServiceProvider();
			Type typeFromHandle251 = typeof(IProvideValueTarget);
			object[] array126 = new object[0 + 6];
			array126[0] = label67;
			array126[1] = grid9;
			array126[2] = stackLayout6;
			array126[3] = scrollView;
			array126[4] = grid21;
			array126[5] = proControlPage;
			object service126;
			xamlServiceProvider126.Add(typeFromHandle251, service126 = new SimpleValueTargetProvider(array126, Label.FontSizeProperty, nameScope));
			xamlServiceProvider126.Add(typeof(IReferenceProvider), service126);
			Type typeFromHandle252 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver126 = new XmlNamespaceResolver();
			xmlNamespaceResolver126.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver126.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider126.Add(typeFromHandle252, new XamlTypeResolver(xmlNamespaceResolver126, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider126.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(252, 169)));
			label67.SetValue(fontSizeProperty126, ((IExtendedTypeConverter)fontSizeConverter126).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider126));
			label67.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label67.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label67.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid9.Children.Add(label67);
			label68.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label68.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label68.SetValue(Label.TextProperty, "◊Ó¥Ûªÿ¡˜£∫ 000A");
			label68.SetValue(Grid.RowProperty, 0);
			label68.SetValue(Grid.ColumnProperty, 1);
			label68.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty127 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter127 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider127 = new XamlServiceProvider();
			Type typeFromHandle253 = typeof(IProvideValueTarget);
			object[] array127 = new object[0 + 6];
			array127[0] = label68;
			array127[1] = grid9;
			array127[2] = stackLayout6;
			array127[3] = scrollView;
			array127[4] = grid21;
			array127[5] = proControlPage;
			object service127;
			xamlServiceProvider127.Add(typeFromHandle253, service127 = new SimpleValueTargetProvider(array127, Label.FontSizeProperty, nameScope));
			xamlServiceProvider127.Add(typeof(IReferenceProvider), service127);
			Type typeFromHandle254 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver127 = new XmlNamespaceResolver();
			xmlNamespaceResolver127.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver127.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider127.Add(typeFromHandle254, new XamlTypeResolver(xmlNamespaceResolver127, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider127.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(253, 169)));
			label68.SetValue(fontSizeProperty127, ((IExtendedTypeConverter)fontSizeConverter127).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider127));
			label68.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label68.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label68.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid9.Children.Add(label68);
			label69.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label69.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label69.SetValue(Label.TextProperty, "µÁ≥ÿ»›¡ø: 00.00Ah");
			label69.SetValue(Grid.RowProperty, 1);
			label69.SetValue(Grid.ColumnProperty, 0);
			label69.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty128 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter128 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider128 = new XamlServiceProvider();
			Type typeFromHandle255 = typeof(IProvideValueTarget);
			object[] array128 = new object[0 + 6];
			array128[0] = label69;
			array128[1] = grid9;
			array128[2] = stackLayout6;
			array128[3] = scrollView;
			array128[4] = grid21;
			array128[5] = proControlPage;
			object service128;
			xamlServiceProvider128.Add(typeFromHandle255, service128 = new SimpleValueTargetProvider(array128, Label.FontSizeProperty, nameScope));
			xamlServiceProvider128.Add(typeof(IReferenceProvider), service128);
			Type typeFromHandle256 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver128 = new XmlNamespaceResolver();
			xmlNamespaceResolver128.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver128.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider128.Add(typeFromHandle256, new XamlTypeResolver(xmlNamespaceResolver128, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider128.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(254, 177)));
			label69.SetValue(fontSizeProperty128, ((IExtendedTypeConverter)fontSizeConverter128).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider128));
			label69.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label69.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label69.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid9.Children.Add(label69);
			button60.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button60.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button60.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button60.Clicked += proControlPage.StopBackCurr_TextChanged;
			button60.SetValue(Grid.RowProperty, 0);
			button60.SetValue(Grid.ColumnProperty, 0);
			button60.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty129 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter129 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider129 = new XamlServiceProvider();
			Type typeFromHandle257 = typeof(IProvideValueTarget);
			object[] array129 = new object[0 + 6];
			array129[0] = button60;
			array129[1] = grid9;
			array129[2] = stackLayout6;
			array129[3] = scrollView;
			array129[4] = grid21;
			array129[5] = proControlPage;
			object service129;
			xamlServiceProvider129.Add(typeFromHandle257, service129 = new SimpleValueTargetProvider(array129, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider129.Add(typeof(IReferenceProvider), service129);
			Type typeFromHandle258 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver129 = new XmlNamespaceResolver();
			xmlNamespaceResolver129.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver129.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider129.Add(typeFromHandle258, new XamlTypeResolver(xmlNamespaceResolver129, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider129.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(255, 188)));
			button60.SetValue(fontSizeProperty129, ((IExtendedTypeConverter)fontSizeConverter129).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider129));
			button60.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button60.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button60.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid9.Children.Add(button60);
			button61.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button61.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button61.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button61.Clicked += proControlPage.MaxBackCurr_TextChanged;
			button61.SetValue(Grid.RowProperty, 0);
			button61.SetValue(Grid.ColumnProperty, 1);
			button61.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty130 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter130 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider130 = new XamlServiceProvider();
			Type typeFromHandle259 = typeof(IProvideValueTarget);
			object[] array130 = new object[0 + 6];
			array130[0] = button61;
			array130[1] = grid9;
			array130[2] = stackLayout6;
			array130[3] = scrollView;
			array130[4] = grid21;
			array130[5] = proControlPage;
			object service130;
			xamlServiceProvider130.Add(typeFromHandle259, service130 = new SimpleValueTargetProvider(array130, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider130.Add(typeof(IReferenceProvider), service130);
			Type typeFromHandle260 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver130 = new XmlNamespaceResolver();
			xmlNamespaceResolver130.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver130.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider130.Add(typeFromHandle260, new XamlTypeResolver(xmlNamespaceResolver130, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider130.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(256, 186)));
			button61.SetValue(fontSizeProperty130, ((IExtendedTypeConverter)fontSizeConverter130).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider130));
			button61.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button61.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button61.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid9.Children.Add(button61);
			button62.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button62.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button62.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button62.Clicked += proControlPage.BattRatedCap1_TextChanged;
			button62.SetValue(Grid.RowProperty, 1);
			button62.SetValue(Grid.ColumnProperty, 0);
			button62.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty131 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter131 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider131 = new XamlServiceProvider();
			Type typeFromHandle261 = typeof(IProvideValueTarget);
			object[] array131 = new object[0 + 6];
			array131[0] = button62;
			array131[1] = grid9;
			array131[2] = stackLayout6;
			array131[3] = scrollView;
			array131[4] = grid21;
			array131[5] = proControlPage;
			object service131;
			xamlServiceProvider131.Add(typeFromHandle261, service131 = new SimpleValueTargetProvider(array131, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider131.Add(typeof(IReferenceProvider), service131);
			Type typeFromHandle262 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver131 = new XmlNamespaceResolver();
			xmlNamespaceResolver131.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver131.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider131.Add(typeFromHandle262, new XamlTypeResolver(xmlNamespaceResolver131, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider131.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(257, 188)));
			button62.SetValue(fontSizeProperty131, ((IExtendedTypeConverter)fontSizeConverter131).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider131));
			button62.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button62.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button62.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid9.Children.Add(button62);
			stackLayout6.Children.Add(grid9);
			grid10.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition34.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid10.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition34);
			rowDefinition35.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid10.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition35);
			rowDefinition36.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid10.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition36);
			rowDefinition37.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid10.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition37);
			rowDefinition38.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid10.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition38);
			rowDefinition39.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid10.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition39);
			rowDefinition40.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid10.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition40);
			rowDefinition41.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid10.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition41);
			rowDefinition42.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid10.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition42);
			rowDefinition43.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid10.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition43);
			columnDefinition17.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid10.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition17);
			columnDefinition18.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid10.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition18);
			label70.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label70.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label70.SetValue(Label.TextProperty, "ªÿ”Õ√≈…≤≥µµ„: 000000");
			label70.SetValue(Grid.RowProperty, 0);
			label70.SetValue(Grid.ColumnProperty, 0);
			label70.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty132 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter132 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider132 = new XamlServiceProvider();
			Type typeFromHandle263 = typeof(IProvideValueTarget);
			object[] array132 = new object[0 + 6];
			array132[0] = label70;
			array132[1] = grid10;
			array132[2] = stackLayout6;
			array132[3] = scrollView;
			array132[4] = grid21;
			array132[5] = proControlPage;
			object service132;
			xamlServiceProvider132.Add(typeFromHandle263, service132 = new SimpleValueTargetProvider(array132, Label.FontSizeProperty, nameScope));
			xamlServiceProvider132.Add(typeof(IReferenceProvider), service132);
			Type typeFromHandle264 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver132 = new XmlNamespaceResolver();
			xmlNamespaceResolver132.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver132.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider132.Add(typeFromHandle264, new XamlTypeResolver(xmlNamespaceResolver132, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider132.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(276, 174)));
			label70.SetValue(fontSizeProperty132, ((IExtendedTypeConverter)fontSizeConverter132).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider132));
			label70.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label70.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label70.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label70);
			label71.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label71.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label71.SetValue(Label.TextProperty, "BrakeVol: 0000");
			label71.SetValue(Grid.RowProperty, 0);
			label71.SetValue(Grid.ColumnProperty, 1);
			label71.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty133 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter133 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider133 = new XamlServiceProvider();
			Type typeFromHandle265 = typeof(IProvideValueTarget);
			object[] array133 = new object[0 + 6];
			array133[0] = label71;
			array133[1] = grid10;
			array133[2] = stackLayout6;
			array133[3] = scrollView;
			array133[4] = grid21;
			array133[5] = proControlPage;
			object service133;
			xamlServiceProvider133.Add(typeFromHandle265, service133 = new SimpleValueTargetProvider(array133, Label.FontSizeProperty, nameScope));
			xamlServiceProvider133.Add(typeof(IReferenceProvider), service133);
			Type typeFromHandle266 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver133 = new XmlNamespaceResolver();
			xmlNamespaceResolver133.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver133.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider133.Add(typeFromHandle266, new XamlTypeResolver(xmlNamespaceResolver133, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider133.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(277, 170)));
			label71.SetValue(fontSizeProperty133, ((IExtendedTypeConverter)fontSizeConverter133).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider133));
			label71.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label71.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label71.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label71);
			label72.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label72.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label72.SetValue(Label.TextProperty, "500RPM£∫ 000%");
			label72.SetValue(Grid.RowProperty, 1);
			label72.SetValue(Grid.ColumnProperty, 0);
			label72.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty134 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter134 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider134 = new XamlServiceProvider();
			Type typeFromHandle267 = typeof(IProvideValueTarget);
			object[] array134 = new object[0 + 6];
			array134[0] = label72;
			array134[1] = grid10;
			array134[2] = stackLayout6;
			array134[3] = scrollView;
			array134[4] = grid21;
			array134[5] = proControlPage;
			object service134;
			xamlServiceProvider134.Add(typeFromHandle267, service134 = new SimpleValueTargetProvider(array134, Label.FontSizeProperty, nameScope));
			xamlServiceProvider134.Add(typeof(IReferenceProvider), service134);
			Type typeFromHandle268 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver134 = new XmlNamespaceResolver();
			xmlNamespaceResolver134.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver134.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider134.Add(typeFromHandle268, new XamlTypeResolver(xmlNamespaceResolver134, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider134.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(279, 168)));
			label72.SetValue(fontSizeProperty134, ((IExtendedTypeConverter)fontSizeConverter134).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider134));
			label72.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label72.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label72.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label72);
			label73.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label73.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label73.SetValue(Label.TextProperty, "1000RPM£∫ 000%");
			label73.SetValue(Grid.RowProperty, 1);
			label73.SetValue(Grid.ColumnProperty, 1);
			label73.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty135 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter135 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider135 = new XamlServiceProvider();
			Type typeFromHandle269 = typeof(IProvideValueTarget);
			object[] array135 = new object[0 + 6];
			array135[0] = label73;
			array135[1] = grid10;
			array135[2] = stackLayout6;
			array135[3] = scrollView;
			array135[4] = grid21;
			array135[5] = proControlPage;
			object service135;
			xamlServiceProvider135.Add(typeFromHandle269, service135 = new SimpleValueTargetProvider(array135, Label.FontSizeProperty, nameScope));
			xamlServiceProvider135.Add(typeof(IReferenceProvider), service135);
			Type typeFromHandle270 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver135 = new XmlNamespaceResolver();
			xmlNamespaceResolver135.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver135.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider135.Add(typeFromHandle270, new XamlTypeResolver(xmlNamespaceResolver135, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider135.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(280, 170)));
			label73.SetValue(fontSizeProperty135, ((IExtendedTypeConverter)fontSizeConverter135).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider135));
			label73.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label73.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label73.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label73);
			label74.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label74.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label74.SetValue(Label.TextProperty, "1500RPM£∫ 000%");
			label74.SetValue(Grid.RowProperty, 2);
			label74.SetValue(Grid.ColumnProperty, 0);
			label74.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty136 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter136 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider136 = new XamlServiceProvider();
			Type typeFromHandle271 = typeof(IProvideValueTarget);
			object[] array136 = new object[0 + 6];
			array136[0] = label74;
			array136[1] = grid10;
			array136[2] = stackLayout6;
			array136[3] = scrollView;
			array136[4] = grid21;
			array136[5] = proControlPage;
			object service136;
			xamlServiceProvider136.Add(typeFromHandle271, service136 = new SimpleValueTargetProvider(array136, Label.FontSizeProperty, nameScope));
			xamlServiceProvider136.Add(typeof(IReferenceProvider), service136);
			Type typeFromHandle272 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver136 = new XmlNamespaceResolver();
			xmlNamespaceResolver136.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver136.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider136.Add(typeFromHandle272, new XamlTypeResolver(xmlNamespaceResolver136, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider136.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(281, 170)));
			label74.SetValue(fontSizeProperty136, ((IExtendedTypeConverter)fontSizeConverter136).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider136));
			label74.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label74.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label74.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label74);
			label75.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label75.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label75.SetValue(Label.TextProperty, "2000RPM£∫ 000%");
			label75.SetValue(Grid.RowProperty, 2);
			label75.SetValue(Grid.ColumnProperty, 1);
			label75.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty137 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter137 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider137 = new XamlServiceProvider();
			Type typeFromHandle273 = typeof(IProvideValueTarget);
			object[] array137 = new object[0 + 6];
			array137[0] = label75;
			array137[1] = grid10;
			array137[2] = stackLayout6;
			array137[3] = scrollView;
			array137[4] = grid21;
			array137[5] = proControlPage;
			object service137;
			xamlServiceProvider137.Add(typeFromHandle273, service137 = new SimpleValueTargetProvider(array137, Label.FontSizeProperty, nameScope));
			xamlServiceProvider137.Add(typeof(IReferenceProvider), service137);
			Type typeFromHandle274 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver137 = new XmlNamespaceResolver();
			xmlNamespaceResolver137.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver137.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider137.Add(typeFromHandle274, new XamlTypeResolver(xmlNamespaceResolver137, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider137.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(282, 171)));
			label75.SetValue(fontSizeProperty137, ((IExtendedTypeConverter)fontSizeConverter137).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider137));
			label75.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label75.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label75.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label75);
			label76.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label76.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label76.SetValue(Label.TextProperty, "2500RPM£∫ 000%");
			label76.SetValue(Grid.RowProperty, 3);
			label76.SetValue(Grid.ColumnProperty, 0);
			label76.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty138 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter138 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider138 = new XamlServiceProvider();
			Type typeFromHandle275 = typeof(IProvideValueTarget);
			object[] array138 = new object[0 + 6];
			array138[0] = label76;
			array138[1] = grid10;
			array138[2] = stackLayout6;
			array138[3] = scrollView;
			array138[4] = grid21;
			array138[5] = proControlPage;
			object service138;
			xamlServiceProvider138.Add(typeFromHandle275, service138 = new SimpleValueTargetProvider(array138, Label.FontSizeProperty, nameScope));
			xamlServiceProvider138.Add(typeof(IReferenceProvider), service138);
			Type typeFromHandle276 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver138 = new XmlNamespaceResolver();
			xmlNamespaceResolver138.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver138.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider138.Add(typeFromHandle276, new XamlTypeResolver(xmlNamespaceResolver138, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider138.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(283, 171)));
			label76.SetValue(fontSizeProperty138, ((IExtendedTypeConverter)fontSizeConverter138).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider138));
			label76.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label76.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label76.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label76);
			label77.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label77.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label77.SetValue(Label.TextProperty, "3000RPM£∫ 000%");
			label77.SetValue(Grid.RowProperty, 3);
			label77.SetValue(Grid.ColumnProperty, 1);
			label77.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty139 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter139 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider139 = new XamlServiceProvider();
			Type typeFromHandle277 = typeof(IProvideValueTarget);
			object[] array139 = new object[0 + 6];
			array139[0] = label77;
			array139[1] = grid10;
			array139[2] = stackLayout6;
			array139[3] = scrollView;
			array139[4] = grid21;
			array139[5] = proControlPage;
			object service139;
			xamlServiceProvider139.Add(typeFromHandle277, service139 = new SimpleValueTargetProvider(array139, Label.FontSizeProperty, nameScope));
			xamlServiceProvider139.Add(typeof(IReferenceProvider), service139);
			Type typeFromHandle278 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver139 = new XmlNamespaceResolver();
			xmlNamespaceResolver139.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver139.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider139.Add(typeFromHandle278, new XamlTypeResolver(xmlNamespaceResolver139, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider139.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(284, 172)));
			label77.SetValue(fontSizeProperty139, ((IExtendedTypeConverter)fontSizeConverter139).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider139));
			label77.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label77.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label77.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label77);
			label78.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label78.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label78.SetValue(Label.TextProperty, "3500RPM£∫ 000%");
			label78.SetValue(Grid.RowProperty, 4);
			label78.SetValue(Grid.ColumnProperty, 0);
			label78.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty140 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter140 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider140 = new XamlServiceProvider();
			Type typeFromHandle279 = typeof(IProvideValueTarget);
			object[] array140 = new object[0 + 6];
			array140[0] = label78;
			array140[1] = grid10;
			array140[2] = stackLayout6;
			array140[3] = scrollView;
			array140[4] = grid21;
			array140[5] = proControlPage;
			object service140;
			xamlServiceProvider140.Add(typeFromHandle279, service140 = new SimpleValueTargetProvider(array140, Label.FontSizeProperty, nameScope));
			xamlServiceProvider140.Add(typeof(IReferenceProvider), service140);
			Type typeFromHandle280 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver140 = new XmlNamespaceResolver();
			xmlNamespaceResolver140.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver140.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider140.Add(typeFromHandle280, new XamlTypeResolver(xmlNamespaceResolver140, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider140.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(285, 172)));
			label78.SetValue(fontSizeProperty140, ((IExtendedTypeConverter)fontSizeConverter140).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider140));
			label78.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label78.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label78.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label78);
			label79.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label79.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label79.SetValue(Label.TextProperty, "4000RPM£∫ 000%");
			label79.SetValue(Grid.RowProperty, 4);
			label79.SetValue(Grid.ColumnProperty, 1);
			label79.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty141 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter141 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider141 = new XamlServiceProvider();
			Type typeFromHandle281 = typeof(IProvideValueTarget);
			object[] array141 = new object[0 + 6];
			array141[0] = label79;
			array141[1] = grid10;
			array141[2] = stackLayout6;
			array141[3] = scrollView;
			array141[4] = grid21;
			array141[5] = proControlPage;
			object service141;
			xamlServiceProvider141.Add(typeFromHandle281, service141 = new SimpleValueTargetProvider(array141, Label.FontSizeProperty, nameScope));
			xamlServiceProvider141.Add(typeof(IReferenceProvider), service141);
			Type typeFromHandle282 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver141 = new XmlNamespaceResolver();
			xmlNamespaceResolver141.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver141.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider141.Add(typeFromHandle282, new XamlTypeResolver(xmlNamespaceResolver141, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider141.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(286, 171)));
			label79.SetValue(fontSizeProperty141, ((IExtendedTypeConverter)fontSizeConverter141).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider141));
			label79.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label79.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label79.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label79);
			label80.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label80.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label80.SetValue(Label.TextProperty, "4500RPM£∫ 000%");
			label80.SetValue(Grid.RowProperty, 5);
			label80.SetValue(Grid.ColumnProperty, 0);
			label80.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty142 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter142 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider142 = new XamlServiceProvider();
			Type typeFromHandle283 = typeof(IProvideValueTarget);
			object[] array142 = new object[0 + 6];
			array142[0] = label80;
			array142[1] = grid10;
			array142[2] = stackLayout6;
			array142[3] = scrollView;
			array142[4] = grid21;
			array142[5] = proControlPage;
			object service142;
			xamlServiceProvider142.Add(typeFromHandle283, service142 = new SimpleValueTargetProvider(array142, Label.FontSizeProperty, nameScope));
			xamlServiceProvider142.Add(typeof(IReferenceProvider), service142);
			Type typeFromHandle284 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver142 = new XmlNamespaceResolver();
			xmlNamespaceResolver142.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver142.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider142.Add(typeFromHandle284, new XamlTypeResolver(xmlNamespaceResolver142, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider142.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(287, 171)));
			label80.SetValue(fontSizeProperty142, ((IExtendedTypeConverter)fontSizeConverter142).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider142));
			label80.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label80.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label80.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label80);
			label81.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label81.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label81.SetValue(Label.TextProperty, "5000RPM£∫ 000%");
			label81.SetValue(Grid.RowProperty, 5);
			label81.SetValue(Grid.ColumnProperty, 1);
			label81.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty143 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter143 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider143 = new XamlServiceProvider();
			Type typeFromHandle285 = typeof(IProvideValueTarget);
			object[] array143 = new object[0 + 6];
			array143[0] = label81;
			array143[1] = grid10;
			array143[2] = stackLayout6;
			array143[3] = scrollView;
			array143[4] = grid21;
			array143[5] = proControlPage;
			object service143;
			xamlServiceProvider143.Add(typeFromHandle285, service143 = new SimpleValueTargetProvider(array143, Label.FontSizeProperty, nameScope));
			xamlServiceProvider143.Add(typeof(IReferenceProvider), service143);
			Type typeFromHandle286 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver143 = new XmlNamespaceResolver();
			xmlNamespaceResolver143.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver143.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider143.Add(typeFromHandle286, new XamlTypeResolver(xmlNamespaceResolver143, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider143.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(288, 171)));
			label81.SetValue(fontSizeProperty143, ((IExtendedTypeConverter)fontSizeConverter143).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider143));
			label81.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label81.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label81.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label81);
			label82.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label82.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label82.SetValue(Label.TextProperty, "5500RPM£∫ 000%");
			label82.SetValue(Grid.RowProperty, 6);
			label82.SetValue(Grid.ColumnProperty, 0);
			label82.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty144 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter144 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider144 = new XamlServiceProvider();
			Type typeFromHandle287 = typeof(IProvideValueTarget);
			object[] array144 = new object[0 + 6];
			array144[0] = label82;
			array144[1] = grid10;
			array144[2] = stackLayout6;
			array144[3] = scrollView;
			array144[4] = grid21;
			array144[5] = proControlPage;
			object service144;
			xamlServiceProvider144.Add(typeFromHandle287, service144 = new SimpleValueTargetProvider(array144, Label.FontSizeProperty, nameScope));
			xamlServiceProvider144.Add(typeof(IReferenceProvider), service144);
			Type typeFromHandle288 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver144 = new XmlNamespaceResolver();
			xmlNamespaceResolver144.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver144.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider144.Add(typeFromHandle288, new XamlTypeResolver(xmlNamespaceResolver144, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider144.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(289, 170)));
			label82.SetValue(fontSizeProperty144, ((IExtendedTypeConverter)fontSizeConverter144).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider144));
			label82.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label82.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label82.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label82);
			label83.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label83.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label83.SetValue(Label.TextProperty, "6000RPM£∫ 000%");
			label83.SetValue(Grid.RowProperty, 6);
			label83.SetValue(Grid.ColumnProperty, 1);
			label83.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty145 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter145 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider145 = new XamlServiceProvider();
			Type typeFromHandle289 = typeof(IProvideValueTarget);
			object[] array145 = new object[0 + 6];
			array145[0] = label83;
			array145[1] = grid10;
			array145[2] = stackLayout6;
			array145[3] = scrollView;
			array145[4] = grid21;
			array145[5] = proControlPage;
			object service145;
			xamlServiceProvider145.Add(typeFromHandle289, service145 = new SimpleValueTargetProvider(array145, Label.FontSizeProperty, nameScope));
			xamlServiceProvider145.Add(typeof(IReferenceProvider), service145);
			Type typeFromHandle290 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver145 = new XmlNamespaceResolver();
			xmlNamespaceResolver145.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver145.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider145.Add(typeFromHandle290, new XamlTypeResolver(xmlNamespaceResolver145, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider145.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(290, 170)));
			label83.SetValue(fontSizeProperty145, ((IExtendedTypeConverter)fontSizeConverter145).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider145));
			label83.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label83.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label83.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label83);
			label84.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label84.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label84.SetValue(Label.TextProperty, "6500RPM£∫ 000%");
			label84.SetValue(Grid.RowProperty, 7);
			label84.SetValue(Grid.ColumnProperty, 0);
			label84.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty146 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter146 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider146 = new XamlServiceProvider();
			Type typeFromHandle291 = typeof(IProvideValueTarget);
			object[] array146 = new object[0 + 6];
			array146[0] = label84;
			array146[1] = grid10;
			array146[2] = stackLayout6;
			array146[3] = scrollView;
			array146[4] = grid21;
			array146[5] = proControlPage;
			object service146;
			xamlServiceProvider146.Add(typeFromHandle291, service146 = new SimpleValueTargetProvider(array146, Label.FontSizeProperty, nameScope));
			xamlServiceProvider146.Add(typeof(IReferenceProvider), service146);
			Type typeFromHandle292 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver146 = new XmlNamespaceResolver();
			xmlNamespaceResolver146.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver146.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider146.Add(typeFromHandle292, new XamlTypeResolver(xmlNamespaceResolver146, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider146.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(291, 170)));
			label84.SetValue(fontSizeProperty146, ((IExtendedTypeConverter)fontSizeConverter146).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider146));
			label84.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label84.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label84.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label84);
			label85.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label85.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label85.SetValue(Label.TextProperty, "7000RPM£∫ 000%");
			label85.SetValue(Grid.RowProperty, 7);
			label85.SetValue(Grid.ColumnProperty, 1);
			label85.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty147 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter147 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider147 = new XamlServiceProvider();
			Type typeFromHandle293 = typeof(IProvideValueTarget);
			object[] array147 = new object[0 + 6];
			array147[0] = label85;
			array147[1] = grid10;
			array147[2] = stackLayout6;
			array147[3] = scrollView;
			array147[4] = grid21;
			array147[5] = proControlPage;
			object service147;
			xamlServiceProvider147.Add(typeFromHandle293, service147 = new SimpleValueTargetProvider(array147, Label.FontSizeProperty, nameScope));
			xamlServiceProvider147.Add(typeof(IReferenceProvider), service147);
			Type typeFromHandle294 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver147 = new XmlNamespaceResolver();
			xmlNamespaceResolver147.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver147.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider147.Add(typeFromHandle294, new XamlTypeResolver(xmlNamespaceResolver147, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider147.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(292, 170)));
			label85.SetValue(fontSizeProperty147, ((IExtendedTypeConverter)fontSizeConverter147).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider147));
			label85.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label85.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label85.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label85);
			label86.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label86.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label86.SetValue(Label.TextProperty, "7500RPM£∫ 000%");
			label86.SetValue(Grid.RowProperty, 8);
			label86.SetValue(Grid.ColumnProperty, 0);
			label86.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty148 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter148 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider148 = new XamlServiceProvider();
			Type typeFromHandle295 = typeof(IProvideValueTarget);
			object[] array148 = new object[0 + 6];
			array148[0] = label86;
			array148[1] = grid10;
			array148[2] = stackLayout6;
			array148[3] = scrollView;
			array148[4] = grid21;
			array148[5] = proControlPage;
			object service148;
			xamlServiceProvider148.Add(typeFromHandle295, service148 = new SimpleValueTargetProvider(array148, Label.FontSizeProperty, nameScope));
			xamlServiceProvider148.Add(typeof(IReferenceProvider), service148);
			Type typeFromHandle296 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver148 = new XmlNamespaceResolver();
			xmlNamespaceResolver148.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver148.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider148.Add(typeFromHandle296, new XamlTypeResolver(xmlNamespaceResolver148, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider148.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(293, 171)));
			label86.SetValue(fontSizeProperty148, ((IExtendedTypeConverter)fontSizeConverter148).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider148));
			label86.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label86.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label86.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label86);
			label87.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label87.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label87.SetValue(Label.TextProperty, "8000RPM£∫ 000%");
			label87.SetValue(Grid.RowProperty, 8);
			label87.SetValue(Grid.ColumnProperty, 1);
			label87.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty149 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter149 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider149 = new XamlServiceProvider();
			Type typeFromHandle297 = typeof(IProvideValueTarget);
			object[] array149 = new object[0 + 6];
			array149[0] = label87;
			array149[1] = grid10;
			array149[2] = stackLayout6;
			array149[3] = scrollView;
			array149[4] = grid21;
			array149[5] = proControlPage;
			object service149;
			xamlServiceProvider149.Add(typeFromHandle297, service149 = new SimpleValueTargetProvider(array149, Label.FontSizeProperty, nameScope));
			xamlServiceProvider149.Add(typeof(IReferenceProvider), service149);
			Type typeFromHandle298 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver149 = new XmlNamespaceResolver();
			xmlNamespaceResolver149.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver149.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider149.Add(typeFromHandle298, new XamlTypeResolver(xmlNamespaceResolver149, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider149.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(294, 170)));
			label87.SetValue(fontSizeProperty149, ((IExtendedTypeConverter)fontSizeConverter149).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider149));
			label87.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label87.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label87.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label87);
			label88.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label88.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label88.SetValue(Label.TextProperty, "8500RPM£∫ 000%");
			label88.SetValue(Grid.RowProperty, 9);
			label88.SetValue(Grid.ColumnProperty, 0);
			label88.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty150 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter150 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider150 = new XamlServiceProvider();
			Type typeFromHandle299 = typeof(IProvideValueTarget);
			object[] array150 = new object[0 + 6];
			array150[0] = label88;
			array150[1] = grid10;
			array150[2] = stackLayout6;
			array150[3] = scrollView;
			array150[4] = grid21;
			array150[5] = proControlPage;
			object service150;
			xamlServiceProvider150.Add(typeFromHandle299, service150 = new SimpleValueTargetProvider(array150, Label.FontSizeProperty, nameScope));
			xamlServiceProvider150.Add(typeof(IReferenceProvider), service150);
			Type typeFromHandle300 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver150 = new XmlNamespaceResolver();
			xmlNamespaceResolver150.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver150.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider150.Add(typeFromHandle300, new XamlTypeResolver(xmlNamespaceResolver150, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider150.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(295, 170)));
			label88.SetValue(fontSizeProperty150, ((IExtendedTypeConverter)fontSizeConverter150).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider150));
			label88.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label88.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label88.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label88);
			label89.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label89.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label89.SetValue(Label.TextProperty, "9000RPM£∫ 000%");
			label89.SetValue(Grid.RowProperty, 9);
			label89.SetValue(Grid.ColumnProperty, 1);
			label89.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty151 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter151 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider151 = new XamlServiceProvider();
			Type typeFromHandle301 = typeof(IProvideValueTarget);
			object[] array151 = new object[0 + 6];
			array151[0] = label89;
			array151[1] = grid10;
			array151[2] = stackLayout6;
			array151[3] = scrollView;
			array151[4] = grid21;
			array151[5] = proControlPage;
			object service151;
			xamlServiceProvider151.Add(typeFromHandle301, service151 = new SimpleValueTargetProvider(array151, Label.FontSizeProperty, nameScope));
			xamlServiceProvider151.Add(typeof(IReferenceProvider), service151);
			Type typeFromHandle302 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver151 = new XmlNamespaceResolver();
			xmlNamespaceResolver151.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver151.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider151.Add(typeFromHandle302, new XamlTypeResolver(xmlNamespaceResolver151, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider151.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(296, 171)));
			label89.SetValue(fontSizeProperty151, ((IExtendedTypeConverter)fontSizeConverter151).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider151));
			label89.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label89.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label89.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(label89);
			button63.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button63.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button63.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button63.Clicked += proControlPage.FreeThrottle_TextChanged;
			button63.SetValue(Grid.RowProperty, 0);
			button63.SetValue(Grid.ColumnProperty, 0);
			button63.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty152 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter152 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider152 = new XamlServiceProvider();
			Type typeFromHandle303 = typeof(IProvideValueTarget);
			object[] array152 = new object[0 + 6];
			array152[0] = button63;
			array152[1] = grid10;
			array152[2] = stackLayout6;
			array152[3] = scrollView;
			array152[4] = grid21;
			array152[5] = proControlPage;
			object service152;
			xamlServiceProvider152.Add(typeFromHandle303, service152 = new SimpleValueTargetProvider(array152, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider152.Add(typeof(IReferenceProvider), service152);
			Type typeFromHandle304 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver152 = new XmlNamespaceResolver();
			xmlNamespaceResolver152.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver152.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider152.Add(typeFromHandle304, new XamlTypeResolver(xmlNamespaceResolver152, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider152.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(298, 187)));
			button63.SetValue(fontSizeProperty152, ((IExtendedTypeConverter)fontSizeConverter152).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider152));
			button63.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button63.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button63.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button63);
			button64.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button64.Clicked += proControlPage.NRatio500_TextChanged;
			button64.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button64.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button64.SetValue(Grid.RowProperty, 1);
			button64.SetValue(Grid.ColumnProperty, 0);
			button64.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty153 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter153 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider153 = new XamlServiceProvider();
			Type typeFromHandle305 = typeof(IProvideValueTarget);
			object[] array153 = new object[0 + 6];
			array153[0] = button64;
			array153[1] = grid10;
			array153[2] = stackLayout6;
			array153[3] = scrollView;
			array153[4] = grid21;
			array153[5] = proControlPage;
			object service153;
			xamlServiceProvider153.Add(typeFromHandle305, service153 = new SimpleValueTargetProvider(array153, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider153.Add(typeof(IReferenceProvider), service153);
			Type typeFromHandle306 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver153 = new XmlNamespaceResolver();
			xmlNamespaceResolver153.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver153.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider153.Add(typeFromHandle306, new XamlTypeResolver(xmlNamespaceResolver153, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider153.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(300, 184)));
			button64.SetValue(fontSizeProperty153, ((IExtendedTypeConverter)fontSizeConverter153).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider153));
			button64.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button64.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button64.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button64);
			button65.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button65.Clicked += proControlPage.NRatio1000_TextChanged;
			button65.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button65.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button65.SetValue(Grid.RowProperty, 1);
			button65.SetValue(Grid.ColumnProperty, 1);
			button65.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty154 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter154 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider154 = new XamlServiceProvider();
			Type typeFromHandle307 = typeof(IProvideValueTarget);
			object[] array154 = new object[0 + 6];
			array154[0] = button65;
			array154[1] = grid10;
			array154[2] = stackLayout6;
			array154[3] = scrollView;
			array154[4] = grid21;
			array154[5] = proControlPage;
			object service154;
			xamlServiceProvider154.Add(typeFromHandle307, service154 = new SimpleValueTargetProvider(array154, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider154.Add(typeof(IReferenceProvider), service154);
			Type typeFromHandle308 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver154 = new XmlNamespaceResolver();
			xmlNamespaceResolver154.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver154.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider154.Add(typeFromHandle308, new XamlTypeResolver(xmlNamespaceResolver154, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider154.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(301, 185)));
			button65.SetValue(fontSizeProperty154, ((IExtendedTypeConverter)fontSizeConverter154).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider154));
			button65.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button65.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button65.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button65);
			button66.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button66.Clicked += proControlPage.NRatio1500_TextChanged;
			button66.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button66.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button66.SetValue(Grid.RowProperty, 2);
			button66.SetValue(Grid.ColumnProperty, 0);
			button66.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty155 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter155 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider155 = new XamlServiceProvider();
			Type typeFromHandle309 = typeof(IProvideValueTarget);
			object[] array155 = new object[0 + 6];
			array155[0] = button66;
			array155[1] = grid10;
			array155[2] = stackLayout6;
			array155[3] = scrollView;
			array155[4] = grid21;
			array155[5] = proControlPage;
			object service155;
			xamlServiceProvider155.Add(typeFromHandle309, service155 = new SimpleValueTargetProvider(array155, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider155.Add(typeof(IReferenceProvider), service155);
			Type typeFromHandle310 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver155 = new XmlNamespaceResolver();
			xmlNamespaceResolver155.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver155.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider155.Add(typeFromHandle310, new XamlTypeResolver(xmlNamespaceResolver155, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider155.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(302, 184)));
			button66.SetValue(fontSizeProperty155, ((IExtendedTypeConverter)fontSizeConverter155).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider155));
			button66.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button66.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button66.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button66);
			button67.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button67.Clicked += proControlPage.NRatio2000_TextChanged;
			button67.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button67.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button67.SetValue(Grid.RowProperty, 2);
			button67.SetValue(Grid.ColumnProperty, 1);
			button67.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty156 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter156 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider156 = new XamlServiceProvider();
			Type typeFromHandle311 = typeof(IProvideValueTarget);
			object[] array156 = new object[0 + 6];
			array156[0] = button67;
			array156[1] = grid10;
			array156[2] = stackLayout6;
			array156[3] = scrollView;
			array156[4] = grid21;
			array156[5] = proControlPage;
			object service156;
			xamlServiceProvider156.Add(typeFromHandle311, service156 = new SimpleValueTargetProvider(array156, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider156.Add(typeof(IReferenceProvider), service156);
			Type typeFromHandle312 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver156 = new XmlNamespaceResolver();
			xmlNamespaceResolver156.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver156.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider156.Add(typeFromHandle312, new XamlTypeResolver(xmlNamespaceResolver156, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider156.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(303, 186)));
			button67.SetValue(fontSizeProperty156, ((IExtendedTypeConverter)fontSizeConverter156).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider156));
			button67.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button67.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button67.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button67);
			button68.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button68.Clicked += proControlPage.NRatio2500_TextChanged;
			button68.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button68.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button68.SetValue(Grid.RowProperty, 3);
			button68.SetValue(Grid.ColumnProperty, 0);
			button68.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty157 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter157 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider157 = new XamlServiceProvider();
			Type typeFromHandle313 = typeof(IProvideValueTarget);
			object[] array157 = new object[0 + 6];
			array157[0] = button68;
			array157[1] = grid10;
			array157[2] = stackLayout6;
			array157[3] = scrollView;
			array157[4] = grid21;
			array157[5] = proControlPage;
			object service157;
			xamlServiceProvider157.Add(typeFromHandle313, service157 = new SimpleValueTargetProvider(array157, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider157.Add(typeof(IReferenceProvider), service157);
			Type typeFromHandle314 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver157 = new XmlNamespaceResolver();
			xmlNamespaceResolver157.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver157.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider157.Add(typeFromHandle314, new XamlTypeResolver(xmlNamespaceResolver157, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider157.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(304, 187)));
			button68.SetValue(fontSizeProperty157, ((IExtendedTypeConverter)fontSizeConverter157).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider157));
			button68.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button68.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button68.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button68);
			button69.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button69.Clicked += proControlPage.NRatio3000_TextChanged;
			button69.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button69.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button69.SetValue(Grid.RowProperty, 3);
			button69.SetValue(Grid.ColumnProperty, 1);
			button69.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty158 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter158 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider158 = new XamlServiceProvider();
			Type typeFromHandle315 = typeof(IProvideValueTarget);
			object[] array158 = new object[0 + 6];
			array158[0] = button69;
			array158[1] = grid10;
			array158[2] = stackLayout6;
			array158[3] = scrollView;
			array158[4] = grid21;
			array158[5] = proControlPage;
			object service158;
			xamlServiceProvider158.Add(typeFromHandle315, service158 = new SimpleValueTargetProvider(array158, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider158.Add(typeof(IReferenceProvider), service158);
			Type typeFromHandle316 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver158 = new XmlNamespaceResolver();
			xmlNamespaceResolver158.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver158.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider158.Add(typeFromHandle316, new XamlTypeResolver(xmlNamespaceResolver158, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider158.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(305, 185)));
			button69.SetValue(fontSizeProperty158, ((IExtendedTypeConverter)fontSizeConverter158).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider158));
			button69.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button69.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button69.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button69);
			button70.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button70.Clicked += proControlPage.NRatio3500_TextChanged;
			button70.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button70.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button70.SetValue(Grid.RowProperty, 4);
			button70.SetValue(Grid.ColumnProperty, 0);
			button70.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty159 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter159 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider159 = new XamlServiceProvider();
			Type typeFromHandle317 = typeof(IProvideValueTarget);
			object[] array159 = new object[0 + 6];
			array159[0] = button70;
			array159[1] = grid10;
			array159[2] = stackLayout6;
			array159[3] = scrollView;
			array159[4] = grid21;
			array159[5] = proControlPage;
			object service159;
			xamlServiceProvider159.Add(typeFromHandle317, service159 = new SimpleValueTargetProvider(array159, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider159.Add(typeof(IReferenceProvider), service159);
			Type typeFromHandle318 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver159 = new XmlNamespaceResolver();
			xmlNamespaceResolver159.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver159.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider159.Add(typeFromHandle318, new XamlTypeResolver(xmlNamespaceResolver159, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider159.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(306, 185)));
			button70.SetValue(fontSizeProperty159, ((IExtendedTypeConverter)fontSizeConverter159).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider159));
			button70.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button70.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button70.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button70);
			button71.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button71.Clicked += proControlPage.NRatio4000_TextChanged;
			button71.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button71.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button71.SetValue(Grid.RowProperty, 4);
			button71.SetValue(Grid.ColumnProperty, 1);
			button71.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty160 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter160 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider160 = new XamlServiceProvider();
			Type typeFromHandle319 = typeof(IProvideValueTarget);
			object[] array160 = new object[0 + 6];
			array160[0] = button71;
			array160[1] = grid10;
			array160[2] = stackLayout6;
			array160[3] = scrollView;
			array160[4] = grid21;
			array160[5] = proControlPage;
			object service160;
			xamlServiceProvider160.Add(typeFromHandle319, service160 = new SimpleValueTargetProvider(array160, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider160.Add(typeof(IReferenceProvider), service160);
			Type typeFromHandle320 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver160 = new XmlNamespaceResolver();
			xmlNamespaceResolver160.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver160.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider160.Add(typeFromHandle320, new XamlTypeResolver(xmlNamespaceResolver160, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider160.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(307, 184)));
			button71.SetValue(fontSizeProperty160, ((IExtendedTypeConverter)fontSizeConverter160).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider160));
			button71.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button71.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button71.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button71);
			button72.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button72.Clicked += proControlPage.NRatio4500_TextChanged;
			button72.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button72.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button72.SetValue(Grid.RowProperty, 5);
			button72.SetValue(Grid.ColumnProperty, 0);
			button72.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty161 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter161 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider161 = new XamlServiceProvider();
			Type typeFromHandle321 = typeof(IProvideValueTarget);
			object[] array161 = new object[0 + 6];
			array161[0] = button72;
			array161[1] = grid10;
			array161[2] = stackLayout6;
			array161[3] = scrollView;
			array161[4] = grid21;
			array161[5] = proControlPage;
			object service161;
			xamlServiceProvider161.Add(typeFromHandle321, service161 = new SimpleValueTargetProvider(array161, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider161.Add(typeof(IReferenceProvider), service161);
			Type typeFromHandle322 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver161 = new XmlNamespaceResolver();
			xmlNamespaceResolver161.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver161.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider161.Add(typeFromHandle322, new XamlTypeResolver(xmlNamespaceResolver161, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider161.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(308, 183)));
			button72.SetValue(fontSizeProperty161, ((IExtendedTypeConverter)fontSizeConverter161).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider161));
			button72.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button72.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button72.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button72);
			button73.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button73.Clicked += proControlPage.NRatio5000_TextChanged;
			button73.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button73.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button73.SetValue(Grid.RowProperty, 5);
			button73.SetValue(Grid.ColumnProperty, 1);
			button73.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty162 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter162 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider162 = new XamlServiceProvider();
			Type typeFromHandle323 = typeof(IProvideValueTarget);
			object[] array162 = new object[0 + 6];
			array162[0] = button73;
			array162[1] = grid10;
			array162[2] = stackLayout6;
			array162[3] = scrollView;
			array162[4] = grid21;
			array162[5] = proControlPage;
			object service162;
			xamlServiceProvider162.Add(typeFromHandle323, service162 = new SimpleValueTargetProvider(array162, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider162.Add(typeof(IReferenceProvider), service162);
			Type typeFromHandle324 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver162 = new XmlNamespaceResolver();
			xmlNamespaceResolver162.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver162.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider162.Add(typeFromHandle324, new XamlTypeResolver(xmlNamespaceResolver162, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider162.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(309, 185)));
			button73.SetValue(fontSizeProperty162, ((IExtendedTypeConverter)fontSizeConverter162).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider162));
			button73.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button73.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button73.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button73);
			button74.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button74.Clicked += proControlPage.NRatio5500_TextChanged;
			button74.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button74.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button74.SetValue(Grid.RowProperty, 6);
			button74.SetValue(Grid.ColumnProperty, 0);
			button74.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty163 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter163 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider163 = new XamlServiceProvider();
			Type typeFromHandle325 = typeof(IProvideValueTarget);
			object[] array163 = new object[0 + 6];
			array163[0] = button74;
			array163[1] = grid10;
			array163[2] = stackLayout6;
			array163[3] = scrollView;
			array163[4] = grid21;
			array163[5] = proControlPage;
			object service163;
			xamlServiceProvider163.Add(typeFromHandle325, service163 = new SimpleValueTargetProvider(array163, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider163.Add(typeof(IReferenceProvider), service163);
			Type typeFromHandle326 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver163 = new XmlNamespaceResolver();
			xmlNamespaceResolver163.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver163.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider163.Add(typeFromHandle326, new XamlTypeResolver(xmlNamespaceResolver163, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider163.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(310, 184)));
			button74.SetValue(fontSizeProperty163, ((IExtendedTypeConverter)fontSizeConverter163).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider163));
			button74.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button74.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button74.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button74);
			button75.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button75.Clicked += proControlPage.NRatio6000_TextChanged;
			button75.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button75.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button75.SetValue(Grid.RowProperty, 6);
			button75.SetValue(Grid.ColumnProperty, 1);
			button75.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty164 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter164 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider164 = new XamlServiceProvider();
			Type typeFromHandle327 = typeof(IProvideValueTarget);
			object[] array164 = new object[0 + 6];
			array164[0] = button75;
			array164[1] = grid10;
			array164[2] = stackLayout6;
			array164[3] = scrollView;
			array164[4] = grid21;
			array164[5] = proControlPage;
			object service164;
			xamlServiceProvider164.Add(typeFromHandle327, service164 = new SimpleValueTargetProvider(array164, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider164.Add(typeof(IReferenceProvider), service164);
			Type typeFromHandle328 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver164 = new XmlNamespaceResolver();
			xmlNamespaceResolver164.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver164.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider164.Add(typeFromHandle328, new XamlTypeResolver(xmlNamespaceResolver164, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider164.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(311, 183)));
			button75.SetValue(fontSizeProperty164, ((IExtendedTypeConverter)fontSizeConverter164).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider164));
			button75.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button75.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button75.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button75);
			button76.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button76.Clicked += proControlPage.NRatio6500_TextChanged;
			button76.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button76.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button76.SetValue(Grid.RowProperty, 7);
			button76.SetValue(Grid.ColumnProperty, 0);
			button76.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty165 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter165 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider165 = new XamlServiceProvider();
			Type typeFromHandle329 = typeof(IProvideValueTarget);
			object[] array165 = new object[0 + 6];
			array165[0] = button76;
			array165[1] = grid10;
			array165[2] = stackLayout6;
			array165[3] = scrollView;
			array165[4] = grid21;
			array165[5] = proControlPage;
			object service165;
			xamlServiceProvider165.Add(typeFromHandle329, service165 = new SimpleValueTargetProvider(array165, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider165.Add(typeof(IReferenceProvider), service165);
			Type typeFromHandle330 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver165 = new XmlNamespaceResolver();
			xmlNamespaceResolver165.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver165.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider165.Add(typeFromHandle330, new XamlTypeResolver(xmlNamespaceResolver165, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider165.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(312, 184)));
			button76.SetValue(fontSizeProperty165, ((IExtendedTypeConverter)fontSizeConverter165).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider165));
			button76.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button76.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button76.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button76);
			button77.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button77.Clicked += proControlPage.NRatio7000_TextChanged;
			button77.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button77.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button77.SetValue(Grid.RowProperty, 7);
			button77.SetValue(Grid.ColumnProperty, 1);
			button77.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty166 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter166 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider166 = new XamlServiceProvider();
			Type typeFromHandle331 = typeof(IProvideValueTarget);
			object[] array166 = new object[0 + 6];
			array166[0] = button77;
			array166[1] = grid10;
			array166[2] = stackLayout6;
			array166[3] = scrollView;
			array166[4] = grid21;
			array166[5] = proControlPage;
			object service166;
			xamlServiceProvider166.Add(typeFromHandle331, service166 = new SimpleValueTargetProvider(array166, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider166.Add(typeof(IReferenceProvider), service166);
			Type typeFromHandle332 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver166 = new XmlNamespaceResolver();
			xmlNamespaceResolver166.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver166.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider166.Add(typeFromHandle332, new XamlTypeResolver(xmlNamespaceResolver166, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider166.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(313, 184)));
			button77.SetValue(fontSizeProperty166, ((IExtendedTypeConverter)fontSizeConverter166).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider166));
			button77.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button77.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button77.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button77);
			button78.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button78.Clicked += proControlPage.NRatio7500_TextChanged;
			button78.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button78.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button78.SetValue(Grid.RowProperty, 8);
			button78.SetValue(Grid.ColumnProperty, 0);
			button78.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty167 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter167 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider167 = new XamlServiceProvider();
			Type typeFromHandle333 = typeof(IProvideValueTarget);
			object[] array167 = new object[0 + 6];
			array167[0] = button78;
			array167[1] = grid10;
			array167[2] = stackLayout6;
			array167[3] = scrollView;
			array167[4] = grid21;
			array167[5] = proControlPage;
			object service167;
			xamlServiceProvider167.Add(typeFromHandle333, service167 = new SimpleValueTargetProvider(array167, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider167.Add(typeof(IReferenceProvider), service167);
			Type typeFromHandle334 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver167 = new XmlNamespaceResolver();
			xmlNamespaceResolver167.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver167.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider167.Add(typeFromHandle334, new XamlTypeResolver(xmlNamespaceResolver167, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider167.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(314, 183)));
			button78.SetValue(fontSizeProperty167, ((IExtendedTypeConverter)fontSizeConverter167).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider167));
			button78.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button78.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button78.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button78);
			button79.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button79.Clicked += proControlPage.NRatio8000_TextChanged;
			button79.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button79.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button79.SetValue(Grid.RowProperty, 8);
			button79.SetValue(Grid.ColumnProperty, 1);
			button79.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty168 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter168 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider168 = new XamlServiceProvider();
			Type typeFromHandle335 = typeof(IProvideValueTarget);
			object[] array168 = new object[0 + 6];
			array168[0] = button79;
			array168[1] = grid10;
			array168[2] = stackLayout6;
			array168[3] = scrollView;
			array168[4] = grid21;
			array168[5] = proControlPage;
			object service168;
			xamlServiceProvider168.Add(typeFromHandle335, service168 = new SimpleValueTargetProvider(array168, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider168.Add(typeof(IReferenceProvider), service168);
			Type typeFromHandle336 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver168 = new XmlNamespaceResolver();
			xmlNamespaceResolver168.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver168.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider168.Add(typeFromHandle336, new XamlTypeResolver(xmlNamespaceResolver168, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider168.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(315, 186)));
			button79.SetValue(fontSizeProperty168, ((IExtendedTypeConverter)fontSizeConverter168).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider168));
			button79.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button79.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button79.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button79);
			button80.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button80.Clicked += proControlPage.NRatio8500_TextChanged;
			button80.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button80.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button80.SetValue(Grid.RowProperty, 9);
			button80.SetValue(Grid.ColumnProperty, 0);
			button80.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty169 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter169 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider169 = new XamlServiceProvider();
			Type typeFromHandle337 = typeof(IProvideValueTarget);
			object[] array169 = new object[0 + 6];
			array169[0] = button80;
			array169[1] = grid10;
			array169[2] = stackLayout6;
			array169[3] = scrollView;
			array169[4] = grid21;
			array169[5] = proControlPage;
			object service169;
			xamlServiceProvider169.Add(typeFromHandle337, service169 = new SimpleValueTargetProvider(array169, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider169.Add(typeof(IReferenceProvider), service169);
			Type typeFromHandle338 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver169 = new XmlNamespaceResolver();
			xmlNamespaceResolver169.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver169.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider169.Add(typeFromHandle338, new XamlTypeResolver(xmlNamespaceResolver169, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider169.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(316, 184)));
			button80.SetValue(fontSizeProperty169, ((IExtendedTypeConverter)fontSizeConverter169).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider169));
			button80.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button80.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button80.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button80);
			button81.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button81.Clicked += proControlPage.NRatio9000_TextChanged;
			button81.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button81.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button81.SetValue(Grid.RowProperty, 9);
			button81.SetValue(Grid.ColumnProperty, 1);
			button81.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty170 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter170 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider170 = new XamlServiceProvider();
			Type typeFromHandle339 = typeof(IProvideValueTarget);
			object[] array170 = new object[0 + 6];
			array170[0] = button81;
			array170[1] = grid10;
			array170[2] = stackLayout6;
			array170[3] = scrollView;
			array170[4] = grid21;
			array170[5] = proControlPage;
			object service170;
			xamlServiceProvider170.Add(typeFromHandle339, service170 = new SimpleValueTargetProvider(array170, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider170.Add(typeof(IReferenceProvider), service170);
			Type typeFromHandle340 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver170 = new XmlNamespaceResolver();
			xmlNamespaceResolver170.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver170.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider170.Add(typeFromHandle340, new XamlTypeResolver(xmlNamespaceResolver170, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider170.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(317, 185)));
			button81.SetValue(fontSizeProperty170, ((IExtendedTypeConverter)fontSizeConverter170).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider170));
			button81.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button81.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button81.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid10.Children.Add(button81);
			stackLayout6.Children.Add(grid10);
			button82.Clicked += proControlPage.RowTextFunc_Clicked;
			button82.SetValue(Xamarin.Forms.Button.TextProperty, "π¶ƒ‹");
			button82.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty171 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter171 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider171 = new XamlServiceProvider();
			Type typeFromHandle341 = typeof(IProvideValueTarget);
			object[] array171 = new object[0 + 5];
			array171[0] = button82;
			array171[1] = stackLayout6;
			array171[2] = scrollView;
			array171[3] = grid21;
			array171[4] = proControlPage;
			object service171;
			xamlServiceProvider171.Add(typeFromHandle341, service171 = new SimpleValueTargetProvider(array171, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider171.Add(typeof(IReferenceProvider), service171);
			Type typeFromHandle342 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver171 = new XmlNamespaceResolver();
			xmlNamespaceResolver171.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver171.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider171.Add(typeFromHandle342, new XamlTypeResolver(xmlNamespaceResolver171, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider171.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(319, 115)));
			button82.SetValue(fontSizeProperty171, ((IExtendedTypeConverter)fontSizeConverter171).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider171));
			button82.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button82.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(button82);
			grid11.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition44.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid11.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition44);
			rowDefinition45.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid11.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition45);
			rowDefinition46.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid11.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition46);
			rowDefinition47.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid11.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition47);
			rowDefinition48.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid11.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition48);
			rowDefinition49.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid11.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition49);
			rowDefinition50.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid11.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition50);
			rowDefinition51.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid11.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition51);
			rowDefinition52.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid11.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition52);
			columnDefinition19.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid11.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition19);
			columnDefinition20.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid11.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition20);
			label90.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label90.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label90.SetValue(Label.TextProperty, "Boost:PIN24");
			label90.SetValue(Grid.RowProperty, 0);
			label90.SetValue(Grid.ColumnProperty, 0);
			label90.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty172 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter172 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider172 = new XamlServiceProvider();
			Type typeFromHandle343 = typeof(IProvideValueTarget);
			object[] array172 = new object[0 + 6];
			array172[0] = label90;
			array172[1] = grid11;
			array172[2] = stackLayout6;
			array172[3] = scrollView;
			array172[4] = grid21;
			array172[5] = proControlPage;
			object service172;
			xamlServiceProvider172.Add(typeFromHandle343, service172 = new SimpleValueTargetProvider(array172, Label.FontSizeProperty, nameScope));
			xamlServiceProvider172.Add(typeof(IReferenceProvider), service172);
			Type typeFromHandle344 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver172 = new XmlNamespaceResolver();
			xmlNamespaceResolver172.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver172.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider172.Add(typeFromHandle344, new XamlTypeResolver(xmlNamespaceResolver172, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider172.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(336, 166)));
			label90.SetValue(fontSizeProperty172, ((IExtendedTypeConverter)fontSizeConverter172).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider172));
			label90.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label90.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label90.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label90);
			label91.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label91.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label91.SetValue(Label.TextProperty, "—≤∫Ω:PIN24");
			label91.SetValue(Grid.RowProperty, 0);
			label91.SetValue(Grid.ColumnProperty, 1);
			label91.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty173 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter173 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider173 = new XamlServiceProvider();
			Type typeFromHandle345 = typeof(IProvideValueTarget);
			object[] array173 = new object[0 + 6];
			array173[0] = label91;
			array173[1] = grid11;
			array173[2] = stackLayout6;
			array173[3] = scrollView;
			array173[4] = grid21;
			array173[5] = proControlPage;
			object service173;
			xamlServiceProvider173.Add(typeFromHandle345, service173 = new SimpleValueTargetProvider(array173, Label.FontSizeProperty, nameScope));
			xamlServiceProvider173.Add(typeof(IReferenceProvider), service173);
			Type typeFromHandle346 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver173 = new XmlNamespaceResolver();
			xmlNamespaceResolver173.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver173.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider173.Add(typeFromHandle346, new XamlTypeResolver(xmlNamespaceResolver173, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider173.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(337, 160)));
			label91.SetValue(fontSizeProperty173, ((IExtendedTypeConverter)fontSizeConverter173).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider173));
			label91.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label91.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label91.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label91);
			label92.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label92.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label92.SetValue(Label.TextProperty, "±ﬂ≥≈:PIN24");
			label92.SetValue(Grid.RowProperty, 1);
			label92.SetValue(Grid.ColumnProperty, 0);
			label92.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty174 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter174 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider174 = new XamlServiceProvider();
			Type typeFromHandle347 = typeof(IProvideValueTarget);
			object[] array174 = new object[0 + 6];
			array174[0] = label92;
			array174[1] = grid11;
			array174[2] = stackLayout6;
			array174[3] = scrollView;
			array174[4] = grid21;
			array174[5] = proControlPage;
			object service174;
			xamlServiceProvider174.Add(typeFromHandle347, service174 = new SimpleValueTargetProvider(array174, Label.FontSizeProperty, nameScope));
			xamlServiceProvider174.Add(typeof(IReferenceProvider), service174);
			Type typeFromHandle348 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver174 = new XmlNamespaceResolver();
			xmlNamespaceResolver174.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver174.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider174.Add(typeFromHandle348, new XamlTypeResolver(xmlNamespaceResolver174, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider174.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(338, 160)));
			label92.SetValue(fontSizeProperty174, ((IExtendedTypeConverter)fontSizeConverter174).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider174));
			label92.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label92.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label92.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label92);
			label93.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label93.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label93.SetValue(Label.TextProperty, "Pµµ:PIN24");
			label93.SetValue(Grid.RowProperty, 1);
			label93.SetValue(Grid.ColumnProperty, 1);
			label93.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty175 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter175 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider175 = new XamlServiceProvider();
			Type typeFromHandle349 = typeof(IProvideValueTarget);
			object[] array175 = new object[0 + 6];
			array175[0] = label93;
			array175[1] = grid11;
			array175[2] = stackLayout6;
			array175[3] = scrollView;
			array175[4] = grid21;
			array175[5] = proControlPage;
			object service175;
			xamlServiceProvider175.Add(typeFromHandle349, service175 = new SimpleValueTargetProvider(array175, Label.FontSizeProperty, nameScope));
			xamlServiceProvider175.Add(typeof(IReferenceProvider), service175);
			Type typeFromHandle350 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver175 = new XmlNamespaceResolver();
			xmlNamespaceResolver175.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver175.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider175.Add(typeFromHandle350, new XamlTypeResolver(xmlNamespaceResolver175, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider175.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(339, 159)));
			label93.SetValue(fontSizeProperty175, ((IExtendedTypeConverter)fontSizeConverter175).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider175));
			label93.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label93.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label93.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label93);
			label94.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label94.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label94.SetValue(Label.TextProperty, "«∞Ω¯:PIN24");
			label94.SetValue(Grid.RowProperty, 2);
			label94.SetValue(Grid.ColumnProperty, 0);
			label94.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty176 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter176 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider176 = new XamlServiceProvider();
			Type typeFromHandle351 = typeof(IProvideValueTarget);
			object[] array176 = new object[0 + 6];
			array176[0] = label94;
			array176[1] = grid11;
			array176[2] = stackLayout6;
			array176[3] = scrollView;
			array176[4] = grid21;
			array176[5] = proControlPage;
			object service176;
			xamlServiceProvider176.Add(typeFromHandle351, service176 = new SimpleValueTargetProvider(array176, Label.FontSizeProperty, nameScope));
			xamlServiceProvider176.Add(typeof(IReferenceProvider), service176);
			Type typeFromHandle352 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver176 = new XmlNamespaceResolver();
			xmlNamespaceResolver176.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver176.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider176.Add(typeFromHandle352, new XamlTypeResolver(xmlNamespaceResolver176, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider176.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(340, 160)));
			label94.SetValue(fontSizeProperty176, ((IExtendedTypeConverter)fontSizeConverter176).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider176));
			label94.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label94.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label94.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label94);
			label95.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label95.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label95.SetValue(Label.TextProperty, "∫ÛÕÀ:PIN24");
			label95.SetValue(Grid.RowProperty, 2);
			label95.SetValue(Grid.ColumnProperty, 1);
			label95.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty177 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter177 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider177 = new XamlServiceProvider();
			Type typeFromHandle353 = typeof(IProvideValueTarget);
			object[] array177 = new object[0 + 6];
			array177[0] = label95;
			array177[1] = grid11;
			array177[2] = stackLayout6;
			array177[3] = scrollView;
			array177[4] = grid21;
			array177[5] = proControlPage;
			object service177;
			xamlServiceProvider177.Add(typeFromHandle353, service177 = new SimpleValueTargetProvider(array177, Label.FontSizeProperty, nameScope));
			xamlServiceProvider177.Add(typeof(IReferenceProvider), service177);
			Type typeFromHandle354 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver177 = new XmlNamespaceResolver();
			xmlNamespaceResolver177.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver177.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider177.Add(typeFromHandle354, new XamlTypeResolver(xmlNamespaceResolver177, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider177.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(341, 160)));
			label95.SetValue(fontSizeProperty177, ((IExtendedTypeConverter)fontSizeConverter177).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider177));
			label95.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label95.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label95.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label95);
			label96.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label96.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label96.SetValue(Label.TextProperty, "∏ﬂÀŸ:PIN24");
			label96.SetValue(Grid.RowProperty, 3);
			label96.SetValue(Grid.ColumnProperty, 0);
			label96.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty178 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter178 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider178 = new XamlServiceProvider();
			Type typeFromHandle355 = typeof(IProvideValueTarget);
			object[] array178 = new object[0 + 6];
			array178[0] = label96;
			array178[1] = grid11;
			array178[2] = stackLayout6;
			array178[3] = scrollView;
			array178[4] = grid21;
			array178[5] = proControlPage;
			object service178;
			xamlServiceProvider178.Add(typeFromHandle355, service178 = new SimpleValueTargetProvider(array178, Label.FontSizeProperty, nameScope));
			xamlServiceProvider178.Add(typeof(IReferenceProvider), service178);
			Type typeFromHandle356 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver178 = new XmlNamespaceResolver();
			xmlNamespaceResolver178.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver178.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider178.Add(typeFromHandle356, new XamlTypeResolver(xmlNamespaceResolver178, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider178.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(342, 161)));
			label96.SetValue(fontSizeProperty178, ((IExtendedTypeConverter)fontSizeConverter178).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider178));
			label96.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label96.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label96.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label96);
			label97.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label97.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label97.SetValue(Label.TextProperty, "µÕÀŸ:PIN24");
			label97.SetValue(Grid.RowProperty, 3);
			label97.SetValue(Grid.ColumnProperty, 1);
			label97.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty179 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter179 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider179 = new XamlServiceProvider();
			Type typeFromHandle357 = typeof(IProvideValueTarget);
			object[] array179 = new object[0 + 6];
			array179[0] = label97;
			array179[1] = grid11;
			array179[2] = stackLayout6;
			array179[3] = scrollView;
			array179[4] = grid21;
			array179[5] = proControlPage;
			object service179;
			xamlServiceProvider179.Add(typeFromHandle357, service179 = new SimpleValueTargetProvider(array179, Label.FontSizeProperty, nameScope));
			xamlServiceProvider179.Add(typeof(IReferenceProvider), service179);
			Type typeFromHandle358 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver179 = new XmlNamespaceResolver();
			xmlNamespaceResolver179.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver179.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider179.Add(typeFromHandle358, new XamlTypeResolver(xmlNamespaceResolver179, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider179.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(343, 161)));
			label97.SetValue(fontSizeProperty179, ((IExtendedTypeConverter)fontSizeConverter179).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider179));
			label97.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label97.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label97.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label97);
			label98.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label98.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label98.SetValue(Label.TextProperty, "≥‰µÁ:PIN24");
			label98.SetValue(Grid.RowProperty, 4);
			label98.SetValue(Grid.ColumnProperty, 0);
			label98.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty180 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter180 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider180 = new XamlServiceProvider();
			Type typeFromHandle359 = typeof(IProvideValueTarget);
			object[] array180 = new object[0 + 6];
			array180[0] = label98;
			array180[1] = grid11;
			array180[2] = stackLayout6;
			array180[3] = scrollView;
			array180[4] = grid21;
			array180[5] = proControlPage;
			object service180;
			xamlServiceProvider180.Add(typeFromHandle359, service180 = new SimpleValueTargetProvider(array180, Label.FontSizeProperty, nameScope));
			xamlServiceProvider180.Add(typeof(IReferenceProvider), service180);
			Type typeFromHandle360 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver180 = new XmlNamespaceResolver();
			xmlNamespaceResolver180.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver180.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider180.Add(typeFromHandle360, new XamlTypeResolver(xmlNamespaceResolver180, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider180.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(344, 161)));
			label98.SetValue(fontSizeProperty180, ((IExtendedTypeConverter)fontSizeConverter180).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider180));
			label98.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label98.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label98.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label98);
			label99.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label99.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label99.SetValue(Label.TextProperty, "∑¿µ¡:PIN24");
			label99.SetValue(Grid.RowProperty, 4);
			label99.SetValue(Grid.ColumnProperty, 1);
			label99.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty181 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter181 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider181 = new XamlServiceProvider();
			Type typeFromHandle361 = typeof(IProvideValueTarget);
			object[] array181 = new object[0 + 6];
			array181[0] = label99;
			array181[1] = grid11;
			array181[2] = stackLayout6;
			array181[3] = scrollView;
			array181[4] = grid21;
			array181[5] = proControlPage;
			object service181;
			xamlServiceProvider181.Add(typeFromHandle361, service181 = new SimpleValueTargetProvider(array181, Label.FontSizeProperty, nameScope));
			xamlServiceProvider181.Add(typeof(IReferenceProvider), service181);
			Type typeFromHandle362 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver181 = new XmlNamespaceResolver();
			xmlNamespaceResolver181.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver181.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider181.Add(typeFromHandle362, new XamlTypeResolver(xmlNamespaceResolver181, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider181.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(345, 160)));
			label99.SetValue(fontSizeProperty181, ((IExtendedTypeConverter)fontSizeConverter181).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider181));
			label99.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label99.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label99.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label99);
			label100.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label100.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label100.SetValue(Label.TextProperty, "◊¯Õ∞:PIN24");
			label100.SetValue(Grid.RowProperty, 5);
			label100.SetValue(Grid.ColumnProperty, 0);
			label100.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty182 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter182 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider182 = new XamlServiceProvider();
			Type typeFromHandle363 = typeof(IProvideValueTarget);
			object[] array182 = new object[0 + 6];
			array182[0] = label100;
			array182[1] = grid11;
			array182[2] = stackLayout6;
			array182[3] = scrollView;
			array182[4] = grid21;
			array182[5] = proControlPage;
			object service182;
			xamlServiceProvider182.Add(typeFromHandle363, service182 = new SimpleValueTargetProvider(array182, Label.FontSizeProperty, nameScope));
			xamlServiceProvider182.Add(typeof(IReferenceProvider), service182);
			Type typeFromHandle364 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver182 = new XmlNamespaceResolver();
			xmlNamespaceResolver182.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver182.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider182.Add(typeFromHandle364, new XamlTypeResolver(xmlNamespaceResolver182, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider182.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(346, 162)));
			label100.SetValue(fontSizeProperty182, ((IExtendedTypeConverter)fontSizeConverter182).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider182));
			label100.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label100.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label100.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label100);
			label101.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label101.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label101.SetValue(Label.TextProperty, "œﬁÀŸ:PIN24");
			label101.SetValue(Grid.RowProperty, 5);
			label101.SetValue(Grid.ColumnProperty, 1);
			label101.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty183 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter183 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider183 = new XamlServiceProvider();
			Type typeFromHandle365 = typeof(IProvideValueTarget);
			object[] array183 = new object[0 + 6];
			array183[0] = label101;
			array183[1] = grid11;
			array183[2] = stackLayout6;
			array183[3] = scrollView;
			array183[4] = grid21;
			array183[5] = proControlPage;
			object service183;
			xamlServiceProvider183.Add(typeFromHandle365, service183 = new SimpleValueTargetProvider(array183, Label.FontSizeProperty, nameScope));
			xamlServiceProvider183.Add(typeof(IReferenceProvider), service183);
			Type typeFromHandle366 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver183 = new XmlNamespaceResolver();
			xmlNamespaceResolver183.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver183.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider183.Add(typeFromHandle366, new XamlTypeResolver(xmlNamespaceResolver183, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider183.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(347, 168)));
			label101.SetValue(fontSizeProperty183, ((IExtendedTypeConverter)fontSizeConverter183).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider183));
			label101.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label101.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label101.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label101);
			label102.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label102.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label102.SetValue(Label.TextProperty, "µÁ—π«–ªª:PIN24");
			label102.SetValue(Grid.RowProperty, 6);
			label102.SetValue(Grid.ColumnProperty, 0);
			label102.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty184 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter184 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider184 = new XamlServiceProvider();
			Type typeFromHandle367 = typeof(IProvideValueTarget);
			object[] array184 = new object[0 + 6];
			array184[0] = label102;
			array184[1] = grid11;
			array184[2] = stackLayout6;
			array184[3] = scrollView;
			array184[4] = grid21;
			array184[5] = proControlPage;
			object service184;
			xamlServiceProvider184.Add(typeFromHandle367, service184 = new SimpleValueTargetProvider(array184, Label.FontSizeProperty, nameScope));
			xamlServiceProvider184.Add(typeof(IReferenceProvider), service184);
			Type typeFromHandle368 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver184 = new XmlNamespaceResolver();
			xmlNamespaceResolver184.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver184.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider184.Add(typeFromHandle368, new XamlTypeResolver(xmlNamespaceResolver184, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider184.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(348, 169)));
			label102.SetValue(fontSizeProperty184, ((IExtendedTypeConverter)fontSizeConverter184).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider184));
			label102.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label102.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label102.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label102);
			label103.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label103.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label103.SetValue(Label.TextProperty, "“ªº¸–ﬁ∏¥:PIN24");
			label103.SetValue(Grid.RowProperty, 6);
			label103.SetValue(Grid.ColumnProperty, 1);
			label103.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty185 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter185 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider185 = new XamlServiceProvider();
			Type typeFromHandle369 = typeof(IProvideValueTarget);
			object[] array185 = new object[0 + 6];
			array185[0] = label103;
			array185[1] = grid11;
			array185[2] = stackLayout6;
			array185[3] = scrollView;
			array185[4] = grid21;
			array185[5] = proControlPage;
			object service185;
			xamlServiceProvider185.Add(typeFromHandle369, service185 = new SimpleValueTargetProvider(array185, Label.FontSizeProperty, nameScope));
			xamlServiceProvider185.Add(typeof(IReferenceProvider), service185);
			Type typeFromHandle370 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver185 = new XmlNamespaceResolver();
			xmlNamespaceResolver185.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver185.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider185.Add(typeFromHandle370, new XamlTypeResolver(xmlNamespaceResolver185, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider185.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(349, 170)));
			label103.SetValue(fontSizeProperty185, ((IExtendedTypeConverter)fontSizeConverter185).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider185));
			label103.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label103.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label103.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label103);
			label104.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label104.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label104.SetValue(Label.TextProperty, "Bst ±º‰: 000000");
			label104.SetValue(Grid.RowProperty, 7);
			label104.SetValue(Grid.ColumnProperty, 0);
			label104.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty186 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter186 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider186 = new XamlServiceProvider();
			Type typeFromHandle371 = typeof(IProvideValueTarget);
			object[] array186 = new object[0 + 6];
			array186[0] = label104;
			array186[1] = grid11;
			array186[2] = stackLayout6;
			array186[3] = scrollView;
			array186[4] = grid21;
			array186[5] = proControlPage;
			object service186;
			xamlServiceProvider186.Add(typeFromHandle371, service186 = new SimpleValueTargetProvider(array186, Label.FontSizeProperty, nameScope));
			xamlServiceProvider186.Add(typeof(IReferenceProvider), service186);
			Type typeFromHandle372 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver186 = new XmlNamespaceResolver();
			xmlNamespaceResolver186.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver186.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider186.Add(typeFromHandle372, new XamlTypeResolver(xmlNamespaceResolver186, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider186.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(351, 167)));
			label104.SetValue(fontSizeProperty186, ((IExtendedTypeConverter)fontSizeConverter186).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider186));
			label104.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label104.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label104.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label104);
			label105.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label105.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label105.SetValue(Label.TextProperty, "Bst Õ∑≈: 000000");
			label105.SetValue(Grid.RowProperty, 7);
			label105.SetValue(Grid.ColumnProperty, 1);
			label105.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty187 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter187 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider187 = new XamlServiceProvider();
			Type typeFromHandle373 = typeof(IProvideValueTarget);
			object[] array187 = new object[0 + 6];
			array187[0] = label105;
			array187[1] = grid11;
			array187[2] = stackLayout6;
			array187[3] = scrollView;
			array187[4] = grid21;
			array187[5] = proControlPage;
			object service187;
			xamlServiceProvider187.Add(typeFromHandle373, service187 = new SimpleValueTargetProvider(array187, Label.FontSizeProperty, nameScope));
			xamlServiceProvider187.Add(typeof(IReferenceProvider), service187);
			Type typeFromHandle374 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver187 = new XmlNamespaceResolver();
			xmlNamespaceResolver187.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver187.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider187.Add(typeFromHandle374, new XamlTypeResolver(xmlNamespaceResolver187, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider187.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(352, 171)));
			label105.SetValue(fontSizeProperty187, ((IExtendedTypeConverter)fontSizeConverter187).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider187));
			label105.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label105.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label105.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label105);
			label106.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label106.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label106.SetValue(Label.TextProperty, "∏ﬂµÕÀŸ: 000000");
			label106.SetValue(Grid.RowProperty, 8);
			label106.SetValue(Grid.ColumnProperty, 0);
			label106.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty188 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter188 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider188 = new XamlServiceProvider();
			Type typeFromHandle375 = typeof(IProvideValueTarget);
			object[] array188 = new object[0 + 6];
			array188[0] = label106;
			array188[1] = grid11;
			array188[2] = stackLayout6;
			array188[3] = scrollView;
			array188[4] = grid21;
			array188[5] = proControlPage;
			object service188;
			xamlServiceProvider188.Add(typeFromHandle375, service188 = new SimpleValueTargetProvider(array188, Label.FontSizeProperty, nameScope));
			xamlServiceProvider188.Add(typeof(IReferenceProvider), service188);
			Type typeFromHandle376 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver188 = new XmlNamespaceResolver();
			xmlNamespaceResolver188.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver188.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider188.Add(typeFromHandle376, new XamlTypeResolver(xmlNamespaceResolver188, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider188.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(353, 173)));
			label106.SetValue(fontSizeProperty188, ((IExtendedTypeConverter)fontSizeConverter188).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider188));
			label106.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label106.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label106.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label106);
			label107.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label107.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label107.SetValue(Label.TextProperty, "≥§∞¥∫ÛÕÀ: ”––ß");
			label107.SetValue(Grid.RowProperty, 8);
			label107.SetValue(Grid.ColumnProperty, 1);
			label107.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty189 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter189 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider189 = new XamlServiceProvider();
			Type typeFromHandle377 = typeof(IProvideValueTarget);
			object[] array189 = new object[0 + 6];
			array189[0] = label107;
			array189[1] = grid11;
			array189[2] = stackLayout6;
			array189[3] = scrollView;
			array189[4] = grid21;
			array189[5] = proControlPage;
			object service189;
			xamlServiceProvider189.Add(typeFromHandle377, service189 = new SimpleValueTargetProvider(array189, Label.FontSizeProperty, nameScope));
			xamlServiceProvider189.Add(typeof(IReferenceProvider), service189);
			Type typeFromHandle378 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver189 = new XmlNamespaceResolver();
			xmlNamespaceResolver189.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver189.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider189.Add(typeFromHandle378, new XamlTypeResolver(xmlNamespaceResolver189, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider189.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(354, 166)));
			label107.SetValue(fontSizeProperty189, ((IExtendedTypeConverter)fontSizeConverter189).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider189));
			label107.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label107.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label107.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label107);
			label108.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label108.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label108.SetValue(Label.TextProperty, "ø’◊™: 1");
			label108.SetValue(Grid.RowProperty, 9);
			label108.SetValue(Grid.ColumnProperty, 0);
			label108.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty190 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter190 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider190 = new XamlServiceProvider();
			Type typeFromHandle379 = typeof(IProvideValueTarget);
			object[] array190 = new object[0 + 6];
			array190[0] = label108;
			array190[1] = grid11;
			array190[2] = stackLayout6;
			array190[3] = scrollView;
			array190[4] = grid21;
			array190[5] = proControlPage;
			object service190;
			xamlServiceProvider190.Add(typeFromHandle379, service190 = new SimpleValueTargetProvider(array190, Label.FontSizeProperty, nameScope));
			xamlServiceProvider190.Add(typeof(IReferenceProvider), service190);
			Type typeFromHandle380 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver190 = new XmlNamespaceResolver();
			xmlNamespaceResolver190.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver190.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider190.Add(typeFromHandle380, new XamlTypeResolver(xmlNamespaceResolver190, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider190.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(355, 165)));
			label108.SetValue(fontSizeProperty190, ((IExtendedTypeConverter)fontSizeConverter190).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider190));
			label108.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label108.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label108.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label108);
			label109.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label109.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label109.SetValue(Label.TextProperty, "∂∏∆¬ª∫Ωµ: 1");
			label109.SetValue(Grid.RowProperty, 9);
			label109.SetValue(Grid.ColumnProperty, 1);
			label109.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty191 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter191 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider191 = new XamlServiceProvider();
			Type typeFromHandle381 = typeof(IProvideValueTarget);
			object[] array191 = new object[0 + 6];
			array191[0] = label109;
			array191[1] = grid11;
			array191[2] = stackLayout6;
			array191[3] = scrollView;
			array191[4] = grid21;
			array191[5] = proControlPage;
			object service191;
			xamlServiceProvider191.Add(typeFromHandle381, service191 = new SimpleValueTargetProvider(array191, Label.FontSizeProperty, nameScope));
			xamlServiceProvider191.Add(typeof(IReferenceProvider), service191);
			Type typeFromHandle382 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver191 = new XmlNamespaceResolver();
			xmlNamespaceResolver191.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver191.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider191.Add(typeFromHandle382, new XamlTypeResolver(xmlNamespaceResolver191, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider191.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(356, 165)));
			label109.SetValue(fontSizeProperty191, ((IExtendedTypeConverter)fontSizeConverter191).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider191));
			label109.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label109.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label109.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(label109);
			button83.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button83.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button83.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button83.Clicked += proControlPage.BoostPin_SelectedIndexChanged;
			button83.SetValue(Grid.RowProperty, 0);
			button83.SetValue(Grid.ColumnProperty, 0);
			button83.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty192 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter192 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider192 = new XamlServiceProvider();
			Type typeFromHandle383 = typeof(IProvideValueTarget);
			object[] array192 = new object[0 + 6];
			array192[0] = button83;
			array192[1] = grid11;
			array192[2] = stackLayout6;
			array192[3] = scrollView;
			array192[4] = grid21;
			array192[5] = proControlPage;
			object service192;
			xamlServiceProvider192.Add(typeFromHandle383, service192 = new SimpleValueTargetProvider(array192, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider192.Add(typeof(IReferenceProvider), service192);
			Type typeFromHandle384 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver192 = new XmlNamespaceResolver();
			xmlNamespaceResolver192.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver192.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider192.Add(typeFromHandle384, new XamlTypeResolver(xmlNamespaceResolver192, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider192.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(359, 191)));
			button83.SetValue(fontSizeProperty192, ((IExtendedTypeConverter)fontSizeConverter192).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider192));
			button83.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button83.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button83.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button83);
			button84.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button84.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button84.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button84.Clicked += proControlPage.XHPin_SelectedIndexChanged;
			button84.SetValue(Grid.RowProperty, 0);
			button84.SetValue(Grid.ColumnProperty, 1);
			button84.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty193 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter193 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider193 = new XamlServiceProvider();
			Type typeFromHandle385 = typeof(IProvideValueTarget);
			object[] array193 = new object[0 + 6];
			array193[0] = button84;
			array193[1] = grid11;
			array193[2] = stackLayout6;
			array193[3] = scrollView;
			array193[4] = grid21;
			array193[5] = proControlPage;
			object service193;
			xamlServiceProvider193.Add(typeFromHandle385, service193 = new SimpleValueTargetProvider(array193, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider193.Add(typeof(IReferenceProvider), service193);
			Type typeFromHandle386 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver193 = new XmlNamespaceResolver();
			xmlNamespaceResolver193.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver193.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider193.Add(typeFromHandle386, new XamlTypeResolver(xmlNamespaceResolver193, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider193.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(360, 188)));
			button84.SetValue(fontSizeProperty193, ((IExtendedTypeConverter)fontSizeConverter193).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider193));
			button84.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button84.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button84.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button84);
			button85.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button85.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button85.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button85.Clicked += proControlPage.BCPin_SelectedIndexChanged;
			button85.SetValue(Grid.RowProperty, 1);
			button85.SetValue(Grid.ColumnProperty, 0);
			button85.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty194 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter194 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider194 = new XamlServiceProvider();
			Type typeFromHandle387 = typeof(IProvideValueTarget);
			object[] array194 = new object[0 + 6];
			array194[0] = button85;
			array194[1] = grid11;
			array194[2] = stackLayout6;
			array194[3] = scrollView;
			array194[4] = grid21;
			array194[5] = proControlPage;
			object service194;
			xamlServiceProvider194.Add(typeFromHandle387, service194 = new SimpleValueTargetProvider(array194, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider194.Add(typeof(IReferenceProvider), service194);
			Type typeFromHandle388 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver194 = new XmlNamespaceResolver();
			xmlNamespaceResolver194.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver194.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider194.Add(typeFromHandle388, new XamlTypeResolver(xmlNamespaceResolver194, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider194.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(361, 188)));
			button85.SetValue(fontSizeProperty194, ((IExtendedTypeConverter)fontSizeConverter194).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider194));
			button85.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button85.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button85.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button85);
			button86.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button86.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button86.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button86.Clicked += proControlPage.PPin_SelectedIndexChanged;
			button86.SetValue(Grid.RowProperty, 1);
			button86.SetValue(Grid.ColumnProperty, 1);
			button86.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty195 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter195 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider195 = new XamlServiceProvider();
			Type typeFromHandle389 = typeof(IProvideValueTarget);
			object[] array195 = new object[0 + 6];
			array195[0] = button86;
			array195[1] = grid11;
			array195[2] = stackLayout6;
			array195[3] = scrollView;
			array195[4] = grid21;
			array195[5] = proControlPage;
			object service195;
			xamlServiceProvider195.Add(typeFromHandle389, service195 = new SimpleValueTargetProvider(array195, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider195.Add(typeof(IReferenceProvider), service195);
			Type typeFromHandle390 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver195 = new XmlNamespaceResolver();
			xmlNamespaceResolver195.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver195.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider195.Add(typeFromHandle390, new XamlTypeResolver(xmlNamespaceResolver195, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider195.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(362, 187)));
			button86.SetValue(fontSizeProperty195, ((IExtendedTypeConverter)fontSizeConverter195).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider195));
			button86.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button86.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button86.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button86);
			button87.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button87.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button87.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button87.Clicked += proControlPage.FWPin_SelectedIndexChanged;
			button87.SetValue(Grid.RowProperty, 2);
			button87.SetValue(Grid.ColumnProperty, 0);
			button87.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty196 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter196 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider196 = new XamlServiceProvider();
			Type typeFromHandle391 = typeof(IProvideValueTarget);
			object[] array196 = new object[0 + 6];
			array196[0] = button87;
			array196[1] = grid11;
			array196[2] = stackLayout6;
			array196[3] = scrollView;
			array196[4] = grid21;
			array196[5] = proControlPage;
			object service196;
			xamlServiceProvider196.Add(typeFromHandle391, service196 = new SimpleValueTargetProvider(array196, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider196.Add(typeof(IReferenceProvider), service196);
			Type typeFromHandle392 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver196 = new XmlNamespaceResolver();
			xmlNamespaceResolver196.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver196.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider196.Add(typeFromHandle392, new XamlTypeResolver(xmlNamespaceResolver196, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider196.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(363, 188)));
			button87.SetValue(fontSizeProperty196, ((IExtendedTypeConverter)fontSizeConverter196).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider196));
			button87.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button87.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button87.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button87);
			button88.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button88.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button88.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button88.Clicked += proControlPage.REPin_SelectedIndexChanged;
			button88.SetValue(Grid.RowProperty, 2);
			button88.SetValue(Grid.ColumnProperty, 1);
			button88.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty197 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter197 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider197 = new XamlServiceProvider();
			Type typeFromHandle393 = typeof(IProvideValueTarget);
			object[] array197 = new object[0 + 6];
			array197[0] = button88;
			array197[1] = grid11;
			array197[2] = stackLayout6;
			array197[3] = scrollView;
			array197[4] = grid21;
			array197[5] = proControlPage;
			object service197;
			xamlServiceProvider197.Add(typeFromHandle393, service197 = new SimpleValueTargetProvider(array197, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider197.Add(typeof(IReferenceProvider), service197);
			Type typeFromHandle394 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver197 = new XmlNamespaceResolver();
			xmlNamespaceResolver197.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver197.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider197.Add(typeFromHandle394, new XamlTypeResolver(xmlNamespaceResolver197, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider197.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(364, 188)));
			button88.SetValue(fontSizeProperty197, ((IExtendedTypeConverter)fontSizeConverter197).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider197));
			button88.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button88.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button88.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button88);
			button89.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button89.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button89.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button89.Clicked += proControlPage.SDHPin_SelectedIndexChanged;
			button89.SetValue(Grid.RowProperty, 3);
			button89.SetValue(Grid.ColumnProperty, 0);
			button89.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty198 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter198 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider198 = new XamlServiceProvider();
			Type typeFromHandle395 = typeof(IProvideValueTarget);
			object[] array198 = new object[0 + 6];
			array198[0] = button89;
			array198[1] = grid11;
			array198[2] = stackLayout6;
			array198[3] = scrollView;
			array198[4] = grid21;
			array198[5] = proControlPage;
			object service198;
			xamlServiceProvider198.Add(typeFromHandle395, service198 = new SimpleValueTargetProvider(array198, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider198.Add(typeof(IReferenceProvider), service198);
			Type typeFromHandle396 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver198 = new XmlNamespaceResolver();
			xmlNamespaceResolver198.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver198.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider198.Add(typeFromHandle396, new XamlTypeResolver(xmlNamespaceResolver198, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider198.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(365, 189)));
			button89.SetValue(fontSizeProperty198, ((IExtendedTypeConverter)fontSizeConverter198).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider198));
			button89.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button89.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button89.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button89);
			button90.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button90.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button90.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button90.Clicked += proControlPage.SDLPin_SelectedIndexChanged;
			button90.SetValue(Grid.RowProperty, 3);
			button90.SetValue(Grid.ColumnProperty, 1);
			button90.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty199 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter199 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider199 = new XamlServiceProvider();
			Type typeFromHandle397 = typeof(IProvideValueTarget);
			object[] array199 = new object[0 + 6];
			array199[0] = button90;
			array199[1] = grid11;
			array199[2] = stackLayout6;
			array199[3] = scrollView;
			array199[4] = grid21;
			array199[5] = proControlPage;
			object service199;
			xamlServiceProvider199.Add(typeFromHandle397, service199 = new SimpleValueTargetProvider(array199, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider199.Add(typeof(IReferenceProvider), service199);
			Type typeFromHandle398 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver199 = new XmlNamespaceResolver();
			xmlNamespaceResolver199.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver199.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider199.Add(typeFromHandle398, new XamlTypeResolver(xmlNamespaceResolver199, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider199.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(366, 189)));
			button90.SetValue(fontSizeProperty199, ((IExtendedTypeConverter)fontSizeConverter199).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider199));
			button90.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button90.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button90.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button90);
			button91.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button91.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button91.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button91.Clicked += proControlPage.CHGPin_SelectedIndexChanged;
			button91.SetValue(Grid.RowProperty, 4);
			button91.SetValue(Grid.ColumnProperty, 0);
			button91.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty200 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter200 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider200 = new XamlServiceProvider();
			Type typeFromHandle399 = typeof(IProvideValueTarget);
			object[] array200 = new object[0 + 6];
			array200[0] = button91;
			array200[1] = grid11;
			array200[2] = stackLayout6;
			array200[3] = scrollView;
			array200[4] = grid21;
			array200[5] = proControlPage;
			object service200;
			xamlServiceProvider200.Add(typeFromHandle399, service200 = new SimpleValueTargetProvider(array200, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider200.Add(typeof(IReferenceProvider), service200);
			Type typeFromHandle400 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver200 = new XmlNamespaceResolver();
			xmlNamespaceResolver200.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver200.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider200.Add(typeFromHandle400, new XamlTypeResolver(xmlNamespaceResolver200, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider200.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(367, 189)));
			button91.SetValue(fontSizeProperty200, ((IExtendedTypeConverter)fontSizeConverter200).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider200));
			button91.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button91.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button91.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button91);
			button92.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button92.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button92.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button92.Clicked += proControlPage.FDPin_SelectedIndexChanged;
			button92.SetValue(Grid.RowProperty, 4);
			button92.SetValue(Grid.ColumnProperty, 1);
			button92.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty201 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter201 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider201 = new XamlServiceProvider();
			Type typeFromHandle401 = typeof(IProvideValueTarget);
			object[] array201 = new object[0 + 6];
			array201[0] = button92;
			array201[1] = grid11;
			array201[2] = stackLayout6;
			array201[3] = scrollView;
			array201[4] = grid21;
			array201[5] = proControlPage;
			object service201;
			xamlServiceProvider201.Add(typeFromHandle401, service201 = new SimpleValueTargetProvider(array201, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider201.Add(typeof(IReferenceProvider), service201);
			Type typeFromHandle402 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver201 = new XmlNamespaceResolver();
			xmlNamespaceResolver201.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver201.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider201.Add(typeFromHandle402, new XamlTypeResolver(xmlNamespaceResolver201, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider201.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(368, 188)));
			button92.SetValue(fontSizeProperty201, ((IExtendedTypeConverter)fontSizeConverter201).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider201));
			button92.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button92.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button92.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button92);
			button93.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button93.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button93.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button93.Clicked += proControlPage.SEATPin_SelectedIndexChanged;
			button93.SetValue(Grid.RowProperty, 5);
			button93.SetValue(Grid.ColumnProperty, 0);
			button93.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty202 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter202 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider202 = new XamlServiceProvider();
			Type typeFromHandle403 = typeof(IProvideValueTarget);
			object[] array202 = new object[0 + 6];
			array202[0] = button93;
			array202[1] = grid11;
			array202[2] = stackLayout6;
			array202[3] = scrollView;
			array202[4] = grid21;
			array202[5] = proControlPage;
			object service202;
			xamlServiceProvider202.Add(typeFromHandle403, service202 = new SimpleValueTargetProvider(array202, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider202.Add(typeof(IReferenceProvider), service202);
			Type typeFromHandle404 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver202 = new XmlNamespaceResolver();
			xmlNamespaceResolver202.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver202.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider202.Add(typeFromHandle404, new XamlTypeResolver(xmlNamespaceResolver202, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider202.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(369, 190)));
			button93.SetValue(fontSizeProperty202, ((IExtendedTypeConverter)fontSizeConverter202).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider202));
			button93.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button93.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button93.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button93);
			button94.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button94.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button94.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button94.Clicked += proControlPage.SpeedLimitPin_SelectedIndexChanged;
			button94.SetValue(Grid.RowProperty, 5);
			button94.SetValue(Grid.ColumnProperty, 1);
			button94.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty203 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter203 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider203 = new XamlServiceProvider();
			Type typeFromHandle405 = typeof(IProvideValueTarget);
			object[] array203 = new object[0 + 6];
			array203[0] = button94;
			array203[1] = grid11;
			array203[2] = stackLayout6;
			array203[3] = scrollView;
			array203[4] = grid21;
			array203[5] = proControlPage;
			object service203;
			xamlServiceProvider203.Add(typeFromHandle405, service203 = new SimpleValueTargetProvider(array203, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider203.Add(typeof(IReferenceProvider), service203);
			Type typeFromHandle406 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver203 = new XmlNamespaceResolver();
			xmlNamespaceResolver203.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver203.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider203.Add(typeFromHandle406, new XamlTypeResolver(xmlNamespaceResolver203, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider203.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(370, 196)));
			button94.SetValue(fontSizeProperty203, ((IExtendedTypeConverter)fontSizeConverter203).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider203));
			button94.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button94.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button94.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button94);
			button95.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button95.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button95.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button95.Clicked += proControlPage.SwitchVolPin_SelectedIndexChanged;
			button95.SetValue(Grid.RowProperty, 6);
			button95.SetValue(Grid.ColumnProperty, 0);
			button95.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty204 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter204 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider204 = new XamlServiceProvider();
			Type typeFromHandle407 = typeof(IProvideValueTarget);
			object[] array204 = new object[0 + 6];
			array204[0] = button95;
			array204[1] = grid11;
			array204[2] = stackLayout6;
			array204[3] = scrollView;
			array204[4] = grid21;
			array204[5] = proControlPage;
			object service204;
			xamlServiceProvider204.Add(typeFromHandle407, service204 = new SimpleValueTargetProvider(array204, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider204.Add(typeof(IReferenceProvider), service204);
			Type typeFromHandle408 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver204 = new XmlNamespaceResolver();
			xmlNamespaceResolver204.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver204.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider204.Add(typeFromHandle408, new XamlTypeResolver(xmlNamespaceResolver204, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider204.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(371, 195)));
			button95.SetValue(fontSizeProperty204, ((IExtendedTypeConverter)fontSizeConverter204).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider204));
			button95.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button95.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button95.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button95);
			button96.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button96.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button96.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button96.Clicked += proControlPage.OneKeyPairPin_SelectedIndexChanged;
			button96.SetValue(Grid.RowProperty, 6);
			button96.SetValue(Grid.ColumnProperty, 1);
			button96.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty205 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter205 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider205 = new XamlServiceProvider();
			Type typeFromHandle409 = typeof(IProvideValueTarget);
			object[] array205 = new object[0 + 6];
			array205[0] = button96;
			array205[1] = grid11;
			array205[2] = stackLayout6;
			array205[3] = scrollView;
			array205[4] = grid21;
			array205[5] = proControlPage;
			object service205;
			xamlServiceProvider205.Add(typeFromHandle409, service205 = new SimpleValueTargetProvider(array205, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider205.Add(typeof(IReferenceProvider), service205);
			Type typeFromHandle410 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver205 = new XmlNamespaceResolver();
			xmlNamespaceResolver205.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver205.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider205.Add(typeFromHandle410, new XamlTypeResolver(xmlNamespaceResolver205, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider205.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(372, 196)));
			button96.SetValue(fontSizeProperty205, ((IExtendedTypeConverter)fontSizeConverter205).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider205));
			button96.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button96.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button96.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button96);
			button97.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button97.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button97.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button97.Clicked += proControlPage.BstTime_TextChanged;
			button97.SetValue(Grid.RowProperty, 7);
			button97.SetValue(Grid.ColumnProperty, 0);
			button97.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty206 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter206 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider206 = new XamlServiceProvider();
			Type typeFromHandle411 = typeof(IProvideValueTarget);
			object[] array206 = new object[0 + 6];
			array206[0] = button97;
			array206[1] = grid11;
			array206[2] = stackLayout6;
			array206[3] = scrollView;
			array206[4] = grid21;
			array206[5] = proControlPage;
			object service206;
			xamlServiceProvider206.Add(typeFromHandle411, service206 = new SimpleValueTargetProvider(array206, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider206.Add(typeof(IReferenceProvider), service206);
			Type typeFromHandle412 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver206 = new XmlNamespaceResolver();
			xmlNamespaceResolver206.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver206.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider206.Add(typeFromHandle412, new XamlTypeResolver(xmlNamespaceResolver206, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider206.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(374, 181)));
			button97.SetValue(fontSizeProperty206, ((IExtendedTypeConverter)fontSizeConverter206).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider206));
			button97.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button97.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button97.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button97);
			button98.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button98.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button98.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button98.Clicked += proControlPage.BstRelease_TextChanged;
			button98.SetValue(Grid.RowProperty, 7);
			button98.SetValue(Grid.ColumnProperty, 1);
			button98.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty207 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter207 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider207 = new XamlServiceProvider();
			Type typeFromHandle413 = typeof(IProvideValueTarget);
			object[] array207 = new object[0 + 6];
			array207[0] = button98;
			array207[1] = grid11;
			array207[2] = stackLayout6;
			array207[3] = scrollView;
			array207[4] = grid21;
			array207[5] = proControlPage;
			object service207;
			xamlServiceProvider207.Add(typeFromHandle413, service207 = new SimpleValueTargetProvider(array207, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider207.Add(typeof(IReferenceProvider), service207);
			Type typeFromHandle414 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver207 = new XmlNamespaceResolver();
			xmlNamespaceResolver207.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver207.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider207.Add(typeFromHandle414, new XamlTypeResolver(xmlNamespaceResolver207, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider207.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(375, 186)));
			button98.SetValue(fontSizeProperty207, ((IExtendedTypeConverter)fontSizeConverter207).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider207));
			button98.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button98.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button98.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button98);
			button99.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button99.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button99.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button99.Clicked += proControlPage.SPModeConfig_SelectedIndexChanged;
			button99.SetValue(Grid.RowProperty, 8);
			button99.SetValue(Grid.ColumnProperty, 0);
			button99.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty208 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter208 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider208 = new XamlServiceProvider();
			Type typeFromHandle415 = typeof(IProvideValueTarget);
			object[] array208 = new object[0 + 6];
			array208[0] = button99;
			array208[1] = grid11;
			array208[2] = stackLayout6;
			array208[3] = scrollView;
			array208[4] = grid21;
			array208[5] = proControlPage;
			object service208;
			xamlServiceProvider208.Add(typeFromHandle415, service208 = new SimpleValueTargetProvider(array208, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider208.Add(typeof(IReferenceProvider), service208);
			Type typeFromHandle416 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver208 = new XmlNamespaceResolver();
			xmlNamespaceResolver208.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver208.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider208.Add(typeFromHandle416, new XamlTypeResolver(xmlNamespaceResolver208, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider208.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(377, 195)));
			button99.SetValue(fontSizeProperty208, ((IExtendedTypeConverter)fontSizeConverter208).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider208));
			button99.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button99.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button99.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button99);
			button100.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button100.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button100.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button100.Clicked += proControlPage.LongBack_SelectedIndexChanged;
			button100.SetValue(Grid.RowProperty, 8);
			button100.SetValue(Grid.ColumnProperty, 1);
			button100.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty209 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter209 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider209 = new XamlServiceProvider();
			Type typeFromHandle417 = typeof(IProvideValueTarget);
			object[] array209 = new object[0 + 6];
			array209[0] = button100;
			array209[1] = grid11;
			array209[2] = stackLayout6;
			array209[3] = scrollView;
			array209[4] = grid21;
			array209[5] = proControlPage;
			object service209;
			xamlServiceProvider209.Add(typeFromHandle417, service209 = new SimpleValueTargetProvider(array209, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider209.Add(typeof(IReferenceProvider), service209);
			Type typeFromHandle418 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver209 = new XmlNamespaceResolver();
			xmlNamespaceResolver209.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver209.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider209.Add(typeFromHandle418, new XamlTypeResolver(xmlNamespaceResolver209, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider209.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(378, 191)));
			button100.SetValue(fontSizeProperty209, ((IExtendedTypeConverter)fontSizeConverter209).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider209));
			button100.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button100.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button100.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button100);
			button101.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button101.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button101.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button101.Clicked += proControlPage.EmptySpeed_TextChanged;
			button101.SetValue(Grid.RowProperty, 9);
			button101.SetValue(Grid.ColumnProperty, 0);
			button101.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty210 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter210 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider210 = new XamlServiceProvider();
			Type typeFromHandle419 = typeof(IProvideValueTarget);
			object[] array210 = new object[0 + 6];
			array210[0] = button101;
			array210[1] = grid11;
			array210[2] = stackLayout6;
			array210[3] = scrollView;
			array210[4] = grid21;
			array210[5] = proControlPage;
			object service210;
			xamlServiceProvider210.Add(typeFromHandle419, service210 = new SimpleValueTargetProvider(array210, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider210.Add(typeof(IReferenceProvider), service210);
			Type typeFromHandle420 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver210 = new XmlNamespaceResolver();
			xmlNamespaceResolver210.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver210.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider210.Add(typeFromHandle420, new XamlTypeResolver(xmlNamespaceResolver210, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider210.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(379, 186)));
			button101.SetValue(fontSizeProperty210, ((IExtendedTypeConverter)fontSizeConverter210).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider210));
			button101.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button101.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button101.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button101);
			button102.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button102.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button102.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button102.Clicked += proControlPage.SlowDown_SelectedIndexChanged;
			button102.SetValue(Grid.RowProperty, 9);
			button102.SetValue(Grid.ColumnProperty, 1);
			button102.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty211 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter211 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider211 = new XamlServiceProvider();
			Type typeFromHandle421 = typeof(IProvideValueTarget);
			object[] array211 = new object[0 + 6];
			array211[0] = button102;
			array211[1] = grid11;
			array211[2] = stackLayout6;
			array211[3] = scrollView;
			array211[4] = grid21;
			array211[5] = proControlPage;
			object service211;
			xamlServiceProvider211.Add(typeFromHandle421, service211 = new SimpleValueTargetProvider(array211, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider211.Add(typeof(IReferenceProvider), service211);
			Type typeFromHandle422 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver211 = new XmlNamespaceResolver();
			xmlNamespaceResolver211.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver211.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider211.Add(typeFromHandle422, new XamlTypeResolver(xmlNamespaceResolver211, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider211.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(380, 191)));
			button102.SetValue(fontSizeProperty211, ((IExtendedTypeConverter)fontSizeConverter211).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider211));
			button102.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button102.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button102.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid11.Children.Add(button102);
			stackLayout6.Children.Add(grid11);
			grid12.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition53.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid12.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition53);
			rowDefinition54.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid12.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition54);
			rowDefinition55.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid12.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition55);
			columnDefinition21.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid12.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition21);
			columnDefinition22.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid12.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition22);
			label110.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label110.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label110.SetValue(Label.TextProperty, "µµŒª: 000000");
			label110.SetValue(Grid.RowProperty, 0);
			label110.SetValue(Grid.ColumnProperty, 0);
			label110.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty212 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter212 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider212 = new XamlServiceProvider();
			Type typeFromHandle423 = typeof(IProvideValueTarget);
			object[] array212 = new object[0 + 6];
			array212[0] = label110;
			array212[1] = grid12;
			array212[2] = stackLayout6;
			array212[3] = scrollView;
			array212[4] = grid21;
			array212[5] = proControlPage;
			object service212;
			xamlServiceProvider212.Add(typeFromHandle423, service212 = new SimpleValueTargetProvider(array212, Label.FontSizeProperty, nameScope));
			xamlServiceProvider212.Add(typeof(IReferenceProvider), service212);
			Type typeFromHandle424 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver212 = new XmlNamespaceResolver();
			xmlNamespaceResolver212.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver212.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider212.Add(typeFromHandle424, new XamlTypeResolver(xmlNamespaceResolver212, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider212.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(394, 170)));
			label110.SetValue(fontSizeProperty212, ((IExtendedTypeConverter)fontSizeConverter212).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider212));
			label110.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label110.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label110.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid12.Children.Add(label110);
			label111.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label111.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label111.SetValue(Label.TextProperty, "…≤≥µ: di+ongxinch");
			label111.SetValue(Grid.RowProperty, 1);
			label111.SetValue(Grid.ColumnProperty, 0);
			label111.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty213 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter213 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider213 = new XamlServiceProvider();
			Type typeFromHandle425 = typeof(IProvideValueTarget);
			object[] array213 = new object[0 + 6];
			array213[0] = label111;
			array213[1] = grid12;
			array213[2] = stackLayout6;
			array213[3] = scrollView;
			array213[4] = grid21;
			array213[5] = proControlPage;
			object service213;
			xamlServiceProvider213.Add(typeFromHandle425, service213 = new SimpleValueTargetProvider(array213, Label.FontSizeProperty, nameScope));
			xamlServiceProvider213.Add(typeof(IReferenceProvider), service213);
			Type typeFromHandle426 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver213 = new XmlNamespaceResolver();
			xmlNamespaceResolver213.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver213.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider213.Add(typeFromHandle426, new XamlTypeResolver(xmlNamespaceResolver213, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider213.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(395, 176)));
			label111.SetValue(fontSizeProperty213, ((IExtendedTypeConverter)fontSizeConverter213).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider213));
			label111.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label111.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label111.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid12.Children.Add(label111);
			label112.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label112.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label112.SetValue(Label.TextProperty, "PC13:2-fuxunh");
			label112.SetValue(Grid.RowProperty, 1);
			label112.SetValue(Grid.ColumnProperty, 1);
			label112.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty214 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter214 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider214 = new XamlServiceProvider();
			Type typeFromHandle427 = typeof(IProvideValueTarget);
			object[] array214 = new object[0 + 6];
			array214[0] = label112;
			array214[1] = grid12;
			array214[2] = stackLayout6;
			array214[3] = scrollView;
			array214[4] = grid21;
			array214[5] = proControlPage;
			object service214;
			xamlServiceProvider214.Add(typeFromHandle427, service214 = new SimpleValueTargetProvider(array214, Label.FontSizeProperty, nameScope));
			xamlServiceProvider214.Add(typeof(IReferenceProvider), service214);
			Type typeFromHandle428 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver214 = new XmlNamespaceResolver();
			xmlNamespaceResolver214.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver214.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider214.Add(typeFromHandle428, new XamlTypeResolver(xmlNamespaceResolver214, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider214.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(396, 172)));
			label112.SetValue(fontSizeProperty214, ((IExtendedTypeConverter)fontSizeConverter214).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider214));
			label112.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label112.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label112.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid12.Children.Add(label112);
			label113.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label113.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label113.SetValue(Label.TextProperty, "◊§∆¬: 000000");
			label113.SetValue(Grid.RowProperty, 2);
			label113.SetValue(Grid.ColumnProperty, 0);
			label113.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty215 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter215 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider215 = new XamlServiceProvider();
			Type typeFromHandle429 = typeof(IProvideValueTarget);
			object[] array215 = new object[0 + 6];
			array215[0] = label113;
			array215[1] = grid12;
			array215[2] = stackLayout6;
			array215[3] = scrollView;
			array215[4] = grid21;
			array215[5] = proControlPage;
			object service215;
			xamlServiceProvider215.Add(typeFromHandle429, service215 = new SimpleValueTargetProvider(array215, Label.FontSizeProperty, nameScope));
			xamlServiceProvider215.Add(typeof(IReferenceProvider), service215);
			Type typeFromHandle430 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver215 = new XmlNamespaceResolver();
			xmlNamespaceResolver215.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver215.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider215.Add(typeFromHandle430, new XamlTypeResolver(xmlNamespaceResolver215, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider215.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(397, 170)));
			label113.SetValue(fontSizeProperty215, ((IExtendedTypeConverter)fontSizeConverter215).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider215));
			label113.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label113.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label113.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid12.Children.Add(label113);
			label114.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label114.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label114.SetValue(Label.TextProperty, "∏˙ÀÊ: 000000");
			label114.SetValue(Grid.RowProperty, 2);
			label114.SetValue(Grid.ColumnProperty, 1);
			label114.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty216 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter216 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider216 = new XamlServiceProvider();
			Type typeFromHandle431 = typeof(IProvideValueTarget);
			object[] array216 = new object[0 + 6];
			array216[0] = label114;
			array216[1] = grid12;
			array216[2] = stackLayout6;
			array216[3] = scrollView;
			array216[4] = grid21;
			array216[5] = proControlPage;
			object service216;
			xamlServiceProvider216.Add(typeFromHandle431, service216 = new SimpleValueTargetProvider(array216, Label.FontSizeProperty, nameScope));
			xamlServiceProvider216.Add(typeof(IReferenceProvider), service216);
			Type typeFromHandle432 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver216 = new XmlNamespaceResolver();
			xmlNamespaceResolver216.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver216.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider216.Add(typeFromHandle432, new XamlTypeResolver(xmlNamespaceResolver216, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider216.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(398, 172)));
			label114.SetValue(fontSizeProperty216, ((IExtendedTypeConverter)fontSizeConverter216).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider216));
			label114.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label114.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label114.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid12.Children.Add(label114);
			button103.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button103.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button103.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button103.Clicked += proControlPage.GearConfig_SelectedIndexChanged;
			button103.SetValue(Grid.RowProperty, 0);
			button103.SetValue(Grid.ColumnProperty, 0);
			button103.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty217 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter217 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider217 = new XamlServiceProvider();
			Type typeFromHandle433 = typeof(IProvideValueTarget);
			object[] array217 = new object[0 + 6];
			array217[0] = button103;
			array217[1] = grid12;
			array217[2] = stackLayout6;
			array217[3] = scrollView;
			array217[4] = grid21;
			array217[5] = proControlPage;
			object service217;
			xamlServiceProvider217.Add(typeFromHandle433, service217 = new SimpleValueTargetProvider(array217, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider217.Add(typeof(IReferenceProvider), service217);
			Type typeFromHandle434 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver217 = new XmlNamespaceResolver();
			xmlNamespaceResolver217.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver217.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider217.Add(typeFromHandle434, new XamlTypeResolver(xmlNamespaceResolver217, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider217.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(401, 193)));
			button103.SetValue(fontSizeProperty217, ((IExtendedTypeConverter)fontSizeConverter217).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider217));
			button103.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button103.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button103.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid12.Children.Add(button103);
			button104.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button104.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button104.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button104.Clicked += proControlPage.BrakeConfig_SelectedIndexChanged;
			button104.SetValue(Grid.RowProperty, 1);
			button104.SetValue(Grid.ColumnProperty, 0);
			button104.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty218 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter218 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider218 = new XamlServiceProvider();
			Type typeFromHandle435 = typeof(IProvideValueTarget);
			object[] array218 = new object[0 + 6];
			array218[0] = button104;
			array218[1] = grid12;
			array218[2] = stackLayout6;
			array218[3] = scrollView;
			array218[4] = grid21;
			array218[5] = proControlPage;
			object service218;
			xamlServiceProvider218.Add(typeFromHandle435, service218 = new SimpleValueTargetProvider(array218, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider218.Add(typeof(IReferenceProvider), service218);
			Type typeFromHandle436 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver218 = new XmlNamespaceResolver();
			xmlNamespaceResolver218.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver218.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider218.Add(typeFromHandle436, new XamlTypeResolver(xmlNamespaceResolver218, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider218.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(402, 194)));
			button104.SetValue(fontSizeProperty218, ((IExtendedTypeConverter)fontSizeConverter218).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider218));
			button104.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button104.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button104.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid12.Children.Add(button104);
			button105.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button105.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button105.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button105.Clicked += proControlPage.PC13Config_SelectedIndexChanged;
			button105.SetValue(Grid.RowProperty, 1);
			button105.SetValue(Grid.ColumnProperty, 1);
			button105.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty219 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter219 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider219 = new XamlServiceProvider();
			Type typeFromHandle437 = typeof(IProvideValueTarget);
			object[] array219 = new object[0 + 6];
			array219[0] = button105;
			array219[1] = grid12;
			array219[2] = stackLayout6;
			array219[3] = scrollView;
			array219[4] = grid21;
			array219[5] = proControlPage;
			object service219;
			xamlServiceProvider219.Add(typeFromHandle437, service219 = new SimpleValueTargetProvider(array219, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider219.Add(typeof(IReferenceProvider), service219);
			Type typeFromHandle438 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver219 = new XmlNamespaceResolver();
			xmlNamespaceResolver219.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver219.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider219.Add(typeFromHandle438, new XamlTypeResolver(xmlNamespaceResolver219, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider219.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(403, 193)));
			button105.SetValue(fontSizeProperty219, ((IExtendedTypeConverter)fontSizeConverter219).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider219));
			button105.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button105.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button105.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid12.Children.Add(button105);
			button106.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button106.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button106.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button106.Clicked += proControlPage.ParkConfig_SelectedIndexChanged;
			button106.SetValue(Grid.RowProperty, 2);
			button106.SetValue(Grid.ColumnProperty, 0);
			button106.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty220 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter220 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider220 = new XamlServiceProvider();
			Type typeFromHandle439 = typeof(IProvideValueTarget);
			object[] array220 = new object[0 + 6];
			array220[0] = button106;
			array220[1] = grid12;
			array220[2] = stackLayout6;
			array220[3] = scrollView;
			array220[4] = grid21;
			array220[5] = proControlPage;
			object service220;
			xamlServiceProvider220.Add(typeFromHandle439, service220 = new SimpleValueTargetProvider(array220, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider220.Add(typeof(IReferenceProvider), service220);
			Type typeFromHandle440 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver220 = new XmlNamespaceResolver();
			xmlNamespaceResolver220.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver220.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider220.Add(typeFromHandle440, new XamlTypeResolver(xmlNamespaceResolver220, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider220.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(404, 192)));
			button106.SetValue(fontSizeProperty220, ((IExtendedTypeConverter)fontSizeConverter220).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider220));
			button106.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button106.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button106.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid12.Children.Add(button106);
			button107.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button107.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button107.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button107.Clicked += proControlPage.FollowConfig_SelectedIndexChanged;
			button107.SetValue(Grid.RowProperty, 2);
			button107.SetValue(Grid.ColumnProperty, 1);
			button107.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty221 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter221 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider221 = new XamlServiceProvider();
			Type typeFromHandle441 = typeof(IProvideValueTarget);
			object[] array221 = new object[0 + 6];
			array221[0] = button107;
			array221[1] = grid12;
			array221[2] = stackLayout6;
			array221[3] = scrollView;
			array221[4] = grid21;
			array221[5] = proControlPage;
			object service221;
			xamlServiceProvider221.Add(typeFromHandle441, service221 = new SimpleValueTargetProvider(array221, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider221.Add(typeof(IReferenceProvider), service221);
			Type typeFromHandle442 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver221 = new XmlNamespaceResolver();
			xmlNamespaceResolver221.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver221.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider221.Add(typeFromHandle442, new XamlTypeResolver(xmlNamespaceResolver221, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider221.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(405, 196)));
			button107.SetValue(fontSizeProperty221, ((IExtendedTypeConverter)fontSizeConverter221).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider221));
			button107.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button107.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button107.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid12.Children.Add(button107);
			stackLayout6.Children.Add(grid12);
			button108.Clicked += proControlPage.RowTextOneLine_Clicked;
			button108.SetValue(Xamarin.Forms.Button.TextProperty, "“«±Ì");
			button108.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty222 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter222 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider222 = new XamlServiceProvider();
			Type typeFromHandle443 = typeof(IProvideValueTarget);
			object[] array222 = new object[0 + 5];
			array222[0] = button108;
			array222[1] = stackLayout6;
			array222[2] = scrollView;
			array222[3] = grid21;
			array222[4] = proControlPage;
			object service222;
			xamlServiceProvider222.Add(typeFromHandle443, service222 = new SimpleValueTargetProvider(array222, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider222.Add(typeof(IReferenceProvider), service222);
			Type typeFromHandle444 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver222 = new XmlNamespaceResolver();
			xmlNamespaceResolver222.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver222.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider222.Add(typeFromHandle444, new XamlTypeResolver(xmlNamespaceResolver222, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider222.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(408, 121)));
			button108.SetValue(fontSizeProperty222, ((IExtendedTypeConverter)fontSizeConverter222).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider222));
			button108.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button108.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(button108);
			grid13.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition56.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid13.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition56);
			rowDefinition57.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid13.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition57);
			rowDefinition58.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid13.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition58);
			rowDefinition59.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid13.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition59);
			columnDefinition23.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid13.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition23);
			columnDefinition24.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid13.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition24);
			label115.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label115.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label115.SetValue(Label.TextProperty, "ÀŸ∂»¬ˆ≥Â: 00");
			label115.SetValue(Grid.RowProperty, 0);
			label115.SetValue(Grid.ColumnProperty, 0);
			label115.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty223 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter223 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider223 = new XamlServiceProvider();
			Type typeFromHandle445 = typeof(IProvideValueTarget);
			object[] array223 = new object[0 + 6];
			array223[0] = label115;
			array223[1] = grid13;
			array223[2] = stackLayout6;
			array223[3] = scrollView;
			array223[4] = grid21;
			array223[5] = proControlPage;
			object service223;
			xamlServiceProvider223.Add(typeFromHandle445, service223 = new SimpleValueTargetProvider(array223, Label.FontSizeProperty, nameScope));
			xamlServiceProvider223.Add(typeof(IReferenceProvider), service223);
			Type typeFromHandle446 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver223 = new XmlNamespaceResolver();
			xmlNamespaceResolver223.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver223.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider223.Add(typeFromHandle446, new XamlTypeResolver(xmlNamespaceResolver223, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider223.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(420, 167)));
			label115.SetValue(fontSizeProperty223, ((IExtendedTypeConverter)fontSizeConverter223).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider223));
			label115.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label115.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label115.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(label115);
			label116.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label116.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label116.SetValue(Label.TextProperty, "ÀŸ∂»¬ˆ≥Âª˘ ˝: 000000");
			label116.SetValue(Grid.RowProperty, 0);
			label116.SetValue(Grid.ColumnProperty, 1);
			label116.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty224 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter224 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider224 = new XamlServiceProvider();
			Type typeFromHandle447 = typeof(IProvideValueTarget);
			object[] array224 = new object[0 + 6];
			array224[0] = label116;
			array224[1] = grid13;
			array224[2] = stackLayout6;
			array224[3] = scrollView;
			array224[4] = grid21;
			array224[5] = proControlPage;
			object service224;
			xamlServiceProvider224.Add(typeFromHandle447, service224 = new SimpleValueTargetProvider(array224, Label.FontSizeProperty, nameScope));
			xamlServiceProvider224.Add(typeof(IReferenceProvider), service224);
			Type typeFromHandle448 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver224 = new XmlNamespaceResolver();
			xmlNamespaceResolver224.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver224.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider224.Add(typeFromHandle448, new XamlTypeResolver(xmlNamespaceResolver224, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider224.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(421, 172)));
			label116.SetValue(fontSizeProperty224, ((IExtendedTypeConverter)fontSizeConverter224).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider224));
			label116.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label116.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label116.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(label116);
			label117.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label117.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label117.SetValue(Label.TextProperty, "ÀŸ∂»±Ì∑Ω Ω: 000000");
			label117.SetValue(Grid.RowProperty, 1);
			label117.SetValue(Grid.ColumnProperty, 0);
			label117.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty225 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter225 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider225 = new XamlServiceProvider();
			Type typeFromHandle449 = typeof(IProvideValueTarget);
			object[] array225 = new object[0 + 6];
			array225[0] = label117;
			array225[1] = grid13;
			array225[2] = stackLayout6;
			array225[3] = scrollView;
			array225[4] = grid21;
			array225[5] = proControlPage;
			object service225;
			xamlServiceProvider225.Add(typeFromHandle449, service225 = new SimpleValueTargetProvider(array225, Label.FontSizeProperty, nameScope));
			xamlServiceProvider225.Add(typeof(IReferenceProvider), service225);
			Type typeFromHandle450 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver225 = new XmlNamespaceResolver();
			xmlNamespaceResolver225.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver225.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider225.Add(typeFromHandle450, new XamlTypeResolver(xmlNamespaceResolver225, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider225.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(422, 178)));
			label117.SetValue(fontSizeProperty225, ((IExtendedTypeConverter)fontSizeConverter225).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider225));
			label117.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label117.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label117.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(label117);
			label118.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label118.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label118.SetValue(Label.TextProperty, "ÀŸ∂»ƒ£ƒ‚: 00000rpm");
			label118.SetValue(Grid.RowProperty, 1);
			label118.SetValue(Grid.ColumnProperty, 1);
			label118.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty226 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter226 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider226 = new XamlServiceProvider();
			Type typeFromHandle451 = typeof(IProvideValueTarget);
			object[] array226 = new object[0 + 6];
			array226[0] = label118;
			array226[1] = grid13;
			array226[2] = stackLayout6;
			array226[3] = scrollView;
			array226[4] = grid21;
			array226[5] = proControlPage;
			object service226;
			xamlServiceProvider226.Add(typeFromHandle451, service226 = new SimpleValueTargetProvider(array226, Label.FontSizeProperty, nameScope));
			xamlServiceProvider226.Add(typeof(IReferenceProvider), service226);
			Type typeFromHandle452 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver226 = new XmlNamespaceResolver();
			xmlNamespaceResolver226.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver226.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider226.Add(typeFromHandle452, new XamlTypeResolver(xmlNamespaceResolver226, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider226.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(423, 174)));
			label118.SetValue(fontSizeProperty226, ((IExtendedTypeConverter)fontSizeConverter226).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider226));
			label118.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label118.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label118.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(label118);
			label119.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label119.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label119.SetValue(Label.TextProperty, "CANÕ®–≈: 000000");
			label119.SetValue(Grid.RowProperty, 2);
			label119.SetValue(Grid.ColumnProperty, 0);
			label119.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty227 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter227 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider227 = new XamlServiceProvider();
			Type typeFromHandle453 = typeof(IProvideValueTarget);
			object[] array227 = new object[0 + 6];
			array227[0] = label119;
			array227[1] = grid13;
			array227[2] = stackLayout6;
			array227[3] = scrollView;
			array227[4] = grid21;
			array227[5] = proControlPage;
			object service227;
			xamlServiceProvider227.Add(typeFromHandle453, service227 = new SimpleValueTargetProvider(array227, Label.FontSizeProperty, nameScope));
			xamlServiceProvider227.Add(typeof(IReferenceProvider), service227);
			Type typeFromHandle454 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver227 = new XmlNamespaceResolver();
			xmlNamespaceResolver227.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver227.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider227.Add(typeFromHandle454, new XamlTypeResolver(xmlNamespaceResolver227, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider227.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(424, 170)));
			label119.SetValue(fontSizeProperty227, ((IExtendedTypeConverter)fontSizeConverter227).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider227));
			label119.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label119.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label119.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(label119);
			label120.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label120.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label120.SetValue(Label.TextProperty, "CANºÏ≤‚≥¨ ±: 0000");
			label120.SetValue(Grid.RowProperty, 2);
			label120.SetValue(Grid.ColumnProperty, 1);
			label120.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty228 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter228 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider228 = new XamlServiceProvider();
			Type typeFromHandle455 = typeof(IProvideValueTarget);
			object[] array228 = new object[0 + 6];
			array228[0] = label120;
			array228[1] = grid13;
			array228[2] = stackLayout6;
			array228[3] = scrollView;
			array228[4] = grid21;
			array228[5] = proControlPage;
			object service228;
			xamlServiceProvider228.Add(typeFromHandle455, service228 = new SimpleValueTargetProvider(array228, Label.FontSizeProperty, nameScope));
			xamlServiceProvider228.Add(typeof(IReferenceProvider), service228);
			Type typeFromHandle456 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver228 = new XmlNamespaceResolver();
			xmlNamespaceResolver228.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver228.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider228.Add(typeFromHandle456, new XamlTypeResolver(xmlNamespaceResolver228, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider228.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(425, 168)));
			label120.SetValue(fontSizeProperty228, ((IExtendedTypeConverter)fontSizeConverter228).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider228));
			label120.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label120.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label120.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(label120);
			label121.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label121.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label121.SetValue(Label.TextProperty, "CAN≤®Ãÿ¬ : 000000");
			label121.SetValue(Grid.RowProperty, 3);
			label121.SetValue(Grid.ColumnProperty, 0);
			label121.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty229 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter229 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider229 = new XamlServiceProvider();
			Type typeFromHandle457 = typeof(IProvideValueTarget);
			object[] array229 = new object[0 + 6];
			array229[0] = label121;
			array229[1] = grid13;
			array229[2] = stackLayout6;
			array229[3] = scrollView;
			array229[4] = grid21;
			array229[5] = proControlPage;
			object service229;
			xamlServiceProvider229.Add(typeFromHandle457, service229 = new SimpleValueTargetProvider(array229, Label.FontSizeProperty, nameScope));
			xamlServiceProvider229.Add(typeof(IReferenceProvider), service229);
			Type typeFromHandle458 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver229 = new XmlNamespaceResolver();
			xmlNamespaceResolver229.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver229.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider229.Add(typeFromHandle458, new XamlTypeResolver(xmlNamespaceResolver229, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider229.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(426, 168)));
			label121.SetValue(fontSizeProperty229, ((IExtendedTypeConverter)fontSizeConverter229).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider229));
			label121.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label121.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label121.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(label121);
			label122.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label122.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label122.SetValue(Label.TextProperty, "≈§æÿœµ ˝: 0000");
			label122.SetValue(Grid.RowProperty, 3);
			label122.SetValue(Grid.ColumnProperty, 1);
			label122.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty230 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter230 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider230 = new XamlServiceProvider();
			Type typeFromHandle459 = typeof(IProvideValueTarget);
			object[] array230 = new object[0 + 6];
			array230[0] = label122;
			array230[1] = grid13;
			array230[2] = stackLayout6;
			array230[3] = scrollView;
			array230[4] = grid21;
			array230[5] = proControlPage;
			object service230;
			xamlServiceProvider230.Add(typeFromHandle459, service230 = new SimpleValueTargetProvider(array230, Label.FontSizeProperty, nameScope));
			xamlServiceProvider230.Add(typeof(IReferenceProvider), service230);
			Type typeFromHandle460 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver230 = new XmlNamespaceResolver();
			xmlNamespaceResolver230.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver230.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider230.Add(typeFromHandle460, new XamlTypeResolver(xmlNamespaceResolver230, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider230.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(427, 168)));
			label122.SetValue(fontSizeProperty230, ((IExtendedTypeConverter)fontSizeConverter230).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider230));
			label122.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label122.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label122.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(label122);
			button109.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button109.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button109.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button109.Clicked += proControlPage.SpeedPulse_SelectedIndexChanged;
			button109.SetValue(Grid.RowProperty, 0);
			button109.SetValue(Grid.ColumnProperty, 0);
			button109.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty231 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter231 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider231 = new XamlServiceProvider();
			Type typeFromHandle461 = typeof(IProvideValueTarget);
			object[] array231 = new object[0 + 6];
			array231[0] = button109;
			array231[1] = grid13;
			array231[2] = stackLayout6;
			array231[3] = scrollView;
			array231[4] = grid21;
			array231[5] = proControlPage;
			object service231;
			xamlServiceProvider231.Add(typeFromHandle461, service231 = new SimpleValueTargetProvider(array231, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider231.Add(typeof(IReferenceProvider), service231);
			Type typeFromHandle462 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver231 = new XmlNamespaceResolver();
			xmlNamespaceResolver231.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver231.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider231.Add(typeFromHandle462, new XamlTypeResolver(xmlNamespaceResolver231, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider231.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(429, 219)));
			button109.SetValue(fontSizeProperty231, ((IExtendedTypeConverter)fontSizeConverter231).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider231));
			button109.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button109.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button109.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(button109);
			button110.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button110.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button110.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button110.Clicked += proControlPage.SpdPulseNum_TextChanged;
			button110.SetValue(Grid.RowProperty, 0);
			button110.SetValue(Grid.ColumnProperty, 1);
			button110.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty232 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter232 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider232 = new XamlServiceProvider();
			Type typeFromHandle463 = typeof(IProvideValueTarget);
			object[] array232 = new object[0 + 6];
			array232[0] = button110;
			array232[1] = grid13;
			array232[2] = stackLayout6;
			array232[3] = scrollView;
			array232[4] = grid21;
			array232[5] = proControlPage;
			object service232;
			xamlServiceProvider232.Add(typeFromHandle463, service232 = new SimpleValueTargetProvider(array232, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider232.Add(typeof(IReferenceProvider), service232);
			Type typeFromHandle464 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver232 = new XmlNamespaceResolver();
			xmlNamespaceResolver232.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver232.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider232.Add(typeFromHandle464, new XamlTypeResolver(xmlNamespaceResolver232, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider232.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(430, 184)));
			button110.SetValue(fontSizeProperty232, ((IExtendedTypeConverter)fontSizeConverter232).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider232));
			button110.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button110.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button110.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(button110);
			button111.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button111.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button111.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button111.Clicked += proControlPage.SpeedMeterConfig_SelectedIndexChanged;
			button111.SetValue(Grid.RowProperty, 1);
			button111.SetValue(Grid.ColumnProperty, 0);
			button111.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty233 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter233 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider233 = new XamlServiceProvider();
			Type typeFromHandle465 = typeof(IProvideValueTarget);
			object[] array233 = new object[0 + 6];
			array233[0] = button111;
			array233[1] = grid13;
			array233[2] = stackLayout6;
			array233[3] = scrollView;
			array233[4] = grid21;
			array233[5] = proControlPage;
			object service233;
			xamlServiceProvider233.Add(typeFromHandle465, service233 = new SimpleValueTargetProvider(array233, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider233.Add(typeof(IReferenceProvider), service233);
			Type typeFromHandle466 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver233 = new XmlNamespaceResolver();
			xmlNamespaceResolver233.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver233.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider233.Add(typeFromHandle466, new XamlTypeResolver(xmlNamespaceResolver233, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider233.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(431, 198)));
			button111.SetValue(fontSizeProperty233, ((IExtendedTypeConverter)fontSizeConverter233).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider233));
			button111.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button111.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button111.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(button111);
			button112.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button112.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button112.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button112.Clicked += proControlPage.SpeedAnalog_TextChanged;
			button112.SetValue(Grid.RowProperty, 1);
			button112.SetValue(Grid.ColumnProperty, 1);
			button112.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty234 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter234 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider234 = new XamlServiceProvider();
			Type typeFromHandle467 = typeof(IProvideValueTarget);
			object[] array234 = new object[0 + 6];
			array234[0] = button112;
			array234[1] = grid13;
			array234[2] = stackLayout6;
			array234[3] = scrollView;
			array234[4] = grid21;
			array234[5] = proControlPage;
			object service234;
			xamlServiceProvider234.Add(typeFromHandle467, service234 = new SimpleValueTargetProvider(array234, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider234.Add(typeof(IReferenceProvider), service234);
			Type typeFromHandle468 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver234 = new XmlNamespaceResolver();
			xmlNamespaceResolver234.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver234.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider234.Add(typeFromHandle468, new XamlTypeResolver(xmlNamespaceResolver234, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider234.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(432, 187)));
			button112.SetValue(fontSizeProperty234, ((IExtendedTypeConverter)fontSizeConverter234).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider234));
			button112.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button112.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button112.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(button112);
			button113.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button113.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button113.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button113.Clicked += proControlPage.CANConfig_TextChanged;
			button113.SetValue(Grid.RowProperty, 2);
			button113.SetValue(Grid.ColumnProperty, 0);
			button113.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty235 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter235 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider235 = new XamlServiceProvider();
			Type typeFromHandle469 = typeof(IProvideValueTarget);
			object[] array235 = new object[0 + 6];
			array235[0] = button113;
			array235[1] = grid13;
			array235[2] = stackLayout6;
			array235[3] = scrollView;
			array235[4] = grid21;
			array235[5] = proControlPage;
			object service235;
			xamlServiceProvider235.Add(typeFromHandle469, service235 = new SimpleValueTargetProvider(array235, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider235.Add(typeof(IReferenceProvider), service235);
			Type typeFromHandle470 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver235 = new XmlNamespaceResolver();
			xmlNamespaceResolver235.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver235.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider235.Add(typeFromHandle470, new XamlTypeResolver(xmlNamespaceResolver235, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider235.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(434, 185)));
			button113.SetValue(fontSizeProperty235, ((IExtendedTypeConverter)fontSizeConverter235).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider235));
			button113.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button113.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button113.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(button113);
			button114.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button114.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button114.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button114.Clicked += proControlPage.NoCanCnt_TextChanged;
			button114.SetValue(Grid.RowProperty, 2);
			button114.SetValue(Grid.ColumnProperty, 1);
			button114.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty236 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter236 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider236 = new XamlServiceProvider();
			Type typeFromHandle471 = typeof(IProvideValueTarget);
			object[] array236 = new object[0 + 6];
			array236[0] = button114;
			array236[1] = grid13;
			array236[2] = stackLayout6;
			array236[3] = scrollView;
			array236[4] = grid21;
			array236[5] = proControlPage;
			object service236;
			xamlServiceProvider236.Add(typeFromHandle471, service236 = new SimpleValueTargetProvider(array236, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider236.Add(typeof(IReferenceProvider), service236);
			Type typeFromHandle472 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver236 = new XmlNamespaceResolver();
			xmlNamespaceResolver236.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver236.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider236.Add(typeFromHandle472, new XamlTypeResolver(xmlNamespaceResolver236, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider236.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(435, 184)));
			button114.SetValue(fontSizeProperty236, ((IExtendedTypeConverter)fontSizeConverter236).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider236));
			button114.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button114.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button114.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(button114);
			button115.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button115.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button115.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button115.Clicked += proControlPage.CanSel_SelectedIndexChanged;
			button115.SetValue(Grid.RowProperty, 3);
			button115.SetValue(Grid.ColumnProperty, 0);
			button115.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty237 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter237 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider237 = new XamlServiceProvider();
			Type typeFromHandle473 = typeof(IProvideValueTarget);
			object[] array237 = new object[0 + 6];
			array237[0] = button115;
			array237[1] = grid13;
			array237[2] = stackLayout6;
			array237[3] = scrollView;
			array237[4] = grid21;
			array237[5] = proControlPage;
			object service237;
			xamlServiceProvider237.Add(typeFromHandle473, service237 = new SimpleValueTargetProvider(array237, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider237.Add(typeof(IReferenceProvider), service237);
			Type typeFromHandle474 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver237 = new XmlNamespaceResolver();
			xmlNamespaceResolver237.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver237.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider237.Add(typeFromHandle474, new XamlTypeResolver(xmlNamespaceResolver237, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider237.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(436, 192)));
			button115.SetValue(fontSizeProperty237, ((IExtendedTypeConverter)fontSizeConverter237).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider237));
			button115.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button115.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button115.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(button115);
			button116.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button116.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button116.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button116.Clicked += proControlPage.TorqueCoeff_TextChanged;
			button116.SetValue(Grid.RowProperty, 3);
			button116.SetValue(Grid.ColumnProperty, 1);
			button116.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty238 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter238 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider238 = new XamlServiceProvider();
			Type typeFromHandle475 = typeof(IProvideValueTarget);
			object[] array238 = new object[0 + 6];
			array238[0] = button116;
			array238[1] = grid13;
			array238[2] = stackLayout6;
			array238[3] = scrollView;
			array238[4] = grid21;
			array238[5] = proControlPage;
			object service238;
			xamlServiceProvider238.Add(typeFromHandle475, service238 = new SimpleValueTargetProvider(array238, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider238.Add(typeof(IReferenceProvider), service238);
			Type typeFromHandle476 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver238 = new XmlNamespaceResolver();
			xmlNamespaceResolver238.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver238.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider238.Add(typeFromHandle476, new XamlTypeResolver(xmlNamespaceResolver238, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider238.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(437, 187)));
			button116.SetValue(fontSizeProperty238, ((IExtendedTypeConverter)fontSizeConverter238).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider238));
			button116.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button116.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button116.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid13.Children.Add(button116);
			stackLayout6.Children.Add(grid13);
			grid14.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition60.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid14.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition60);
			rowDefinition61.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid14.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition61);
			rowDefinition62.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid14.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition62);
			rowDefinition63.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid14.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition63);
			rowDefinition64.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid14.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition64);
			rowDefinition65.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid14.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition65);
			rowDefinition66.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid14.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition66);
			rowDefinition67.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid14.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition67);
			rowDefinition68.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid14.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition68);
			rowDefinition69.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid14.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition69);
			rowDefinition70.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid14.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition70);
			rowDefinition71.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid14.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition71);
			rowDefinition72.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid14.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition72);
			columnDefinition25.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid14.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition25);
			columnDefinition26.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid14.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition26);
			label123.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label123.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label123.SetValue(Label.TextProperty, "≤Ω≥§: 0000");
			label123.SetValue(Grid.RowProperty, 0);
			label123.SetValue(Grid.ColumnProperty, 0);
			label123.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty239 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter239 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider239 = new XamlServiceProvider();
			Type typeFromHandle477 = typeof(IProvideValueTarget);
			object[] array239 = new object[0 + 6];
			array239[0] = label123;
			array239[1] = grid14;
			array239[2] = stackLayout6;
			array239[3] = scrollView;
			array239[4] = grid21;
			array239[5] = proControlPage;
			object service239;
			xamlServiceProvider239.Add(typeFromHandle477, service239 = new SimpleValueTargetProvider(array239, Label.FontSizeProperty, nameScope));
			xamlServiceProvider239.Add(typeof(IReferenceProvider), service239);
			Type typeFromHandle478 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver239 = new XmlNamespaceResolver();
			xmlNamespaceResolver239.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver239.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider239.Add(typeFromHandle478, new XamlTypeResolver(xmlNamespaceResolver239, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider239.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(460, 159)));
			label123.SetValue(fontSizeProperty239, ((IExtendedTypeConverter)fontSizeConverter239).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider239));
			label123.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label123.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label123.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label123);
			label124.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label124.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label124.SetValue(Label.TextProperty, "º‰∏Ù ±≥§: 0000");
			label124.SetValue(Grid.RowProperty, 0);
			label124.SetValue(Grid.ColumnProperty, 1);
			label124.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty240 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter240 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider240 = new XamlServiceProvider();
			Type typeFromHandle479 = typeof(IProvideValueTarget);
			object[] array240 = new object[0 + 6];
			array240[0] = label124;
			array240[1] = grid14;
			array240[2] = stackLayout6;
			array240[3] = scrollView;
			array240[4] = grid21;
			array240[5] = proControlPage;
			object service240;
			xamlServiceProvider240.Add(typeFromHandle479, service240 = new SimpleValueTargetProvider(array240, Label.FontSizeProperty, nameScope));
			xamlServiceProvider240.Add(typeof(IReferenceProvider), service240);
			Type typeFromHandle480 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver240 = new XmlNamespaceResolver();
			xmlNamespaceResolver240.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver240.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider240.Add(typeFromHandle480, new XamlTypeResolver(xmlNamespaceResolver240, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider240.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(461, 161)));
			label124.SetValue(fontSizeProperty240, ((IExtendedTypeConverter)fontSizeConverter240).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider240));
			label124.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label124.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label124.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label124);
			label125.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label125.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label125.SetValue(Label.TextProperty, "Ãÿ ‚÷°: 0000");
			label125.SetValue(Grid.RowProperty, 1);
			label125.SetValue(Grid.ColumnProperty, 0);
			label125.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty241 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter241 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider241 = new XamlServiceProvider();
			Type typeFromHandle481 = typeof(IProvideValueTarget);
			object[] array241 = new object[0 + 6];
			array241[0] = label125;
			array241[1] = grid14;
			array241[2] = stackLayout6;
			array241[3] = scrollView;
			array241[4] = grid21;
			array241[5] = proControlPage;
			object service241;
			xamlServiceProvider241.Add(typeFromHandle481, service241 = new SimpleValueTargetProvider(array241, Label.FontSizeProperty, nameScope));
			xamlServiceProvider241.Add(typeof(IReferenceProvider), service241);
			Type typeFromHandle482 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver241 = new XmlNamespaceResolver();
			xmlNamespaceResolver241.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver241.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider241.Add(typeFromHandle482, new XamlTypeResolver(xmlNamespaceResolver241, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider241.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(462, 159)));
			label125.SetValue(fontSizeProperty241, ((IExtendedTypeConverter)fontSizeConverter241).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider241));
			label125.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label125.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label125.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label125);
			label126.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label126.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label126.SetValue(Label.TextProperty, "PULSE: 0000");
			label126.SetValue(Grid.RowProperty, 1);
			label126.SetValue(Grid.ColumnProperty, 1);
			label126.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty242 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter242 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider242 = new XamlServiceProvider();
			Type typeFromHandle483 = typeof(IProvideValueTarget);
			object[] array242 = new object[0 + 6];
			array242[0] = label126;
			array242[1] = grid14;
			array242[2] = stackLayout6;
			array242[3] = scrollView;
			array242[4] = grid21;
			array242[5] = proControlPage;
			object service242;
			xamlServiceProvider242.Add(typeFromHandle483, service242 = new SimpleValueTargetProvider(array242, Label.FontSizeProperty, nameScope));
			xamlServiceProvider242.Add(typeof(IReferenceProvider), service242);
			Type typeFromHandle484 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver242 = new XmlNamespaceResolver();
			xmlNamespaceResolver242.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver242.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider242.Add(typeFromHandle484, new XamlTypeResolver(xmlNamespaceResolver242, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider242.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(463, 163)));
			label126.SetValue(fontSizeProperty242, ((IExtendedTypeConverter)fontSizeConverter242).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider242));
			label126.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label126.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label126.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label126);
			label127.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label127.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label127.SetValue(Label.TextProperty, "SQH: 0000");
			label127.SetValue(Grid.RowProperty, 2);
			label127.SetValue(Grid.ColumnProperty, 0);
			label127.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty243 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter243 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider243 = new XamlServiceProvider();
			Type typeFromHandle485 = typeof(IProvideValueTarget);
			object[] array243 = new object[0 + 6];
			array243[0] = label127;
			array243[1] = grid14;
			array243[2] = stackLayout6;
			array243[3] = scrollView;
			array243[4] = grid21;
			array243[5] = proControlPage;
			object service243;
			xamlServiceProvider243.Add(typeFromHandle485, service243 = new SimpleValueTargetProvider(array243, Label.FontSizeProperty, nameScope));
			xamlServiceProvider243.Add(typeof(IReferenceProvider), service243);
			Type typeFromHandle486 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver243 = new XmlNamespaceResolver();
			xmlNamespaceResolver243.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver243.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider243.Add(typeFromHandle486, new XamlTypeResolver(xmlNamespaceResolver243, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider243.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(464, 159)));
			label127.SetValue(fontSizeProperty243, ((IExtendedTypeConverter)fontSizeConverter243).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider243));
			label127.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label127.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label127.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label127);
			label128.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label128.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label128.SetValue(Label.TextProperty, "DATA0: 0000");
			label128.SetValue(Grid.RowProperty, 2);
			label128.SetValue(Grid.ColumnProperty, 1);
			label128.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty244 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter244 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider244 = new XamlServiceProvider();
			Type typeFromHandle487 = typeof(IProvideValueTarget);
			object[] array244 = new object[0 + 6];
			array244[0] = label128;
			array244[1] = grid14;
			array244[2] = stackLayout6;
			array244[3] = scrollView;
			array244[4] = grid21;
			array244[5] = proControlPage;
			object service244;
			xamlServiceProvider244.Add(typeFromHandle487, service244 = new SimpleValueTargetProvider(array244, Label.FontSizeProperty, nameScope));
			xamlServiceProvider244.Add(typeof(IReferenceProvider), service244);
			Type typeFromHandle488 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver244 = new XmlNamespaceResolver();
			xmlNamespaceResolver244.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver244.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider244.Add(typeFromHandle488, new XamlTypeResolver(xmlNamespaceResolver244, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider244.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(465, 163)));
			label128.SetValue(fontSizeProperty244, ((IExtendedTypeConverter)fontSizeConverter244).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider244));
			label128.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label128.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label128.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label128);
			label129.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label129.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label129.SetValue(Label.TextProperty, "DATA1: 0000");
			label129.SetValue(Grid.RowProperty, 3);
			label129.SetValue(Grid.ColumnProperty, 0);
			label129.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty245 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter245 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider245 = new XamlServiceProvider();
			Type typeFromHandle489 = typeof(IProvideValueTarget);
			object[] array245 = new object[0 + 6];
			array245[0] = label129;
			array245[1] = grid14;
			array245[2] = stackLayout6;
			array245[3] = scrollView;
			array245[4] = grid21;
			array245[5] = proControlPage;
			object service245;
			xamlServiceProvider245.Add(typeFromHandle489, service245 = new SimpleValueTargetProvider(array245, Label.FontSizeProperty, nameScope));
			xamlServiceProvider245.Add(typeof(IReferenceProvider), service245);
			Type typeFromHandle490 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver245 = new XmlNamespaceResolver();
			xmlNamespaceResolver245.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver245.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider245.Add(typeFromHandle490, new XamlTypeResolver(xmlNamespaceResolver245, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider245.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(466, 163)));
			label129.SetValue(fontSizeProperty245, ((IExtendedTypeConverter)fontSizeConverter245).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider245));
			label129.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label129.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label129.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label129);
			label130.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label130.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label130.SetValue(Label.TextProperty, "SEC0: 0000");
			label130.SetValue(Grid.RowProperty, 3);
			label130.SetValue(Grid.ColumnProperty, 1);
			label130.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty246 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter246 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider246 = new XamlServiceProvider();
			Type typeFromHandle491 = typeof(IProvideValueTarget);
			object[] array246 = new object[0 + 6];
			array246[0] = label130;
			array246[1] = grid14;
			array246[2] = stackLayout6;
			array246[3] = scrollView;
			array246[4] = grid21;
			array246[5] = proControlPage;
			object service246;
			xamlServiceProvider246.Add(typeFromHandle491, service246 = new SimpleValueTargetProvider(array246, Label.FontSizeProperty, nameScope));
			xamlServiceProvider246.Add(typeof(IReferenceProvider), service246);
			Type typeFromHandle492 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver246 = new XmlNamespaceResolver();
			xmlNamespaceResolver246.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver246.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider246.Add(typeFromHandle492, new XamlTypeResolver(xmlNamespaceResolver246, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider246.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(467, 161)));
			label130.SetValue(fontSizeProperty246, ((IExtendedTypeConverter)fontSizeConverter246).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider246));
			label130.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label130.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label130.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label130);
			label131.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label131.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label131.SetValue(Label.TextProperty, "SEC1: 0000");
			label131.SetValue(Grid.RowProperty, 4);
			label131.SetValue(Grid.ColumnProperty, 0);
			label131.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty247 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter247 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider247 = new XamlServiceProvider();
			Type typeFromHandle493 = typeof(IProvideValueTarget);
			object[] array247 = new object[0 + 6];
			array247[0] = label131;
			array247[1] = grid14;
			array247[2] = stackLayout6;
			array247[3] = scrollView;
			array247[4] = grid21;
			array247[5] = proControlPage;
			object service247;
			xamlServiceProvider247.Add(typeFromHandle493, service247 = new SimpleValueTargetProvider(array247, Label.FontSizeProperty, nameScope));
			xamlServiceProvider247.Add(typeof(IReferenceProvider), service247);
			Type typeFromHandle494 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver247 = new XmlNamespaceResolver();
			xmlNamespaceResolver247.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver247.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider247.Add(typeFromHandle494, new XamlTypeResolver(xmlNamespaceResolver247, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider247.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(468, 161)));
			label131.SetValue(fontSizeProperty247, ((IExtendedTypeConverter)fontSizeConverter247).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider247));
			label131.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label131.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label131.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label131);
			label132.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label132.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label132.SetValue(Label.TextProperty, "SEC2: 0000");
			label132.SetValue(Grid.RowProperty, 4);
			label132.SetValue(Grid.ColumnProperty, 1);
			label132.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty248 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter248 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider248 = new XamlServiceProvider();
			Type typeFromHandle495 = typeof(IProvideValueTarget);
			object[] array248 = new object[0 + 6];
			array248[0] = label132;
			array248[1] = grid14;
			array248[2] = stackLayout6;
			array248[3] = scrollView;
			array248[4] = grid21;
			array248[5] = proControlPage;
			object service248;
			xamlServiceProvider248.Add(typeFromHandle495, service248 = new SimpleValueTargetProvider(array248, Label.FontSizeProperty, nameScope));
			xamlServiceProvider248.Add(typeof(IReferenceProvider), service248);
			Type typeFromHandle496 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver248 = new XmlNamespaceResolver();
			xmlNamespaceResolver248.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver248.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider248.Add(typeFromHandle496, new XamlTypeResolver(xmlNamespaceResolver248, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider248.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(469, 161)));
			label132.SetValue(fontSizeProperty248, ((IExtendedTypeConverter)fontSizeConverter248).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider248));
			label132.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label132.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label132.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label132);
			label133.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label133.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label133.SetValue(Label.TextProperty, "SEC3: 0000");
			label133.SetValue(Grid.RowProperty, 5);
			label133.SetValue(Grid.ColumnProperty, 0);
			label133.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty249 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter249 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider249 = new XamlServiceProvider();
			Type typeFromHandle497 = typeof(IProvideValueTarget);
			object[] array249 = new object[0 + 6];
			array249[0] = label133;
			array249[1] = grid14;
			array249[2] = stackLayout6;
			array249[3] = scrollView;
			array249[4] = grid21;
			array249[5] = proControlPage;
			object service249;
			xamlServiceProvider249.Add(typeFromHandle497, service249 = new SimpleValueTargetProvider(array249, Label.FontSizeProperty, nameScope));
			xamlServiceProvider249.Add(typeof(IReferenceProvider), service249);
			Type typeFromHandle498 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver249 = new XmlNamespaceResolver();
			xmlNamespaceResolver249.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver249.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider249.Add(typeFromHandle498, new XamlTypeResolver(xmlNamespaceResolver249, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider249.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(470, 161)));
			label133.SetValue(fontSizeProperty249, ((IExtendedTypeConverter)fontSizeConverter249).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider249));
			label133.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label133.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label133.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label133);
			label134.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label134.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label134.SetValue(Label.TextProperty, "SEC4: 0000");
			label134.SetValue(Grid.RowProperty, 5);
			label134.SetValue(Grid.ColumnProperty, 1);
			label134.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty250 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter250 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider250 = new XamlServiceProvider();
			Type typeFromHandle499 = typeof(IProvideValueTarget);
			object[] array250 = new object[0 + 6];
			array250[0] = label134;
			array250[1] = grid14;
			array250[2] = stackLayout6;
			array250[3] = scrollView;
			array250[4] = grid21;
			array250[5] = proControlPage;
			object service250;
			xamlServiceProvider250.Add(typeFromHandle499, service250 = new SimpleValueTargetProvider(array250, Label.FontSizeProperty, nameScope));
			xamlServiceProvider250.Add(typeof(IReferenceProvider), service250);
			Type typeFromHandle500 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver250 = new XmlNamespaceResolver();
			xmlNamespaceResolver250.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver250.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider250.Add(typeFromHandle500, new XamlTypeResolver(xmlNamespaceResolver250, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider250.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(471, 161)));
			label134.SetValue(fontSizeProperty250, ((IExtendedTypeConverter)fontSizeConverter250).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider250));
			label134.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label134.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label134.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label134);
			label135.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label135.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label135.SetValue(Label.TextProperty, "SEC5: 0000");
			label135.SetValue(Grid.RowProperty, 6);
			label135.SetValue(Grid.ColumnProperty, 0);
			label135.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty251 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter251 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider251 = new XamlServiceProvider();
			Type typeFromHandle501 = typeof(IProvideValueTarget);
			object[] array251 = new object[0 + 6];
			array251[0] = label135;
			array251[1] = grid14;
			array251[2] = stackLayout6;
			array251[3] = scrollView;
			array251[4] = grid21;
			array251[5] = proControlPage;
			object service251;
			xamlServiceProvider251.Add(typeFromHandle501, service251 = new SimpleValueTargetProvider(array251, Label.FontSizeProperty, nameScope));
			xamlServiceProvider251.Add(typeof(IReferenceProvider), service251);
			Type typeFromHandle502 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver251 = new XmlNamespaceResolver();
			xmlNamespaceResolver251.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver251.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider251.Add(typeFromHandle502, new XamlTypeResolver(xmlNamespaceResolver251, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider251.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(472, 161)));
			label135.SetValue(fontSizeProperty251, ((IExtendedTypeConverter)fontSizeConverter251).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider251));
			label135.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label135.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label135.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label135);
			label136.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label136.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label136.SetValue(Label.TextProperty, "SEC6: 0000");
			label136.SetValue(Grid.RowProperty, 6);
			label136.SetValue(Grid.ColumnProperty, 1);
			label136.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty252 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter252 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider252 = new XamlServiceProvider();
			Type typeFromHandle503 = typeof(IProvideValueTarget);
			object[] array252 = new object[0 + 6];
			array252[0] = label136;
			array252[1] = grid14;
			array252[2] = stackLayout6;
			array252[3] = scrollView;
			array252[4] = grid21;
			array252[5] = proControlPage;
			object service252;
			xamlServiceProvider252.Add(typeFromHandle503, service252 = new SimpleValueTargetProvider(array252, Label.FontSizeProperty, nameScope));
			xamlServiceProvider252.Add(typeof(IReferenceProvider), service252);
			Type typeFromHandle504 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver252 = new XmlNamespaceResolver();
			xmlNamespaceResolver252.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver252.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider252.Add(typeFromHandle504, new XamlTypeResolver(xmlNamespaceResolver252, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider252.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(473, 161)));
			label136.SetValue(fontSizeProperty252, ((IExtendedTypeConverter)fontSizeConverter252).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider252));
			label136.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label136.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label136.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label136);
			label137.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label137.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label137.SetValue(Label.TextProperty, "SEC7: 0000");
			label137.SetValue(Grid.RowProperty, 7);
			label137.SetValue(Grid.ColumnProperty, 0);
			label137.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty253 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter253 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider253 = new XamlServiceProvider();
			Type typeFromHandle505 = typeof(IProvideValueTarget);
			object[] array253 = new object[0 + 6];
			array253[0] = label137;
			array253[1] = grid14;
			array253[2] = stackLayout6;
			array253[3] = scrollView;
			array253[4] = grid21;
			array253[5] = proControlPage;
			object service253;
			xamlServiceProvider253.Add(typeFromHandle505, service253 = new SimpleValueTargetProvider(array253, Label.FontSizeProperty, nameScope));
			xamlServiceProvider253.Add(typeof(IReferenceProvider), service253);
			Type typeFromHandle506 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver253 = new XmlNamespaceResolver();
			xmlNamespaceResolver253.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver253.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider253.Add(typeFromHandle506, new XamlTypeResolver(xmlNamespaceResolver253, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider253.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(474, 161)));
			label137.SetValue(fontSizeProperty253, ((IExtendedTypeConverter)fontSizeConverter253).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider253));
			label137.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label137.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label137.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label137);
			label138.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label138.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label138.SetValue(Label.TextProperty, "PŒª÷√: 0000");
			label138.SetValue(Grid.RowProperty, 7);
			label138.SetValue(Grid.ColumnProperty, 1);
			label138.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty254 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter254 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider254 = new XamlServiceProvider();
			Type typeFromHandle507 = typeof(IProvideValueTarget);
			object[] array254 = new object[0 + 6];
			array254[0] = label138;
			array254[1] = grid14;
			array254[2] = stackLayout6;
			array254[3] = scrollView;
			array254[4] = grid21;
			array254[5] = proControlPage;
			object service254;
			xamlServiceProvider254.Add(typeFromHandle507, service254 = new SimpleValueTargetProvider(array254, Label.FontSizeProperty, nameScope));
			xamlServiceProvider254.Add(typeof(IReferenceProvider), service254);
			Type typeFromHandle508 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver254 = new XmlNamespaceResolver();
			xmlNamespaceResolver254.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver254.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider254.Add(typeFromHandle508, new XamlTypeResolver(xmlNamespaceResolver254, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider254.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(475, 159)));
			label138.SetValue(fontSizeProperty254, ((IExtendedTypeConverter)fontSizeConverter254).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider254));
			label138.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label138.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label138.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label138);
			label139.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label139.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label139.SetValue(Label.TextProperty, "±ﬂ≥≈Œª÷√: 0000");
			label139.SetValue(Grid.RowProperty, 8);
			label139.SetValue(Grid.ColumnProperty, 0);
			label139.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty255 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter255 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider255 = new XamlServiceProvider();
			Type typeFromHandle509 = typeof(IProvideValueTarget);
			object[] array255 = new object[0 + 6];
			array255[0] = label139;
			array255[1] = grid14;
			array255[2] = stackLayout6;
			array255[3] = scrollView;
			array255[4] = grid21;
			array255[5] = proControlPage;
			object service255;
			xamlServiceProvider255.Add(typeFromHandle509, service255 = new SimpleValueTargetProvider(array255, Label.FontSizeProperty, nameScope));
			xamlServiceProvider255.Add(typeof(IReferenceProvider), service255);
			Type typeFromHandle510 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver255 = new XmlNamespaceResolver();
			xmlNamespaceResolver255.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver255.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider255.Add(typeFromHandle510, new XamlTypeResolver(xmlNamespaceResolver255, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider255.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(476, 162)));
			label139.SetValue(fontSizeProperty255, ((IExtendedTypeConverter)fontSizeConverter255).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider255));
			label139.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label139.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label139.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label139);
			label140.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label140.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label140.SetValue(Label.TextProperty, "◊™∞—Œª÷√: 0000");
			label140.SetValue(Grid.RowProperty, 8);
			label140.SetValue(Grid.ColumnProperty, 1);
			label140.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty256 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter256 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider256 = new XamlServiceProvider();
			Type typeFromHandle511 = typeof(IProvideValueTarget);
			object[] array256 = new object[0 + 6];
			array256[0] = label140;
			array256[1] = grid14;
			array256[2] = stackLayout6;
			array256[3] = scrollView;
			array256[4] = grid21;
			array256[5] = proControlPage;
			object service256;
			xamlServiceProvider256.Add(typeFromHandle511, service256 = new SimpleValueTargetProvider(array256, Label.FontSizeProperty, nameScope));
			xamlServiceProvider256.Add(typeof(IReferenceProvider), service256);
			Type typeFromHandle512 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver256 = new XmlNamespaceResolver();
			xmlNamespaceResolver256.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver256.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider256.Add(typeFromHandle512, new XamlTypeResolver(xmlNamespaceResolver256, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider256.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(477, 163)));
			label140.SetValue(fontSizeProperty256, ((IExtendedTypeConverter)fontSizeConverter256).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider256));
			label140.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label140.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label140.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label140);
			label141.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label141.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label141.SetValue(Label.TextProperty, "∑¿µ¡Œª÷√: 0000");
			label141.SetValue(Grid.RowProperty, 9);
			label141.SetValue(Grid.ColumnProperty, 0);
			label141.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty257 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter257 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider257 = new XamlServiceProvider();
			Type typeFromHandle513 = typeof(IProvideValueTarget);
			object[] array257 = new object[0 + 6];
			array257[0] = label141;
			array257[1] = grid14;
			array257[2] = stackLayout6;
			array257[3] = scrollView;
			array257[4] = grid21;
			array257[5] = proControlPage;
			object service257;
			xamlServiceProvider257.Add(typeFromHandle513, service257 = new SimpleValueTargetProvider(array257, Label.FontSizeProperty, nameScope));
			xamlServiceProvider257.Add(typeof(IReferenceProvider), service257);
			Type typeFromHandle514 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver257 = new XmlNamespaceResolver();
			xmlNamespaceResolver257.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver257.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider257.Add(typeFromHandle514, new XamlTypeResolver(xmlNamespaceResolver257, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider257.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(478, 162)));
			label141.SetValue(fontSizeProperty257, ((IExtendedTypeConverter)fontSizeConverter257).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider257));
			label141.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label141.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label141.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label141);
			label142.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label142.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label142.SetValue(Label.TextProperty, "µÁ¡˜œµ ˝: 0000");
			label142.SetValue(Grid.RowProperty, 9);
			label142.SetValue(Grid.ColumnProperty, 1);
			label142.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty258 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter258 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider258 = new XamlServiceProvider();
			Type typeFromHandle515 = typeof(IProvideValueTarget);
			object[] array258 = new object[0 + 6];
			array258[0] = label142;
			array258[1] = grid14;
			array258[2] = stackLayout6;
			array258[3] = scrollView;
			array258[4] = grid21;
			array258[5] = proControlPage;
			object service258;
			xamlServiceProvider258.Add(typeFromHandle515, service258 = new SimpleValueTargetProvider(array258, Label.FontSizeProperty, nameScope));
			xamlServiceProvider258.Add(typeof(IReferenceProvider), service258);
			Type typeFromHandle516 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver258 = new XmlNamespaceResolver();
			xmlNamespaceResolver258.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver258.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider258.Add(typeFromHandle516, new XamlTypeResolver(xmlNamespaceResolver258, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider258.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(479, 173)));
			label142.SetValue(fontSizeProperty258, ((IExtendedTypeConverter)fontSizeConverter258).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider258));
			label142.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label142.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label142.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label142);
			label143.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label143.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label143.SetValue(Label.TextProperty, "◊÷Ω⁄89: 0000");
			label143.SetValue(Grid.RowProperty, 10);
			label143.SetValue(Grid.ColumnProperty, 0);
			label143.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty259 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter259 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider259 = new XamlServiceProvider();
			Type typeFromHandle517 = typeof(IProvideValueTarget);
			object[] array259 = new object[0 + 6];
			array259[0] = label143;
			array259[1] = grid14;
			array259[2] = stackLayout6;
			array259[3] = scrollView;
			array259[4] = grid21;
			array259[5] = proControlPage;
			object service259;
			xamlServiceProvider259.Add(typeFromHandle517, service259 = new SimpleValueTargetProvider(array259, Label.FontSizeProperty, nameScope));
			xamlServiceProvider259.Add(typeof(IReferenceProvider), service259);
			Type typeFromHandle518 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver259 = new XmlNamespaceResolver();
			xmlNamespaceResolver259.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver259.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider259.Add(typeFromHandle518, new XamlTypeResolver(xmlNamespaceResolver259, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider259.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(480, 167)));
			label143.SetValue(fontSizeProperty259, ((IExtendedTypeConverter)fontSizeConverter259).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider259));
			label143.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label143.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label143.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label143);
			label144.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label144.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label144.SetValue(Label.TextProperty, "¬÷Ã•øÌ∂»: 0000");
			label144.SetValue(Grid.RowProperty, 10);
			label144.SetValue(Grid.ColumnProperty, 1);
			label144.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty260 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter260 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider260 = new XamlServiceProvider();
			Type typeFromHandle519 = typeof(IProvideValueTarget);
			object[] array260 = new object[0 + 6];
			array260[0] = label144;
			array260[1] = grid14;
			array260[2] = stackLayout6;
			array260[3] = scrollView;
			array260[4] = grid21;
			array260[5] = proControlPage;
			object service260;
			xamlServiceProvider260.Add(typeFromHandle519, service260 = new SimpleValueTargetProvider(array260, Label.FontSizeProperty, nameScope));
			xamlServiceProvider260.Add(typeof(IReferenceProvider), service260);
			Type typeFromHandle520 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver260 = new XmlNamespaceResolver();
			xmlNamespaceResolver260.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver260.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider260.Add(typeFromHandle520, new XamlTypeResolver(xmlNamespaceResolver260, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider260.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(481, 168)));
			label144.SetValue(fontSizeProperty260, ((IExtendedTypeConverter)fontSizeConverter260).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider260));
			label144.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label144.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label144.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label144);
			label145.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label145.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label145.SetValue(Label.TextProperty, "¬÷Ã•±‚∆Ω¬ : 0000");
			label145.SetValue(Grid.RowProperty, 11);
			label145.SetValue(Grid.ColumnProperty, 0);
			label145.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty261 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter261 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider261 = new XamlServiceProvider();
			Type typeFromHandle521 = typeof(IProvideValueTarget);
			object[] array261 = new object[0 + 6];
			array261[0] = label145;
			array261[1] = grid14;
			array261[2] = stackLayout6;
			array261[3] = scrollView;
			array261[4] = grid21;
			array261[5] = proControlPage;
			object service261;
			xamlServiceProvider261.Add(typeFromHandle521, service261 = new SimpleValueTargetProvider(array261, Label.FontSizeProperty, nameScope));
			xamlServiceProvider261.Add(typeof(IReferenceProvider), service261);
			Type typeFromHandle522 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver261 = new XmlNamespaceResolver();
			xmlNamespaceResolver261.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver261.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider261.Add(typeFromHandle522, new XamlTypeResolver(xmlNamespaceResolver261, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider261.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(482, 169)));
			label145.SetValue(fontSizeProperty261, ((IExtendedTypeConverter)fontSizeConverter261).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider261));
			label145.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label145.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label145.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label145);
			label146.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label146.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label146.SetValue(Label.TextProperty, "¬÷Ã•R: 0000");
			label146.SetValue(Grid.RowProperty, 11);
			label146.SetValue(Grid.ColumnProperty, 1);
			label146.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty262 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter262 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider262 = new XamlServiceProvider();
			Type typeFromHandle523 = typeof(IProvideValueTarget);
			object[] array262 = new object[0 + 6];
			array262[0] = label146;
			array262[1] = grid14;
			array262[2] = stackLayout6;
			array262[3] = scrollView;
			array262[4] = grid21;
			array262[5] = proControlPage;
			object service262;
			xamlServiceProvider262.Add(typeFromHandle523, service262 = new SimpleValueTargetProvider(array262, Label.FontSizeProperty, nameScope));
			xamlServiceProvider262.Add(typeof(IReferenceProvider), service262);
			Type typeFromHandle524 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver262 = new XmlNamespaceResolver();
			xmlNamespaceResolver262.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver262.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider262.Add(typeFromHandle524, new XamlTypeResolver(xmlNamespaceResolver262, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider262.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(483, 168)));
			label146.SetValue(fontSizeProperty262, ((IExtendedTypeConverter)fontSizeConverter262).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider262));
			label146.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label146.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label146.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label146);
			label147.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label147.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label147.SetValue(Label.TextProperty, "¥´∂ØÀŸ±»: 0000");
			label147.SetValue(Grid.RowProperty, 12);
			label147.SetValue(Grid.ColumnProperty, 0);
			label147.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty263 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter263 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider263 = new XamlServiceProvider();
			Type typeFromHandle525 = typeof(IProvideValueTarget);
			object[] array263 = new object[0 + 6];
			array263[0] = label147;
			array263[1] = grid14;
			array263[2] = stackLayout6;
			array263[3] = scrollView;
			array263[4] = grid21;
			array263[5] = proControlPage;
			object service263;
			xamlServiceProvider263.Add(typeFromHandle525, service263 = new SimpleValueTargetProvider(array263, Label.FontSizeProperty, nameScope));
			xamlServiceProvider263.Add(typeof(IReferenceProvider), service263);
			Type typeFromHandle526 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver263 = new XmlNamespaceResolver();
			xmlNamespaceResolver263.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver263.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider263.Add(typeFromHandle526, new XamlTypeResolver(xmlNamespaceResolver263, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider263.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(484, 167)));
			label147.SetValue(fontSizeProperty263, ((IExtendedTypeConverter)fontSizeConverter263).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider263));
			label147.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label147.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label147.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(label147);
			button117.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button117.Clicked += proControlPage.Idle_SelectedIndexChanged;
			button117.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button117.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button117.SetValue(Grid.RowProperty, 0);
			button117.SetValue(Grid.ColumnProperty, 0);
			button117.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty264 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter264 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider264 = new XamlServiceProvider();
			Type typeFromHandle527 = typeof(IProvideValueTarget);
			object[] array264 = new object[0 + 6];
			array264[0] = button117;
			array264[1] = grid14;
			array264[2] = stackLayout6;
			array264[3] = scrollView;
			array264[4] = grid21;
			array264[5] = proControlPage;
			object service264;
			xamlServiceProvider264.Add(typeFromHandle527, service264 = new SimpleValueTargetProvider(array264, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider264.Add(typeof(IReferenceProvider), service264);
			Type typeFromHandle528 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver264 = new XmlNamespaceResolver();
			xmlNamespaceResolver264.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver264.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider264.Add(typeFromHandle528, new XamlTypeResolver(xmlNamespaceResolver264, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider264.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(486, 188)));
			button117.SetValue(fontSizeProperty264, ((IExtendedTypeConverter)fontSizeConverter264).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider264));
			button117.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button117.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button117.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button117);
			button118.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button118.Clicked += proControlPage.Stop_SelectedIndexChanged;
			button118.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button118.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button118.SetValue(Grid.RowProperty, 0);
			button118.SetValue(Grid.ColumnProperty, 1);
			button118.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty265 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter265 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider265 = new XamlServiceProvider();
			Type typeFromHandle529 = typeof(IProvideValueTarget);
			object[] array265 = new object[0 + 6];
			array265[0] = button118;
			array265[1] = grid14;
			array265[2] = stackLayout6;
			array265[3] = scrollView;
			array265[4] = grid21;
			array265[5] = proControlPage;
			object service265;
			xamlServiceProvider265.Add(typeFromHandle529, service265 = new SimpleValueTargetProvider(array265, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider265.Add(typeof(IReferenceProvider), service265);
			Type typeFromHandle530 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver265 = new XmlNamespaceResolver();
			xmlNamespaceResolver265.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver265.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider265.Add(typeFromHandle530, new XamlTypeResolver(xmlNamespaceResolver265, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider265.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(487, 188)));
			button118.SetValue(fontSizeProperty265, ((IExtendedTypeConverter)fontSizeConverter265).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider265));
			button118.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button118.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button118.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button118);
			button119.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button119.Clicked += proControlPage.ESQH_TextChanged;
			button119.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button119.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button119.SetValue(Grid.RowProperty, 1);
			button119.SetValue(Grid.ColumnProperty, 0);
			button119.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty266 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter266 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider266 = new XamlServiceProvider();
			Type typeFromHandle531 = typeof(IProvideValueTarget);
			object[] array266 = new object[0 + 6];
			array266[0] = button119;
			array266[1] = grid14;
			array266[2] = stackLayout6;
			array266[3] = scrollView;
			array266[4] = grid21;
			array266[5] = proControlPage;
			object service266;
			xamlServiceProvider266.Add(typeFromHandle531, service266 = new SimpleValueTargetProvider(array266, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider266.Add(typeof(IReferenceProvider), service266);
			Type typeFromHandle532 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver266 = new XmlNamespaceResolver();
			xmlNamespaceResolver266.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver266.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider266.Add(typeFromHandle532, new XamlTypeResolver(xmlNamespaceResolver266, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider266.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(488, 178)));
			button119.SetValue(fontSizeProperty266, ((IExtendedTypeConverter)fontSizeConverter266).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider266));
			button119.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button119.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button119.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button119);
			button120.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button120.Clicked += proControlPage.Pulse_TextChanged;
			button120.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button120.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button120.SetValue(Grid.RowProperty, 1);
			button120.SetValue(Grid.ColumnProperty, 1);
			button120.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty267 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter267 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider267 = new XamlServiceProvider();
			Type typeFromHandle533 = typeof(IProvideValueTarget);
			object[] array267 = new object[0 + 6];
			array267[0] = button120;
			array267[1] = grid14;
			array267[2] = stackLayout6;
			array267[3] = scrollView;
			array267[4] = grid21;
			array267[5] = proControlPage;
			object service267;
			xamlServiceProvider267.Add(typeFromHandle533, service267 = new SimpleValueTargetProvider(array267, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider267.Add(typeof(IReferenceProvider), service267);
			Type typeFromHandle534 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver267 = new XmlNamespaceResolver();
			xmlNamespaceResolver267.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver267.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider267.Add(typeFromHandle534, new XamlTypeResolver(xmlNamespaceResolver267, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider267.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(489, 180)));
			button120.SetValue(fontSizeProperty267, ((IExtendedTypeConverter)fontSizeConverter267).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider267));
			button120.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button120.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button120.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button120);
			button121.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button121.Clicked += proControlPage.SQH_TextChanged;
			button121.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button121.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button121.SetValue(Grid.RowProperty, 2);
			button121.SetValue(Grid.ColumnProperty, 0);
			button121.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty268 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter268 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider268 = new XamlServiceProvider();
			Type typeFromHandle535 = typeof(IProvideValueTarget);
			object[] array268 = new object[0 + 6];
			array268[0] = button121;
			array268[1] = grid14;
			array268[2] = stackLayout6;
			array268[3] = scrollView;
			array268[4] = grid21;
			array268[5] = proControlPage;
			object service268;
			xamlServiceProvider268.Add(typeFromHandle535, service268 = new SimpleValueTargetProvider(array268, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider268.Add(typeof(IReferenceProvider), service268);
			Type typeFromHandle536 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver268 = new XmlNamespaceResolver();
			xmlNamespaceResolver268.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver268.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider268.Add(typeFromHandle536, new XamlTypeResolver(xmlNamespaceResolver268, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider268.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(490, 178)));
			button121.SetValue(fontSizeProperty268, ((IExtendedTypeConverter)fontSizeConverter268).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider268));
			button121.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button121.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button121.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button121);
			button122.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button122.Clicked += proControlPage.DATA0_TextChanged;
			button122.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button122.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button122.SetValue(Grid.RowProperty, 2);
			button122.SetValue(Grid.ColumnProperty, 1);
			button122.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty269 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter269 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider269 = new XamlServiceProvider();
			Type typeFromHandle537 = typeof(IProvideValueTarget);
			object[] array269 = new object[0 + 6];
			array269[0] = button122;
			array269[1] = grid14;
			array269[2] = stackLayout6;
			array269[3] = scrollView;
			array269[4] = grid21;
			array269[5] = proControlPage;
			object service269;
			xamlServiceProvider269.Add(typeFromHandle537, service269 = new SimpleValueTargetProvider(array269, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider269.Add(typeof(IReferenceProvider), service269);
			Type typeFromHandle538 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver269 = new XmlNamespaceResolver();
			xmlNamespaceResolver269.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver269.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider269.Add(typeFromHandle538, new XamlTypeResolver(xmlNamespaceResolver269, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider269.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(491, 180)));
			button122.SetValue(fontSizeProperty269, ((IExtendedTypeConverter)fontSizeConverter269).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider269));
			button122.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button122.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button122.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button122);
			button123.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button123.Clicked += proControlPage.DATA1_TextChanged;
			button123.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button123.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button123.SetValue(Grid.RowProperty, 3);
			button123.SetValue(Grid.ColumnProperty, 0);
			button123.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty270 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter270 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider270 = new XamlServiceProvider();
			Type typeFromHandle539 = typeof(IProvideValueTarget);
			object[] array270 = new object[0 + 6];
			array270[0] = button123;
			array270[1] = grid14;
			array270[2] = stackLayout6;
			array270[3] = scrollView;
			array270[4] = grid21;
			array270[5] = proControlPage;
			object service270;
			xamlServiceProvider270.Add(typeFromHandle539, service270 = new SimpleValueTargetProvider(array270, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider270.Add(typeof(IReferenceProvider), service270);
			Type typeFromHandle540 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver270 = new XmlNamespaceResolver();
			xmlNamespaceResolver270.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver270.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider270.Add(typeFromHandle540, new XamlTypeResolver(xmlNamespaceResolver270, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider270.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(492, 180)));
			button123.SetValue(fontSizeProperty270, ((IExtendedTypeConverter)fontSizeConverter270).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider270));
			button123.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button123.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button123.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button123);
			button124.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button124.Clicked += proControlPage.SEC0_TextChanged;
			button124.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button124.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button124.SetValue(Grid.RowProperty, 3);
			button124.SetValue(Grid.ColumnProperty, 1);
			button124.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty271 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter271 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider271 = new XamlServiceProvider();
			Type typeFromHandle541 = typeof(IProvideValueTarget);
			object[] array271 = new object[0 + 6];
			array271[0] = button124;
			array271[1] = grid14;
			array271[2] = stackLayout6;
			array271[3] = scrollView;
			array271[4] = grid21;
			array271[5] = proControlPage;
			object service271;
			xamlServiceProvider271.Add(typeFromHandle541, service271 = new SimpleValueTargetProvider(array271, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider271.Add(typeof(IReferenceProvider), service271);
			Type typeFromHandle542 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver271 = new XmlNamespaceResolver();
			xmlNamespaceResolver271.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver271.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider271.Add(typeFromHandle542, new XamlTypeResolver(xmlNamespaceResolver271, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider271.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(493, 179)));
			button124.SetValue(fontSizeProperty271, ((IExtendedTypeConverter)fontSizeConverter271).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider271));
			button124.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button124.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button124.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button124);
			button125.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button125.Clicked += proControlPage.SEC1_TextChanged;
			button125.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button125.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button125.SetValue(Grid.RowProperty, 4);
			button125.SetValue(Grid.ColumnProperty, 0);
			button125.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty272 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter272 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider272 = new XamlServiceProvider();
			Type typeFromHandle543 = typeof(IProvideValueTarget);
			object[] array272 = new object[0 + 6];
			array272[0] = button125;
			array272[1] = grid14;
			array272[2] = stackLayout6;
			array272[3] = scrollView;
			array272[4] = grid21;
			array272[5] = proControlPage;
			object service272;
			xamlServiceProvider272.Add(typeFromHandle543, service272 = new SimpleValueTargetProvider(array272, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider272.Add(typeof(IReferenceProvider), service272);
			Type typeFromHandle544 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver272 = new XmlNamespaceResolver();
			xmlNamespaceResolver272.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver272.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider272.Add(typeFromHandle544, new XamlTypeResolver(xmlNamespaceResolver272, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider272.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(494, 178)));
			button125.SetValue(fontSizeProperty272, ((IExtendedTypeConverter)fontSizeConverter272).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider272));
			button125.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button125.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button125.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button125);
			button126.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button126.Clicked += proControlPage.SEC2_TextChanged;
			button126.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button126.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button126.SetValue(Grid.RowProperty, 4);
			button126.SetValue(Grid.ColumnProperty, 1);
			button126.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty273 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter273 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider273 = new XamlServiceProvider();
			Type typeFromHandle545 = typeof(IProvideValueTarget);
			object[] array273 = new object[0 + 6];
			array273[0] = button126;
			array273[1] = grid14;
			array273[2] = stackLayout6;
			array273[3] = scrollView;
			array273[4] = grid21;
			array273[5] = proControlPage;
			object service273;
			xamlServiceProvider273.Add(typeFromHandle545, service273 = new SimpleValueTargetProvider(array273, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider273.Add(typeof(IReferenceProvider), service273);
			Type typeFromHandle546 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver273 = new XmlNamespaceResolver();
			xmlNamespaceResolver273.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver273.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider273.Add(typeFromHandle546, new XamlTypeResolver(xmlNamespaceResolver273, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider273.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(495, 178)));
			button126.SetValue(fontSizeProperty273, ((IExtendedTypeConverter)fontSizeConverter273).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider273));
			button126.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button126.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button126.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button126);
			button127.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button127.Clicked += proControlPage.SEC3_TextChanged;
			button127.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button127.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button127.SetValue(Grid.RowProperty, 5);
			button127.SetValue(Grid.ColumnProperty, 0);
			button127.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty274 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter274 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider274 = new XamlServiceProvider();
			Type typeFromHandle547 = typeof(IProvideValueTarget);
			object[] array274 = new object[0 + 6];
			array274[0] = button127;
			array274[1] = grid14;
			array274[2] = stackLayout6;
			array274[3] = scrollView;
			array274[4] = grid21;
			array274[5] = proControlPage;
			object service274;
			xamlServiceProvider274.Add(typeFromHandle547, service274 = new SimpleValueTargetProvider(array274, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider274.Add(typeof(IReferenceProvider), service274);
			Type typeFromHandle548 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver274 = new XmlNamespaceResolver();
			xmlNamespaceResolver274.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver274.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider274.Add(typeFromHandle548, new XamlTypeResolver(xmlNamespaceResolver274, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider274.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(496, 179)));
			button127.SetValue(fontSizeProperty274, ((IExtendedTypeConverter)fontSizeConverter274).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider274));
			button127.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button127.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button127.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button127);
			button128.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button128.Clicked += proControlPage.SEC4_TextChanged;
			button128.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button128.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button128.SetValue(Grid.RowProperty, 5);
			button128.SetValue(Grid.ColumnProperty, 1);
			button128.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty275 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter275 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider275 = new XamlServiceProvider();
			Type typeFromHandle549 = typeof(IProvideValueTarget);
			object[] array275 = new object[0 + 6];
			array275[0] = button128;
			array275[1] = grid14;
			array275[2] = stackLayout6;
			array275[3] = scrollView;
			array275[4] = grid21;
			array275[5] = proControlPage;
			object service275;
			xamlServiceProvider275.Add(typeFromHandle549, service275 = new SimpleValueTargetProvider(array275, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider275.Add(typeof(IReferenceProvider), service275);
			Type typeFromHandle550 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver275 = new XmlNamespaceResolver();
			xmlNamespaceResolver275.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver275.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider275.Add(typeFromHandle550, new XamlTypeResolver(xmlNamespaceResolver275, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider275.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(497, 178)));
			button128.SetValue(fontSizeProperty275, ((IExtendedTypeConverter)fontSizeConverter275).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider275));
			button128.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button128.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button128.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button128);
			button129.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button129.Clicked += proControlPage.SEC5_TextChanged;
			button129.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button129.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button129.SetValue(Grid.RowProperty, 6);
			button129.SetValue(Grid.ColumnProperty, 0);
			button129.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty276 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter276 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider276 = new XamlServiceProvider();
			Type typeFromHandle551 = typeof(IProvideValueTarget);
			object[] array276 = new object[0 + 6];
			array276[0] = button129;
			array276[1] = grid14;
			array276[2] = stackLayout6;
			array276[3] = scrollView;
			array276[4] = grid21;
			array276[5] = proControlPage;
			object service276;
			xamlServiceProvider276.Add(typeFromHandle551, service276 = new SimpleValueTargetProvider(array276, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider276.Add(typeof(IReferenceProvider), service276);
			Type typeFromHandle552 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver276 = new XmlNamespaceResolver();
			xmlNamespaceResolver276.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver276.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider276.Add(typeFromHandle552, new XamlTypeResolver(xmlNamespaceResolver276, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider276.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(498, 178)));
			button129.SetValue(fontSizeProperty276, ((IExtendedTypeConverter)fontSizeConverter276).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider276));
			button129.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button129.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button129.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button129);
			button130.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button130.Clicked += proControlPage.SEC6_TextChanged;
			button130.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button130.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button130.SetValue(Grid.RowProperty, 6);
			button130.SetValue(Grid.ColumnProperty, 1);
			button130.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty277 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter277 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider277 = new XamlServiceProvider();
			Type typeFromHandle553 = typeof(IProvideValueTarget);
			object[] array277 = new object[0 + 6];
			array277[0] = button130;
			array277[1] = grid14;
			array277[2] = stackLayout6;
			array277[3] = scrollView;
			array277[4] = grid21;
			array277[5] = proControlPage;
			object service277;
			xamlServiceProvider277.Add(typeFromHandle553, service277 = new SimpleValueTargetProvider(array277, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider277.Add(typeof(IReferenceProvider), service277);
			Type typeFromHandle554 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver277 = new XmlNamespaceResolver();
			xmlNamespaceResolver277.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver277.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider277.Add(typeFromHandle554, new XamlTypeResolver(xmlNamespaceResolver277, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider277.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(499, 178)));
			button130.SetValue(fontSizeProperty277, ((IExtendedTypeConverter)fontSizeConverter277).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider277));
			button130.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button130.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button130.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button130);
			button131.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button131.Clicked += proControlPage.SEC7_TextChanged;
			button131.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button131.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button131.SetValue(Grid.RowProperty, 7);
			button131.SetValue(Grid.ColumnProperty, 0);
			button131.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty278 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter278 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider278 = new XamlServiceProvider();
			Type typeFromHandle555 = typeof(IProvideValueTarget);
			object[] array278 = new object[0 + 6];
			array278[0] = button131;
			array278[1] = grid14;
			array278[2] = stackLayout6;
			array278[3] = scrollView;
			array278[4] = grid21;
			array278[5] = proControlPage;
			object service278;
			xamlServiceProvider278.Add(typeFromHandle555, service278 = new SimpleValueTargetProvider(array278, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider278.Add(typeof(IReferenceProvider), service278);
			Type typeFromHandle556 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver278 = new XmlNamespaceResolver();
			xmlNamespaceResolver278.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver278.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider278.Add(typeFromHandle556, new XamlTypeResolver(xmlNamespaceResolver278, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider278.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(500, 179)));
			button131.SetValue(fontSizeProperty278, ((IExtendedTypeConverter)fontSizeConverter278).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider278));
			button131.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button131.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button131.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button131);
			button132.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button132.Clicked += proControlPage.Ppos_TextChanged;
			button132.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button132.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button132.SetValue(Grid.RowProperty, 7);
			button132.SetValue(Grid.ColumnProperty, 1);
			button132.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty279 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter279 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider279 = new XamlServiceProvider();
			Type typeFromHandle557 = typeof(IProvideValueTarget);
			object[] array279 = new object[0 + 6];
			array279[0] = button132;
			array279[1] = grid14;
			array279[2] = stackLayout6;
			array279[3] = scrollView;
			array279[4] = grid21;
			array279[5] = proControlPage;
			object service279;
			xamlServiceProvider279.Add(typeFromHandle557, service279 = new SimpleValueTargetProvider(array279, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider279.Add(typeof(IReferenceProvider), service279);
			Type typeFromHandle558 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver279 = new XmlNamespaceResolver();
			xmlNamespaceResolver279.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver279.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider279.Add(typeFromHandle558, new XamlTypeResolver(xmlNamespaceResolver279, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider279.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(501, 177)));
			button132.SetValue(fontSizeProperty279, ((IExtendedTypeConverter)fontSizeConverter279).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider279));
			button132.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button132.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button132.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button132);
			button133.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button133.Clicked += proControlPage.BCPos_TextChanged;
			button133.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button133.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button133.SetValue(Grid.RowProperty, 8);
			button133.SetValue(Grid.ColumnProperty, 0);
			button133.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty280 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter280 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider280 = new XamlServiceProvider();
			Type typeFromHandle559 = typeof(IProvideValueTarget);
			object[] array280 = new object[0 + 6];
			array280[0] = button133;
			array280[1] = grid14;
			array280[2] = stackLayout6;
			array280[3] = scrollView;
			array280[4] = grid21;
			array280[5] = proControlPage;
			object service280;
			xamlServiceProvider280.Add(typeFromHandle559, service280 = new SimpleValueTargetProvider(array280, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider280.Add(typeof(IReferenceProvider), service280);
			Type typeFromHandle560 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver280 = new XmlNamespaceResolver();
			xmlNamespaceResolver280.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver280.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider280.Add(typeFromHandle560, new XamlTypeResolver(xmlNamespaceResolver280, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider280.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(502, 180)));
			button133.SetValue(fontSizeProperty280, ((IExtendedTypeConverter)fontSizeConverter280).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider280));
			button133.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button133.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button133.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button133);
			button134.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button134.Clicked += proControlPage.HBarPos_TextChanged;
			button134.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button134.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button134.SetValue(Grid.RowProperty, 8);
			button134.SetValue(Grid.ColumnProperty, 1);
			button134.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty281 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter281 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider281 = new XamlServiceProvider();
			Type typeFromHandle561 = typeof(IProvideValueTarget);
			object[] array281 = new object[0 + 6];
			array281[0] = button134;
			array281[1] = grid14;
			array281[2] = stackLayout6;
			array281[3] = scrollView;
			array281[4] = grid21;
			array281[5] = proControlPage;
			object service281;
			xamlServiceProvider281.Add(typeFromHandle561, service281 = new SimpleValueTargetProvider(array281, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider281.Add(typeof(IReferenceProvider), service281);
			Type typeFromHandle562 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver281 = new XmlNamespaceResolver();
			xmlNamespaceResolver281.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver281.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider281.Add(typeFromHandle562, new XamlTypeResolver(xmlNamespaceResolver281, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider281.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(503, 182)));
			button134.SetValue(fontSizeProperty281, ((IExtendedTypeConverter)fontSizeConverter281).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider281));
			button134.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button134.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button134.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button134);
			button135.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button135.Clicked += proControlPage.FDPos_TextChanged;
			button135.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button135.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button135.SetValue(Grid.RowProperty, 9);
			button135.SetValue(Grid.ColumnProperty, 0);
			button135.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty282 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter282 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider282 = new XamlServiceProvider();
			Type typeFromHandle563 = typeof(IProvideValueTarget);
			object[] array282 = new object[0 + 6];
			array282[0] = button135;
			array282[1] = grid14;
			array282[2] = stackLayout6;
			array282[3] = scrollView;
			array282[4] = grid21;
			array282[5] = proControlPage;
			object service282;
			xamlServiceProvider282.Add(typeFromHandle563, service282 = new SimpleValueTargetProvider(array282, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider282.Add(typeof(IReferenceProvider), service282);
			Type typeFromHandle564 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver282 = new XmlNamespaceResolver();
			xmlNamespaceResolver282.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver282.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider282.Add(typeFromHandle564, new XamlTypeResolver(xmlNamespaceResolver282, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider282.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(504, 179)));
			button135.SetValue(fontSizeProperty282, ((IExtendedTypeConverter)fontSizeConverter282).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider282));
			button135.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button135.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button135.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button135);
			button136.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button136.Clicked += proControlPage.OneLineCurrCoeff_TextChanged;
			button136.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button136.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button136.SetValue(Grid.RowProperty, 9);
			button136.SetValue(Grid.ColumnProperty, 1);
			button136.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty283 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter283 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider283 = new XamlServiceProvider();
			Type typeFromHandle565 = typeof(IProvideValueTarget);
			object[] array283 = new object[0 + 6];
			array283[0] = button136;
			array283[1] = grid14;
			array283[2] = stackLayout6;
			array283[3] = scrollView;
			array283[4] = grid21;
			array283[5] = proControlPage;
			object service283;
			xamlServiceProvider283.Add(typeFromHandle565, service283 = new SimpleValueTargetProvider(array283, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider283.Add(typeof(IReferenceProvider), service283);
			Type typeFromHandle566 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver283 = new XmlNamespaceResolver();
			xmlNamespaceResolver283.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver283.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider283.Add(typeFromHandle566, new XamlTypeResolver(xmlNamespaceResolver283, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider283.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(505, 191)));
			button136.SetValue(fontSizeProperty283, ((IExtendedTypeConverter)fontSizeConverter283).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider283));
			button136.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button136.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button136.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button136);
			button137.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button137.Clicked += proControlPage.Byte89Sel_SelectedIndexChanged;
			button137.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button137.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button137.SetValue(Grid.RowProperty, 10);
			button137.SetValue(Grid.ColumnProperty, 0);
			button137.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty284 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter284 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider284 = new XamlServiceProvider();
			Type typeFromHandle567 = typeof(IProvideValueTarget);
			object[] array284 = new object[0 + 6];
			array284[0] = button137;
			array284[1] = grid14;
			array284[2] = stackLayout6;
			array284[3] = scrollView;
			array284[4] = grid21;
			array284[5] = proControlPage;
			object service284;
			xamlServiceProvider284.Add(typeFromHandle567, service284 = new SimpleValueTargetProvider(array284, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider284.Add(typeof(IReferenceProvider), service284);
			Type typeFromHandle568 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver284 = new XmlNamespaceResolver();
			xmlNamespaceResolver284.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver284.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider284.Add(typeFromHandle568, new XamlTypeResolver(xmlNamespaceResolver284, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider284.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(506, 193)));
			button137.SetValue(fontSizeProperty284, ((IExtendedTypeConverter)fontSizeConverter284).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider284));
			button137.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button137.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button137.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button137);
			button138.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button138.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button138.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button138.Clicked += proControlPage.WheelWidth_TextChanged;
			button138.SetValue(Grid.RowProperty, 10);
			button138.SetValue(Grid.ColumnProperty, 1);
			button138.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty285 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter285 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider285 = new XamlServiceProvider();
			Type typeFromHandle569 = typeof(IProvideValueTarget);
			object[] array285 = new object[0 + 6];
			array285[0] = button138;
			array285[1] = grid14;
			array285[2] = stackLayout6;
			array285[3] = scrollView;
			array285[4] = grid21;
			array285[5] = proControlPage;
			object service285;
			xamlServiceProvider285.Add(typeFromHandle569, service285 = new SimpleValueTargetProvider(array285, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider285.Add(typeof(IReferenceProvider), service285);
			Type typeFromHandle570 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver285 = new XmlNamespaceResolver();
			xmlNamespaceResolver285.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver285.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider285.Add(typeFromHandle570, new XamlTypeResolver(xmlNamespaceResolver285, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider285.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(507, 185)));
			button138.SetValue(fontSizeProperty285, ((IExtendedTypeConverter)fontSizeConverter285).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider285));
			button138.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button138.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button138.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button138);
			button139.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button139.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button139.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button139.Clicked += proControlPage.WheelRatio_TextChanged;
			button139.SetValue(Grid.RowProperty, 11);
			button139.SetValue(Grid.ColumnProperty, 0);
			button139.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty286 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter286 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider286 = new XamlServiceProvider();
			Type typeFromHandle571 = typeof(IProvideValueTarget);
			object[] array286 = new object[0 + 6];
			array286[0] = button139;
			array286[1] = grid14;
			array286[2] = stackLayout6;
			array286[3] = scrollView;
			array286[4] = grid21;
			array286[5] = proControlPage;
			object service286;
			xamlServiceProvider286.Add(typeFromHandle571, service286 = new SimpleValueTargetProvider(array286, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider286.Add(typeof(IReferenceProvider), service286);
			Type typeFromHandle572 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver286 = new XmlNamespaceResolver();
			xmlNamespaceResolver286.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver286.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider286.Add(typeFromHandle572, new XamlTypeResolver(xmlNamespaceResolver286, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider286.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(508, 186)));
			button139.SetValue(fontSizeProperty286, ((IExtendedTypeConverter)fontSizeConverter286).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider286));
			button139.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button139.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button139.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button139);
			button140.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button140.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button140.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button140.Clicked += proControlPage.WheelRadius_TextChanged;
			button140.SetValue(Grid.RowProperty, 11);
			button140.SetValue(Grid.ColumnProperty, 1);
			button140.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty287 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter287 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider287 = new XamlServiceProvider();
			Type typeFromHandle573 = typeof(IProvideValueTarget);
			object[] array287 = new object[0 + 6];
			array287[0] = button140;
			array287[1] = grid14;
			array287[2] = stackLayout6;
			array287[3] = scrollView;
			array287[4] = grid21;
			array287[5] = proControlPage;
			object service287;
			xamlServiceProvider287.Add(typeFromHandle573, service287 = new SimpleValueTargetProvider(array287, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider287.Add(typeof(IReferenceProvider), service287);
			Type typeFromHandle574 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver287 = new XmlNamespaceResolver();
			xmlNamespaceResolver287.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver287.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider287.Add(typeFromHandle574, new XamlTypeResolver(xmlNamespaceResolver287, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider287.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(509, 188)));
			button140.SetValue(fontSizeProperty287, ((IExtendedTypeConverter)fontSizeConverter287).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider287));
			button140.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button140.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button140.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button140);
			button141.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button141.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button141.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button141.Clicked += proControlPage.RateRatio_TextChanged;
			button141.SetValue(Grid.RowProperty, 12);
			button141.SetValue(Grid.ColumnProperty, 0);
			button141.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty288 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter288 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider288 = new XamlServiceProvider();
			Type typeFromHandle575 = typeof(IProvideValueTarget);
			object[] array288 = new object[0 + 6];
			array288[0] = button141;
			array288[1] = grid14;
			array288[2] = stackLayout6;
			array288[3] = scrollView;
			array288[4] = grid21;
			array288[5] = proControlPage;
			object service288;
			xamlServiceProvider288.Add(typeFromHandle575, service288 = new SimpleValueTargetProvider(array288, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider288.Add(typeof(IReferenceProvider), service288);
			Type typeFromHandle576 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver288 = new XmlNamespaceResolver();
			xmlNamespaceResolver288.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver288.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider288.Add(typeFromHandle576, new XamlTypeResolver(xmlNamespaceResolver288, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider288.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(510, 186)));
			button141.SetValue(fontSizeProperty288, ((IExtendedTypeConverter)fontSizeConverter288).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider288));
			button141.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button141.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button141.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid14.Children.Add(button141);
			stackLayout6.Children.Add(grid14);
			button142.Clicked += proControlPage.RowText7_Clicked;
			button142.SetValue(Xamarin.Forms.Button.TextProperty, "±£ª§");
			button142.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty289 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter289 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider289 = new XamlServiceProvider();
			Type typeFromHandle577 = typeof(IProvideValueTarget);
			object[] array289 = new object[0 + 5];
			array289[0] = button142;
			array289[1] = stackLayout6;
			array289[2] = scrollView;
			array289[3] = grid21;
			array289[4] = proControlPage;
			object service289;
			xamlServiceProvider289.Add(typeFromHandle577, service289 = new SimpleValueTargetProvider(array289, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider289.Add(typeof(IReferenceProvider), service289);
			Type typeFromHandle578 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver289 = new XmlNamespaceResolver();
			xmlNamespaceResolver289.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver289.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider289.Add(typeFromHandle578, new XamlTypeResolver(xmlNamespaceResolver289, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider289.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(512, 110)));
			button142.SetValue(fontSizeProperty289, ((IExtendedTypeConverter)fontSizeConverter289).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider289));
			button142.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button142.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(button142);
			grid15.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition73.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid15.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition73);
			rowDefinition74.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid15.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition74);
			rowDefinition75.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid15.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition75);
			rowDefinition76.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid15.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition76);
			columnDefinition27.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid15.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition27);
			columnDefinition28.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid15.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition28);
			label148.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label148.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label148.SetValue(Label.TextProperty, "π˝—π±£ª§: 000.0V");
			label148.SetValue(Grid.RowProperty, 0);
			label148.SetValue(Grid.ColumnProperty, 0);
			label148.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty290 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter290 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider290 = new XamlServiceProvider();
			Type typeFromHandle579 = typeof(IProvideValueTarget);
			object[] array290 = new object[0 + 6];
			array290[0] = label148;
			array290[1] = grid15;
			array290[2] = stackLayout6;
			array290[3] = scrollView;
			array290[4] = grid21;
			array290[5] = proControlPage;
			object service290;
			xamlServiceProvider290.Add(typeFromHandle579, service290 = new SimpleValueTargetProvider(array290, Label.FontSizeProperty, nameScope));
			xamlServiceProvider290.Add(typeof(IReferenceProvider), service290);
			Type typeFromHandle580 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver290 = new XmlNamespaceResolver();
			xmlNamespaceResolver290.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver290.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider290.Add(typeFromHandle580, new XamlTypeResolver(xmlNamespaceResolver290, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider290.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(524, 174)));
			label148.SetValue(fontSizeProperty290, ((IExtendedTypeConverter)fontSizeConverter290).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider290));
			label148.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label148.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label148.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(label148);
			label149.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label149.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label149.SetValue(Label.TextProperty, "π˝—πª÷∏¥: 000.0V");
			label149.SetValue(Grid.RowProperty, 0);
			label149.SetValue(Grid.ColumnProperty, 1);
			label149.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty291 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter291 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider291 = new XamlServiceProvider();
			Type typeFromHandle581 = typeof(IProvideValueTarget);
			object[] array291 = new object[0 + 6];
			array291[0] = label149;
			array291[1] = grid15;
			array291[2] = stackLayout6;
			array291[3] = scrollView;
			array291[4] = grid21;
			array291[5] = proControlPage;
			object service291;
			xamlServiceProvider291.Add(typeFromHandle581, service291 = new SimpleValueTargetProvider(array291, Label.FontSizeProperty, nameScope));
			xamlServiceProvider291.Add(typeof(IReferenceProvider), service291);
			Type typeFromHandle582 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver291 = new XmlNamespaceResolver();
			xmlNamespaceResolver291.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver291.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider291.Add(typeFromHandle582, new XamlTypeResolver(xmlNamespaceResolver291, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider291.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(525, 174)));
			label149.SetValue(fontSizeProperty291, ((IExtendedTypeConverter)fontSizeConverter291).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider291));
			label149.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label149.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label149.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(label149);
			label150.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label150.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label150.SetValue(Label.TextProperty, "«∑—π±£ª§: 000.0V");
			label150.SetValue(Grid.RowProperty, 1);
			label150.SetValue(Grid.ColumnProperty, 0);
			label150.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty292 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter292 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider292 = new XamlServiceProvider();
			Type typeFromHandle583 = typeof(IProvideValueTarget);
			object[] array292 = new object[0 + 6];
			array292[0] = label150;
			array292[1] = grid15;
			array292[2] = stackLayout6;
			array292[3] = scrollView;
			array292[4] = grid21;
			array292[5] = proControlPage;
			object service292;
			xamlServiceProvider292.Add(typeFromHandle583, service292 = new SimpleValueTargetProvider(array292, Label.FontSizeProperty, nameScope));
			xamlServiceProvider292.Add(typeof(IReferenceProvider), service292);
			Type typeFromHandle584 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver292 = new XmlNamespaceResolver();
			xmlNamespaceResolver292.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver292.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider292.Add(typeFromHandle584, new XamlTypeResolver(xmlNamespaceResolver292, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider292.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(526, 173)));
			label150.SetValue(fontSizeProperty292, ((IExtendedTypeConverter)fontSizeConverter292).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider292));
			label150.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label150.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label150.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(label150);
			label151.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label151.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label151.SetValue(Label.TextProperty, "«∑—πª÷∏¥: 000.0V");
			label151.SetValue(Grid.RowProperty, 1);
			label151.SetValue(Grid.ColumnProperty, 1);
			label151.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty293 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter293 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider293 = new XamlServiceProvider();
			Type typeFromHandle585 = typeof(IProvideValueTarget);
			object[] array293 = new object[0 + 6];
			array293[0] = label151;
			array293[1] = grid15;
			array293[2] = stackLayout6;
			array293[3] = scrollView;
			array293[4] = grid21;
			array293[5] = proControlPage;
			object service293;
			xamlServiceProvider293.Add(typeFromHandle585, service293 = new SimpleValueTargetProvider(array293, Label.FontSizeProperty, nameScope));
			xamlServiceProvider293.Add(typeof(IReferenceProvider), service293);
			Type typeFromHandle586 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver293 = new XmlNamespaceResolver();
			xmlNamespaceResolver293.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver293.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider293.Add(typeFromHandle586, new XamlTypeResolver(xmlNamespaceResolver293, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider293.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(527, 173)));
			label151.SetValue(fontSizeProperty293, ((IExtendedTypeConverter)fontSizeConverter293).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider293));
			label151.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label151.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label151.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(label151);
			label152.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label152.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label152.SetValue(Label.TextProperty, "µÁª˙±£ª§: 0000C");
			label152.SetValue(Grid.RowProperty, 2);
			label152.SetValue(Grid.ColumnProperty, 0);
			label152.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty294 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter294 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider294 = new XamlServiceProvider();
			Type typeFromHandle587 = typeof(IProvideValueTarget);
			object[] array294 = new object[0 + 6];
			array294[0] = label152;
			array294[1] = grid15;
			array294[2] = stackLayout6;
			array294[3] = scrollView;
			array294[4] = grid21;
			array294[5] = proControlPage;
			object service294;
			xamlServiceProvider294.Add(typeFromHandle587, service294 = new SimpleValueTargetProvider(array294, Label.FontSizeProperty, nameScope));
			xamlServiceProvider294.Add(typeof(IReferenceProvider), service294);
			Type typeFromHandle588 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver294 = new XmlNamespaceResolver();
			xmlNamespaceResolver294.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver294.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider294.Add(typeFromHandle588, new XamlTypeResolver(xmlNamespaceResolver294, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider294.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(528, 175)));
			label152.SetValue(fontSizeProperty294, ((IExtendedTypeConverter)fontSizeConverter294).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider294));
			label152.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label152.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label152.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(label152);
			label153.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label153.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label153.SetValue(Label.TextProperty, "µÁª˙ª÷∏¥: 0000C");
			label153.SetValue(Grid.RowProperty, 2);
			label153.SetValue(Grid.ColumnProperty, 1);
			label153.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty295 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter295 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider295 = new XamlServiceProvider();
			Type typeFromHandle589 = typeof(IProvideValueTarget);
			object[] array295 = new object[0 + 6];
			array295[0] = label153;
			array295[1] = grid15;
			array295[2] = stackLayout6;
			array295[3] = scrollView;
			array295[4] = grid21;
			array295[5] = proControlPage;
			object service295;
			xamlServiceProvider295.Add(typeFromHandle589, service295 = new SimpleValueTargetProvider(array295, Label.FontSizeProperty, nameScope));
			xamlServiceProvider295.Add(typeof(IReferenceProvider), service295);
			Type typeFromHandle590 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver295 = new XmlNamespaceResolver();
			xmlNamespaceResolver295.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver295.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider295.Add(typeFromHandle590, new XamlTypeResolver(xmlNamespaceResolver295, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider295.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(529, 175)));
			label153.SetValue(fontSizeProperty295, ((IExtendedTypeConverter)fontSizeConverter295).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider295));
			label153.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label153.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label153.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(label153);
			label154.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label154.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label154.SetValue(Label.TextProperty, "µÁøÿ±£ª§: 0000C");
			label154.SetValue(Grid.RowProperty, 3);
			label154.SetValue(Grid.ColumnProperty, 0);
			label154.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty296 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter296 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider296 = new XamlServiceProvider();
			Type typeFromHandle591 = typeof(IProvideValueTarget);
			object[] array296 = new object[0 + 6];
			array296[0] = label154;
			array296[1] = grid15;
			array296[2] = stackLayout6;
			array296[3] = scrollView;
			array296[4] = grid21;
			array296[5] = proControlPage;
			object service296;
			xamlServiceProvider296.Add(typeFromHandle591, service296 = new SimpleValueTargetProvider(array296, Label.FontSizeProperty, nameScope));
			xamlServiceProvider296.Add(typeof(IReferenceProvider), service296);
			Type typeFromHandle592 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver296 = new XmlNamespaceResolver();
			xmlNamespaceResolver296.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver296.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider296.Add(typeFromHandle592, new XamlTypeResolver(xmlNamespaceResolver296, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider296.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(530, 173)));
			label154.SetValue(fontSizeProperty296, ((IExtendedTypeConverter)fontSizeConverter296).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider296));
			label154.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label154.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label154.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(label154);
			label155.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label155.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label155.SetValue(Label.TextProperty, "µÁøÿª÷∏¥: 0000C");
			label155.SetValue(Grid.RowProperty, 3);
			label155.SetValue(Grid.ColumnProperty, 1);
			label155.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty297 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter297 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider297 = new XamlServiceProvider();
			Type typeFromHandle593 = typeof(IProvideValueTarget);
			object[] array297 = new object[0 + 6];
			array297[0] = label155;
			array297[1] = grid15;
			array297[2] = stackLayout6;
			array297[3] = scrollView;
			array297[4] = grid21;
			array297[5] = proControlPage;
			object service297;
			xamlServiceProvider297.Add(typeFromHandle593, service297 = new SimpleValueTargetProvider(array297, Label.FontSizeProperty, nameScope));
			xamlServiceProvider297.Add(typeof(IReferenceProvider), service297);
			Type typeFromHandle594 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver297 = new XmlNamespaceResolver();
			xmlNamespaceResolver297.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver297.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider297.Add(typeFromHandle594, new XamlTypeResolver(xmlNamespaceResolver297, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider297.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(531, 173)));
			label155.SetValue(fontSizeProperty297, ((IExtendedTypeConverter)fontSizeConverter297).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider297));
			label155.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label155.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label155.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(label155);
			label156.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label156.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label156.SetValue(Label.TextProperty, "0µÁ¡øœµ ˝: 0000");
			label156.SetValue(Grid.RowProperty, 4);
			label156.SetValue(Grid.ColumnProperty, 0);
			label156.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty298 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter298 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider298 = new XamlServiceProvider();
			Type typeFromHandle595 = typeof(IProvideValueTarget);
			object[] array298 = new object[0 + 6];
			array298[0] = label156;
			array298[1] = grid15;
			array298[2] = stackLayout6;
			array298[3] = scrollView;
			array298[4] = grid21;
			array298[5] = proControlPage;
			object service298;
			xamlServiceProvider298.Add(typeFromHandle595, service298 = new SimpleValueTargetProvider(array298, Label.FontSizeProperty, nameScope));
			xamlServiceProvider298.Add(typeof(IReferenceProvider), service298);
			Type typeFromHandle596 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver298 = new XmlNamespaceResolver();
			xmlNamespaceResolver298.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver298.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider298.Add(typeFromHandle596, new XamlTypeResolver(xmlNamespaceResolver298, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider298.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(533, 173)));
			label156.SetValue(fontSizeProperty298, ((IExtendedTypeConverter)fontSizeConverter298).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider298));
			label156.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label156.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label156.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(label156);
			label157.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label157.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label157.SetValue(Label.TextProperty, "100µÁ¡øœµ ˝: 0000");
			label157.SetValue(Grid.RowProperty, 4);
			label157.SetValue(Grid.ColumnProperty, 1);
			label157.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty299 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter299 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider299 = new XamlServiceProvider();
			Type typeFromHandle597 = typeof(IProvideValueTarget);
			object[] array299 = new object[0 + 6];
			array299[0] = label157;
			array299[1] = grid15;
			array299[2] = stackLayout6;
			array299[3] = scrollView;
			array299[4] = grid21;
			array299[5] = proControlPage;
			object service299;
			xamlServiceProvider299.Add(typeFromHandle597, service299 = new SimpleValueTargetProvider(array299, Label.FontSizeProperty, nameScope));
			xamlServiceProvider299.Add(typeof(IReferenceProvider), service299);
			Type typeFromHandle598 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver299 = new XmlNamespaceResolver();
			xmlNamespaceResolver299.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver299.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider299.Add(typeFromHandle598, new XamlTypeResolver(xmlNamespaceResolver299, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider299.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(534, 178)));
			label157.SetValue(fontSizeProperty299, ((IExtendedTypeConverter)fontSizeConverter299).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider299));
			label157.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label157.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label157.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(label157);
			button143.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button143.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button143.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button143.Clicked += proControlPage.LowVolProtect_TextChanged;
			button143.SetValue(Grid.RowProperty, 1);
			button143.SetValue(Grid.ColumnProperty, 0);
			button143.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty300 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter300 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider300 = new XamlServiceProvider();
			Type typeFromHandle599 = typeof(IProvideValueTarget);
			object[] array300 = new object[0 + 6];
			array300[0] = button143;
			array300[1] = grid15;
			array300[2] = stackLayout6;
			array300[3] = scrollView;
			array300[4] = grid21;
			array300[5] = proControlPage;
			object service300;
			xamlServiceProvider300.Add(typeFromHandle599, service300 = new SimpleValueTargetProvider(array300, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider300.Add(typeof(IReferenceProvider), service300);
			Type typeFromHandle600 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver300 = new XmlNamespaceResolver();
			xmlNamespaceResolver300.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver300.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider300.Add(typeFromHandle600, new XamlTypeResolver(xmlNamespaceResolver300, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider300.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(536, 191)));
			button143.SetValue(fontSizeProperty300, ((IExtendedTypeConverter)fontSizeConverter300).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider300));
			button143.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button143.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button143.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(button143);
			button144.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button144.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button144.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button144.Clicked += proControlPage.MotorTempProtect_TextChanged;
			button144.SetValue(Grid.RowProperty, 2);
			button144.SetValue(Grid.ColumnProperty, 0);
			button144.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty301 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter301 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider301 = new XamlServiceProvider();
			Type typeFromHandle601 = typeof(IProvideValueTarget);
			object[] array301 = new object[0 + 6];
			array301[0] = button144;
			array301[1] = grid15;
			array301[2] = stackLayout6;
			array301[3] = scrollView;
			array301[4] = grid21;
			array301[5] = proControlPage;
			object service301;
			xamlServiceProvider301.Add(typeFromHandle601, service301 = new SimpleValueTargetProvider(array301, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider301.Add(typeof(IReferenceProvider), service301);
			Type typeFromHandle602 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver301 = new XmlNamespaceResolver();
			xmlNamespaceResolver301.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver301.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider301.Add(typeFromHandle602, new XamlTypeResolver(xmlNamespaceResolver301, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider301.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(537, 194)));
			button144.SetValue(fontSizeProperty301, ((IExtendedTypeConverter)fontSizeConverter301).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider301));
			button144.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button144.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button144.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(button144);
			button145.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button145.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button145.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button145.Clicked += proControlPage.MotorTempRestore_TextChanged;
			button145.SetValue(Grid.RowProperty, 2);
			button145.SetValue(Grid.ColumnProperty, 1);
			button145.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty302 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter302 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider302 = new XamlServiceProvider();
			Type typeFromHandle603 = typeof(IProvideValueTarget);
			object[] array302 = new object[0 + 6];
			array302[0] = button145;
			array302[1] = grid15;
			array302[2] = stackLayout6;
			array302[3] = scrollView;
			array302[4] = grid21;
			array302[5] = proControlPage;
			object service302;
			xamlServiceProvider302.Add(typeFromHandle603, service302 = new SimpleValueTargetProvider(array302, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider302.Add(typeof(IReferenceProvider), service302);
			Type typeFromHandle604 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver302 = new XmlNamespaceResolver();
			xmlNamespaceResolver302.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver302.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider302.Add(typeFromHandle604, new XamlTypeResolver(xmlNamespaceResolver302, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider302.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(538, 194)));
			button145.SetValue(fontSizeProperty302, ((IExtendedTypeConverter)fontSizeConverter302).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider302));
			button145.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button145.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button145.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(button145);
			button146.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button146.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button146.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button146.Clicked += proControlPage.ZeroBattCoeff_TextChanged;
			button146.SetValue(Grid.RowProperty, 4);
			button146.SetValue(Grid.ColumnProperty, 0);
			button146.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty303 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter303 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider303 = new XamlServiceProvider();
			Type typeFromHandle605 = typeof(IProvideValueTarget);
			object[] array303 = new object[0 + 6];
			array303[0] = button146;
			array303[1] = grid15;
			array303[2] = stackLayout6;
			array303[3] = scrollView;
			array303[4] = grid21;
			array303[5] = proControlPage;
			object service303;
			xamlServiceProvider303.Add(typeFromHandle605, service303 = new SimpleValueTargetProvider(array303, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider303.Add(typeof(IReferenceProvider), service303);
			Type typeFromHandle606 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver303 = new XmlNamespaceResolver();
			xmlNamespaceResolver303.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver303.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider303.Add(typeFromHandle606, new XamlTypeResolver(xmlNamespaceResolver303, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider303.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(540, 188)));
			button146.SetValue(fontSizeProperty303, ((IExtendedTypeConverter)fontSizeConverter303).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider303));
			button146.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button146.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button146.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(button146);
			button147.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button147.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button147.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button147.Clicked += proControlPage.FullBattCoeff_TextChanged;
			button147.SetValue(Grid.RowProperty, 4);
			button147.SetValue(Grid.ColumnProperty, 1);
			button147.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty304 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter304 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider304 = new XamlServiceProvider();
			Type typeFromHandle607 = typeof(IProvideValueTarget);
			object[] array304 = new object[0 + 6];
			array304[0] = button147;
			array304[1] = grid15;
			array304[2] = stackLayout6;
			array304[3] = scrollView;
			array304[4] = grid21;
			array304[5] = proControlPage;
			object service304;
			xamlServiceProvider304.Add(typeFromHandle607, service304 = new SimpleValueTargetProvider(array304, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider304.Add(typeof(IReferenceProvider), service304);
			Type typeFromHandle608 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver304 = new XmlNamespaceResolver();
			xmlNamespaceResolver304.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver304.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider304.Add(typeFromHandle608, new XamlTypeResolver(xmlNamespaceResolver304, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider304.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(541, 188)));
			button147.SetValue(fontSizeProperty304, ((IExtendedTypeConverter)fontSizeConverter304).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider304));
			button147.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button147.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button147.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid15.Children.Add(button147);
			stackLayout6.Children.Add(grid15);
			grid16.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition77.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid16.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition77);
			rowDefinition78.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid16.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition78);
			rowDefinition79.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid16.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition79);
			rowDefinition80.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid16.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition80);
			columnDefinition29.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid16.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition29);
			columnDefinition30.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid16.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition30);
			label158.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label158.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label158.SetValue(Label.TextProperty, "∂™: 000000");
			label158.SetValue(Grid.RowProperty, 0);
			label158.SetValue(Grid.ColumnProperty, 0);
			label158.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty305 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter305 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider305 = new XamlServiceProvider();
			Type typeFromHandle609 = typeof(IProvideValueTarget);
			object[] array305 = new object[0 + 6];
			array305[0] = label158;
			array305[1] = grid16;
			array305[2] = stackLayout6;
			array305[3] = scrollView;
			array305[4] = grid21;
			array305[5] = proControlPage;
			object service305;
			xamlServiceProvider305.Add(typeFromHandle609, service305 = new SimpleValueTargetProvider(array305, Label.FontSizeProperty, nameScope));
			xamlServiceProvider305.Add(typeof(IReferenceProvider), service305);
			Type typeFromHandle610 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver305 = new XmlNamespaceResolver();
			xmlNamespaceResolver305.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver305.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider305.Add(typeFromHandle610, new XamlTypeResolver(xmlNamespaceResolver305, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider305.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(554, 169)));
			label158.SetValue(fontSizeProperty305, ((IExtendedTypeConverter)fontSizeConverter305).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider305));
			label158.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label158.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label158.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(label158);
			label159.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label159.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label159.SetValue(Label.TextProperty, "”Õ√≈≤Â∞Œ: 000000");
			label159.SetValue(Grid.RowProperty, 0);
			label159.SetValue(Grid.ColumnProperty, 1);
			label159.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty306 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter306 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider306 = new XamlServiceProvider();
			Type typeFromHandle611 = typeof(IProvideValueTarget);
			object[] array306 = new object[0 + 6];
			array306[0] = label159;
			array306[1] = grid16;
			array306[2] = stackLayout6;
			array306[3] = scrollView;
			array306[4] = grid21;
			array306[5] = proControlPage;
			object service306;
			xamlServiceProvider306.Add(typeFromHandle611, service306 = new SimpleValueTargetProvider(array306, Label.FontSizeProperty, nameScope));
			xamlServiceProvider306.Add(typeof(IReferenceProvider), service306);
			Type typeFromHandle612 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver306 = new XmlNamespaceResolver();
			xmlNamespaceResolver306.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver306.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider306.Add(typeFromHandle612, new XamlTypeResolver(xmlNamespaceResolver306, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider306.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(555, 174)));
			label159.SetValue(fontSizeProperty306, ((IExtendedTypeConverter)fontSizeConverter306).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider306));
			label159.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label159.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label159.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(label159);
			label160.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label160.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label160.SetValue(Label.TextProperty, "ªÿPµ≤ ±º‰: 000000");
			label160.SetValue(Grid.RowProperty, 1);
			label160.SetValue(Grid.ColumnProperty, 0);
			label160.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty307 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter307 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider307 = new XamlServiceProvider();
			Type typeFromHandle613 = typeof(IProvideValueTarget);
			object[] array307 = new object[0 + 6];
			array307[0] = label160;
			array307[1] = grid16;
			array307[2] = stackLayout6;
			array307[3] = scrollView;
			array307[4] = grid21;
			array307[5] = proControlPage;
			object service307;
			xamlServiceProvider307.Add(typeFromHandle613, service307 = new SimpleValueTargetProvider(array307, Label.FontSizeProperty, nameScope));
			xamlServiceProvider307.Add(typeof(IReferenceProvider), service307);
			Type typeFromHandle614 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver307 = new XmlNamespaceResolver();
			xmlNamespaceResolver307.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver307.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider307.Add(typeFromHandle614, new XamlTypeResolver(xmlNamespaceResolver307, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider307.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(556, 172)));
			label160.SetValue(fontSizeProperty307, ((IExtendedTypeConverter)fontSizeConverter307).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider307));
			label160.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label160.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label160.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(label160);
			label161.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label161.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label161.SetValue(Label.TextProperty, "◊¯Õ∞—” ±: 000000");
			label161.SetValue(Grid.RowProperty, 1);
			label161.SetValue(Grid.ColumnProperty, 1);
			label161.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty308 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter308 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider308 = new XamlServiceProvider();
			Type typeFromHandle615 = typeof(IProvideValueTarget);
			object[] array308 = new object[0 + 6];
			array308[0] = label161;
			array308[1] = grid16;
			array308[2] = stackLayout6;
			array308[3] = scrollView;
			array308[4] = grid21;
			array308[5] = proControlPage;
			object service308;
			xamlServiceProvider308.Add(typeFromHandle615, service308 = new SimpleValueTargetProvider(array308, Label.FontSizeProperty, nameScope));
			xamlServiceProvider308.Add(typeof(IReferenceProvider), service308);
			Type typeFromHandle616 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver308 = new XmlNamespaceResolver();
			xmlNamespaceResolver308.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver308.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider308.Add(typeFromHandle616, new XamlTypeResolver(xmlNamespaceResolver308, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider308.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(557, 168)));
			label161.SetValue(fontSizeProperty308, ((IExtendedTypeConverter)fontSizeConverter308).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider308));
			label161.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label161.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label161.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(label161);
			label162.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label162.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label162.SetValue(Label.TextProperty, "∂¬◊™ ±º‰: 000000");
			label162.SetValue(Grid.RowProperty, 2);
			label162.SetValue(Grid.ColumnProperty, 0);
			label162.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty309 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter309 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider309 = new XamlServiceProvider();
			Type typeFromHandle617 = typeof(IProvideValueTarget);
			object[] array309 = new object[0 + 6];
			array309[0] = label162;
			array309[1] = grid16;
			array309[2] = stackLayout6;
			array309[3] = scrollView;
			array309[4] = grid21;
			array309[5] = proControlPage;
			object service309;
			xamlServiceProvider309.Add(typeFromHandle617, service309 = new SimpleValueTargetProvider(array309, Label.FontSizeProperty, nameScope));
			xamlServiceProvider309.Add(typeof(IReferenceProvider), service309);
			Type typeFromHandle618 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver309 = new XmlNamespaceResolver();
			xmlNamespaceResolver309.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver309.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider309.Add(typeFromHandle618, new XamlTypeResolver(xmlNamespaceResolver309, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider309.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(558, 170)));
			label162.SetValue(fontSizeProperty309, ((IExtendedTypeConverter)fontSizeConverter309).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider309));
			label162.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label162.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label162.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(label162);
			label163.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label163.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label163.SetValue(Label.TextProperty, "◊§≥µ ±º‰: 000000");
			label163.SetValue(Grid.RowProperty, 2);
			label163.SetValue(Grid.ColumnProperty, 1);
			label163.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty310 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter310 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider310 = new XamlServiceProvider();
			Type typeFromHandle619 = typeof(IProvideValueTarget);
			object[] array310 = new object[0 + 6];
			array310[0] = label163;
			array310[1] = grid16;
			array310[2] = stackLayout6;
			array310[3] = scrollView;
			array310[4] = grid21;
			array310[5] = proControlPage;
			object service310;
			xamlServiceProvider310.Add(typeFromHandle619, service310 = new SimpleValueTargetProvider(array310, Label.FontSizeProperty, nameScope));
			xamlServiceProvider310.Add(typeof(IReferenceProvider), service310);
			Type typeFromHandle620 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver310 = new XmlNamespaceResolver();
			xmlNamespaceResolver310.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver310.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider310.Add(typeFromHandle620, new XamlTypeResolver(xmlNamespaceResolver310, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider310.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(559, 169)));
			label163.SetValue(fontSizeProperty310, ((IExtendedTypeConverter)fontSizeConverter310).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider310));
			label163.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label163.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label163.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(label163);
			label164.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label164.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label164.SetValue(Label.TextProperty, "œﬁÀŸ∆ ºµÁ¡ø: 0000");
			label164.SetValue(Grid.RowProperty, 3);
			label164.SetValue(Grid.ColumnProperty, 0);
			label164.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty311 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter311 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider311 = new XamlServiceProvider();
			Type typeFromHandle621 = typeof(IProvideValueTarget);
			object[] array311 = new object[0 + 6];
			array311[0] = label164;
			array311[1] = grid16;
			array311[2] = stackLayout6;
			array311[3] = scrollView;
			array311[4] = grid21;
			array311[5] = proControlPage;
			object service311;
			xamlServiceProvider311.Add(typeFromHandle621, service311 = new SimpleValueTargetProvider(array311, Label.FontSizeProperty, nameScope));
			xamlServiceProvider311.Add(typeof(IReferenceProvider), service311);
			Type typeFromHandle622 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver311 = new XmlNamespaceResolver();
			xmlNamespaceResolver311.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver311.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider311.Add(typeFromHandle622, new XamlTypeResolver(xmlNamespaceResolver311, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider311.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(560, 169)));
			label164.SetValue(fontSizeProperty311, ((IExtendedTypeConverter)fontSizeConverter311).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider311));
			label164.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label164.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label164.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(label164);
			label165.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label165.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label165.SetValue(Label.TextProperty, "œﬁÀŸº´œﬁµÁ¡ø: 0000");
			label165.SetValue(Grid.RowProperty, 3);
			label165.SetValue(Grid.ColumnProperty, 1);
			label165.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty312 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter312 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider312 = new XamlServiceProvider();
			Type typeFromHandle623 = typeof(IProvideValueTarget);
			object[] array312 = new object[0 + 6];
			array312[0] = label165;
			array312[1] = grid16;
			array312[2] = stackLayout6;
			array312[3] = scrollView;
			array312[4] = grid21;
			array312[5] = proControlPage;
			object service312;
			xamlServiceProvider312.Add(typeFromHandle623, service312 = new SimpleValueTargetProvider(array312, Label.FontSizeProperty, nameScope));
			xamlServiceProvider312.Add(typeof(IReferenceProvider), service312);
			Type typeFromHandle624 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver312 = new XmlNamespaceResolver();
			xmlNamespaceResolver312.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver312.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider312.Add(typeFromHandle624, new XamlTypeResolver(xmlNamespaceResolver312, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider312.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(561, 170)));
			label165.SetValue(fontSizeProperty312, ((IExtendedTypeConverter)fontSizeConverter312).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider312));
			label165.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label165.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label165.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(label165);
			label166.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label166.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label166.SetValue(Label.TextProperty, "œﬁÀŸº´œﬁœµ ˝: 0000");
			label166.SetValue(Grid.RowProperty, 4);
			label166.SetValue(Grid.ColumnProperty, 0);
			label166.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty313 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter313 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider313 = new XamlServiceProvider();
			Type typeFromHandle625 = typeof(IProvideValueTarget);
			object[] array313 = new object[0 + 6];
			array313[0] = label166;
			array313[1] = grid16;
			array313[2] = stackLayout6;
			array313[3] = scrollView;
			array313[4] = grid21;
			array313[5] = proControlPage;
			object service313;
			xamlServiceProvider313.Add(typeFromHandle625, service313 = new SimpleValueTargetProvider(array313, Label.FontSizeProperty, nameScope));
			xamlServiceProvider313.Add(typeof(IReferenceProvider), service313);
			Type typeFromHandle626 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver313 = new XmlNamespaceResolver();
			xmlNamespaceResolver313.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver313.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider313.Add(typeFromHandle626, new XamlTypeResolver(xmlNamespaceResolver313, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider313.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(562, 176)));
			label166.SetValue(fontSizeProperty313, ((IExtendedTypeConverter)fontSizeConverter313).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider313));
			label166.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label166.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label166.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(label166);
			label167.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label167.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label167.SetValue(Label.TextProperty, "πÍÀŸœﬁ¡˜œµ ˝: 0000");
			label167.SetValue(Grid.RowProperty, 4);
			label167.SetValue(Grid.ColumnProperty, 1);
			label167.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty314 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter314 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider314 = new XamlServiceProvider();
			Type typeFromHandle627 = typeof(IProvideValueTarget);
			object[] array314 = new object[0 + 6];
			array314[0] = label167;
			array314[1] = grid16;
			array314[2] = stackLayout6;
			array314[3] = scrollView;
			array314[4] = grid21;
			array314[5] = proControlPage;
			object service314;
			xamlServiceProvider314.Add(typeFromHandle627, service314 = new SimpleValueTargetProvider(array314, Label.FontSizeProperty, nameScope));
			xamlServiceProvider314.Add(typeof(IReferenceProvider), service314);
			Type typeFromHandle628 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver314 = new XmlNamespaceResolver();
			xmlNamespaceResolver314.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver314.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider314.Add(typeFromHandle628, new XamlTypeResolver(xmlNamespaceResolver314, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider314.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(563, 170)));
			label167.SetValue(fontSizeProperty314, ((IExtendedTypeConverter)fontSizeConverter314).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider314));
			label167.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label167.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label167.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(label167);
			label168.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label168.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label168.SetValue(Label.TextProperty, "µÁ≥ÿ–≈∫≈: 0000");
			label168.SetValue(Grid.RowProperty, 5);
			label168.SetValue(Grid.ColumnProperty, 0);
			label168.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty315 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter315 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider315 = new XamlServiceProvider();
			Type typeFromHandle629 = typeof(IProvideValueTarget);
			object[] array315 = new object[0 + 6];
			array315[0] = label168;
			array315[1] = grid16;
			array315[2] = stackLayout6;
			array315[3] = scrollView;
			array315[4] = grid21;
			array315[5] = proControlPage;
			object service315;
			xamlServiceProvider315.Add(typeFromHandle629, service315 = new SimpleValueTargetProvider(array315, Label.FontSizeProperty, nameScope));
			xamlServiceProvider315.Add(typeof(IReferenceProvider), service315);
			Type typeFromHandle630 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver315 = new XmlNamespaceResolver();
			xmlNamespaceResolver315.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver315.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider315.Add(typeFromHandle630, new XamlTypeResolver(xmlNamespaceResolver315, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider315.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(564, 163)));
			label168.SetValue(fontSizeProperty315, ((IExtendedTypeConverter)fontSizeConverter315).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider315));
			label168.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label168.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label168.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(label168);
			label169.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label169.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label169.SetValue(Label.TextProperty, "«∑—π∑Ω Ω: 000000");
			label169.SetValue(Grid.RowProperty, 5);
			label169.SetValue(Grid.ColumnProperty, 1);
			label169.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty316 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter316 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider316 = new XamlServiceProvider();
			Type typeFromHandle631 = typeof(IProvideValueTarget);
			object[] array316 = new object[0 + 6];
			array316[0] = label169;
			array316[1] = grid16;
			array316[2] = stackLayout6;
			array316[3] = scrollView;
			array316[4] = grid21;
			array316[5] = proControlPage;
			object service316;
			xamlServiceProvider316.Add(typeFromHandle631, service316 = new SimpleValueTargetProvider(array316, Label.FontSizeProperty, nameScope));
			xamlServiceProvider316.Add(typeof(IReferenceProvider), service316);
			Type typeFromHandle632 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver316 = new XmlNamespaceResolver();
			xmlNamespaceResolver316.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver316.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider316.Add(typeFromHandle632, new XamlTypeResolver(xmlNamespaceResolver316, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider316.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(565, 172)));
			label169.SetValue(fontSizeProperty316, ((IExtendedTypeConverter)fontSizeConverter316).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider316));
			label169.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label169.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label169.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(label169);
			label170.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label170.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label170.SetValue(Label.TextProperty, "µÁ≥ÿƒ⁄◊Ë: 0000");
			label170.SetValue(Grid.RowProperty, 6);
			label170.SetValue(Grid.ColumnProperty, 0);
			label170.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty317 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter317 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider317 = new XamlServiceProvider();
			Type typeFromHandle633 = typeof(IProvideValueTarget);
			object[] array317 = new object[0 + 6];
			array317[0] = label170;
			array317[1] = grid16;
			array317[2] = stackLayout6;
			array317[3] = scrollView;
			array317[4] = grid21;
			array317[5] = proControlPage;
			object service317;
			xamlServiceProvider317.Add(typeFromHandle633, service317 = new SimpleValueTargetProvider(array317, Label.FontSizeProperty, nameScope));
			xamlServiceProvider317.Add(typeof(IReferenceProvider), service317);
			Type typeFromHandle634 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver317 = new XmlNamespaceResolver();
			xmlNamespaceResolver317.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver317.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider317.Add(typeFromHandle634, new XamlTypeResolver(xmlNamespaceResolver317, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider317.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(566, 164)));
			label170.SetValue(fontSizeProperty317, ((IExtendedTypeConverter)fontSizeConverter317).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider317));
			label170.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label170.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label170.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(label170);
			label171.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label171.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label171.SetValue(Label.TextProperty, "µÁ≥ÿƒ⁄◊Ë: 0000");
			label171.SetValue(Grid.RowProperty, 6);
			label171.SetValue(Grid.ColumnProperty, 1);
			label171.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty318 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter318 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider318 = new XamlServiceProvider();
			Type typeFromHandle635 = typeof(IProvideValueTarget);
			object[] array318 = new object[0 + 6];
			array318[0] = label171;
			array318[1] = grid16;
			array318[2] = stackLayout6;
			array318[3] = scrollView;
			array318[4] = grid21;
			array318[5] = proControlPage;
			object service318;
			xamlServiceProvider318.Add(typeFromHandle635, service318 = new SimpleValueTargetProvider(array318, Label.FontSizeProperty, nameScope));
			xamlServiceProvider318.Add(typeof(IReferenceProvider), service318);
			Type typeFromHandle636 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver318 = new XmlNamespaceResolver();
			xmlNamespaceResolver318.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver318.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider318.Add(typeFromHandle636, new XamlTypeResolver(xmlNamespaceResolver318, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider318.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(567, 168)));
			label171.SetValue(fontSizeProperty318, ((IExtendedTypeConverter)fontSizeConverter318).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider318));
			label171.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label171.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label171.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(label171);
			button148.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button148.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button148.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button148.Clicked += proControlPage.ThrottleLost_SelectedIndexChanged;
			button148.SetValue(Grid.RowProperty, 0);
			button148.SetValue(Grid.ColumnProperty, 0);
			button148.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty319 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter319 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider319 = new XamlServiceProvider();
			Type typeFromHandle637 = typeof(IProvideValueTarget);
			object[] array319 = new object[0 + 6];
			array319[0] = button148;
			array319[1] = grid16;
			array319[2] = stackLayout6;
			array319[3] = scrollView;
			array319[4] = grid21;
			array319[5] = proControlPage;
			object service319;
			xamlServiceProvider319.Add(typeFromHandle637, service319 = new SimpleValueTargetProvider(array319, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider319.Add(typeof(IReferenceProvider), service319);
			Type typeFromHandle638 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver319 = new XmlNamespaceResolver();
			xmlNamespaceResolver319.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver319.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider319.Add(typeFromHandle638, new XamlTypeResolver(xmlNamespaceResolver319, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider319.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(569, 220)));
			button148.SetValue(fontSizeProperty319, ((IExtendedTypeConverter)fontSizeConverter319).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider319));
			button148.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button148.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button148.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button148);
			button149.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button149.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button149.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button149.Clicked += proControlPage.ThrottleInsert_TextChanged;
			button149.SetValue(Grid.RowProperty, 0);
			button149.SetValue(Grid.ColumnProperty, 1);
			button149.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty320 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter320 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider320 = new XamlServiceProvider();
			Type typeFromHandle639 = typeof(IProvideValueTarget);
			object[] array320 = new object[0 + 6];
			array320[0] = button149;
			array320[1] = grid16;
			array320[2] = stackLayout6;
			array320[3] = scrollView;
			array320[4] = grid21;
			array320[5] = proControlPage;
			object service320;
			xamlServiceProvider320.Add(typeFromHandle639, service320 = new SimpleValueTargetProvider(array320, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider320.Add(typeof(IReferenceProvider), service320);
			Type typeFromHandle640 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver320 = new XmlNamespaceResolver();
			xmlNamespaceResolver320.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver320.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider320.Add(typeFromHandle640, new XamlTypeResolver(xmlNamespaceResolver320, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider320.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(570, 215)));
			button149.SetValue(fontSizeProperty320, ((IExtendedTypeConverter)fontSizeConverter320).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider320));
			button149.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button149.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button149.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button149);
			button150.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button150.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button150.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button150.Clicked += proControlPage.ReleasePTime_SelectedIndexChanged;
			button150.SetValue(Grid.RowProperty, 1);
			button150.SetValue(Grid.ColumnProperty, 0);
			button150.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty321 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter321 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider321 = new XamlServiceProvider();
			Type typeFromHandle641 = typeof(IProvideValueTarget);
			object[] array321 = new object[0 + 6];
			array321[0] = button150;
			array321[1] = grid16;
			array321[2] = stackLayout6;
			array321[3] = scrollView;
			array321[4] = grid21;
			array321[5] = proControlPage;
			object service321;
			xamlServiceProvider321.Add(typeFromHandle641, service321 = new SimpleValueTargetProvider(array321, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider321.Add(typeof(IReferenceProvider), service321);
			Type typeFromHandle642 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver321 = new XmlNamespaceResolver();
			xmlNamespaceResolver321.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver321.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider321.Add(typeFromHandle642, new XamlTypeResolver(xmlNamespaceResolver321, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider321.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(571, 221)));
			button150.SetValue(fontSizeProperty321, ((IExtendedTypeConverter)fontSizeConverter321).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider321));
			button150.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button150.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button150.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button150);
			button151.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button151.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button151.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button151.Clicked += proControlPage.SeatDelay_TextChanged;
			button151.SetValue(Grid.RowProperty, 1);
			button151.SetValue(Grid.ColumnProperty, 1);
			button151.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty322 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter322 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider322 = new XamlServiceProvider();
			Type typeFromHandle643 = typeof(IProvideValueTarget);
			object[] array322 = new object[0 + 6];
			array322[0] = button151;
			array322[1] = grid16;
			array322[2] = stackLayout6;
			array322[3] = scrollView;
			array322[4] = grid21;
			array322[5] = proControlPage;
			object service322;
			xamlServiceProvider322.Add(typeFromHandle643, service322 = new SimpleValueTargetProvider(array322, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider322.Add(typeof(IReferenceProvider), service322);
			Type typeFromHandle644 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver322 = new XmlNamespaceResolver();
			xmlNamespaceResolver322.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver322.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider322.Add(typeFromHandle644, new XamlTypeResolver(xmlNamespaceResolver322, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider322.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(572, 207)));
			button151.SetValue(fontSizeProperty322, ((IExtendedTypeConverter)fontSizeConverter322).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider322));
			button151.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button151.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button151.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button151);
			button152.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button152.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button152.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button152.Clicked += proControlPage.BlockTime_TextChanged;
			button152.SetValue(Grid.RowProperty, 2);
			button152.SetValue(Grid.ColumnProperty, 0);
			button152.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty323 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter323 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider323 = new XamlServiceProvider();
			Type typeFromHandle645 = typeof(IProvideValueTarget);
			object[] array323 = new object[0 + 6];
			array323[0] = button152;
			array323[1] = grid16;
			array323[2] = stackLayout6;
			array323[3] = scrollView;
			array323[4] = grid21;
			array323[5] = proControlPage;
			object service323;
			xamlServiceProvider323.Add(typeFromHandle645, service323 = new SimpleValueTargetProvider(array323, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider323.Add(typeof(IReferenceProvider), service323);
			Type typeFromHandle646 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver323 = new XmlNamespaceResolver();
			xmlNamespaceResolver323.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver323.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider323.Add(typeFromHandle646, new XamlTypeResolver(xmlNamespaceResolver323, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider323.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(573, 205)));
			button152.SetValue(fontSizeProperty323, ((IExtendedTypeConverter)fontSizeConverter323).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider323));
			button152.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button152.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button152.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button152);
			button153.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button153.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button153.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button153.Clicked += proControlPage.ParkTime_TextChanged;
			button153.SetValue(Grid.RowProperty, 2);
			button153.SetValue(Grid.ColumnProperty, 1);
			button153.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty324 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter324 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider324 = new XamlServiceProvider();
			Type typeFromHandle647 = typeof(IProvideValueTarget);
			object[] array324 = new object[0 + 6];
			array324[0] = button153;
			array324[1] = grid16;
			array324[2] = stackLayout6;
			array324[3] = scrollView;
			array324[4] = grid21;
			array324[5] = proControlPage;
			object service324;
			xamlServiceProvider324.Add(typeFromHandle647, service324 = new SimpleValueTargetProvider(array324, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider324.Add(typeof(IReferenceProvider), service324);
			Type typeFromHandle648 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver324 = new XmlNamespaceResolver();
			xmlNamespaceResolver324.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver324.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider324.Add(typeFromHandle648, new XamlTypeResolver(xmlNamespaceResolver324, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider324.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(574, 203)));
			button153.SetValue(fontSizeProperty324, ((IExtendedTypeConverter)fontSizeConverter324).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider324));
			button153.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button153.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button153.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button153);
			button154.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button154.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button154.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button154.Clicked += proControlPage.MiSpeedCap_TextChanged;
			button154.SetValue(Grid.RowProperty, 3);
			button154.SetValue(Grid.ColumnProperty, 0);
			button154.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty325 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter325 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider325 = new XamlServiceProvider();
			Type typeFromHandle649 = typeof(IProvideValueTarget);
			object[] array325 = new object[0 + 6];
			array325[0] = button154;
			array325[1] = grid16;
			array325[2] = stackLayout6;
			array325[3] = scrollView;
			array325[4] = grid21;
			array325[5] = proControlPage;
			object service325;
			xamlServiceProvider325.Add(typeFromHandle649, service325 = new SimpleValueTargetProvider(array325, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider325.Add(typeof(IReferenceProvider), service325);
			Type typeFromHandle650 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver325 = new XmlNamespaceResolver();
			xmlNamespaceResolver325.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver325.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider325.Add(typeFromHandle650, new XamlTypeResolver(xmlNamespaceResolver325, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider325.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(575, 205)));
			button154.SetValue(fontSizeProperty325, ((IExtendedTypeConverter)fontSizeConverter325).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider325));
			button154.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button154.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button154.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button154);
			button155.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button155.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button155.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button155.Clicked += proControlPage.LowCapLimit_TextChanged;
			button155.SetValue(Grid.RowProperty, 3);
			button155.SetValue(Grid.ColumnProperty, 1);
			button155.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty326 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter326 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider326 = new XamlServiceProvider();
			Type typeFromHandle651 = typeof(IProvideValueTarget);
			object[] array326 = new object[0 + 6];
			array326[0] = button155;
			array326[1] = grid16;
			array326[2] = stackLayout6;
			array326[3] = scrollView;
			array326[4] = grid21;
			array326[5] = proControlPage;
			object service326;
			xamlServiceProvider326.Add(typeFromHandle651, service326 = new SimpleValueTargetProvider(array326, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider326.Add(typeof(IReferenceProvider), service326);
			Type typeFromHandle652 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver326 = new XmlNamespaceResolver();
			xmlNamespaceResolver326.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver326.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider326.Add(typeFromHandle652, new XamlTypeResolver(xmlNamespaceResolver326, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider326.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(576, 209)));
			button155.SetValue(fontSizeProperty326, ((IExtendedTypeConverter)fontSizeConverter326).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider326));
			button155.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button155.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button155.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button155);
			button156.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button156.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button156.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button156.Clicked += proControlPage.MidSpeedCapCoeff_TextChanged;
			button156.SetValue(Grid.RowProperty, 4);
			button156.SetValue(Grid.ColumnProperty, 0);
			button156.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty327 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter327 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider327 = new XamlServiceProvider();
			Type typeFromHandle653 = typeof(IProvideValueTarget);
			object[] array327 = new object[0 + 6];
			array327[0] = button156;
			array327[1] = grid16;
			array327[2] = stackLayout6;
			array327[3] = scrollView;
			array327[4] = grid21;
			array327[5] = proControlPage;
			object service327;
			xamlServiceProvider327.Add(typeFromHandle653, service327 = new SimpleValueTargetProvider(array327, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider327.Add(typeof(IReferenceProvider), service327);
			Type typeFromHandle654 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver327 = new XmlNamespaceResolver();
			xmlNamespaceResolver327.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver327.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider327.Add(typeFromHandle654, new XamlTypeResolver(xmlNamespaceResolver327, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider327.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(577, 219)));
			button156.SetValue(fontSizeProperty327, ((IExtendedTypeConverter)fontSizeConverter327).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider327));
			button156.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button156.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button156.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button156);
			button157.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button157.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button157.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button157.Clicked += proControlPage.Stage1Curr_TextChanged;
			button157.SetValue(Grid.RowProperty, 4);
			button157.SetValue(Grid.ColumnProperty, 1);
			button157.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty328 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter328 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider328 = new XamlServiceProvider();
			Type typeFromHandle655 = typeof(IProvideValueTarget);
			object[] array328 = new object[0 + 6];
			array328[0] = button157;
			array328[1] = grid16;
			array328[2] = stackLayout6;
			array328[3] = scrollView;
			array328[4] = grid21;
			array328[5] = proControlPage;
			object service328;
			xamlServiceProvider328.Add(typeFromHandle655, service328 = new SimpleValueTargetProvider(array328, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider328.Add(typeof(IReferenceProvider), service328);
			Type typeFromHandle656 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver328 = new XmlNamespaceResolver();
			xmlNamespaceResolver328.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver328.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider328.Add(typeFromHandle656, new XamlTypeResolver(xmlNamespaceResolver328, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider328.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(578, 207)));
			button157.SetValue(fontSizeProperty328, ((IExtendedTypeConverter)fontSizeConverter328).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider328));
			button157.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button157.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button157.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button157);
			button158.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button158.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button158.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button158.Clicked += proControlPage.BatSel_SelectedIndexChanged;
			button158.SetValue(Grid.RowProperty, 5);
			button158.SetValue(Grid.ColumnProperty, 0);
			button158.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty329 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter329 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider329 = new XamlServiceProvider();
			Type typeFromHandle657 = typeof(IProvideValueTarget);
			object[] array329 = new object[0 + 6];
			array329[0] = button158;
			array329[1] = grid16;
			array329[2] = stackLayout6;
			array329[3] = scrollView;
			array329[4] = grid21;
			array329[5] = proControlPage;
			object service329;
			xamlServiceProvider329.Add(typeFromHandle657, service329 = new SimpleValueTargetProvider(array329, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider329.Add(typeof(IReferenceProvider), service329);
			Type typeFromHandle658 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver329 = new XmlNamespaceResolver();
			xmlNamespaceResolver329.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver329.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider329.Add(typeFromHandle658, new XamlTypeResolver(xmlNamespaceResolver329, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider329.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(579, 208)));
			button158.SetValue(fontSizeProperty329, ((IExtendedTypeConverter)fontSizeConverter329).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider329));
			button158.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button158.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button158.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button158);
			button159.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button159.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button159.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button159.Clicked += proControlPage.CurrLimitWay_SelectedIndexChanged;
			button159.SetValue(Grid.RowProperty, 5);
			button159.SetValue(Grid.ColumnProperty, 1);
			button159.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty330 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter330 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider330 = new XamlServiceProvider();
			Type typeFromHandle659 = typeof(IProvideValueTarget);
			object[] array330 = new object[0 + 6];
			array330[0] = button159;
			array330[1] = grid16;
			array330[2] = stackLayout6;
			array330[3] = scrollView;
			array330[4] = grid21;
			array330[5] = proControlPage;
			object service330;
			xamlServiceProvider330.Add(typeFromHandle659, service330 = new SimpleValueTargetProvider(array330, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider330.Add(typeof(IReferenceProvider), service330);
			Type typeFromHandle660 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver330 = new XmlNamespaceResolver();
			xmlNamespaceResolver330.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver330.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider330.Add(typeFromHandle660, new XamlTypeResolver(xmlNamespaceResolver330, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider330.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(580, 220)));
			button159.SetValue(fontSizeProperty330, ((IExtendedTypeConverter)fontSizeConverter330).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider330));
			button159.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button159.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button159.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button159);
			button160.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button160.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button160.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button160.Clicked += proControlPage.IntRes_TextChanged;
			button160.SetValue(Grid.RowProperty, 6);
			button160.SetValue(Grid.ColumnProperty, 0);
			button160.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty331 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter331 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider331 = new XamlServiceProvider();
			Type typeFromHandle661 = typeof(IProvideValueTarget);
			object[] array331 = new object[0 + 6];
			array331[0] = button160;
			array331[1] = grid16;
			array331[2] = stackLayout6;
			array331[3] = scrollView;
			array331[4] = grid21;
			array331[5] = proControlPage;
			object service331;
			xamlServiceProvider331.Add(typeFromHandle661, service331 = new SimpleValueTargetProvider(array331, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider331.Add(typeof(IReferenceProvider), service331);
			Type typeFromHandle662 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver331 = new XmlNamespaceResolver();
			xmlNamespaceResolver331.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver331.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider331.Add(typeFromHandle662, new XamlTypeResolver(xmlNamespaceResolver331, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider331.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(581, 199)));
			button160.SetValue(fontSizeProperty331, ((IExtendedTypeConverter)fontSizeConverter331).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider331));
			button160.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button160.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button160.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button160);
			button161.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button161.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button161.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button161.Clicked += proControlPage.TempCoeff2_TextChanged;
			button161.SetValue(Grid.RowProperty, 6);
			button161.SetValue(Grid.ColumnProperty, 1);
			button161.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty332 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter332 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider332 = new XamlServiceProvider();
			Type typeFromHandle663 = typeof(IProvideValueTarget);
			object[] array332 = new object[0 + 6];
			array332[0] = button161;
			array332[1] = grid16;
			array332[2] = stackLayout6;
			array332[3] = scrollView;
			array332[4] = grid21;
			array332[5] = proControlPage;
			object service332;
			xamlServiceProvider332.Add(typeFromHandle663, service332 = new SimpleValueTargetProvider(array332, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider332.Add(typeof(IReferenceProvider), service332);
			Type typeFromHandle664 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver332 = new XmlNamespaceResolver();
			xmlNamespaceResolver332.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver332.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider332.Add(typeFromHandle664, new XamlTypeResolver(xmlNamespaceResolver332, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider332.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(582, 207)));
			button161.SetValue(fontSizeProperty332, ((IExtendedTypeConverter)fontSizeConverter332).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider332));
			button161.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button161.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button161.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid16.Children.Add(button161);
			stackLayout6.Children.Add(grid16);
			button162.Clicked += proControlPage.RowText8_Clicked;
			button162.SetValue(Xamarin.Forms.Button.TextProperty, "PIDøÿ÷∆");
			button162.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty333 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter333 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider333 = new XamlServiceProvider();
			Type typeFromHandle665 = typeof(IProvideValueTarget);
			object[] array333 = new object[0 + 5];
			array333[0] = button162;
			array333[1] = stackLayout6;
			array333[2] = scrollView;
			array333[3] = grid21;
			array333[4] = proControlPage;
			object service333;
			xamlServiceProvider333.Add(typeFromHandle665, service333 = new SimpleValueTargetProvider(array333, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider333.Add(typeof(IReferenceProvider), service333);
			Type typeFromHandle666 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver333 = new XmlNamespaceResolver();
			xmlNamespaceResolver333.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver333.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider333.Add(typeFromHandle666, new XamlTypeResolver(xmlNamespaceResolver333, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider333.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(584, 112)));
			button162.SetValue(fontSizeProperty333, ((IExtendedTypeConverter)fontSizeConverter333).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider333));
			button162.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button162.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(button162);
			grid17.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition81.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid17.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition81);
			rowDefinition82.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid17.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition82);
			rowDefinition83.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid17.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition83);
			rowDefinition84.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid17.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition84);
			rowDefinition85.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid17.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition85);
			rowDefinition86.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid17.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition86);
			columnDefinition31.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid17.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition31);
			columnDefinition32.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid17.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition32);
			label172.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label172.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label172.SetValue(Label.TextProperty, "AN: 00");
			label172.SetValue(Grid.RowProperty, 0);
			label172.SetValue(Grid.ColumnProperty, 0);
			label172.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty334 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter334 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider334 = new XamlServiceProvider();
			Type typeFromHandle667 = typeof(IProvideValueTarget);
			object[] array334 = new object[0 + 6];
			array334[0] = label172;
			array334[1] = grid17;
			array334[2] = stackLayout6;
			array334[3] = scrollView;
			array334[4] = grid21;
			array334[5] = proControlPage;
			object service334;
			xamlServiceProvider334.Add(typeFromHandle667, service334 = new SimpleValueTargetProvider(array334, Label.FontSizeProperty, nameScope));
			xamlServiceProvider334.Add(typeof(IReferenceProvider), service334);
			Type typeFromHandle668 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver334 = new XmlNamespaceResolver();
			xmlNamespaceResolver334.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver334.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider334.Add(typeFromHandle668, new XamlTypeResolver(xmlNamespaceResolver334, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider334.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(598, 159)));
			label172.SetValue(fontSizeProperty334, ((IExtendedTypeConverter)fontSizeConverter334).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider334));
			label172.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label172.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label172.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(label172);
			label173.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label173.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label173.SetValue(Label.TextProperty, "LM: 00");
			label173.SetValue(Grid.RowProperty, 0);
			label173.SetValue(Grid.ColumnProperty, 1);
			label173.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty335 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter335 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider335 = new XamlServiceProvider();
			Type typeFromHandle669 = typeof(IProvideValueTarget);
			object[] array335 = new object[0 + 6];
			array335[0] = label173;
			array335[1] = grid17;
			array335[2] = stackLayout6;
			array335[3] = scrollView;
			array335[4] = grid21;
			array335[5] = proControlPage;
			object service335;
			xamlServiceProvider335.Add(typeFromHandle669, service335 = new SimpleValueTargetProvider(array335, Label.FontSizeProperty, nameScope));
			xamlServiceProvider335.Add(typeof(IReferenceProvider), service335);
			Type typeFromHandle670 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver335 = new XmlNamespaceResolver();
			xmlNamespaceResolver335.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver335.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider335.Add(typeFromHandle670, new XamlTypeResolver(xmlNamespaceResolver335, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider335.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(599, 158)));
			label173.SetValue(fontSizeProperty335, ((IExtendedTypeConverter)fontSizeConverter335).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider335));
			label173.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label173.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label173.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(label173);
			label174.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label174.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label174.SetValue(Label.TextProperty, "STARTKI: 00");
			label174.SetValue(Grid.RowProperty, 1);
			label174.SetValue(Grid.ColumnProperty, 0);
			label174.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty336 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter336 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider336 = new XamlServiceProvider();
			Type typeFromHandle671 = typeof(IProvideValueTarget);
			object[] array336 = new object[0 + 6];
			array336[0] = label174;
			array336[1] = grid17;
			array336[2] = stackLayout6;
			array336[3] = scrollView;
			array336[4] = grid21;
			array336[5] = proControlPage;
			object service336;
			xamlServiceProvider336.Add(typeFromHandle671, service336 = new SimpleValueTargetProvider(array336, Label.FontSizeProperty, nameScope));
			xamlServiceProvider336.Add(typeof(IReferenceProvider), service336);
			Type typeFromHandle672 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver336 = new XmlNamespaceResolver();
			xmlNamespaceResolver336.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver336.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider336.Add(typeFromHandle672, new XamlTypeResolver(xmlNamespaceResolver336, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider336.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(600, 167)));
			label174.SetValue(fontSizeProperty336, ((IExtendedTypeConverter)fontSizeConverter336).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider336));
			label174.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label174.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label174.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(label174);
			label175.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label175.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label175.SetValue(Label.TextProperty, "STARTKP: 000");
			label175.SetValue(Grid.RowProperty, 1);
			label175.SetValue(Grid.ColumnProperty, 1);
			label175.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty337 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter337 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider337 = new XamlServiceProvider();
			Type typeFromHandle673 = typeof(IProvideValueTarget);
			object[] array337 = new object[0 + 6];
			array337[0] = label175;
			array337[1] = grid17;
			array337[2] = stackLayout6;
			array337[3] = scrollView;
			array337[4] = grid21;
			array337[5] = proControlPage;
			object service337;
			xamlServiceProvider337.Add(typeFromHandle673, service337 = new SimpleValueTargetProvider(array337, Label.FontSizeProperty, nameScope));
			xamlServiceProvider337.Add(typeof(IReferenceProvider), service337);
			Type typeFromHandle674 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver337 = new XmlNamespaceResolver();
			xmlNamespaceResolver337.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver337.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider337.Add(typeFromHandle674, new XamlTypeResolver(xmlNamespaceResolver337, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider337.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(601, 170)));
			label175.SetValue(fontSizeProperty337, ((IExtendedTypeConverter)fontSizeConverter337).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider337));
			label175.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label175.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label175.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(label175);
			label176.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label176.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label176.SetValue(Label.TextProperty, "MIDKI: 00");
			label176.SetValue(Grid.RowProperty, 2);
			label176.SetValue(Grid.ColumnProperty, 0);
			label176.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty338 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter338 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider338 = new XamlServiceProvider();
			Type typeFromHandle675 = typeof(IProvideValueTarget);
			object[] array338 = new object[0 + 6];
			array338[0] = label176;
			array338[1] = grid17;
			array338[2] = stackLayout6;
			array338[3] = scrollView;
			array338[4] = grid21;
			array338[5] = proControlPage;
			object service338;
			xamlServiceProvider338.Add(typeFromHandle675, service338 = new SimpleValueTargetProvider(array338, Label.FontSizeProperty, nameScope));
			xamlServiceProvider338.Add(typeof(IReferenceProvider), service338);
			Type typeFromHandle676 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver338 = new XmlNamespaceResolver();
			xmlNamespaceResolver338.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver338.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider338.Add(typeFromHandle676, new XamlTypeResolver(xmlNamespaceResolver338, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider338.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(602, 163)));
			label176.SetValue(fontSizeProperty338, ((IExtendedTypeConverter)fontSizeConverter338).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider338));
			label176.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label176.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label176.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(label176);
			label177.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label177.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label177.SetValue(Label.TextProperty, "MIDKP: 000");
			label177.SetValue(Grid.RowProperty, 2);
			label177.SetValue(Grid.ColumnProperty, 1);
			label177.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty339 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter339 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider339 = new XamlServiceProvider();
			Type typeFromHandle677 = typeof(IProvideValueTarget);
			object[] array339 = new object[0 + 6];
			array339[0] = label177;
			array339[1] = grid17;
			array339[2] = stackLayout6;
			array339[3] = scrollView;
			array339[4] = grid21;
			array339[5] = proControlPage;
			object service339;
			xamlServiceProvider339.Add(typeFromHandle677, service339 = new SimpleValueTargetProvider(array339, Label.FontSizeProperty, nameScope));
			xamlServiceProvider339.Add(typeof(IReferenceProvider), service339);
			Type typeFromHandle678 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver339 = new XmlNamespaceResolver();
			xmlNamespaceResolver339.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver339.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider339.Add(typeFromHandle678, new XamlTypeResolver(xmlNamespaceResolver339, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider339.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(603, 165)));
			label177.SetValue(fontSizeProperty339, ((IExtendedTypeConverter)fontSizeConverter339).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider339));
			label177.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label177.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label177.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(label177);
			label178.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label178.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label178.SetValue(Label.TextProperty, "MAXKI: 000");
			label178.SetValue(Grid.RowProperty, 3);
			label178.SetValue(Grid.ColumnProperty, 0);
			label178.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty340 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter340 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider340 = new XamlServiceProvider();
			Type typeFromHandle679 = typeof(IProvideValueTarget);
			object[] array340 = new object[0 + 6];
			array340[0] = label178;
			array340[1] = grid17;
			array340[2] = stackLayout6;
			array340[3] = scrollView;
			array340[4] = grid21;
			array340[5] = proControlPage;
			object service340;
			xamlServiceProvider340.Add(typeFromHandle679, service340 = new SimpleValueTargetProvider(array340, Label.FontSizeProperty, nameScope));
			xamlServiceProvider340.Add(typeof(IReferenceProvider), service340);
			Type typeFromHandle680 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver340 = new XmlNamespaceResolver();
			xmlNamespaceResolver340.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver340.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider340.Add(typeFromHandle680, new XamlTypeResolver(xmlNamespaceResolver340, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider340.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(604, 163)));
			label178.SetValue(fontSizeProperty340, ((IExtendedTypeConverter)fontSizeConverter340).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider340));
			label178.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label178.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label178.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(label178);
			label179.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label179.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label179.SetValue(Label.TextProperty, "MAXKP: 000");
			label179.SetValue(Grid.RowProperty, 3);
			label179.SetValue(Grid.ColumnProperty, 1);
			label179.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty341 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter341 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider341 = new XamlServiceProvider();
			Type typeFromHandle681 = typeof(IProvideValueTarget);
			object[] array341 = new object[0 + 6];
			array341[0] = label179;
			array341[1] = grid17;
			array341[2] = stackLayout6;
			array341[3] = scrollView;
			array341[4] = grid21;
			array341[5] = proControlPage;
			object service341;
			xamlServiceProvider341.Add(typeFromHandle681, service341 = new SimpleValueTargetProvider(array341, Label.FontSizeProperty, nameScope));
			xamlServiceProvider341.Add(typeof(IReferenceProvider), service341);
			Type typeFromHandle682 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver341 = new XmlNamespaceResolver();
			xmlNamespaceResolver341.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver341.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider341.Add(typeFromHandle682, new XamlTypeResolver(xmlNamespaceResolver341, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider341.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(605, 164)));
			label179.SetValue(fontSizeProperty341, ((IExtendedTypeConverter)fontSizeConverter341).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider341));
			label179.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label179.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label179.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(label179);
			label180.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label180.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label180.SetValue(Label.TextProperty, "ÀŸ∂»KI: 000");
			label180.SetValue(Grid.RowProperty, 4);
			label180.SetValue(Grid.ColumnProperty, 0);
			label180.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty342 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter342 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider342 = new XamlServiceProvider();
			Type typeFromHandle683 = typeof(IProvideValueTarget);
			object[] array342 = new object[0 + 6];
			array342[0] = label180;
			array342[1] = grid17;
			array342[2] = stackLayout6;
			array342[3] = scrollView;
			array342[4] = grid21;
			array342[5] = proControlPage;
			object service342;
			xamlServiceProvider342.Add(typeFromHandle683, service342 = new SimpleValueTargetProvider(array342, Label.FontSizeProperty, nameScope));
			xamlServiceProvider342.Add(typeof(IReferenceProvider), service342);
			Type typeFromHandle684 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver342 = new XmlNamespaceResolver();
			xmlNamespaceResolver342.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver342.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider342.Add(typeFromHandle684, new XamlTypeResolver(xmlNamespaceResolver342, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider342.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(606, 164)));
			label180.SetValue(fontSizeProperty342, ((IExtendedTypeConverter)fontSizeConverter342).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider342));
			label180.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label180.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label180.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(label180);
			label181.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label181.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label181.SetValue(Label.TextProperty, "ÀŸ∂»œµ ˝KP: 000");
			label181.SetValue(Grid.RowProperty, 4);
			label181.SetValue(Grid.ColumnProperty, 1);
			label181.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty343 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter343 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider343 = new XamlServiceProvider();
			Type typeFromHandle685 = typeof(IProvideValueTarget);
			object[] array343 = new object[0 + 6];
			array343[0] = label181;
			array343[1] = grid17;
			array343[2] = stackLayout6;
			array343[3] = scrollView;
			array343[4] = grid21;
			array343[5] = proControlPage;
			object service343;
			xamlServiceProvider343.Add(typeFromHandle685, service343 = new SimpleValueTargetProvider(array343, Label.FontSizeProperty, nameScope));
			xamlServiceProvider343.Add(typeof(IReferenceProvider), service343);
			Type typeFromHandle686 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver343 = new XmlNamespaceResolver();
			xmlNamespaceResolver343.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver343.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider343.Add(typeFromHandle686, new XamlTypeResolver(xmlNamespaceResolver343, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider343.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(607, 166)));
			label181.SetValue(fontSizeProperty343, ((IExtendedTypeConverter)fontSizeConverter343).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider343));
			label181.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label181.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label181.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(label181);
			label182.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label182.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label182.SetValue(Label.TextProperty, "MOEø™πÿ: 1-Off");
			label182.SetValue(Grid.RowProperty, 5);
			label182.SetValue(Grid.ColumnProperty, 0);
			label182.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty344 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter344 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider344 = new XamlServiceProvider();
			Type typeFromHandle687 = typeof(IProvideValueTarget);
			object[] array344 = new object[0 + 6];
			array344[0] = label182;
			array344[1] = grid17;
			array344[2] = stackLayout6;
			array344[3] = scrollView;
			array344[4] = grid21;
			array344[5] = proControlPage;
			object service344;
			xamlServiceProvider344.Add(typeFromHandle687, service344 = new SimpleValueTargetProvider(array344, Label.FontSizeProperty, nameScope));
			xamlServiceProvider344.Add(typeof(IReferenceProvider), service344);
			Type typeFromHandle688 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver344 = new XmlNamespaceResolver();
			xmlNamespaceResolver344.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver344.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider344.Add(typeFromHandle688, new XamlTypeResolver(xmlNamespaceResolver344, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider344.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(608, 166)));
			label182.SetValue(fontSizeProperty344, ((IExtendedTypeConverter)fontSizeConverter344).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider344));
			label182.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label182.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label182.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(label182);
			label183.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label183.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label183.SetValue(Label.TextProperty, "«˙œﬂ≤…—˘:100ms");
			label183.SetValue(Grid.RowProperty, 5);
			label183.SetValue(Grid.ColumnProperty, 1);
			label183.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty345 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter345 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider345 = new XamlServiceProvider();
			Type typeFromHandle689 = typeof(IProvideValueTarget);
			object[] array345 = new object[0 + 6];
			array345[0] = label183;
			array345[1] = grid17;
			array345[2] = stackLayout6;
			array345[3] = scrollView;
			array345[4] = grid21;
			array345[5] = proControlPage;
			object service345;
			xamlServiceProvider345.Add(typeFromHandle689, service345 = new SimpleValueTargetProvider(array345, Label.FontSizeProperty, nameScope));
			xamlServiceProvider345.Add(typeof(IReferenceProvider), service345);
			Type typeFromHandle690 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver345 = new XmlNamespaceResolver();
			xmlNamespaceResolver345.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver345.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider345.Add(typeFromHandle690, new XamlTypeResolver(xmlNamespaceResolver345, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider345.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(609, 166)));
			label183.SetValue(fontSizeProperty345, ((IExtendedTypeConverter)fontSizeConverter345).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider345));
			label183.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label183.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label183.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(label183);
			button163.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button163.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button163.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button163.Clicked += proControlPage.StartKI_TextChanged;
			button163.SetValue(Grid.RowProperty, 1);
			button163.SetValue(Grid.ColumnProperty, 0);
			button163.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty346 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter346 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider346 = new XamlServiceProvider();
			Type typeFromHandle691 = typeof(IProvideValueTarget);
			object[] array346 = new object[0 + 6];
			array346[0] = button163;
			array346[1] = grid17;
			array346[2] = stackLayout6;
			array346[3] = scrollView;
			array346[4] = grid21;
			array346[5] = proControlPage;
			object service346;
			xamlServiceProvider346.Add(typeFromHandle691, service346 = new SimpleValueTargetProvider(array346, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider346.Add(typeof(IReferenceProvider), service346);
			Type typeFromHandle692 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver346 = new XmlNamespaceResolver();
			xmlNamespaceResolver346.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver346.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider346.Add(typeFromHandle692, new XamlTypeResolver(xmlNamespaceResolver346, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider346.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(611, 184)));
			button163.SetValue(fontSizeProperty346, ((IExtendedTypeConverter)fontSizeConverter346).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider346));
			button163.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button163.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button163.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(button163);
			button164.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button164.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button164.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button164.Clicked += proControlPage.MidKI_TextChanged;
			button164.SetValue(Grid.RowProperty, 2);
			button164.SetValue(Grid.ColumnProperty, 0);
			button164.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty347 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter347 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider347 = new XamlServiceProvider();
			Type typeFromHandle693 = typeof(IProvideValueTarget);
			object[] array347 = new object[0 + 6];
			array347[0] = button164;
			array347[1] = grid17;
			array347[2] = stackLayout6;
			array347[3] = scrollView;
			array347[4] = grid21;
			array347[5] = proControlPage;
			object service347;
			xamlServiceProvider347.Add(typeFromHandle693, service347 = new SimpleValueTargetProvider(array347, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider347.Add(typeof(IReferenceProvider), service347);
			Type typeFromHandle694 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver347 = new XmlNamespaceResolver();
			xmlNamespaceResolver347.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver347.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider347.Add(typeFromHandle694, new XamlTypeResolver(xmlNamespaceResolver347, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider347.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(612, 182)));
			button164.SetValue(fontSizeProperty347, ((IExtendedTypeConverter)fontSizeConverter347).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider347));
			button164.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button164.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button164.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(button164);
			button165.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button165.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button165.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button165.Clicked += proControlPage.MaxKI_TextChanged;
			button165.SetValue(Grid.RowProperty, 3);
			button165.SetValue(Grid.ColumnProperty, 0);
			button165.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty348 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter348 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider348 = new XamlServiceProvider();
			Type typeFromHandle695 = typeof(IProvideValueTarget);
			object[] array348 = new object[0 + 6];
			array348[0] = button165;
			array348[1] = grid17;
			array348[2] = stackLayout6;
			array348[3] = scrollView;
			array348[4] = grid21;
			array348[5] = proControlPage;
			object service348;
			xamlServiceProvider348.Add(typeFromHandle695, service348 = new SimpleValueTargetProvider(array348, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider348.Add(typeof(IReferenceProvider), service348);
			Type typeFromHandle696 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver348 = new XmlNamespaceResolver();
			xmlNamespaceResolver348.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver348.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider348.Add(typeFromHandle696, new XamlTypeResolver(xmlNamespaceResolver348, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider348.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(613, 182)));
			button165.SetValue(fontSizeProperty348, ((IExtendedTypeConverter)fontSizeConverter348).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider348));
			button165.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button165.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button165.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(button165);
			button166.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button166.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button166.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button166.Clicked += proControlPage.SpeedKI_TextChanged;
			button166.SetValue(Grid.RowProperty, 4);
			button166.SetValue(Grid.ColumnProperty, 0);
			button166.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty349 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter349 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider349 = new XamlServiceProvider();
			Type typeFromHandle697 = typeof(IProvideValueTarget);
			object[] array349 = new object[0 + 6];
			array349[0] = button166;
			array349[1] = grid17;
			array349[2] = stackLayout6;
			array349[3] = scrollView;
			array349[4] = grid21;
			array349[5] = proControlPage;
			object service349;
			xamlServiceProvider349.Add(typeFromHandle697, service349 = new SimpleValueTargetProvider(array349, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider349.Add(typeof(IReferenceProvider), service349);
			Type typeFromHandle698 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver349 = new XmlNamespaceResolver();
			xmlNamespaceResolver349.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver349.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider349.Add(typeFromHandle698, new XamlTypeResolver(xmlNamespaceResolver349, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider349.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(614, 184)));
			button166.SetValue(fontSizeProperty349, ((IExtendedTypeConverter)fontSizeConverter349).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider349));
			button166.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button166.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button166.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(button166);
			button167.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button167.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button167.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button167.Clicked += proControlPage.SpeedKP_TextChanged;
			button167.SetValue(Grid.RowProperty, 4);
			button167.SetValue(Grid.ColumnProperty, 1);
			button167.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty350 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter350 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider350 = new XamlServiceProvider();
			Type typeFromHandle699 = typeof(IProvideValueTarget);
			object[] array350 = new object[0 + 6];
			array350[0] = button167;
			array350[1] = grid17;
			array350[2] = stackLayout6;
			array350[3] = scrollView;
			array350[4] = grid21;
			array350[5] = proControlPage;
			object service350;
			xamlServiceProvider350.Add(typeFromHandle699, service350 = new SimpleValueTargetProvider(array350, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider350.Add(typeof(IReferenceProvider), service350);
			Type typeFromHandle700 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver350 = new XmlNamespaceResolver();
			xmlNamespaceResolver350.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver350.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider350.Add(typeFromHandle700, new XamlTypeResolver(xmlNamespaceResolver350, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider350.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(615, 186)));
			button167.SetValue(fontSizeProperty350, ((IExtendedTypeConverter)fontSizeConverter350).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider350));
			button167.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button167.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button167.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(button167);
			button168.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button168.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button168.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button168.Clicked += proControlPage.AN_TextChanged;
			button168.SetValue(Grid.RowProperty, 0);
			button168.SetValue(Grid.ColumnProperty, 0);
			button168.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty351 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter351 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider351 = new XamlServiceProvider();
			Type typeFromHandle701 = typeof(IProvideValueTarget);
			object[] array351 = new object[0 + 6];
			array351[0] = button168;
			array351[1] = grid17;
			array351[2] = stackLayout6;
			array351[3] = scrollView;
			array351[4] = grid21;
			array351[5] = proControlPage;
			object service351;
			xamlServiceProvider351.Add(typeFromHandle701, service351 = new SimpleValueTargetProvider(array351, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider351.Add(typeof(IReferenceProvider), service351);
			Type typeFromHandle702 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver351 = new XmlNamespaceResolver();
			xmlNamespaceResolver351.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver351.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider351.Add(typeFromHandle702, new XamlTypeResolver(xmlNamespaceResolver351, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider351.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(616, 178)));
			button168.SetValue(fontSizeProperty351, ((IExtendedTypeConverter)fontSizeConverter351).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider351));
			button168.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button168.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button168.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(button168);
			button169.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button169.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button169.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button169.Clicked += proControlPage.LM_TextChanged;
			button169.SetValue(Grid.RowProperty, 0);
			button169.SetValue(Grid.ColumnProperty, 1);
			button169.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty352 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter352 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider352 = new XamlServiceProvider();
			Type typeFromHandle703 = typeof(IProvideValueTarget);
			object[] array352 = new object[0 + 6];
			array352[0] = button169;
			array352[1] = grid17;
			array352[2] = stackLayout6;
			array352[3] = scrollView;
			array352[4] = grid21;
			array352[5] = proControlPage;
			object service352;
			xamlServiceProvider352.Add(typeFromHandle703, service352 = new SimpleValueTargetProvider(array352, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider352.Add(typeof(IReferenceProvider), service352);
			Type typeFromHandle704 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver352 = new XmlNamespaceResolver();
			xmlNamespaceResolver352.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver352.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider352.Add(typeFromHandle704, new XamlTypeResolver(xmlNamespaceResolver352, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider352.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(617, 178)));
			button169.SetValue(fontSizeProperty352, ((IExtendedTypeConverter)fontSizeConverter352).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider352));
			button169.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button169.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button169.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(button169);
			button170.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button170.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button170.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button170.Clicked += proControlPage.MOE_SelectedIndexChanged;
			button170.SetValue(Grid.RowProperty, 5);
			button170.SetValue(Grid.ColumnProperty, 0);
			button170.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty353 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter353 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider353 = new XamlServiceProvider();
			Type typeFromHandle705 = typeof(IProvideValueTarget);
			object[] array353 = new object[0 + 6];
			array353[0] = button170;
			array353[1] = grid17;
			array353[2] = stackLayout6;
			array353[3] = scrollView;
			array353[4] = grid21;
			array353[5] = proControlPage;
			object service353;
			xamlServiceProvider353.Add(typeFromHandle705, service353 = new SimpleValueTargetProvider(array353, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider353.Add(typeof(IReferenceProvider), service353);
			Type typeFromHandle706 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver353 = new XmlNamespaceResolver();
			xmlNamespaceResolver353.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver353.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider353.Add(typeFromHandle706, new XamlTypeResolver(xmlNamespaceResolver353, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider353.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(618, 200)));
			button170.SetValue(fontSizeProperty353, ((IExtendedTypeConverter)fontSizeConverter353).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider353));
			button170.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button170.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button170.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(button170);
			button171.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button171.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button171.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button171.Clicked += proControlPage.CurveTime_TextChanged;
			button171.SetValue(Grid.RowProperty, 5);
			button171.SetValue(Grid.ColumnProperty, 1);
			button171.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty354 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter354 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider354 = new XamlServiceProvider();
			Type typeFromHandle707 = typeof(IProvideValueTarget);
			object[] array354 = new object[0 + 6];
			array354[0] = button171;
			array354[1] = grid17;
			array354[2] = stackLayout6;
			array354[3] = scrollView;
			array354[4] = grid21;
			array354[5] = proControlPage;
			object service354;
			xamlServiceProvider354.Add(typeFromHandle707, service354 = new SimpleValueTargetProvider(array354, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider354.Add(typeof(IReferenceProvider), service354);
			Type typeFromHandle708 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver354 = new XmlNamespaceResolver();
			xmlNamespaceResolver354.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver354.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider354.Add(typeFromHandle708, new XamlTypeResolver(xmlNamespaceResolver354, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider354.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(619, 202)));
			button171.SetValue(fontSizeProperty354, ((IExtendedTypeConverter)fontSizeConverter354).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider354));
			button171.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button171.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button171.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid17.Children.Add(button171);
			stackLayout6.Children.Add(grid17);
			button172.Clicked += proControlPage.RowTextProduct_Clicked;
			button172.SetValue(Xamarin.Forms.Button.TextProperty, "≥ˆ≥ß");
			button172.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty355 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter355 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider355 = new XamlServiceProvider();
			Type typeFromHandle709 = typeof(IProvideValueTarget);
			object[] array355 = new object[0 + 5];
			array355[0] = button172;
			array355[1] = stackLayout6;
			array355[2] = scrollView;
			array355[3] = grid21;
			array355[4] = proControlPage;
			object service355;
			xamlServiceProvider355.Add(typeFromHandle709, service355 = new SimpleValueTargetProvider(array355, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider355.Add(typeof(IReferenceProvider), service355);
			Type typeFromHandle710 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver355 = new XmlNamespaceResolver();
			xmlNamespaceResolver355.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver355.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider355.Add(typeFromHandle710, new XamlTypeResolver(xmlNamespaceResolver355, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider355.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(621, 121)));
			button172.SetValue(fontSizeProperty355, ((IExtendedTypeConverter)fontSizeConverter355).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider355));
			button172.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button172.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(button172);
			grid18.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition87.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid18.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition87);
			rowDefinition88.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid18.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition88);
			rowDefinition89.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid18.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition89);
			rowDefinition90.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid18.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition90);
			rowDefinition91.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid18.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition91);
			rowDefinition92.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid18.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition92);
			rowDefinition93.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid18.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition93);
			rowDefinition94.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid18.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition94);
			columnDefinition33.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid18.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition33);
			columnDefinition34.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid18.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition34);
			label184.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label184.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label184.SetValue(Label.TextProperty, "∫ÛÕÀµÁ¡˜±»: 000000");
			label184.SetValue(Grid.RowProperty, 0);
			label184.SetValue(Grid.ColumnProperty, 0);
			label184.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty356 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter356 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider356 = new XamlServiceProvider();
			Type typeFromHandle711 = typeof(IProvideValueTarget);
			object[] array356 = new object[0 + 6];
			array356[0] = label184;
			array356[1] = grid18;
			array356[2] = stackLayout6;
			array356[3] = scrollView;
			array356[4] = grid21;
			array356[5] = proControlPage;
			object service356;
			xamlServiceProvider356.Add(typeFromHandle711, service356 = new SimpleValueTargetProvider(array356, Label.FontSizeProperty, nameScope));
			xamlServiceProvider356.Add(typeof(IReferenceProvider), service356);
			Type typeFromHandle712 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver356 = new XmlNamespaceResolver();
			xmlNamespaceResolver356.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver356.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider356.Add(typeFromHandle712, new XamlTypeResolver(xmlNamespaceResolver356, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider356.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(637, 172)));
			label184.SetValue(fontSizeProperty356, ((IExtendedTypeConverter)fontSizeConverter356).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider356));
			label184.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label184.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label184.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label184);
			label185.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label185.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label185.SetValue(Label.TextProperty, "’˝∑¥◊™±‰ÀŸ±»: 00");
			label185.SetValue(Grid.RowProperty, 0);
			label185.SetValue(Grid.ColumnProperty, 1);
			label185.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty357 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter357 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider357 = new XamlServiceProvider();
			Type typeFromHandle713 = typeof(IProvideValueTarget);
			object[] array357 = new object[0 + 6];
			array357[0] = label185;
			array357[1] = grid18;
			array357[2] = stackLayout6;
			array357[3] = scrollView;
			array357[4] = grid21;
			array357[5] = proControlPage;
			object service357;
			xamlServiceProvider357.Add(typeFromHandle713, service357 = new SimpleValueTargetProvider(array357, Label.FontSizeProperty, nameScope));
			xamlServiceProvider357.Add(typeof(IReferenceProvider), service357);
			Type typeFromHandle714 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver357 = new XmlNamespaceResolver();
			xmlNamespaceResolver357.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver357.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider357.Add(typeFromHandle714, new XamlTypeResolver(xmlNamespaceResolver357, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider357.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(638, 168)));
			label185.SetValue(fontSizeProperty357, ((IExtendedTypeConverter)fontSizeConverter357).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider357));
			label185.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label185.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label185.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label185);
			label186.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label186.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label186.SetValue(Label.TextProperty, "µÁ—π—°‘Òœµ ˝: 000000");
			label186.SetValue(Grid.RowProperty, 1);
			label186.SetValue(Grid.ColumnProperty, 0);
			label186.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty358 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter358 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider358 = new XamlServiceProvider();
			Type typeFromHandle715 = typeof(IProvideValueTarget);
			object[] array358 = new object[0 + 6];
			array358[0] = label186;
			array358[1] = grid18;
			array358[2] = stackLayout6;
			array358[3] = scrollView;
			array358[4] = grid21;
			array358[5] = proControlPage;
			object service358;
			xamlServiceProvider358.Add(typeFromHandle715, service358 = new SimpleValueTargetProvider(array358, Label.FontSizeProperty, nameScope));
			xamlServiceProvider358.Add(typeof(IReferenceProvider), service358);
			Type typeFromHandle716 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver358 = new XmlNamespaceResolver();
			xmlNamespaceResolver358.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver358.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider358.Add(typeFromHandle716, new XamlTypeResolver(xmlNamespaceResolver358, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider358.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(639, 176)));
			label186.SetValue(fontSizeProperty358, ((IExtendedTypeConverter)fontSizeConverter358).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider358));
			label186.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label186.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label186.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label186);
			label187.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label187.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label187.SetValue(Label.TextProperty, "»ı¥≈µÁ¡˜œµ ˝: 0000");
			label187.SetValue(Grid.RowProperty, 1);
			label187.SetValue(Grid.ColumnProperty, 1);
			label187.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty359 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter359 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider359 = new XamlServiceProvider();
			Type typeFromHandle717 = typeof(IProvideValueTarget);
			object[] array359 = new object[0 + 6];
			array359[0] = label187;
			array359[1] = grid18;
			array359[2] = stackLayout6;
			array359[3] = scrollView;
			array359[4] = grid21;
			array359[5] = proControlPage;
			object service359;
			xamlServiceProvider359.Add(typeFromHandle717, service359 = new SimpleValueTargetProvider(array359, Label.FontSizeProperty, nameScope));
			xamlServiceProvider359.Add(typeof(IReferenceProvider), service359);
			Type typeFromHandle718 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver359 = new XmlNamespaceResolver();
			xmlNamespaceResolver359.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver359.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider359.Add(typeFromHandle718, new XamlTypeResolver(xmlNamespaceResolver359, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider359.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(640, 167)));
			label187.SetValue(fontSizeProperty359, ((IExtendedTypeConverter)fontSizeConverter359).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider359));
			label187.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label187.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label187.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label187);
			label188.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label188.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label188.SetValue(Label.TextProperty, "∫ÛÕÀº”ÀŸœµ ˝: 000000");
			label188.SetValue(Grid.RowProperty, 2);
			label188.SetValue(Grid.ColumnProperty, 0);
			label188.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty360 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter360 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider360 = new XamlServiceProvider();
			Type typeFromHandle719 = typeof(IProvideValueTarget);
			object[] array360 = new object[0 + 6];
			array360[0] = label188;
			array360[1] = grid18;
			array360[2] = stackLayout6;
			array360[3] = scrollView;
			array360[4] = grid21;
			array360[5] = proControlPage;
			object service360;
			xamlServiceProvider360.Add(typeFromHandle719, service360 = new SimpleValueTargetProvider(array360, Label.FontSizeProperty, nameScope));
			xamlServiceProvider360.Add(typeof(IReferenceProvider), service360);
			Type typeFromHandle720 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver360 = new XmlNamespaceResolver();
			xmlNamespaceResolver360.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver360.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider360.Add(typeFromHandle720, new XamlTypeResolver(xmlNamespaceResolver360, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider360.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(641, 168)));
			label188.SetValue(fontSizeProperty360, ((IExtendedTypeConverter)fontSizeConverter360).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider360));
			label188.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label188.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label188.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label188);
			label189.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label189.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label189.SetValue(Label.TextProperty, "∏ÊæØ—” ±:500ms");
			label189.SetValue(Grid.RowProperty, 2);
			label189.SetValue(Grid.ColumnProperty, 1);
			label189.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty361 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter361 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider361 = new XamlServiceProvider();
			Type typeFromHandle721 = typeof(IProvideValueTarget);
			object[] array361 = new object[0 + 6];
			array361[0] = label189;
			array361[1] = grid18;
			array361[2] = stackLayout6;
			array361[3] = scrollView;
			array361[4] = grid21;
			array361[5] = proControlPage;
			object service361;
			xamlServiceProvider361.Add(typeFromHandle721, service361 = new SimpleValueTargetProvider(array361, Label.FontSizeProperty, nameScope));
			xamlServiceProvider361.Add(typeof(IReferenceProvider), service361);
			Type typeFromHandle722 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver361 = new XmlNamespaceResolver();
			xmlNamespaceResolver361.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver361.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider361.Add(typeFromHandle722, new XamlTypeResolver(xmlNamespaceResolver361, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider361.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(642, 167)));
			label189.SetValue(fontSizeProperty361, ((IExtendedTypeConverter)fontSizeConverter361).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider361));
			label189.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label189.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label189.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label189);
			label190.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label190.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label190.SetValue(Label.TextProperty, "ºÃµÁ∆˜—” ±: 000000");
			label190.SetValue(Grid.RowProperty, 3);
			label190.SetValue(Grid.ColumnProperty, 0);
			label190.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty362 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter362 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider362 = new XamlServiceProvider();
			Type typeFromHandle723 = typeof(IProvideValueTarget);
			object[] array362 = new object[0 + 6];
			array362[0] = label190;
			array362[1] = grid18;
			array362[2] = stackLayout6;
			array362[3] = scrollView;
			array362[4] = grid21;
			array362[5] = proControlPage;
			object service362;
			xamlServiceProvider362.Add(typeFromHandle723, service362 = new SimpleValueTargetProvider(array362, Label.FontSizeProperty, nameScope));
			xamlServiceProvider362.Add(typeof(IReferenceProvider), service362);
			Type typeFromHandle724 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver362 = new XmlNamespaceResolver();
			xmlNamespaceResolver362.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver362.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider362.Add(typeFromHandle724, new XamlTypeResolver(xmlNamespaceResolver362, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider362.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(643, 172)));
			label190.SetValue(fontSizeProperty362, ((IExtendedTypeConverter)fontSizeConverter362).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider362));
			label190.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label190.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label190.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label190);
			label191.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label191.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label191.SetValue(Label.TextProperty, "ºÃµÁ∆˜ ‰≥ˆ: 000000");
			label191.SetValue(Grid.RowProperty, 3);
			label191.SetValue(Grid.ColumnProperty, 1);
			label191.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty363 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter363 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider363 = new XamlServiceProvider();
			Type typeFromHandle725 = typeof(IProvideValueTarget);
			object[] array363 = new object[0 + 6];
			array363[0] = label191;
			array363[1] = grid18;
			array363[2] = stackLayout6;
			array363[3] = scrollView;
			array363[4] = grid21;
			array363[5] = proControlPage;
			object service363;
			xamlServiceProvider363.Add(typeFromHandle725, service363 = new SimpleValueTargetProvider(array363, Label.FontSizeProperty, nameScope));
			xamlServiceProvider363.Add(typeof(IReferenceProvider), service363);
			Type typeFromHandle726 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver363 = new XmlNamespaceResolver();
			xmlNamespaceResolver363.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver363.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider363.Add(typeFromHandle726, new XamlTypeResolver(xmlNamespaceResolver363, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider363.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(644, 169)));
			label191.SetValue(fontSizeProperty363, ((IExtendedTypeConverter)fontSizeConverter363).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider363));
			label191.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label191.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label191.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label191);
			label192.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label192.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label192.SetValue(Label.TextProperty, ": 000000");
			label192.SetValue(Grid.RowProperty, 4);
			label192.SetValue(Grid.ColumnProperty, 0);
			label192.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty364 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter364 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider364 = new XamlServiceProvider();
			Type typeFromHandle727 = typeof(IProvideValueTarget);
			object[] array364 = new object[0 + 6];
			array364[0] = label192;
			array364[1] = grid18;
			array364[2] = stackLayout6;
			array364[3] = scrollView;
			array364[4] = grid21;
			array364[5] = proControlPage;
			object service364;
			xamlServiceProvider364.Add(typeFromHandle727, service364 = new SimpleValueTargetProvider(array364, Label.FontSizeProperty, nameScope));
			xamlServiceProvider364.Add(typeof(IReferenceProvider), service364);
			Type typeFromHandle728 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver364 = new XmlNamespaceResolver();
			xmlNamespaceResolver364.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver364.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider364.Add(typeFromHandle728, new XamlTypeResolver(xmlNamespaceResolver364, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider364.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(645, 165)));
			label192.SetValue(fontSizeProperty364, ((IExtendedTypeConverter)fontSizeConverter364).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider364));
			label192.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label192.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label192.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label192);
			label193.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label193.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label193.SetValue(Label.TextProperty, "ºÃµÁ∆˜—” ±: 000000");
			label193.SetValue(Grid.RowProperty, 4);
			label193.SetValue(Grid.ColumnProperty, 1);
			label193.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty365 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter365 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider365 = new XamlServiceProvider();
			Type typeFromHandle729 = typeof(IProvideValueTarget);
			object[] array365 = new object[0 + 6];
			array365[0] = label193;
			array365[1] = grid18;
			array365[2] = stackLayout6;
			array365[3] = scrollView;
			array365[4] = grid21;
			array365[5] = proControlPage;
			object service365;
			xamlServiceProvider365.Add(typeFromHandle729, service365 = new SimpleValueTargetProvider(array365, Label.FontSizeProperty, nameScope));
			xamlServiceProvider365.Add(typeof(IReferenceProvider), service365);
			Type typeFromHandle730 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver365 = new XmlNamespaceResolver();
			xmlNamespaceResolver365.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver365.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider365.Add(typeFromHandle730, new XamlTypeResolver(xmlNamespaceResolver365, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider365.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(646, 172)));
			label193.SetValue(fontSizeProperty365, ((IExtendedTypeConverter)fontSizeConverter365).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider365));
			label193.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label193.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label193.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label193);
			label194.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label194.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label194.SetValue(Label.TextProperty, "ºÃµÁ∆˜—” ±: 000000");
			label194.SetValue(Grid.RowProperty, 5);
			label194.SetValue(Grid.ColumnProperty, 0);
			label194.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty366 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter366 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider366 = new XamlServiceProvider();
			Type typeFromHandle731 = typeof(IProvideValueTarget);
			object[] array366 = new object[0 + 6];
			array366[0] = label194;
			array366[1] = grid18;
			array366[2] = stackLayout6;
			array366[3] = scrollView;
			array366[4] = grid21;
			array366[5] = proControlPage;
			object service366;
			xamlServiceProvider366.Add(typeFromHandle731, service366 = new SimpleValueTargetProvider(array366, Label.FontSizeProperty, nameScope));
			xamlServiceProvider366.Add(typeof(IReferenceProvider), service366);
			Type typeFromHandle732 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver366 = new XmlNamespaceResolver();
			xmlNamespaceResolver366.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver366.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider366.Add(typeFromHandle732, new XamlTypeResolver(xmlNamespaceResolver366, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider366.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(647, 169)));
			label194.SetValue(fontSizeProperty366, ((IExtendedTypeConverter)fontSizeConverter366).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider366));
			label194.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label194.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label194.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label194);
			label195.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label195.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label195.SetValue(Label.TextProperty, "ºÃµÁ∆˜—” ±: 000000");
			label195.SetValue(Grid.RowProperty, 5);
			label195.SetValue(Grid.ColumnProperty, 1);
			label195.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty367 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter367 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider367 = new XamlServiceProvider();
			Type typeFromHandle733 = typeof(IProvideValueTarget);
			object[] array367 = new object[0 + 6];
			array367[0] = label195;
			array367[1] = grid18;
			array367[2] = stackLayout6;
			array367[3] = scrollView;
			array367[4] = grid21;
			array367[5] = proControlPage;
			object service367;
			xamlServiceProvider367.Add(typeFromHandle733, service367 = new SimpleValueTargetProvider(array367, Label.FontSizeProperty, nameScope));
			xamlServiceProvider367.Add(typeof(IReferenceProvider), service367);
			Type typeFromHandle734 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver367 = new XmlNamespaceResolver();
			xmlNamespaceResolver367.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver367.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider367.Add(typeFromHandle734, new XamlTypeResolver(xmlNamespaceResolver367, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider367.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(648, 171)));
			label195.SetValue(fontSizeProperty367, ((IExtendedTypeConverter)fontSizeConverter367).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider367));
			label195.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label195.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label195.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label195);
			label196.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label196.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label196.SetValue(Label.TextProperty, "ºÃµÁ∆˜—” ±: 000000");
			label196.SetValue(Grid.RowProperty, 6);
			label196.SetValue(Grid.ColumnProperty, 0);
			label196.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty368 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter368 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider368 = new XamlServiceProvider();
			Type typeFromHandle735 = typeof(IProvideValueTarget);
			object[] array368 = new object[0 + 6];
			array368[0] = label196;
			array368[1] = grid18;
			array368[2] = stackLayout6;
			array368[3] = scrollView;
			array368[4] = grid21;
			array368[5] = proControlPage;
			object service368;
			xamlServiceProvider368.Add(typeFromHandle735, service368 = new SimpleValueTargetProvider(array368, Label.FontSizeProperty, nameScope));
			xamlServiceProvider368.Add(typeof(IReferenceProvider), service368);
			Type typeFromHandle736 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver368 = new XmlNamespaceResolver();
			xmlNamespaceResolver368.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver368.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider368.Add(typeFromHandle736, new XamlTypeResolver(xmlNamespaceResolver368, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider368.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(649, 174)));
			label196.SetValue(fontSizeProperty368, ((IExtendedTypeConverter)fontSizeConverter368).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider368));
			label196.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label196.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label196.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label196);
			label197.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label197.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label197.SetValue(Label.TextProperty, "ºÃµÁ∆˜—” ±: 000000");
			label197.SetValue(Grid.RowProperty, 6);
			label197.SetValue(Grid.ColumnProperty, 1);
			label197.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty369 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter369 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider369 = new XamlServiceProvider();
			Type typeFromHandle737 = typeof(IProvideValueTarget);
			object[] array369 = new object[0 + 6];
			array369[0] = label197;
			array369[1] = grid18;
			array369[2] = stackLayout6;
			array369[3] = scrollView;
			array369[4] = grid21;
			array369[5] = proControlPage;
			object service369;
			xamlServiceProvider369.Add(typeFromHandle737, service369 = new SimpleValueTargetProvider(array369, Label.FontSizeProperty, nameScope));
			xamlServiceProvider369.Add(typeof(IReferenceProvider), service369);
			Type typeFromHandle738 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver369 = new XmlNamespaceResolver();
			xmlNamespaceResolver369.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver369.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider369.Add(typeFromHandle738, new XamlTypeResolver(xmlNamespaceResolver369, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider369.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(650, 172)));
			label197.SetValue(fontSizeProperty369, ((IExtendedTypeConverter)fontSizeConverter369).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider369));
			label197.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label197.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label197.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label197);
			label198.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label198.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label198.SetValue(Label.TextProperty, "ºÃµÁ∆˜—” ±: 000000");
			label198.SetValue(Grid.RowProperty, 7);
			label198.SetValue(Grid.ColumnProperty, 0);
			label198.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty370 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter370 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider370 = new XamlServiceProvider();
			Type typeFromHandle739 = typeof(IProvideValueTarget);
			object[] array370 = new object[0 + 6];
			array370[0] = label198;
			array370[1] = grid18;
			array370[2] = stackLayout6;
			array370[3] = scrollView;
			array370[4] = grid21;
			array370[5] = proControlPage;
			object service370;
			xamlServiceProvider370.Add(typeFromHandle739, service370 = new SimpleValueTargetProvider(array370, Label.FontSizeProperty, nameScope));
			xamlServiceProvider370.Add(typeof(IReferenceProvider), service370);
			Type typeFromHandle740 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver370 = new XmlNamespaceResolver();
			xmlNamespaceResolver370.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver370.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider370.Add(typeFromHandle740, new XamlTypeResolver(xmlNamespaceResolver370, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider370.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(651, 175)));
			label198.SetValue(fontSizeProperty370, ((IExtendedTypeConverter)fontSizeConverter370).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider370));
			label198.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label198.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label198.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label198);
			label199.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label199.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label199.SetValue(Label.TextProperty, "ºÃµÁ∆˜—” ±: 000000");
			label199.SetValue(Grid.RowProperty, 7);
			label199.SetValue(Grid.ColumnProperty, 1);
			label199.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty371 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter371 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider371 = new XamlServiceProvider();
			Type typeFromHandle741 = typeof(IProvideValueTarget);
			object[] array371 = new object[0 + 6];
			array371[0] = label199;
			array371[1] = grid18;
			array371[2] = stackLayout6;
			array371[3] = scrollView;
			array371[4] = grid21;
			array371[5] = proControlPage;
			object service371;
			xamlServiceProvider371.Add(typeFromHandle741, service371 = new SimpleValueTargetProvider(array371, Label.FontSizeProperty, nameScope));
			xamlServiceProvider371.Add(typeof(IReferenceProvider), service371);
			Type typeFromHandle742 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver371 = new XmlNamespaceResolver();
			xmlNamespaceResolver371.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver371.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider371.Add(typeFromHandle742, new XamlTypeResolver(xmlNamespaceResolver371, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider371.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(652, 172)));
			label199.SetValue(fontSizeProperty371, ((IExtendedTypeConverter)fontSizeConverter371).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider371));
			label199.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label199.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label199.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label199);
			label200.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label200.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label200.SetValue(Label.TextProperty, "ºÃµÁ∆˜—” ±: 000000");
			label200.SetValue(Grid.RowProperty, 8);
			label200.SetValue(Grid.ColumnProperty, 0);
			label200.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty372 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter372 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider372 = new XamlServiceProvider();
			Type typeFromHandle743 = typeof(IProvideValueTarget);
			object[] array372 = new object[0 + 6];
			array372[0] = label200;
			array372[1] = grid18;
			array372[2] = stackLayout6;
			array372[3] = scrollView;
			array372[4] = grid21;
			array372[5] = proControlPage;
			object service372;
			xamlServiceProvider372.Add(typeFromHandle743, service372 = new SimpleValueTargetProvider(array372, Label.FontSizeProperty, nameScope));
			xamlServiceProvider372.Add(typeof(IReferenceProvider), service372);
			Type typeFromHandle744 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver372 = new XmlNamespaceResolver();
			xmlNamespaceResolver372.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver372.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider372.Add(typeFromHandle744, new XamlTypeResolver(xmlNamespaceResolver372, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider372.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(653, 176)));
			label200.SetValue(fontSizeProperty372, ((IExtendedTypeConverter)fontSizeConverter372).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider372));
			label200.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label200.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label200.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label200);
			label201.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label201.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label201.SetValue(Label.TextProperty, "ºÃµÁ∆˜—” ±: 000000");
			label201.SetValue(Grid.RowProperty, 8);
			label201.SetValue(Grid.ColumnProperty, 1);
			label201.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty373 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter373 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider373 = new XamlServiceProvider();
			Type typeFromHandle745 = typeof(IProvideValueTarget);
			object[] array373 = new object[0 + 6];
			array373[0] = label201;
			array373[1] = grid18;
			array373[2] = stackLayout6;
			array373[3] = scrollView;
			array373[4] = grid21;
			array373[5] = proControlPage;
			object service373;
			xamlServiceProvider373.Add(typeFromHandle745, service373 = new SimpleValueTargetProvider(array373, Label.FontSizeProperty, nameScope));
			xamlServiceProvider373.Add(typeof(IReferenceProvider), service373);
			Type typeFromHandle746 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver373 = new XmlNamespaceResolver();
			xmlNamespaceResolver373.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver373.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider373.Add(typeFromHandle746, new XamlTypeResolver(xmlNamespaceResolver373, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider373.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(654, 178)));
			label201.SetValue(fontSizeProperty373, ((IExtendedTypeConverter)fontSizeConverter373).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider373));
			label201.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label201.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label201.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label201);
			label202.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label202.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label202.SetValue(Label.TextProperty, "ºÃµÁ∆˜—” ±: 000000");
			label202.SetValue(Grid.RowProperty, 9);
			label202.SetValue(Grid.ColumnProperty, 0);
			label202.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty374 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter374 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider374 = new XamlServiceProvider();
			Type typeFromHandle747 = typeof(IProvideValueTarget);
			object[] array374 = new object[0 + 6];
			array374[0] = label202;
			array374[1] = grid18;
			array374[2] = stackLayout6;
			array374[3] = scrollView;
			array374[4] = grid21;
			array374[5] = proControlPage;
			object service374;
			xamlServiceProvider374.Add(typeFromHandle747, service374 = new SimpleValueTargetProvider(array374, Label.FontSizeProperty, nameScope));
			xamlServiceProvider374.Add(typeof(IReferenceProvider), service374);
			Type typeFromHandle748 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver374 = new XmlNamespaceResolver();
			xmlNamespaceResolver374.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver374.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider374.Add(typeFromHandle748, new XamlTypeResolver(xmlNamespaceResolver374, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider374.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(655, 174)));
			label202.SetValue(fontSizeProperty374, ((IExtendedTypeConverter)fontSizeConverter374).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider374));
			label202.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label202.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label202.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label202);
			label203.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label203.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label203.SetValue(Label.TextProperty, "ºÃµÁ∆˜—” ±: 000000");
			label203.SetValue(Grid.RowProperty, 9);
			label203.SetValue(Grid.ColumnProperty, 1);
			label203.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty375 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter375 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider375 = new XamlServiceProvider();
			Type typeFromHandle749 = typeof(IProvideValueTarget);
			object[] array375 = new object[0 + 6];
			array375[0] = label203;
			array375[1] = grid18;
			array375[2] = stackLayout6;
			array375[3] = scrollView;
			array375[4] = grid21;
			array375[5] = proControlPage;
			object service375;
			xamlServiceProvider375.Add(typeFromHandle749, service375 = new SimpleValueTargetProvider(array375, Label.FontSizeProperty, nameScope));
			xamlServiceProvider375.Add(typeof(IReferenceProvider), service375);
			Type typeFromHandle750 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver375 = new XmlNamespaceResolver();
			xmlNamespaceResolver375.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver375.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider375.Add(typeFromHandle750, new XamlTypeResolver(xmlNamespaceResolver375, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider375.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(656, 172)));
			label203.SetValue(fontSizeProperty375, ((IExtendedTypeConverter)fontSizeConverter375).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider375));
			label203.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label203.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label203.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label203);
			label204.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label204.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label204.SetValue(Label.TextProperty, "ºÃµÁ∆˜—” ±: 000000");
			label204.SetValue(Grid.RowProperty, 10);
			label204.SetValue(Grid.ColumnProperty, 0);
			label204.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty376 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter376 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider376 = new XamlServiceProvider();
			Type typeFromHandle751 = typeof(IProvideValueTarget);
			object[] array376 = new object[0 + 6];
			array376[0] = label204;
			array376[1] = grid18;
			array376[2] = stackLayout6;
			array376[3] = scrollView;
			array376[4] = grid21;
			array376[5] = proControlPage;
			object service376;
			xamlServiceProvider376.Add(typeFromHandle751, service376 = new SimpleValueTargetProvider(array376, Label.FontSizeProperty, nameScope));
			xamlServiceProvider376.Add(typeof(IReferenceProvider), service376);
			Type typeFromHandle752 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver376 = new XmlNamespaceResolver();
			xmlNamespaceResolver376.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver376.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider376.Add(typeFromHandle752, new XamlTypeResolver(xmlNamespaceResolver376, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider376.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(657, 175)));
			label204.SetValue(fontSizeProperty376, ((IExtendedTypeConverter)fontSizeConverter376).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider376));
			label204.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label204.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label204.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label204);
			label205.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label205.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label205.SetValue(Label.TextProperty, "ºÃµÁ∆˜—” ±: 000000");
			label205.SetValue(Grid.RowProperty, 10);
			label205.SetValue(Grid.ColumnProperty, 1);
			label205.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty377 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter377 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider377 = new XamlServiceProvider();
			Type typeFromHandle753 = typeof(IProvideValueTarget);
			object[] array377 = new object[0 + 6];
			array377[0] = label205;
			array377[1] = grid18;
			array377[2] = stackLayout6;
			array377[3] = scrollView;
			array377[4] = grid21;
			array377[5] = proControlPage;
			object service377;
			xamlServiceProvider377.Add(typeFromHandle753, service377 = new SimpleValueTargetProvider(array377, Label.FontSizeProperty, nameScope));
			xamlServiceProvider377.Add(typeof(IReferenceProvider), service377);
			Type typeFromHandle754 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver377 = new XmlNamespaceResolver();
			xmlNamespaceResolver377.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver377.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider377.Add(typeFromHandle754, new XamlTypeResolver(xmlNamespaceResolver377, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider377.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(658, 173)));
			label205.SetValue(fontSizeProperty377, ((IExtendedTypeConverter)fontSizeConverter377).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider377));
			label205.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label205.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label205.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label205);
			label206.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label206.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label206.SetValue(Label.TextProperty, "ª∫∆Ù∂ØIs: 000000");
			label206.SetValue(Grid.RowProperty, 11);
			label206.SetValue(Grid.ColumnProperty, 0);
			label206.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty378 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter378 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider378 = new XamlServiceProvider();
			Type typeFromHandle755 = typeof(IProvideValueTarget);
			object[] array378 = new object[0 + 6];
			array378[0] = label206;
			array378[1] = grid18;
			array378[2] = stackLayout6;
			array378[3] = scrollView;
			array378[4] = grid21;
			array378[5] = proControlPage;
			object service378;
			xamlServiceProvider378.Add(typeFromHandle755, service378 = new SimpleValueTargetProvider(array378, Label.FontSizeProperty, nameScope));
			xamlServiceProvider378.Add(typeof(IReferenceProvider), service378);
			Type typeFromHandle756 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver378 = new XmlNamespaceResolver();
			xmlNamespaceResolver378.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver378.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider378.Add(typeFromHandle756, new XamlTypeResolver(xmlNamespaceResolver378, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider378.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(660, 171)));
			label206.SetValue(fontSizeProperty378, ((IExtendedTypeConverter)fontSizeConverter378).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider378));
			label206.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label206.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label206.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label206);
			label207.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label207.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label207.SetValue(Label.TextProperty, "∏˙ÀÊ◊™ÀŸ: 000000");
			label207.SetValue(Grid.RowProperty, 11);
			label207.SetValue(Grid.ColumnProperty, 1);
			label207.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty379 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter379 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider379 = new XamlServiceProvider();
			Type typeFromHandle757 = typeof(IProvideValueTarget);
			object[] array379 = new object[0 + 6];
			array379[0] = label207;
			array379[1] = grid18;
			array379[2] = stackLayout6;
			array379[3] = scrollView;
			array379[4] = grid21;
			array379[5] = proControlPage;
			object service379;
			xamlServiceProvider379.Add(typeFromHandle757, service379 = new SimpleValueTargetProvider(array379, Label.FontSizeProperty, nameScope));
			xamlServiceProvider379.Add(typeof(IReferenceProvider), service379);
			Type typeFromHandle758 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver379 = new XmlNamespaceResolver();
			xmlNamespaceResolver379.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver379.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider379.Add(typeFromHandle758, new XamlTypeResolver(xmlNamespaceResolver379, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider379.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(661, 172)));
			label207.SetValue(fontSizeProperty379, ((IExtendedTypeConverter)fontSizeConverter379).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider379));
			label207.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label207.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label207.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label207);
			label208.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label208.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label208.SetValue(Label.TextProperty, "µÁ¡˜∑¿µ¡: Œﬁ–ß");
			label208.SetValue(Grid.RowProperty, 12);
			label208.SetValue(Grid.ColumnProperty, 0);
			label208.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty380 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter380 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider380 = new XamlServiceProvider();
			Type typeFromHandle759 = typeof(IProvideValueTarget);
			object[] array380 = new object[0 + 6];
			array380[0] = label208;
			array380[1] = grid18;
			array380[2] = stackLayout6;
			array380[3] = scrollView;
			array380[4] = grid21;
			array380[5] = proControlPage;
			object service380;
			xamlServiceProvider380.Add(typeFromHandle759, service380 = new SimpleValueTargetProvider(array380, Label.FontSizeProperty, nameScope));
			xamlServiceProvider380.Add(typeof(IReferenceProvider), service380);
			Type typeFromHandle760 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver380 = new XmlNamespaceResolver();
			xmlNamespaceResolver380.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver380.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider380.Add(typeFromHandle760, new XamlTypeResolver(xmlNamespaceResolver380, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider380.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(662, 165)));
			label208.SetValue(fontSizeProperty380, ((IExtendedTypeConverter)fontSizeConverter380).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider380));
			label208.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label208.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label208.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label208);
			label209.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label209.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label209.SetValue(Label.TextProperty, "∑¿µ¡¬ˆ≥Â: Œﬁ–ß");
			label209.SetValue(Grid.RowProperty, 12);
			label209.SetValue(Grid.ColumnProperty, 1);
			label209.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty381 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter381 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider381 = new XamlServiceProvider();
			Type typeFromHandle761 = typeof(IProvideValueTarget);
			object[] array381 = new object[0 + 6];
			array381[0] = label209;
			array381[1] = grid18;
			array381[2] = stackLayout6;
			array381[3] = scrollView;
			array381[4] = grid21;
			array381[5] = proControlPage;
			object service381;
			xamlServiceProvider381.Add(typeFromHandle761, service381 = new SimpleValueTargetProvider(array381, Label.FontSizeProperty, nameScope));
			xamlServiceProvider381.Add(typeof(IReferenceProvider), service381);
			Type typeFromHandle762 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver381 = new XmlNamespaceResolver();
			xmlNamespaceResolver381.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver381.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider381.Add(typeFromHandle762, new XamlTypeResolver(xmlNamespaceResolver381, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider381.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(663, 166)));
			label209.SetValue(fontSizeProperty381, ((IExtendedTypeConverter)fontSizeConverter381).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider381));
			label209.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label209.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label209.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label209);
			label210.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label210.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label210.SetValue(Label.TextProperty, "µÁ¡˜∑¿µ¡: Œﬁ–ß");
			label210.SetValue(Grid.RowProperty, 13);
			label210.SetValue(Grid.ColumnProperty, 0);
			label210.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty382 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter382 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider382 = new XamlServiceProvider();
			Type typeFromHandle763 = typeof(IProvideValueTarget);
			object[] array382 = new object[0 + 6];
			array382[0] = label210;
			array382[1] = grid18;
			array382[2] = stackLayout6;
			array382[3] = scrollView;
			array382[4] = grid21;
			array382[5] = proControlPage;
			object service382;
			xamlServiceProvider382.Add(typeFromHandle763, service382 = new SimpleValueTargetProvider(array382, Label.FontSizeProperty, nameScope));
			xamlServiceProvider382.Add(typeof(IReferenceProvider), service382);
			Type typeFromHandle764 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver382 = new XmlNamespaceResolver();
			xmlNamespaceResolver382.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver382.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider382.Add(typeFromHandle764, new XamlTypeResolver(xmlNamespaceResolver382, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider382.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(664, 165)));
			label210.SetValue(fontSizeProperty382, ((IExtendedTypeConverter)fontSizeConverter382).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider382));
			label210.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label210.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label210.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label210);
			label211.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label211.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label211.SetValue(Label.TextProperty, "∑¿µ¡¬ˆ≥Â: Œﬁ–ß");
			label211.SetValue(Grid.RowProperty, 13);
			label211.SetValue(Grid.ColumnProperty, 1);
			label211.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty383 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter383 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider383 = new XamlServiceProvider();
			Type typeFromHandle765 = typeof(IProvideValueTarget);
			object[] array383 = new object[0 + 6];
			array383[0] = label211;
			array383[1] = grid18;
			array383[2] = stackLayout6;
			array383[3] = scrollView;
			array383[4] = grid21;
			array383[5] = proControlPage;
			object service383;
			xamlServiceProvider383.Add(typeFromHandle765, service383 = new SimpleValueTargetProvider(array383, Label.FontSizeProperty, nameScope));
			xamlServiceProvider383.Add(typeof(IReferenceProvider), service383);
			Type typeFromHandle766 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver383 = new XmlNamespaceResolver();
			xmlNamespaceResolver383.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver383.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider383.Add(typeFromHandle766, new XamlTypeResolver(xmlNamespaceResolver383, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider383.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(665, 165)));
			label211.SetValue(fontSizeProperty383, ((IExtendedTypeConverter)fontSizeConverter383).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider383));
			label211.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label211.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label211.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label211);
			label212.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label212.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label212.SetValue(Label.TextProperty, "∑¥œÚ ±º‰: 000000");
			label212.SetValue(Grid.RowProperty, 14);
			label212.SetValue(Grid.ColumnProperty, 0);
			label212.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty384 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter384 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider384 = new XamlServiceProvider();
			Type typeFromHandle767 = typeof(IProvideValueTarget);
			object[] array384 = new object[0 + 6];
			array384[0] = label212;
			array384[1] = grid18;
			array384[2] = stackLayout6;
			array384[3] = scrollView;
			array384[4] = grid21;
			array384[5] = proControlPage;
			object service384;
			xamlServiceProvider384.Add(typeFromHandle767, service384 = new SimpleValueTargetProvider(array384, Label.FontSizeProperty, nameScope));
			xamlServiceProvider384.Add(typeof(IReferenceProvider), service384);
			Type typeFromHandle768 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver384 = new XmlNamespaceResolver();
			xmlNamespaceResolver384.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver384.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider384.Add(typeFromHandle768, new XamlTypeResolver(xmlNamespaceResolver384, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider384.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(666, 172)));
			label212.SetValue(fontSizeProperty384, ((IExtendedTypeConverter)fontSizeConverter384).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider384));
			label212.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label212.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label212.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label212);
			label213.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label213.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label213.SetValue(Label.TextProperty, "◊§≥µ≤Ó∑÷: 000000");
			label213.SetValue(Grid.RowProperty, 14);
			label213.SetValue(Grid.ColumnProperty, 1);
			label213.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty385 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter385 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider385 = new XamlServiceProvider();
			Type typeFromHandle769 = typeof(IProvideValueTarget);
			object[] array385 = new object[0 + 6];
			array385[0] = label213;
			array385[1] = grid18;
			array385[2] = stackLayout6;
			array385[3] = scrollView;
			array385[4] = grid21;
			array385[5] = proControlPage;
			object service385;
			xamlServiceProvider385.Add(typeFromHandle769, service385 = new SimpleValueTargetProvider(array385, Label.FontSizeProperty, nameScope));
			xamlServiceProvider385.Add(typeof(IReferenceProvider), service385);
			Type typeFromHandle770 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver385 = new XmlNamespaceResolver();
			xmlNamespaceResolver385.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver385.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider385.Add(typeFromHandle770, new XamlTypeResolver(xmlNamespaceResolver385, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider385.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(667, 170)));
			label213.SetValue(fontSizeProperty385, ((IExtendedTypeConverter)fontSizeConverter385).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider385));
			label213.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label213.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label213.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label213);
			label214.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label214.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label214.SetValue(Label.TextProperty, "◊§≥µœµ ˝: 000000");
			label214.SetValue(Grid.RowProperty, 15);
			label214.SetValue(Grid.ColumnProperty, 0);
			label214.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty386 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter386 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider386 = new XamlServiceProvider();
			Type typeFromHandle771 = typeof(IProvideValueTarget);
			object[] array386 = new object[0 + 6];
			array386[0] = label214;
			array386[1] = grid18;
			array386[2] = stackLayout6;
			array386[3] = scrollView;
			array386[4] = grid21;
			array386[5] = proControlPage;
			object service386;
			xamlServiceProvider386.Add(typeFromHandle771, service386 = new SimpleValueTargetProvider(array386, Label.FontSizeProperty, nameScope));
			xamlServiceProvider386.Add(typeof(IReferenceProvider), service386);
			Type typeFromHandle772 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver386 = new XmlNamespaceResolver();
			xmlNamespaceResolver386.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver386.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider386.Add(typeFromHandle772, new XamlTypeResolver(xmlNamespaceResolver386, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider386.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(668, 169)));
			label214.SetValue(fontSizeProperty386, ((IExtendedTypeConverter)fontSizeConverter386).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider386));
			label214.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label214.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label214.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label214);
			label215.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label215.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label215.SetValue(Label.TextProperty, "RXD ‰≥ˆ: 000000");
			label215.SetValue(Grid.RowProperty, 15);
			label215.SetValue(Grid.ColumnProperty, 1);
			label215.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty387 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter387 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider387 = new XamlServiceProvider();
			Type typeFromHandle773 = typeof(IProvideValueTarget);
			object[] array387 = new object[0 + 6];
			array387[0] = label215;
			array387[1] = grid18;
			array387[2] = stackLayout6;
			array387[3] = scrollView;
			array387[4] = grid21;
			array387[5] = proControlPage;
			object service387;
			xamlServiceProvider387.Add(typeFromHandle773, service387 = new SimpleValueTargetProvider(array387, Label.FontSizeProperty, nameScope));
			xamlServiceProvider387.Add(typeof(IReferenceProvider), service387);
			Type typeFromHandle774 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver387 = new XmlNamespaceResolver();
			xmlNamespaceResolver387.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver387.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider387.Add(typeFromHandle774, new XamlTypeResolver(xmlNamespaceResolver387, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider387.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(669, 167)));
			label215.SetValue(fontSizeProperty387, ((IExtendedTypeConverter)fontSizeConverter387).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider387));
			label215.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label215.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label215.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label215);
			label216.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label216.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label216.SetValue(Label.TextProperty, "—ßœ∞”Õ√≈: 0000");
			label216.SetValue(Grid.RowProperty, 16);
			label216.SetValue(Grid.ColumnProperty, 0);
			label216.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty388 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter388 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider388 = new XamlServiceProvider();
			Type typeFromHandle775 = typeof(IProvideValueTarget);
			object[] array388 = new object[0 + 6];
			array388[0] = label216;
			array388[1] = grid18;
			array388[2] = stackLayout6;
			array388[3] = scrollView;
			array388[4] = grid21;
			array388[5] = proControlPage;
			object service388;
			xamlServiceProvider388.Add(typeFromHandle775, service388 = new SimpleValueTargetProvider(array388, Label.FontSizeProperty, nameScope));
			xamlServiceProvider388.Add(typeof(IReferenceProvider), service388);
			Type typeFromHandle776 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver388 = new XmlNamespaceResolver();
			xmlNamespaceResolver388.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver388.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider388.Add(typeFromHandle776, new XamlTypeResolver(xmlNamespaceResolver388, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider388.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(670, 170)));
			label216.SetValue(fontSizeProperty388, ((IExtendedTypeConverter)fontSizeConverter388).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider388));
			label216.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label216.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label216.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label216);
			label217.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label217.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label217.SetValue(Label.TextProperty, "—ßœ∞µÁ—πµÕ: 0000");
			label217.SetValue(Grid.RowProperty, 16);
			label217.SetValue(Grid.ColumnProperty, 1);
			label217.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty389 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter389 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider389 = new XamlServiceProvider();
			Type typeFromHandle777 = typeof(IProvideValueTarget);
			object[] array389 = new object[0 + 6];
			array389[0] = label217;
			array389[1] = grid18;
			array389[2] = stackLayout6;
			array389[3] = scrollView;
			array389[4] = grid21;
			array389[5] = proControlPage;
			object service389;
			xamlServiceProvider389.Add(typeFromHandle777, service389 = new SimpleValueTargetProvider(array389, Label.FontSizeProperty, nameScope));
			xamlServiceProvider389.Add(typeof(IReferenceProvider), service389);
			Type typeFromHandle778 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver389 = new XmlNamespaceResolver();
			xmlNamespaceResolver389.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver389.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider389.Add(typeFromHandle778, new XamlTypeResolver(xmlNamespaceResolver389, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider389.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(671, 167)));
			label217.SetValue(fontSizeProperty389, ((IExtendedTypeConverter)fontSizeConverter389).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider389));
			label217.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label217.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label217.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label217);
			label218.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label218.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label218.SetValue(Label.TextProperty, "—ßœ∞µÁ—π∏ﬂ: 0000");
			label218.SetValue(Grid.RowProperty, 17);
			label218.SetValue(Grid.ColumnProperty, 0);
			label218.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty390 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter390 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider390 = new XamlServiceProvider();
			Type typeFromHandle779 = typeof(IProvideValueTarget);
			object[] array390 = new object[0 + 6];
			array390[0] = label218;
			array390[1] = grid18;
			array390[2] = stackLayout6;
			array390[3] = scrollView;
			array390[4] = grid21;
			array390[5] = proControlPage;
			object service390;
			xamlServiceProvider390.Add(typeFromHandle779, service390 = new SimpleValueTargetProvider(array390, Label.FontSizeProperty, nameScope));
			xamlServiceProvider390.Add(typeof(IReferenceProvider), service390);
			Type typeFromHandle780 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver390 = new XmlNamespaceResolver();
			xmlNamespaceResolver390.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver390.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider390.Add(typeFromHandle780, new XamlTypeResolver(xmlNamespaceResolver390, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider390.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(672, 166)));
			label218.SetValue(fontSizeProperty390, ((IExtendedTypeConverter)fontSizeConverter390).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider390));
			label218.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label218.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label218.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label218);
			label219.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label219.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label219.SetValue(Label.TextProperty, "—ßœ∞”Õ√≈: 0000");
			label219.SetValue(Grid.RowProperty, 18);
			label219.SetValue(Grid.ColumnProperty, 0);
			label219.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty391 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter391 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider391 = new XamlServiceProvider();
			Type typeFromHandle781 = typeof(IProvideValueTarget);
			object[] array391 = new object[0 + 6];
			array391[0] = label219;
			array391[1] = grid18;
			array391[2] = stackLayout6;
			array391[3] = scrollView;
			array391[4] = grid21;
			array391[5] = proControlPage;
			object service391;
			xamlServiceProvider391.Add(typeFromHandle781, service391 = new SimpleValueTargetProvider(array391, Label.FontSizeProperty, nameScope));
			xamlServiceProvider391.Add(typeof(IReferenceProvider), service391);
			Type typeFromHandle782 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver391 = new XmlNamespaceResolver();
			xmlNamespaceResolver391.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver391.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider391.Add(typeFromHandle782, new XamlTypeResolver(xmlNamespaceResolver391, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider391.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(673, 168)));
			label219.SetValue(fontSizeProperty391, ((IExtendedTypeConverter)fontSizeConverter391).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider391));
			label219.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label219.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label219.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label219);
			label220.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label220.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label220.SetValue(Label.TextProperty, "—ßœ∞µÁ—πµÕ: 0000");
			label220.SetValue(Grid.RowProperty, 18);
			label220.SetValue(Grid.ColumnProperty, 1);
			label220.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty392 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter392 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider392 = new XamlServiceProvider();
			Type typeFromHandle783 = typeof(IProvideValueTarget);
			object[] array392 = new object[0 + 6];
			array392[0] = label220;
			array392[1] = grid18;
			array392[2] = stackLayout6;
			array392[3] = scrollView;
			array392[4] = grid21;
			array392[5] = proControlPage;
			object service392;
			xamlServiceProvider392.Add(typeFromHandle783, service392 = new SimpleValueTargetProvider(array392, Label.FontSizeProperty, nameScope));
			xamlServiceProvider392.Add(typeof(IReferenceProvider), service392);
			Type typeFromHandle784 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver392 = new XmlNamespaceResolver();
			xmlNamespaceResolver392.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver392.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider392.Add(typeFromHandle784, new XamlTypeResolver(xmlNamespaceResolver392, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider392.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(674, 170)));
			label220.SetValue(fontSizeProperty392, ((IExtendedTypeConverter)fontSizeConverter392).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider392));
			label220.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label220.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label220.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(label220);
			button173.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button173.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button173.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button173.Clicked += proControlPage.ReCurrRatio_TextChanged;
			button173.SetValue(Grid.RowProperty, 0);
			button173.SetValue(Grid.ColumnProperty, 0);
			button173.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty393 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter393 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider393 = new XamlServiceProvider();
			Type typeFromHandle785 = typeof(IProvideValueTarget);
			object[] array393 = new object[0 + 6];
			array393[0] = button173;
			array393[1] = grid18;
			array393[2] = stackLayout6;
			array393[3] = scrollView;
			array393[4] = grid21;
			array393[5] = proControlPage;
			object service393;
			xamlServiceProvider393.Add(typeFromHandle785, service393 = new SimpleValueTargetProvider(array393, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider393.Add(typeof(IReferenceProvider), service393);
			Type typeFromHandle786 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver393 = new XmlNamespaceResolver();
			xmlNamespaceResolver393.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver393.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider393.Add(typeFromHandle786, new XamlTypeResolver(xmlNamespaceResolver393, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider393.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(676, 187)));
			button173.SetValue(fontSizeProperty393, ((IExtendedTypeConverter)fontSizeConverter393).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider393));
			button173.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button173.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button173.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button173);
			button174.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button174.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button174.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button174.Clicked += proControlPage.FwReRatio_TextChanged;
			button174.SetValue(Grid.RowProperty, 0);
			button174.SetValue(Grid.ColumnProperty, 1);
			button174.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty394 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter394 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider394 = new XamlServiceProvider();
			Type typeFromHandle787 = typeof(IProvideValueTarget);
			object[] array394 = new object[0 + 6];
			array394[0] = button174;
			array394[1] = grid18;
			array394[2] = stackLayout6;
			array394[3] = scrollView;
			array394[4] = grid21;
			array394[5] = proControlPage;
			object service394;
			xamlServiceProvider394.Add(typeFromHandle787, service394 = new SimpleValueTargetProvider(array394, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider394.Add(typeof(IReferenceProvider), service394);
			Type typeFromHandle788 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver394 = new XmlNamespaceResolver();
			xmlNamespaceResolver394.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver394.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider394.Add(typeFromHandle788, new XamlTypeResolver(xmlNamespaceResolver394, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider394.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(677, 184)));
			button174.SetValue(fontSizeProperty394, ((IExtendedTypeConverter)fontSizeConverter394).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider394));
			button174.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button174.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button174.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button174);
			button175.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button175.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button175.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button175.Clicked += proControlPage.VolSelectRatio_TextChanged;
			button175.SetValue(Grid.RowProperty, 1);
			button175.SetValue(Grid.ColumnProperty, 0);
			button175.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty395 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter395 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider395 = new XamlServiceProvider();
			Type typeFromHandle789 = typeof(IProvideValueTarget);
			object[] array395 = new object[0 + 6];
			array395[0] = button175;
			array395[1] = grid18;
			array395[2] = stackLayout6;
			array395[3] = scrollView;
			array395[4] = grid21;
			array395[5] = proControlPage;
			object service395;
			xamlServiceProvider395.Add(typeFromHandle789, service395 = new SimpleValueTargetProvider(array395, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider395.Add(typeof(IReferenceProvider), service395);
			Type typeFromHandle790 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver395 = new XmlNamespaceResolver();
			xmlNamespaceResolver395.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver395.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider395.Add(typeFromHandle790, new XamlTypeResolver(xmlNamespaceResolver395, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider395.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(678, 188)));
			button175.SetValue(fontSizeProperty395, ((IExtendedTypeConverter)fontSizeConverter395).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider395));
			button175.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button175.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button175.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button175);
			button176.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button176.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button176.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button176.Clicked += proControlPage.Stage2Soc_TextChanged;
			button176.SetValue(Grid.RowProperty, 1);
			button176.SetValue(Grid.ColumnProperty, 1);
			button176.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty396 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter396 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider396 = new XamlServiceProvider();
			Type typeFromHandle791 = typeof(IProvideValueTarget);
			object[] array396 = new object[0 + 6];
			array396[0] = button176;
			array396[1] = grid18;
			array396[2] = stackLayout6;
			array396[3] = scrollView;
			array396[4] = grid21;
			array396[5] = proControlPage;
			object service396;
			xamlServiceProvider396.Add(typeFromHandle791, service396 = new SimpleValueTargetProvider(array396, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider396.Add(typeof(IReferenceProvider), service396);
			Type typeFromHandle792 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver396 = new XmlNamespaceResolver();
			xmlNamespaceResolver396.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver396.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider396.Add(typeFromHandle792, new XamlTypeResolver(xmlNamespaceResolver396, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider396.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(679, 184)));
			button176.SetValue(fontSizeProperty396, ((IExtendedTypeConverter)fontSizeConverter396).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider396));
			button176.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button176.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button176.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button176);
			button177.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button177.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button177.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button177.Clicked += proControlPage.ReAcc_TextChanged;
			button177.SetValue(Grid.RowProperty, 2);
			button177.SetValue(Grid.ColumnProperty, 0);
			button177.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty397 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter397 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider397 = new XamlServiceProvider();
			Type typeFromHandle793 = typeof(IProvideValueTarget);
			object[] array397 = new object[0 + 6];
			array397[0] = button177;
			array397[1] = grid18;
			array397[2] = stackLayout6;
			array397[3] = scrollView;
			array397[4] = grid21;
			array397[5] = proControlPage;
			object service397;
			xamlServiceProvider397.Add(typeFromHandle793, service397 = new SimpleValueTargetProvider(array397, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider397.Add(typeof(IReferenceProvider), service397);
			Type typeFromHandle794 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver397 = new XmlNamespaceResolver();
			xmlNamespaceResolver397.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver397.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider397.Add(typeFromHandle794, new XamlTypeResolver(xmlNamespaceResolver397, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider397.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(680, 179)));
			button177.SetValue(fontSizeProperty397, ((IExtendedTypeConverter)fontSizeConverter397).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider397));
			button177.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button177.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button177.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button177);
			button178.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button178.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button178.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button178.Clicked += proControlPage.AlarmDelay_TextChanged;
			button178.SetValue(Grid.RowProperty, 2);
			button178.SetValue(Grid.ColumnProperty, 1);
			button178.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty398 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter398 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider398 = new XamlServiceProvider();
			Type typeFromHandle795 = typeof(IProvideValueTarget);
			object[] array398 = new object[0 + 6];
			array398[0] = button178;
			array398[1] = grid18;
			array398[2] = stackLayout6;
			array398[3] = scrollView;
			array398[4] = grid21;
			array398[5] = proControlPage;
			object service398;
			xamlServiceProvider398.Add(typeFromHandle795, service398 = new SimpleValueTargetProvider(array398, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider398.Add(typeof(IReferenceProvider), service398);
			Type typeFromHandle796 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver398 = new XmlNamespaceResolver();
			xmlNamespaceResolver398.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver398.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider398.Add(typeFromHandle796, new XamlTypeResolver(xmlNamespaceResolver398, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider398.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(681, 184)));
			button178.SetValue(fontSizeProperty398, ((IExtendedTypeConverter)fontSizeConverter398).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider398));
			button178.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button178.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button178.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button178);
			button179.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button179.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button179.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button179.Clicked += proControlPage.RelayDelay_TextChanged;
			button179.SetValue(Grid.RowProperty, 3);
			button179.SetValue(Grid.ColumnProperty, 0);
			button179.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty399 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter399 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider399 = new XamlServiceProvider();
			Type typeFromHandle797 = typeof(IProvideValueTarget);
			object[] array399 = new object[0 + 6];
			array399[0] = button179;
			array399[1] = grid18;
			array399[2] = stackLayout6;
			array399[3] = scrollView;
			array399[4] = grid21;
			array399[5] = proControlPage;
			object service399;
			xamlServiceProvider399.Add(typeFromHandle797, service399 = new SimpleValueTargetProvider(array399, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider399.Add(typeof(IReferenceProvider), service399);
			Type typeFromHandle798 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver399 = new XmlNamespaceResolver();
			xmlNamespaceResolver399.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver399.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider399.Add(typeFromHandle798, new XamlTypeResolver(xmlNamespaceResolver399, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider399.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(682, 186)));
			button179.SetValue(fontSizeProperty399, ((IExtendedTypeConverter)fontSizeConverter399).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider399));
			button179.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button179.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button179.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button179);
			button180.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button180.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button180.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button180.Clicked += proControlPage.RelayOut_TextChanged;
			button180.SetValue(Grid.RowProperty, 3);
			button180.SetValue(Grid.ColumnProperty, 1);
			button180.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty400 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter400 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider400 = new XamlServiceProvider();
			Type typeFromHandle799 = typeof(IProvideValueTarget);
			object[] array400 = new object[0 + 6];
			array400[0] = button180;
			array400[1] = grid18;
			array400[2] = stackLayout6;
			array400[3] = scrollView;
			array400[4] = grid21;
			array400[5] = proControlPage;
			object service400;
			xamlServiceProvider400.Add(typeFromHandle799, service400 = new SimpleValueTargetProvider(array400, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider400.Add(typeof(IReferenceProvider), service400);
			Type typeFromHandle800 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver400 = new XmlNamespaceResolver();
			xmlNamespaceResolver400.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver400.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider400.Add(typeFromHandle800, new XamlTypeResolver(xmlNamespaceResolver400, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider400.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(683, 182)));
			button180.SetValue(fontSizeProperty400, ((IExtendedTypeConverter)fontSizeConverter400).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider400));
			button180.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button180.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button180.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button180);
			button181.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button181.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button181.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button181.Clicked += proControlPage.BCEnable_TextChanged;
			button181.SetValue(Grid.RowProperty, 4);
			button181.SetValue(Grid.ColumnProperty, 0);
			button181.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty401 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter401 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider401 = new XamlServiceProvider();
			Type typeFromHandle801 = typeof(IProvideValueTarget);
			object[] array401 = new object[0 + 6];
			array401[0] = button181;
			array401[1] = grid18;
			array401[2] = stackLayout6;
			array401[3] = scrollView;
			array401[4] = grid21;
			array401[5] = proControlPage;
			object service401;
			xamlServiceProvider401.Add(typeFromHandle801, service401 = new SimpleValueTargetProvider(array401, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider401.Add(typeof(IReferenceProvider), service401);
			Type typeFromHandle802 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver401 = new XmlNamespaceResolver();
			xmlNamespaceResolver401.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver401.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider401.Add(typeFromHandle802, new XamlTypeResolver(xmlNamespaceResolver401, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider401.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(684, 184)));
			button181.SetValue(fontSizeProperty401, ((IExtendedTypeConverter)fontSizeConverter401).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider401));
			button181.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button181.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button181.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button181);
			button182.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button182.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button182.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button182.Clicked += proControlPage.SeatEnable_TextChanged;
			button182.SetValue(Grid.RowProperty, 4);
			button182.SetValue(Grid.ColumnProperty, 1);
			button182.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty402 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter402 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider402 = new XamlServiceProvider();
			Type typeFromHandle803 = typeof(IProvideValueTarget);
			object[] array402 = new object[0 + 6];
			array402[0] = button182;
			array402[1] = grid18;
			array402[2] = stackLayout6;
			array402[3] = scrollView;
			array402[4] = grid21;
			array402[5] = proControlPage;
			object service402;
			xamlServiceProvider402.Add(typeFromHandle803, service402 = new SimpleValueTargetProvider(array402, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider402.Add(typeof(IReferenceProvider), service402);
			Type typeFromHandle804 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver402 = new XmlNamespaceResolver();
			xmlNamespaceResolver402.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver402.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider402.Add(typeFromHandle804, new XamlTypeResolver(xmlNamespaceResolver402, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider402.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(685, 186)));
			button182.SetValue(fontSizeProperty402, ((IExtendedTypeConverter)fontSizeConverter402).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider402));
			button182.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button182.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button182.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button182);
			button183.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button183.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button183.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button183.Clicked += proControlPage.PEnable_TextChanged;
			button183.SetValue(Grid.RowProperty, 5);
			button183.SetValue(Grid.ColumnProperty, 0);
			button183.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty403 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter403 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider403 = new XamlServiceProvider();
			Type typeFromHandle805 = typeof(IProvideValueTarget);
			object[] array403 = new object[0 + 6];
			array403[0] = button183;
			array403[1] = grid18;
			array403[2] = stackLayout6;
			array403[3] = scrollView;
			array403[4] = grid21;
			array403[5] = proControlPage;
			object service403;
			xamlServiceProvider403.Add(typeFromHandle805, service403 = new SimpleValueTargetProvider(array403, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider403.Add(typeof(IReferenceProvider), service403);
			Type typeFromHandle806 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver403 = new XmlNamespaceResolver();
			xmlNamespaceResolver403.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver403.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider403.Add(typeFromHandle806, new XamlTypeResolver(xmlNamespaceResolver403, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider403.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(686, 183)));
			button183.SetValue(fontSizeProperty403, ((IExtendedTypeConverter)fontSizeConverter403).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider403));
			button183.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button183.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button183.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button183);
			button184.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button184.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button184.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button184.Clicked += proControlPage.AutoBackP_TextChanged;
			button184.SetValue(Grid.RowProperty, 5);
			button184.SetValue(Grid.ColumnProperty, 1);
			button184.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty404 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter404 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider404 = new XamlServiceProvider();
			Type typeFromHandle807 = typeof(IProvideValueTarget);
			object[] array404 = new object[0 + 6];
			array404[0] = button184;
			array404[1] = grid18;
			array404[2] = stackLayout6;
			array404[3] = scrollView;
			array404[4] = grid21;
			array404[5] = proControlPage;
			object service404;
			xamlServiceProvider404.Add(typeFromHandle807, service404 = new SimpleValueTargetProvider(array404, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider404.Add(typeof(IReferenceProvider), service404);
			Type typeFromHandle808 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver404 = new XmlNamespaceResolver();
			xmlNamespaceResolver404.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver404.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider404.Add(typeFromHandle808, new XamlTypeResolver(xmlNamespaceResolver404, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider404.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(687, 185)));
			button184.SetValue(fontSizeProperty404, ((IExtendedTypeConverter)fontSizeConverter404).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider404));
			button184.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button184.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button184.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button184);
			button185.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button185.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button185.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button185.Clicked += proControlPage.CruiseEnable_TextChanged;
			button185.SetValue(Grid.RowProperty, 6);
			button185.SetValue(Grid.ColumnProperty, 0);
			button185.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty405 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter405 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider405 = new XamlServiceProvider();
			Type typeFromHandle809 = typeof(IProvideValueTarget);
			object[] array405 = new object[0 + 6];
			array405[0] = button185;
			array405[1] = grid18;
			array405[2] = stackLayout6;
			array405[3] = scrollView;
			array405[4] = grid21;
			array405[5] = proControlPage;
			object service405;
			xamlServiceProvider405.Add(typeFromHandle809, service405 = new SimpleValueTargetProvider(array405, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider405.Add(typeof(IReferenceProvider), service405);
			Type typeFromHandle810 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver405 = new XmlNamespaceResolver();
			xmlNamespaceResolver405.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver405.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider405.Add(typeFromHandle810, new XamlTypeResolver(xmlNamespaceResolver405, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider405.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(688, 188)));
			button185.SetValue(fontSizeProperty405, ((IExtendedTypeConverter)fontSizeConverter405).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider405));
			button185.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button185.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button185.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button185);
			button186.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button186.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button186.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button186.Clicked += proControlPage.EABSEnable_TextChanged;
			button186.SetValue(Grid.RowProperty, 6);
			button186.SetValue(Grid.ColumnProperty, 1);
			button186.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty406 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter406 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider406 = new XamlServiceProvider();
			Type typeFromHandle811 = typeof(IProvideValueTarget);
			object[] array406 = new object[0 + 6];
			array406[0] = button186;
			array406[1] = grid18;
			array406[2] = stackLayout6;
			array406[3] = scrollView;
			array406[4] = grid21;
			array406[5] = proControlPage;
			object service406;
			xamlServiceProvider406.Add(typeFromHandle811, service406 = new SimpleValueTargetProvider(array406, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider406.Add(typeof(IReferenceProvider), service406);
			Type typeFromHandle812 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver406 = new XmlNamespaceResolver();
			xmlNamespaceResolver406.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver406.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider406.Add(typeFromHandle812, new XamlTypeResolver(xmlNamespaceResolver406, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider406.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(689, 186)));
			button186.SetValue(fontSizeProperty406, ((IExtendedTypeConverter)fontSizeConverter406).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider406));
			button186.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button186.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button186.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button186);
			button187.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button187.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button187.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button187.Clicked += proControlPage.TuixingEnable_TextChanged;
			button187.SetValue(Grid.RowProperty, 7);
			button187.SetValue(Grid.ColumnProperty, 0);
			button187.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty407 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter407 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider407 = new XamlServiceProvider();
			Type typeFromHandle813 = typeof(IProvideValueTarget);
			object[] array407 = new object[0 + 6];
			array407[0] = button187;
			array407[1] = grid18;
			array407[2] = stackLayout6;
			array407[3] = scrollView;
			array407[4] = grid21;
			array407[5] = proControlPage;
			object service407;
			xamlServiceProvider407.Add(typeFromHandle813, service407 = new SimpleValueTargetProvider(array407, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider407.Add(typeof(IReferenceProvider), service407);
			Type typeFromHandle814 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver407 = new XmlNamespaceResolver();
			xmlNamespaceResolver407.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver407.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider407.Add(typeFromHandle814, new XamlTypeResolver(xmlNamespaceResolver407, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider407.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(690, 189)));
			button187.SetValue(fontSizeProperty407, ((IExtendedTypeConverter)fontSizeConverter407).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider407));
			button187.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button187.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button187.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button187);
			button188.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button188.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button188.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button188.Clicked += proControlPage.ForseTheft_TextChanged;
			button188.SetValue(Grid.RowProperty, 7);
			button188.SetValue(Grid.ColumnProperty, 1);
			button188.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty408 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter408 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider408 = new XamlServiceProvider();
			Type typeFromHandle815 = typeof(IProvideValueTarget);
			object[] array408 = new object[0 + 6];
			array408[0] = button188;
			array408[1] = grid18;
			array408[2] = stackLayout6;
			array408[3] = scrollView;
			array408[4] = grid21;
			array408[5] = proControlPage;
			object service408;
			xamlServiceProvider408.Add(typeFromHandle815, service408 = new SimpleValueTargetProvider(array408, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider408.Add(typeof(IReferenceProvider), service408);
			Type typeFromHandle816 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver408 = new XmlNamespaceResolver();
			xmlNamespaceResolver408.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver408.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider408.Add(typeFromHandle816, new XamlTypeResolver(xmlNamespaceResolver408, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider408.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(691, 186)));
			button188.SetValue(fontSizeProperty408, ((IExtendedTypeConverter)fontSizeConverter408).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider408));
			button188.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button188.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button188.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button188);
			button189.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button189.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button189.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button189.Clicked += proControlPage.OverSpeedAlm_TextChanged;
			button189.SetValue(Grid.RowProperty, 8);
			button189.SetValue(Grid.ColumnProperty, 0);
			button189.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty409 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter409 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider409 = new XamlServiceProvider();
			Type typeFromHandle817 = typeof(IProvideValueTarget);
			object[] array409 = new object[0 + 6];
			array409[0] = button189;
			array409[1] = grid18;
			array409[2] = stackLayout6;
			array409[3] = scrollView;
			array409[4] = grid21;
			array409[5] = proControlPage;
			object service409;
			xamlServiceProvider409.Add(typeFromHandle817, service409 = new SimpleValueTargetProvider(array409, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider409.Add(typeof(IReferenceProvider), service409);
			Type typeFromHandle818 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver409 = new XmlNamespaceResolver();
			xmlNamespaceResolver409.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver409.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider409.Add(typeFromHandle818, new XamlTypeResolver(xmlNamespaceResolver409, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider409.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(692, 188)));
			button189.SetValue(fontSizeProperty409, ((IExtendedTypeConverter)fontSizeConverter409).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider409));
			button189.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button189.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button189.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button189);
			button190.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button190.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button190.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button190.Clicked += proControlPage.ParkDisableBreak_TextChanged;
			button190.SetValue(Grid.RowProperty, 8);
			button190.SetValue(Grid.ColumnProperty, 1);
			button190.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty410 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter410 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider410 = new XamlServiceProvider();
			Type typeFromHandle819 = typeof(IProvideValueTarget);
			object[] array410 = new object[0 + 6];
			array410[0] = button190;
			array410[1] = grid18;
			array410[2] = stackLayout6;
			array410[3] = scrollView;
			array410[4] = grid21;
			array410[5] = proControlPage;
			object service410;
			xamlServiceProvider410.Add(typeFromHandle819, service410 = new SimpleValueTargetProvider(array410, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider410.Add(typeof(IReferenceProvider), service410);
			Type typeFromHandle820 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver410 = new XmlNamespaceResolver();
			xmlNamespaceResolver410.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver410.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider410.Add(typeFromHandle820, new XamlTypeResolver(xmlNamespaceResolver410, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider410.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(693, 192)));
			button190.SetValue(fontSizeProperty410, ((IExtendedTypeConverter)fontSizeConverter410).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider410));
			button190.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button190.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button190.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button190);
			button191.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button191.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button191.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button191.Clicked += proControlPage.GearRemember_TextChanged;
			button191.SetValue(Grid.RowProperty, 9);
			button191.SetValue(Grid.ColumnProperty, 0);
			button191.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty411 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter411 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider411 = new XamlServiceProvider();
			Type typeFromHandle821 = typeof(IProvideValueTarget);
			object[] array411 = new object[0 + 6];
			array411[0] = button191;
			array411[1] = grid18;
			array411[2] = stackLayout6;
			array411[3] = scrollView;
			array411[4] = grid21;
			array411[5] = proControlPage;
			object service411;
			xamlServiceProvider411.Add(typeFromHandle821, service411 = new SimpleValueTargetProvider(array411, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider411.Add(typeof(IReferenceProvider), service411);
			Type typeFromHandle822 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver411 = new XmlNamespaceResolver();
			xmlNamespaceResolver411.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver411.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider411.Add(typeFromHandle822, new XamlTypeResolver(xmlNamespaceResolver411, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider411.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(694, 188)));
			button191.SetValue(fontSizeProperty411, ((IExtendedTypeConverter)fontSizeConverter411).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider411));
			button191.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button191.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button191.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button191);
			button192.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button192.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button192.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button192.Clicked += proControlPage.BackEnable_TextChanged;
			button192.SetValue(Grid.RowProperty, 9);
			button192.SetValue(Grid.ColumnProperty, 1);
			button192.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty412 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter412 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider412 = new XamlServiceProvider();
			Type typeFromHandle823 = typeof(IProvideValueTarget);
			object[] array412 = new object[0 + 6];
			array412[0] = button192;
			array412[1] = grid18;
			array412[2] = stackLayout6;
			array412[3] = scrollView;
			array412[4] = grid21;
			array412[5] = proControlPage;
			object service412;
			xamlServiceProvider412.Add(typeFromHandle823, service412 = new SimpleValueTargetProvider(array412, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider412.Add(typeof(IReferenceProvider), service412);
			Type typeFromHandle824 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver412 = new XmlNamespaceResolver();
			xmlNamespaceResolver412.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver412.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider412.Add(typeFromHandle824, new XamlTypeResolver(xmlNamespaceResolver412, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider412.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(695, 186)));
			button192.SetValue(fontSizeProperty412, ((IExtendedTypeConverter)fontSizeConverter412).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider412));
			button192.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button192.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button192.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button192);
			button193.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button193.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button193.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button193.Clicked += proControlPage.RelayDelay1S_TextChanged;
			button193.SetValue(Grid.RowProperty, 10);
			button193.SetValue(Grid.ColumnProperty, 0);
			button193.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty413 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter413 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider413 = new XamlServiceProvider();
			Type typeFromHandle825 = typeof(IProvideValueTarget);
			object[] array413 = new object[0 + 6];
			array413[0] = button193;
			array413[1] = grid18;
			array413[2] = stackLayout6;
			array413[3] = scrollView;
			array413[4] = grid21;
			array413[5] = proControlPage;
			object service413;
			xamlServiceProvider413.Add(typeFromHandle825, service413 = new SimpleValueTargetProvider(array413, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider413.Add(typeof(IReferenceProvider), service413);
			Type typeFromHandle826 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver413 = new XmlNamespaceResolver();
			xmlNamespaceResolver413.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver413.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider413.Add(typeFromHandle826, new XamlTypeResolver(xmlNamespaceResolver413, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider413.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(696, 189)));
			button193.SetValue(fontSizeProperty413, ((IExtendedTypeConverter)fontSizeConverter413).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider413));
			button193.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button193.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button193.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button193);
			button194.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button194.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button194.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button194.Clicked += proControlPage.ZeroSwitch_SelectedIndexChanged;
			button194.SetValue(Grid.RowProperty, 10);
			button194.SetValue(Grid.ColumnProperty, 1);
			button194.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty414 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter414 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider414 = new XamlServiceProvider();
			Type typeFromHandle827 = typeof(IProvideValueTarget);
			object[] array414 = new object[0 + 6];
			array414[0] = button194;
			array414[1] = grid18;
			array414[2] = stackLayout6;
			array414[3] = scrollView;
			array414[4] = grid21;
			array414[5] = proControlPage;
			object service414;
			xamlServiceProvider414.Add(typeFromHandle827, service414 = new SimpleValueTargetProvider(array414, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider414.Add(typeof(IReferenceProvider), service414);
			Type typeFromHandle828 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver414 = new XmlNamespaceResolver();
			xmlNamespaceResolver414.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver414.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider414.Add(typeFromHandle828, new XamlTypeResolver(xmlNamespaceResolver414, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider414.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(697, 196)));
			button194.SetValue(fontSizeProperty414, ((IExtendedTypeConverter)fontSizeConverter414).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider414));
			button194.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button194.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button194.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button194);
			button195.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button195.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button195.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button195.Clicked += proControlPage.IsinStart_TextChanged;
			button195.SetValue(Grid.RowProperty, 11);
			button195.SetValue(Grid.ColumnProperty, 0);
			button195.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty415 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter415 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider415 = new XamlServiceProvider();
			Type typeFromHandle829 = typeof(IProvideValueTarget);
			object[] array415 = new object[0 + 6];
			array415[0] = button195;
			array415[1] = grid18;
			array415[2] = stackLayout6;
			array415[3] = scrollView;
			array415[4] = grid21;
			array415[5] = proControlPage;
			object service415;
			xamlServiceProvider415.Add(typeFromHandle829, service415 = new SimpleValueTargetProvider(array415, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider415.Add(typeof(IReferenceProvider), service415);
			Type typeFromHandle830 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver415 = new XmlNamespaceResolver();
			xmlNamespaceResolver415.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver415.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider415.Add(typeFromHandle830, new XamlTypeResolver(xmlNamespaceResolver415, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider415.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(699, 186)));
			button195.SetValue(fontSizeProperty415, ((IExtendedTypeConverter)fontSizeConverter415).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider415));
			button195.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button195.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button195.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button195);
			button196.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button196.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button196.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button196.Clicked += proControlPage.FollowSpeed_TextChanged;
			button196.SetValue(Grid.RowProperty, 11);
			button196.SetValue(Grid.ColumnProperty, 1);
			button196.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty416 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter416 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider416 = new XamlServiceProvider();
			Type typeFromHandle831 = typeof(IProvideValueTarget);
			object[] array416 = new object[0 + 6];
			array416[0] = button196;
			array416[1] = grid18;
			array416[2] = stackLayout6;
			array416[3] = scrollView;
			array416[4] = grid21;
			array416[5] = proControlPage;
			object service416;
			xamlServiceProvider416.Add(typeFromHandle831, service416 = new SimpleValueTargetProvider(array416, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider416.Add(typeof(IReferenceProvider), service416);
			Type typeFromHandle832 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver416 = new XmlNamespaceResolver();
			xmlNamespaceResolver416.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver416.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider416.Add(typeFromHandle832, new XamlTypeResolver(xmlNamespaceResolver416, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider416.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(700, 188)));
			button196.SetValue(fontSizeProperty416, ((IExtendedTypeConverter)fontSizeConverter416).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider416));
			button196.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button196.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button196.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button196);
			button197.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button197.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button197.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button197.Clicked += proControlPage.CurrFD_SelectedIndexChanged;
			button197.SetValue(Grid.RowProperty, 12);
			button197.SetValue(Grid.ColumnProperty, 0);
			button197.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty417 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter417 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider417 = new XamlServiceProvider();
			Type typeFromHandle833 = typeof(IProvideValueTarget);
			object[] array417 = new object[0 + 6];
			array417[0] = button197;
			array417[1] = grid18;
			array417[2] = stackLayout6;
			array417[3] = scrollView;
			array417[4] = grid21;
			array417[5] = proControlPage;
			object service417;
			xamlServiceProvider417.Add(typeFromHandle833, service417 = new SimpleValueTargetProvider(array417, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider417.Add(typeof(IReferenceProvider), service417);
			Type typeFromHandle834 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver417 = new XmlNamespaceResolver();
			xmlNamespaceResolver417.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver417.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider417.Add(typeFromHandle834, new XamlTypeResolver(xmlNamespaceResolver417, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider417.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(701, 190)));
			button197.SetValue(fontSizeProperty417, ((IExtendedTypeConverter)fontSizeConverter417).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider417));
			button197.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button197.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button197.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button197);
			button198.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button198.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button198.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button198.Clicked += proControlPage.PulseFD_SelectedIndexChanged;
			button198.SetValue(Grid.RowProperty, 12);
			button198.SetValue(Grid.ColumnProperty, 1);
			button198.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty418 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter418 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider418 = new XamlServiceProvider();
			Type typeFromHandle835 = typeof(IProvideValueTarget);
			object[] array418 = new object[0 + 6];
			array418[0] = button198;
			array418[1] = grid18;
			array418[2] = stackLayout6;
			array418[3] = scrollView;
			array418[4] = grid21;
			array418[5] = proControlPage;
			object service418;
			xamlServiceProvider418.Add(typeFromHandle835, service418 = new SimpleValueTargetProvider(array418, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider418.Add(typeof(IReferenceProvider), service418);
			Type typeFromHandle836 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver418 = new XmlNamespaceResolver();
			xmlNamespaceResolver418.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver418.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider418.Add(typeFromHandle836, new XamlTypeResolver(xmlNamespaceResolver418, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider418.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(702, 191)));
			button198.SetValue(fontSizeProperty418, ((IExtendedTypeConverter)fontSizeConverter418).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider418));
			button198.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button198.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button198.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button198);
			button199.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button199.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button199.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button199.Clicked += proControlPage.Temp70_SelectedIndexChanged;
			button199.SetValue(Grid.RowProperty, 13);
			button199.SetValue(Grid.ColumnProperty, 0);
			button199.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty419 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter419 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider419 = new XamlServiceProvider();
			Type typeFromHandle837 = typeof(IProvideValueTarget);
			object[] array419 = new object[0 + 6];
			array419[0] = button199;
			array419[1] = grid18;
			array419[2] = stackLayout6;
			array419[3] = scrollView;
			array419[4] = grid21;
			array419[5] = proControlPage;
			object service419;
			xamlServiceProvider419.Add(typeFromHandle837, service419 = new SimpleValueTargetProvider(array419, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider419.Add(typeof(IReferenceProvider), service419);
			Type typeFromHandle838 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver419 = new XmlNamespaceResolver();
			xmlNamespaceResolver419.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver419.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider419.Add(typeFromHandle838, new XamlTypeResolver(xmlNamespaceResolver419, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider419.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(703, 190)));
			button199.SetValue(fontSizeProperty419, ((IExtendedTypeConverter)fontSizeConverter419).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider419));
			button199.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button199.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button199.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button199);
			button200.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button200.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button200.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button200.Clicked += proControlPage.FastRE_SelectedIndexChanged;
			button200.SetValue(Grid.RowProperty, 13);
			button200.SetValue(Grid.ColumnProperty, 1);
			button200.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty420 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter420 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider420 = new XamlServiceProvider();
			Type typeFromHandle839 = typeof(IProvideValueTarget);
			object[] array420 = new object[0 + 6];
			array420[0] = button200;
			array420[1] = grid18;
			array420[2] = stackLayout6;
			array420[3] = scrollView;
			array420[4] = grid21;
			array420[5] = proControlPage;
			object service420;
			xamlServiceProvider420.Add(typeFromHandle839, service420 = new SimpleValueTargetProvider(array420, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider420.Add(typeof(IReferenceProvider), service420);
			Type typeFromHandle840 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver420 = new XmlNamespaceResolver();
			xmlNamespaceResolver420.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver420.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider420.Add(typeFromHandle840, new XamlTypeResolver(xmlNamespaceResolver420, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider420.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(704, 190)));
			button200.SetValue(fontSizeProperty420, ((IExtendedTypeConverter)fontSizeConverter420).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider420));
			button200.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button200.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button200.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button200);
			button201.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button201.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button201.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button201.Clicked += proControlPage.InverseTime_TextChanged;
			button201.SetValue(Grid.RowProperty, 14);
			button201.SetValue(Grid.ColumnProperty, 0);
			button201.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty421 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter421 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider421 = new XamlServiceProvider();
			Type typeFromHandle841 = typeof(IProvideValueTarget);
			object[] array421 = new object[0 + 6];
			array421[0] = button201;
			array421[1] = grid18;
			array421[2] = stackLayout6;
			array421[3] = scrollView;
			array421[4] = grid21;
			array421[5] = proControlPage;
			object service421;
			xamlServiceProvider421.Add(typeFromHandle841, service421 = new SimpleValueTargetProvider(array421, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider421.Add(typeof(IReferenceProvider), service421);
			Type typeFromHandle842 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver421 = new XmlNamespaceResolver();
			xmlNamespaceResolver421.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver421.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider421.Add(typeFromHandle842, new XamlTypeResolver(xmlNamespaceResolver421, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider421.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(705, 187)));
			button201.SetValue(fontSizeProperty421, ((IExtendedTypeConverter)fontSizeConverter421).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider421));
			button201.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button201.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button201.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button201);
			button202.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button202.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button202.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button202.Clicked += proControlPage.ParkDiff_TextChanged;
			button202.SetValue(Grid.RowProperty, 14);
			button202.SetValue(Grid.ColumnProperty, 1);
			button202.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty422 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter422 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider422 = new XamlServiceProvider();
			Type typeFromHandle843 = typeof(IProvideValueTarget);
			object[] array422 = new object[0 + 6];
			array422[0] = button202;
			array422[1] = grid18;
			array422[2] = stackLayout6;
			array422[3] = scrollView;
			array422[4] = grid21;
			array422[5] = proControlPage;
			object service422;
			xamlServiceProvider422.Add(typeFromHandle843, service422 = new SimpleValueTargetProvider(array422, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider422.Add(typeof(IReferenceProvider), service422);
			Type typeFromHandle844 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver422 = new XmlNamespaceResolver();
			xmlNamespaceResolver422.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver422.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider422.Add(typeFromHandle844, new XamlTypeResolver(xmlNamespaceResolver422, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider422.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(706, 184)));
			button202.SetValue(fontSizeProperty422, ((IExtendedTypeConverter)fontSizeConverter422).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider422));
			button202.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button202.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button202.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button202);
			button203.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button203.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button203.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button203.Clicked += proControlPage.ParkCoeff_TextChanged;
			button203.SetValue(Grid.RowProperty, 15);
			button203.SetValue(Grid.ColumnProperty, 0);
			button203.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty423 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter423 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider423 = new XamlServiceProvider();
			Type typeFromHandle845 = typeof(IProvideValueTarget);
			object[] array423 = new object[0 + 6];
			array423[0] = button203;
			array423[1] = grid18;
			array423[2] = stackLayout6;
			array423[3] = scrollView;
			array423[4] = grid21;
			array423[5] = proControlPage;
			object service423;
			xamlServiceProvider423.Add(typeFromHandle845, service423 = new SimpleValueTargetProvider(array423, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider423.Add(typeof(IReferenceProvider), service423);
			Type typeFromHandle846 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver423 = new XmlNamespaceResolver();
			xmlNamespaceResolver423.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver423.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider423.Add(typeFromHandle846, new XamlTypeResolver(xmlNamespaceResolver423, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider423.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(707, 185)));
			button203.SetValue(fontSizeProperty423, ((IExtendedTypeConverter)fontSizeConverter423).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider423));
			button203.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button203.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button203.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button203);
			button204.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button204.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button204.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button204.Clicked += proControlPage.RxdSel_SelectedIndexChanged;
			button204.SetValue(Grid.RowProperty, 15);
			button204.SetValue(Grid.ColumnProperty, 1);
			button204.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty424 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter424 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider424 = new XamlServiceProvider();
			Type typeFromHandle847 = typeof(IProvideValueTarget);
			object[] array424 = new object[0 + 6];
			array424[0] = button204;
			array424[1] = grid18;
			array424[2] = stackLayout6;
			array424[3] = scrollView;
			array424[4] = grid21;
			array424[5] = proControlPage;
			object service424;
			xamlServiceProvider424.Add(typeFromHandle847, service424 = new SimpleValueTargetProvider(array424, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider424.Add(typeof(IReferenceProvider), service424);
			Type typeFromHandle848 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver424 = new XmlNamespaceResolver();
			xmlNamespaceResolver424.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver424.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider424.Add(typeFromHandle848, new XamlTypeResolver(xmlNamespaceResolver424, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider424.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(708, 193)));
			button204.SetValue(fontSizeProperty424, ((IExtendedTypeConverter)fontSizeConverter424).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider424));
			button204.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button204.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button204.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button204);
			button205.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button205.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button205.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button205.Clicked += proControlPage.LearnThrottle_TextChanged;
			button205.SetValue(Grid.RowProperty, 16);
			button205.SetValue(Grid.ColumnProperty, 0);
			button205.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty425 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter425 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider425 = new XamlServiceProvider();
			Type typeFromHandle849 = typeof(IProvideValueTarget);
			object[] array425 = new object[0 + 6];
			array425[0] = button205;
			array425[1] = grid18;
			array425[2] = stackLayout6;
			array425[3] = scrollView;
			array425[4] = grid21;
			array425[5] = proControlPage;
			object service425;
			xamlServiceProvider425.Add(typeFromHandle849, service425 = new SimpleValueTargetProvider(array425, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider425.Add(typeof(IReferenceProvider), service425);
			Type typeFromHandle850 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver425 = new XmlNamespaceResolver();
			xmlNamespaceResolver425.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver425.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider425.Add(typeFromHandle850, new XamlTypeResolver(xmlNamespaceResolver425, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider425.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(709, 190)));
			button205.SetValue(fontSizeProperty425, ((IExtendedTypeConverter)fontSizeConverter425).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider425));
			button205.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button205.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button205.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button205);
			button206.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button206.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button206.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button206.Clicked += proControlPage.LearnVol_TextChanged;
			button206.SetValue(Grid.RowProperty, 16);
			button206.SetValue(Grid.ColumnProperty, 1);
			button206.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty426 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter426 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider426 = new XamlServiceProvider();
			Type typeFromHandle851 = typeof(IProvideValueTarget);
			object[] array426 = new object[0 + 6];
			array426[0] = button206;
			array426[1] = grid18;
			array426[2] = stackLayout6;
			array426[3] = scrollView;
			array426[4] = grid21;
			array426[5] = proControlPage;
			object service426;
			xamlServiceProvider426.Add(typeFromHandle851, service426 = new SimpleValueTargetProvider(array426, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider426.Add(typeof(IReferenceProvider), service426);
			Type typeFromHandle852 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver426 = new XmlNamespaceResolver();
			xmlNamespaceResolver426.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver426.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider426.Add(typeFromHandle852, new XamlTypeResolver(xmlNamespaceResolver426, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider426.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(710, 185)));
			button206.SetValue(fontSizeProperty426, ((IExtendedTypeConverter)fontSizeConverter426).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider426));
			button206.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button206.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button206.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button206);
			button207.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button207.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button207.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button207.Clicked += proControlPage.LearnVoh_TextChanged;
			button207.SetValue(Grid.RowProperty, 17);
			button207.SetValue(Grid.ColumnProperty, 0);
			button207.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty427 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter427 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider427 = new XamlServiceProvider();
			Type typeFromHandle853 = typeof(IProvideValueTarget);
			object[] array427 = new object[0 + 6];
			array427[0] = button207;
			array427[1] = grid18;
			array427[2] = stackLayout6;
			array427[3] = scrollView;
			array427[4] = grid21;
			array427[5] = proControlPage;
			object service427;
			xamlServiceProvider427.Add(typeFromHandle853, service427 = new SimpleValueTargetProvider(array427, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider427.Add(typeof(IReferenceProvider), service427);
			Type typeFromHandle854 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver427 = new XmlNamespaceResolver();
			xmlNamespaceResolver427.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver427.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider427.Add(typeFromHandle854, new XamlTypeResolver(xmlNamespaceResolver427, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider427.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(711, 184)));
			button207.SetValue(fontSizeProperty427, ((IExtendedTypeConverter)fontSizeConverter427).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider427));
			button207.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button207.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button207.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button207);
			button208.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button208.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button208.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button208.Clicked += proControlPage.SpecialWeak_SelectedIndexChanged;
			button208.SetValue(Grid.RowProperty, 18);
			button208.SetValue(Grid.ColumnProperty, 0);
			button208.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty428 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter428 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider428 = new XamlServiceProvider();
			Type typeFromHandle855 = typeof(IProvideValueTarget);
			object[] array428 = new object[0 + 6];
			array428[0] = button208;
			array428[1] = grid18;
			array428[2] = stackLayout6;
			array428[3] = scrollView;
			array428[4] = grid21;
			array428[5] = proControlPage;
			object service428;
			xamlServiceProvider428.Add(typeFromHandle855, service428 = new SimpleValueTargetProvider(array428, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider428.Add(typeof(IReferenceProvider), service428);
			Type typeFromHandle856 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver428 = new XmlNamespaceResolver();
			xmlNamespaceResolver428.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver428.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider428.Add(typeFromHandle856, new XamlTypeResolver(xmlNamespaceResolver428, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider428.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(712, 197)));
			button208.SetValue(fontSizeProperty428, ((IExtendedTypeConverter)fontSizeConverter428).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider428));
			button208.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button208.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button208.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button208);
			button209.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			button209.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			button209.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 26.0);
			button209.Clicked += proControlPage.Protocol485_TextChanged;
			button209.SetValue(Grid.RowProperty, 18);
			button209.SetValue(Grid.ColumnProperty, 1);
			button209.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty429 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter429 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider429 = new XamlServiceProvider();
			Type typeFromHandle857 = typeof(IProvideValueTarget);
			object[] array429 = new object[0 + 6];
			array429[0] = button209;
			array429[1] = grid18;
			array429[2] = stackLayout6;
			array429[3] = scrollView;
			array429[4] = grid21;
			array429[5] = proControlPage;
			object service429;
			xamlServiceProvider429.Add(typeFromHandle857, service429 = new SimpleValueTargetProvider(array429, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider429.Add(typeof(IReferenceProvider), service429);
			Type typeFromHandle858 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver429 = new XmlNamespaceResolver();
			xmlNamespaceResolver429.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver429.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider429.Add(typeFromHandle858, new XamlTypeResolver(xmlNamespaceResolver429, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider429.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(713, 188)));
			button209.SetValue(fontSizeProperty429, ((IExtendedTypeConverter)fontSizeConverter429).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider429));
			button209.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button209.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			button209.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid18.Children.Add(button209);
			stackLayout6.Children.Add(grid18);
			button210.Clicked += proControlPage.RowText11_Clicked;
			button210.SetValue(Xamarin.Forms.Button.TextProperty, "±Í∂®");
			button210.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.SaddleBrown);
			BindableProperty fontSizeProperty430 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter430 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider430 = new XamlServiceProvider();
			Type typeFromHandle859 = typeof(IProvideValueTarget);
			object[] array430 = new object[0 + 5];
			array430[0] = button210;
			array430[1] = stackLayout6;
			array430[2] = scrollView;
			array430[3] = grid21;
			array430[4] = proControlPage;
			object service430;
			xamlServiceProvider430.Add(typeFromHandle859, service430 = new SimpleValueTargetProvider(array430, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider430.Add(typeof(IReferenceProvider), service430);
			Type typeFromHandle860 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver430 = new XmlNamespaceResolver();
			xmlNamespaceResolver430.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver430.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider430.Add(typeFromHandle860, new XamlTypeResolver(xmlNamespaceResolver430, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider430.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(716, 112)));
			button210.SetValue(fontSizeProperty430, ((IExtendedTypeConverter)fontSizeConverter430).ConvertFromInvariantString("Medium", (IServiceProvider)xamlServiceProvider430));
			button210.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button210.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			stackLayout6.Children.Add(button210);
			grid19.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			rowDefinition95.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid19.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition95);
			rowDefinition96.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid19.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition96);
			rowDefinition97.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid19.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition97);
			rowDefinition98.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid19.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition98);
			rowDefinition99.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<RowDefinition>)grid19.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition99);
			columnDefinition35.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid19.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition35);
			columnDefinition36.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid19.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition36);
			label221.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label221.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label221.SetValue(Label.TextProperty, "œﬂµÁ¡˜œµ ˝: 0000");
			label221.SetValue(Grid.RowProperty, 0);
			label221.SetValue(Grid.ColumnProperty, 0);
			label221.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty431 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter431 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider431 = new XamlServiceProvider();
			Type typeFromHandle861 = typeof(IProvideValueTarget);
			object[] array431 = new object[0 + 6];
			array431[0] = label221;
			array431[1] = grid19;
			array431[2] = stackLayout6;
			array431[3] = scrollView;
			array431[4] = grid21;
			array431[5] = proControlPage;
			object service431;
			xamlServiceProvider431.Add(typeFromHandle861, service431 = new SimpleValueTargetProvider(array431, Label.FontSizeProperty, nameScope));
			xamlServiceProvider431.Add(typeof(IReferenceProvider), service431);
			Type typeFromHandle862 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver431 = new XmlNamespaceResolver();
			xmlNamespaceResolver431.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver431.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider431.Add(typeFromHandle862, new XamlTypeResolver(xmlNamespaceResolver431, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider431.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(729, 168)));
			label221.SetValue(fontSizeProperty431, ((IExtendedTypeConverter)fontSizeConverter431).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider431));
			label221.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label221.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label221.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid19.Children.Add(label221);
			label222.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label222.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label222.SetValue(Label.TextProperty, "œﬂµÁ¡˜¡„µ„: 0000");
			label222.SetValue(Grid.RowProperty, 0);
			label222.SetValue(Grid.ColumnProperty, 1);
			label222.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty432 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter432 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider432 = new XamlServiceProvider();
			Type typeFromHandle863 = typeof(IProvideValueTarget);
			object[] array432 = new object[0 + 6];
			array432[0] = label222;
			array432[1] = grid19;
			array432[2] = stackLayout6;
			array432[3] = scrollView;
			array432[4] = grid21;
			array432[5] = proControlPage;
			object service432;
			xamlServiceProvider432.Add(typeFromHandle863, service432 = new SimpleValueTargetProvider(array432, Label.FontSizeProperty, nameScope));
			xamlServiceProvider432.Add(typeof(IReferenceProvider), service432);
			Type typeFromHandle864 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver432 = new XmlNamespaceResolver();
			xmlNamespaceResolver432.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver432.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider432.Add(typeFromHandle864, new XamlTypeResolver(xmlNamespaceResolver432, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider432.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(730, 167)));
			label222.SetValue(fontSizeProperty432, ((IExtendedTypeConverter)fontSizeConverter432).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider432));
			label222.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label222.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label222.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid19.Children.Add(label222);
			label223.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label223.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label223.SetValue(Label.TextProperty, "Aœ‡œµ ˝: 0000");
			label223.SetValue(Grid.RowProperty, 1);
			label223.SetValue(Grid.ColumnProperty, 0);
			label223.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty433 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter433 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider433 = new XamlServiceProvider();
			Type typeFromHandle865 = typeof(IProvideValueTarget);
			object[] array433 = new object[0 + 6];
			array433[0] = label223;
			array433[1] = grid19;
			array433[2] = stackLayout6;
			array433[3] = scrollView;
			array433[4] = grid21;
			array433[5] = proControlPage;
			object service433;
			xamlServiceProvider433.Add(typeFromHandle865, service433 = new SimpleValueTargetProvider(array433, Label.FontSizeProperty, nameScope));
			xamlServiceProvider433.Add(typeof(IReferenceProvider), service433);
			Type typeFromHandle866 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver433 = new XmlNamespaceResolver();
			xmlNamespaceResolver433.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver433.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider433.Add(typeFromHandle866, new XamlTypeResolver(xmlNamespaceResolver433, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider433.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(731, 169)));
			label223.SetValue(fontSizeProperty433, ((IExtendedTypeConverter)fontSizeConverter433).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider433));
			label223.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label223.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label223.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid19.Children.Add(label223);
			label224.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label224.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label224.SetValue(Label.TextProperty, "Cœ‡œµ ˝: 0000");
			label224.SetValue(Grid.RowProperty, 1);
			label224.SetValue(Grid.ColumnProperty, 1);
			label224.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty434 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter434 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider434 = new XamlServiceProvider();
			Type typeFromHandle867 = typeof(IProvideValueTarget);
			object[] array434 = new object[0 + 6];
			array434[0] = label224;
			array434[1] = grid19;
			array434[2] = stackLayout6;
			array434[3] = scrollView;
			array434[4] = grid21;
			array434[5] = proControlPage;
			object service434;
			xamlServiceProvider434.Add(typeFromHandle867, service434 = new SimpleValueTargetProvider(array434, Label.FontSizeProperty, nameScope));
			xamlServiceProvider434.Add(typeof(IReferenceProvider), service434);
			Type typeFromHandle868 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver434 = new XmlNamespaceResolver();
			xmlNamespaceResolver434.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver434.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider434.Add(typeFromHandle868, new XamlTypeResolver(xmlNamespaceResolver434, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider434.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(732, 169)));
			label224.SetValue(fontSizeProperty434, ((IExtendedTypeConverter)fontSizeConverter434).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider434));
			label224.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label224.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label224.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid19.Children.Add(label224);
			label225.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label225.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label225.SetValue(Label.TextProperty, "Aœ‡¡„µ„: 0000");
			label225.SetValue(Grid.RowProperty, 2);
			label225.SetValue(Grid.ColumnProperty, 0);
			label225.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty435 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter435 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider435 = new XamlServiceProvider();
			Type typeFromHandle869 = typeof(IProvideValueTarget);
			object[] array435 = new object[0 + 6];
			array435[0] = label225;
			array435[1] = grid19;
			array435[2] = stackLayout6;
			array435[3] = scrollView;
			array435[4] = grid21;
			array435[5] = proControlPage;
			object service435;
			xamlServiceProvider435.Add(typeFromHandle869, service435 = new SimpleValueTargetProvider(array435, Label.FontSizeProperty, nameScope));
			xamlServiceProvider435.Add(typeof(IReferenceProvider), service435);
			Type typeFromHandle870 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver435 = new XmlNamespaceResolver();
			xmlNamespaceResolver435.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver435.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider435.Add(typeFromHandle870, new XamlTypeResolver(xmlNamespaceResolver435, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider435.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(733, 168)));
			label225.SetValue(fontSizeProperty435, ((IExtendedTypeConverter)fontSizeConverter435).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider435));
			label225.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label225.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label225.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid19.Children.Add(label225);
			label226.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label226.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label226.SetValue(Label.TextProperty, "Cœ‡¡„µ„: 0000");
			label226.SetValue(Grid.RowProperty, 2);
			label226.SetValue(Grid.ColumnProperty, 1);
			label226.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty436 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter436 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider436 = new XamlServiceProvider();
			Type typeFromHandle871 = typeof(IProvideValueTarget);
			object[] array436 = new object[0 + 6];
			array436[0] = label226;
			array436[1] = grid19;
			array436[2] = stackLayout6;
			array436[3] = scrollView;
			array436[4] = grid21;
			array436[5] = proControlPage;
			object service436;
			xamlServiceProvider436.Add(typeFromHandle871, service436 = new SimpleValueTargetProvider(array436, Label.FontSizeProperty, nameScope));
			xamlServiceProvider436.Add(typeof(IReferenceProvider), service436);
			Type typeFromHandle872 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver436 = new XmlNamespaceResolver();
			xmlNamespaceResolver436.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver436.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider436.Add(typeFromHandle872, new XamlTypeResolver(xmlNamespaceResolver436, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider436.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(734, 168)));
			label226.SetValue(fontSizeProperty436, ((IExtendedTypeConverter)fontSizeConverter436).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider436));
			label226.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label226.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label226.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid19.Children.Add(label226);
			label227.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label227.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label227.SetValue(Label.TextProperty, "Œ¬∂»œµ ˝: 0000");
			label227.SetValue(Grid.RowProperty, 3);
			label227.SetValue(Grid.ColumnProperty, 0);
			label227.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty437 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter437 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider437 = new XamlServiceProvider();
			Type typeFromHandle873 = typeof(IProvideValueTarget);
			object[] array437 = new object[0 + 6];
			array437[0] = label227;
			array437[1] = grid19;
			array437[2] = stackLayout6;
			array437[3] = scrollView;
			array437[4] = grid21;
			array437[5] = proControlPage;
			object service437;
			xamlServiceProvider437.Add(typeFromHandle873, service437 = new SimpleValueTargetProvider(array437, Label.FontSizeProperty, nameScope));
			xamlServiceProvider437.Add(typeof(IReferenceProvider), service437);
			Type typeFromHandle874 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver437 = new XmlNamespaceResolver();
			xmlNamespaceResolver437.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver437.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider437.Add(typeFromHandle874, new XamlTypeResolver(xmlNamespaceResolver437, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider437.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(735, 167)));
			label227.SetValue(fontSizeProperty437, ((IExtendedTypeConverter)fontSizeConverter437).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider437));
			label227.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label227.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label227.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid19.Children.Add(label227);
			label228.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label228.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label228.SetValue(Label.TextProperty, "µÁ—πœµ ˝: 0000");
			label228.SetValue(Grid.RowProperty, 3);
			label228.SetValue(Grid.ColumnProperty, 1);
			label228.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty438 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter438 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider438 = new XamlServiceProvider();
			Type typeFromHandle875 = typeof(IProvideValueTarget);
			object[] array438 = new object[0 + 6];
			array438[0] = label228;
			array438[1] = grid19;
			array438[2] = stackLayout6;
			array438[3] = scrollView;
			array438[4] = grid21;
			array438[5] = proControlPage;
			object service438;
			xamlServiceProvider438.Add(typeFromHandle875, service438 = new SimpleValueTargetProvider(array438, Label.FontSizeProperty, nameScope));
			xamlServiceProvider438.Add(typeof(IReferenceProvider), service438);
			Type typeFromHandle876 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver438 = new XmlNamespaceResolver();
			xmlNamespaceResolver438.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver438.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider438.Add(typeFromHandle876, new XamlTypeResolver(xmlNamespaceResolver438, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider438.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(736, 165)));
			label228.SetValue(fontSizeProperty438, ((IExtendedTypeConverter)fontSizeConverter438).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider438));
			label228.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label228.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label228.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid19.Children.Add(label228);
			label229.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			label229.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 200.0);
			label229.SetValue(Label.TextProperty, "±Í∂®¥Œ ˝: 0000");
			label229.SetValue(Grid.RowProperty, 4);
			label229.SetValue(Grid.ColumnProperty, 0);
			label229.SetValue(Label.TextColorProperty, Color.Black);
			BindableProperty fontSizeProperty439 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter439 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider439 = new XamlServiceProvider();
			Type typeFromHandle877 = typeof(IProvideValueTarget);
			object[] array439 = new object[0 + 6];
			array439[0] = label229;
			array439[1] = grid19;
			array439[2] = stackLayout6;
			array439[3] = scrollView;
			array439[4] = grid21;
			array439[5] = proControlPage;
			object service439;
			xamlServiceProvider439.Add(typeFromHandle877, service439 = new SimpleValueTargetProvider(array439, Label.FontSizeProperty, nameScope));
			xamlServiceProvider439.Add(typeof(IReferenceProvider), service439);
			Type typeFromHandle878 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver439 = new XmlNamespaceResolver();
			xmlNamespaceResolver439.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver439.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider439.Add(typeFromHandle878, new XamlTypeResolver(xmlNamespaceResolver439, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider439.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(737, 165)));
			label229.SetValue(fontSizeProperty439, ((IExtendedTypeConverter)fontSizeConverter439).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider439));
			label229.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label229.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label229.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			grid19.Children.Add(label229);
			stackLayout6.Children.Add(grid19);
			scrollView.Content = stackLayout6;
			grid21.Children.Add(scrollView);
			grid20.SetValue(Grid.RowProperty, 1);
			grid20.SetValue(Grid.ColumnProperty, 0);
			columnDefinition37.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("18*"));
			((DefinitionCollection<ColumnDefinition>)grid20.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition37);
			columnDefinition38.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("18*"));
			((DefinitionCollection<ColumnDefinition>)grid20.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition38);
			columnDefinition39.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("40*"));
			((DefinitionCollection<ColumnDefinition>)grid20.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition39);
			columnDefinition40.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("24*"));
			((DefinitionCollection<ColumnDefinition>)grid20.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition40);
			button211.SetValue(Xamarin.Forms.Button.TextProperty, "ª÷∏¥");
			button211.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button211.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			BindableProperty fontSizeProperty440 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter440 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider440 = new XamlServiceProvider();
			Type typeFromHandle879 = typeof(IProvideValueTarget);
			object[] array440 = new object[0 + 4];
			array440[0] = button211;
			array440[1] = grid20;
			array440[2] = grid21;
			array440[3] = proControlPage;
			object service440;
			xamlServiceProvider440.Add(typeFromHandle879, service440 = new SimpleValueTargetProvider(array440, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider440.Add(typeof(IReferenceProvider), service440);
			Type typeFromHandle880 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver440 = new XmlNamespaceResolver();
			xmlNamespaceResolver440.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver440.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider440.Add(typeFromHandle880, new XamlTypeResolver(xmlNamespaceResolver440, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider440.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(749, 100)));
			button211.SetValue(fontSizeProperty440, ((IExtendedTypeConverter)fontSizeConverter440).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider440));
			button211.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button211.SetValue(Grid.RowProperty, 0);
			button211.SetValue(Grid.ColumnProperty, 0);
			button211.Clicked += proControlPage.OnButtonResetClicked;
			grid20.Children.Add(button211);
			button212.SetValue(Xamarin.Forms.Button.TextProperty, "±£¥Ê");
			button212.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button212.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			BindableProperty fontSizeProperty441 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter441 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider441 = new XamlServiceProvider();
			Type typeFromHandle881 = typeof(IProvideValueTarget);
			object[] array441 = new object[0 + 4];
			array441[0] = button212;
			array441[1] = grid20;
			array441[2] = grid21;
			array441[3] = proControlPage;
			object service441;
			xamlServiceProvider441.Add(typeFromHandle881, service441 = new SimpleValueTargetProvider(array441, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider441.Add(typeof(IReferenceProvider), service441);
			Type typeFromHandle882 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver441 = new XmlNamespaceResolver();
			xmlNamespaceResolver441.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver441.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider441.Add(typeFromHandle882, new XamlTypeResolver(xmlNamespaceResolver441, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider441.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(752, 99)));
			button212.SetValue(fontSizeProperty441, ((IExtendedTypeConverter)fontSizeConverter441).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider441));
			button212.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button212.SetValue(Grid.RowProperty, 0);
			button212.SetValue(Grid.ColumnProperty, 1);
			button212.Clicked += proControlPage.ButtonSaveName_Clicked;
			grid20.Children.Add(button212);
			button213.SetValue(Xamarin.Forms.Button.TextProperty, "∑µªÿæ´ºÚƒ£ Ω");
			button213.SetValue(Xamarin.Forms.Button.TextColorProperty, Color.Black);
			button213.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.LightGray);
			BindableProperty fontSizeProperty442 = Xamarin.Forms.Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter442 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider442 = new XamlServiceProvider();
			Type typeFromHandle883 = typeof(IProvideValueTarget);
			object[] array442 = new object[0 + 4];
			array442[0] = button213;
			array442[1] = grid20;
			array442[2] = grid21;
			array442[3] = proControlPage;
			object service442;
			xamlServiceProvider442.Add(typeFromHandle883, service442 = new SimpleValueTargetProvider(array442, Xamarin.Forms.Button.FontSizeProperty, nameScope));
			xamlServiceProvider442.Add(typeof(IReferenceProvider), service442);
			Type typeFromHandle884 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver442 = new XmlNamespaceResolver();
			xmlNamespaceResolver442.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver442.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider442.Add(typeFromHandle884, new XamlTypeResolver(xmlNamespaceResolver442, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider442.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(755, 103)));
			button213.SetValue(fontSizeProperty442, ((IExtendedTypeConverter)fontSizeConverter442).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider442));
			button213.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			button213.SetValue(Grid.RowProperty, 0);
			button213.SetValue(Grid.ColumnProperty, 2);
			button213.Clicked += proControlPage.ButtonMode_Clicked;
			grid20.Children.Add(button213);
			label230.SetValue(Label.TextProperty, "Ω” ’÷°∫≈00000000000");
			label230.SetValue(Grid.RowProperty, 0);
			label230.SetValue(Grid.ColumnProperty, 3);
			label230.SetValue(Label.TextColorProperty, Color.Blue);
			BindableProperty fontSizeProperty443 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter443 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider443 = new XamlServiceProvider();
			Type typeFromHandle885 = typeof(IProvideValueTarget);
			object[] array443 = new object[0 + 4];
			array443[0] = label230;
			array443[1] = grid20;
			array443[2] = grid21;
			array443[3] = proControlPage;
			object service443;
			xamlServiceProvider443.Add(typeFromHandle885, service443 = new SimpleValueTargetProvider(array443, Label.FontSizeProperty, nameScope));
			xamlServiceProvider443.Add(typeof(IReferenceProvider), service443);
			Type typeFromHandle886 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver443 = new XmlNamespaceResolver();
			xmlNamespaceResolver443.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver443.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xamlServiceProvider443.Add(typeFromHandle886, new XamlTypeResolver(xmlNamespaceResolver443, typeof(ProControlPage).GetTypeInfo().Assembly));
			xamlServiceProvider443.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(758, 112)));
			label230.SetValue(fontSizeProperty443, ((IExtendedTypeConverter)fontSizeConverter443).ConvertFromInvariantString("Small", (IServiceProvider)xamlServiceProvider443));
			label230.SetValue(Xamarin.Forms.VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("True"));
			label230.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			label230.SetValue(View.VerticalOptionsProperty, LayoutOptions.Start);
			grid20.Children.Add(label230);
			grid21.Children.Add(grid20);
			proControlPage.SetValue(ContentPage.ContentProperty, grid21);
		}

		private void __InitComponentRuntime()
		{
			this.LoadFromXaml(typeof(ProControlPage));
			girdall = this.FindByName<Grid>("girdall");
			DetailView = this.FindByName<Xamarin.Forms.ScrollView>("DetailView");
			RowText0 = this.FindByName<Label>("RowText0");
			ModelFactoryName = this.FindByName<Label>("ModelFactoryName");
			ModelName = this.FindByName<Label>("ModelName");
			ModelTypeName = this.FindByName<Label>("ModelTypeName");
			ModelType = this.FindByName<Label>("ModelType");
			ModelPowerName = this.FindByName<Label>("ModelPowerName");
			ModelPower = this.FindByName<Label>("ModelPower");
			ModelCurrName = this.FindByName<Label>("ModelCurrName");
			ModelCurr = this.FindByName<Label>("ModelCurr");
			ModelNumber = this.FindByName<Label>("ModelNumber");
			CustomCode = this.FindByName<Label>("CustomCode");
			MorseCodeName = this.FindByName<Label>("MorseCodeName");
			RowDateTime = this.FindByName<Xamarin.Forms.Button>("RowDateTime");
			DateTimeGrid = this.FindByName<Grid>("DateTimeGrid");
			ModelDate = this.FindByName<Label>("ModelDate");
			ModelTime = this.FindByName<Label>("ModelTime");
			RowText2 = this.FindByName<Xamarin.Forms.Button>("RowText2");
			Motopara = this.FindByName<Grid>("Motopara");
			PositionDetect = this.FindByName<Label>("PositionDetect");
			NTC_PTC = this.FindByName<Label>("NTC_PTC");
			PhaseOffset = this.FindByName<Label>("PhaseOffset");
			PolePairsDisplay = this.FindByName<Label>("PolePairsDisplay");
			Direction = this.FindByName<Label>("Direction");
			RatedSpeed = this.FindByName<Label>("RatedSpeed");
			RatedVoltage = this.FindByName<Label>("RatedVoltage");
			RatedPower = this.FindByName<Label>("RatedPower");
			MaxSpeed = this.FindByName<Label>("MaxSpeed");
			BackSpeed = this.FindByName<Label>("BackSpeed");
			MaxLineCurr = this.FindByName<Label>("MaxLineCurr");
			MaxPhaseCurr = this.FindByName<Label>("MaxPhaseCurr");
			ECOConfig = this.FindByName<Label>("ECOConfig");
			Max_Acc = this.FindByName<Label>("Max_Acc");
			CustomMaxLine = this.FindByName<Label>("CustomMaxLine");
			CustomMaxPhase = this.FindByName<Label>("CustomMaxPhase");
			Motopara2 = this.FindByName<Grid>("Motopara2");
			PhaseExchange = this.FindByName<Label>("PhaseExchange");
			AccCoeff = this.FindByName<Label>("AccCoeff");
			WeakA = this.FindByName<Label>("WeakA");
			WeakTime = this.FindByName<Label>("WeakTime");
			Max_Dec = this.FindByName<Label>("Max_Dec");
			QuickDown = this.FindByName<Label>("QuickDown");
			ThrottleLow = this.FindByName<Label>("ThrottleLow");
			ThrottleHigh = this.FindByName<Label>("ThrottleHigh");
			PhaseExchangeB = this.FindByName<Xamarin.Forms.Button>("PhaseExchangeB");
			Max_DecB = this.FindByName<Xamarin.Forms.Button>("Max_DecB");
			RowText4 = this.FindByName<Xamarin.Forms.Button>("RowText4");
			SpeedRatioPara = this.FindByName<Grid>("SpeedRatioPara");
			Ratio500 = this.FindByName<Label>("Ratio500");
			Ratio1000 = this.FindByName<Label>("Ratio1000");
			Ratio1500 = this.FindByName<Label>("Ratio1500");
			Ratio2000 = this.FindByName<Label>("Ratio2000");
			Ratio2500 = this.FindByName<Label>("Ratio2500");
			Ratio3000 = this.FindByName<Label>("Ratio3000");
			Ratio3500 = this.FindByName<Label>("Ratio3500");
			Ratio4000 = this.FindByName<Label>("Ratio4000");
			Ratio4500 = this.FindByName<Label>("Ratio4500");
			Ratio5000 = this.FindByName<Label>("Ratio5000");
			Ratio5500 = this.FindByName<Label>("Ratio5500");
			Ratio6000 = this.FindByName<Label>("Ratio6000");
			Ratio6500 = this.FindByName<Label>("Ratio6500");
			Ratio7000 = this.FindByName<Label>("Ratio7000");
			Ratio7500 = this.FindByName<Label>("Ratio7500");
			Ratio8000 = this.FindByName<Label>("Ratio8000");
			Ratio8500 = this.FindByName<Label>("Ratio8500");
			Ratio9000 = this.FindByName<Label>("Ratio9000");
			LD = this.FindByName<Label>("LD");
			LQ = this.FindByName<Label>("LQ");
			FAIF = this.FindByName<Label>("FAIF");
			LmtSpeed = this.FindByName<Label>("LmtSpeed");
			RowText5 = this.FindByName<Xamarin.Forms.Button>("RowText5");
			RowText5Para = this.FindByName<Grid>("RowText5Para");
			LowSpeedLineCurr = this.FindByName<Label>("LowSpeedLineCurr");
			MidSpeedLineCurr = this.FindByName<Label>("MidSpeedLineCurr");
			LowSpeedPhaseCurr = this.FindByName<Label>("LowSpeedPhaseCurr");
			MidSpeedPhaseCurr = this.FindByName<Label>("MidSpeedPhaseCurr");
			LowSpeed = this.FindByName<Label>("LowSpeed");
			MidSpeed = this.FindByName<Label>("MidSpeed");
			NRowText4 = this.FindByName<Xamarin.Forms.Button>("NRowText4");
			NSpeedRatioPara = this.FindByName<Grid>("NSpeedRatioPara");
			StopBackCurr = this.FindByName<Label>("StopBackCurr");
			MaxBackCurr = this.FindByName<Label>("MaxBackCurr");
			BattRatedCap1 = this.FindByName<Label>("BattRatedCap1");
			NSpeedRatioParaE = this.FindByName<Grid>("NSpeedRatioParaE");
			FreeThrottle = this.FindByName<Label>("FreeThrottle");
			Voltage2 = this.FindByName<Label>("Voltage2");
			NRatio500 = this.FindByName<Label>("NRatio500");
			NRatio1000 = this.FindByName<Label>("NRatio1000");
			NRatio1500 = this.FindByName<Label>("NRatio1500");
			NRatio2000 = this.FindByName<Label>("NRatio2000");
			NRatio2500 = this.FindByName<Label>("NRatio2500");
			NRatio3000 = this.FindByName<Label>("NRatio3000");
			NRatio3500 = this.FindByName<Label>("NRatio3500");
			NRatio4000 = this.FindByName<Label>("NRatio4000");
			NRatio4500 = this.FindByName<Label>("NRatio4500");
			NRatio5000 = this.FindByName<Label>("NRatio5000");
			NRatio5500 = this.FindByName<Label>("NRatio5500");
			NRatio6000 = this.FindByName<Label>("NRatio6000");
			NRatio6500 = this.FindByName<Label>("NRatio6500");
			NRatio7000 = this.FindByName<Label>("NRatio7000");
			NRatio7500 = this.FindByName<Label>("NRatio7500");
			NRatio8000 = this.FindByName<Label>("NRatio8000");
			NRatio8500 = this.FindByName<Label>("NRatio8500");
			NRatio9000 = this.FindByName<Label>("NRatio9000");
			RowTextFunc = this.FindByName<Xamarin.Forms.Button>("RowTextFunc");
			RowTextFuncPara = this.FindByName<Grid>("RowTextFuncPara");
			BoostPin = this.FindByName<Label>("BoostPin");
			XHPin = this.FindByName<Label>("XHPin");
			BCPin = this.FindByName<Label>("BCPin");
			PPin = this.FindByName<Label>("PPin");
			FWPin = this.FindByName<Label>("FWPin");
			REPin = this.FindByName<Label>("REPin");
			SDHPin = this.FindByName<Label>("SDHPin");
			SDLPin = this.FindByName<Label>("SDLPin");
			CHGPin = this.FindByName<Label>("CHGPin");
			FDPin = this.FindByName<Label>("FDPin");
			SEATPin = this.FindByName<Label>("SEATPin");
			SpeedLimitPin = this.FindByName<Label>("SpeedLimitPin");
			SwitchVolPin = this.FindByName<Label>("SwitchVolPin");
			OneKeyPairPin = this.FindByName<Label>("OneKeyPairPin");
			BstTime = this.FindByName<Label>("BstTime");
			BstRelease = this.FindByName<Label>("BstRelease");
			SPModeConfig = this.FindByName<Label>("SPModeConfig");
			LongBack = this.FindByName<Label>("LongBack");
			EmptySpeed = this.FindByName<Label>("EmptySpeed");
			SlowDown = this.FindByName<Label>("SlowDown");
			RowTextFuncParaE = this.FindByName<Grid>("RowTextFuncParaE");
			GearConfig = this.FindByName<Label>("GearConfig");
			BrakeConfig = this.FindByName<Label>("BrakeConfig");
			PC13Config = this.FindByName<Label>("PC13Config");
			ParkConfig = this.FindByName<Label>("ParkConfig");
			FollowConfig = this.FindByName<Label>("FollowConfig");
			RowTextOneLine = this.FindByName<Xamarin.Forms.Button>("RowTextOneLine");
			RowTextOneLinePara = this.FindByName<Grid>("RowTextOneLinePara");
			SpeedPulse = this.FindByName<Label>("SpeedPulse");
			SpdPulseNum = this.FindByName<Label>("SpdPulseNum");
			SpeedMeterConfig = this.FindByName<Label>("SpeedMeterConfig");
			SpeedAnalog = this.FindByName<Label>("SpeedAnalog");
			CANConfig = this.FindByName<Label>("CANConfig");
			NoCanCnt = this.FindByName<Label>("NoCanCnt");
			CanSel = this.FindByName<Label>("CanSel");
			TorqueCoeff = this.FindByName<Label>("TorqueCoeff");
			SpeedPulseButton = this.FindByName<Xamarin.Forms.Button>("SpeedPulseButton");
			RowTextOneLineParaE = this.FindByName<Grid>("RowTextOneLineParaE");
			Idle = this.FindByName<Label>("Idle");
			Stop = this.FindByName<Label>("Stop");
			ESQH = this.FindByName<Label>("ESQH");
			Pulse = this.FindByName<Label>("Pulse");
			SQH = this.FindByName<Label>("SQH");
			DATA0 = this.FindByName<Label>("DATA0");
			DATA1 = this.FindByName<Label>("DATA1");
			SEC0 = this.FindByName<Label>("SEC0");
			SEC1 = this.FindByName<Label>("SEC1");
			SEC2 = this.FindByName<Label>("SEC2");
			SEC3 = this.FindByName<Label>("SEC3");
			SEC4 = this.FindByName<Label>("SEC4");
			SEC5 = this.FindByName<Label>("SEC5");
			SEC6 = this.FindByName<Label>("SEC6");
			SEC7 = this.FindByName<Label>("SEC7");
			Ppos = this.FindByName<Label>("Ppos");
			BCPos = this.FindByName<Label>("BCPos");
			HBarPos = this.FindByName<Label>("HBarPos");
			FDPos = this.FindByName<Label>("FDPos");
			OneLineCurrCoeff = this.FindByName<Label>("OneLineCurrCoeff");
			Byte89Sel = this.FindByName<Label>("Byte89Sel");
			WheelWidth = this.FindByName<Label>("WheelWidth");
			WheelRatio = this.FindByName<Label>("WheelRatio");
			WheelRadius = this.FindByName<Label>("WheelRadius");
			RateRatio = this.FindByName<Label>("RateRatio");
			RowText7 = this.FindByName<Xamarin.Forms.Button>("RowText7");
			FOCProtect = this.FindByName<Grid>("FOCProtect");
			HighVolProtect = this.FindByName<Label>("HighVolProtect");
			HighVolRestore = this.FindByName<Label>("HighVolRestore");
			LowVolProtect = this.FindByName<Label>("LowVolProtect");
			LowVolRestore = this.FindByName<Label>("LowVolRestore");
			MotorTempProtect = this.FindByName<Label>("MotorTempProtect");
			MotorTempRestore = this.FindByName<Label>("MotorTempRestore");
			MosTempProtect = this.FindByName<Label>("MosTempProtect");
			MosTempRestore = this.FindByName<Label>("MosTempRestore");
			ZeroBattCoeff = this.FindByName<Label>("ZeroBattCoeff");
			FullBattCoeff = this.FindByName<Label>("FullBattCoeff");
			FOC2Protect = this.FindByName<Grid>("FOC2Protect");
			ThrottleLost = this.FindByName<Label>("ThrottleLost");
			ThrottleInsert = this.FindByName<Label>("ThrottleInsert");
			ReleasePTime = this.FindByName<Label>("ReleasePTime");
			SeatDelay = this.FindByName<Label>("SeatDelay");
			BlockTime = this.FindByName<Label>("BlockTime");
			ParkTime = this.FindByName<Label>("ParkTime");
			MidSpeedCap = this.FindByName<Label>("MidSpeedCap");
			LowCapLimit = this.FindByName<Label>("LowCapLimit");
			MidSpeedCapCoeff = this.FindByName<Label>("MidSpeedCapCoeff");
			Stage1Curr = this.FindByName<Label>("Stage1Curr");
			BatSel = this.FindByName<Label>("BatSel");
			CurrLimitWay = this.FindByName<Label>("CurrLimitWay");
			IntRes = this.FindByName<Label>("IntRes");
			TempCoeff2 = this.FindByName<Label>("TempCoeff2");
			ThrottleLostB = this.FindByName<Xamarin.Forms.Button>("ThrottleLostB");
			ThrottleInsertB = this.FindByName<Xamarin.Forms.Button>("ThrottleInsertB");
			ReleasePTimeB = this.FindByName<Xamarin.Forms.Button>("ReleasePTimeB");
			SeatDelayB = this.FindByName<Xamarin.Forms.Button>("SeatDelayB");
			BlockTimeB = this.FindByName<Xamarin.Forms.Button>("BlockTimeB");
			ParkTimeB = this.FindByName<Xamarin.Forms.Button>("ParkTimeB");
			MidSpeedCapB = this.FindByName<Xamarin.Forms.Button>("MidSpeedCapB");
			LowCapLimitB = this.FindByName<Xamarin.Forms.Button>("LowCapLimitB");
			MidSpeedCapCoeffB = this.FindByName<Xamarin.Forms.Button>("MidSpeedCapCoeffB");
			Stage1CurrB = this.FindByName<Xamarin.Forms.Button>("Stage1CurrB");
			BatSelB = this.FindByName<Xamarin.Forms.Button>("BatSelB");
			CurrLimitWayB = this.FindByName<Xamarin.Forms.Button>("CurrLimitWayB");
			IntResB = this.FindByName<Xamarin.Forms.Button>("IntResB");
			TempCoeff2B = this.FindByName<Xamarin.Forms.Button>("TempCoeff2B");
			RowText8 = this.FindByName<Xamarin.Forms.Button>("RowText8");
			RowText8Para = this.FindByName<Grid>("RowText8Para");
			AN = this.FindByName<Label>("AN");
			LM = this.FindByName<Label>("LM");
			StartKI = this.FindByName<Label>("StartKI");
			StartKP = this.FindByName<Label>("StartKP");
			MidKI = this.FindByName<Label>("MidKI");
			MidKP = this.FindByName<Label>("MidKP");
			MaxKI = this.FindByName<Label>("MaxKI");
			MaxKP = this.FindByName<Label>("MaxKP");
			SpeedKI = this.FindByName<Label>("SpeedKI");
			SpeedKP = this.FindByName<Label>("SpeedKP");
			MOE = this.FindByName<Label>("MOE");
			CurveTime = this.FindByName<Label>("CurveTime");
			MOEB = this.FindByName<Xamarin.Forms.Button>("MOEB");
			CurveTimeB = this.FindByName<Xamarin.Forms.Button>("CurveTimeB");
			RowTextProduct = this.FindByName<Xamarin.Forms.Button>("RowTextProduct");
			RowTextProductPara = this.FindByName<Grid>("RowTextProductPara");
			ReCurrRatio = this.FindByName<Label>("ReCurrRatio");
			FwReRatio = this.FindByName<Label>("FwReRatio");
			VolSelectRatio = this.FindByName<Label>("VolSelectRatio");
			Stage2Soc = this.FindByName<Label>("Stage2Soc");
			ReAcc = this.FindByName<Label>("ReAcc");
			AlarmDelay = this.FindByName<Label>("AlarmDelay");
			RelayDelay = this.FindByName<Label>("RelayDelay");
			RelayOut = this.FindByName<Label>("RelayOut");
			BCEnable = this.FindByName<Label>("BCEnable");
			SeatEnable = this.FindByName<Label>("SeatEnable");
			PEnable = this.FindByName<Label>("PEnable");
			AutoBackP = this.FindByName<Label>("AutoBackP");
			CruiseEnable = this.FindByName<Label>("CruiseEnable");
			EABSEnable = this.FindByName<Label>("EABSEnable");
			TuixingEnable = this.FindByName<Label>("TuixingEnable");
			ForseTheft = this.FindByName<Label>("ForseTheft");
			OverSpeedAlarm = this.FindByName<Label>("OverSpeedAlarm");
			ParkDisableBreak = this.FindByName<Label>("ParkDisableBreak");
			RememberGear = this.FindByName<Label>("RememberGear");
			BackEnable = this.FindByName<Label>("BackEnable");
			RelayDelay1S = this.FindByName<Label>("RelayDelay1S");
			ZeroSwitch = this.FindByName<Label>("ZeroSwitch");
			IsinStart = this.FindByName<Label>("IsinStart");
			FollowSpeed = this.FindByName<Label>("FollowSpeed");
			CurrFD = this.FindByName<Label>("CurrFD");
			PulseFD = this.FindByName<Label>("PulseFD");
			Temp70 = this.FindByName<Label>("Temp70");
			FastRE = this.FindByName<Label>("FastRE");
			InverseTime = this.FindByName<Label>("InverseTime");
			ParkDiff = this.FindByName<Label>("ParkDiff");
			ParkCoeff = this.FindByName<Label>("ParkCoeff");
			RxdSel = this.FindByName<Label>("RxdSel");
			LearnThrottle = this.FindByName<Label>("LearnThrottle");
			LearnVol = this.FindByName<Label>("LearnVol");
			LearnVoh = this.FindByName<Label>("LearnVoh");
			SpecialWeak = this.FindByName<Label>("SpecialWeak");
			Protocol485 = this.FindByName<Label>("Protocol485");
			RowText11 = this.FindByName<Xamarin.Forms.Button>("RowText11");
			GirdText11 = this.FindByName<Grid>("GirdText11");
			LineCoeff = this.FindByName<Label>("LineCoeff");
			LineZero = this.FindByName<Label>("LineZero");
			PhaseACoeff = this.FindByName<Label>("PhaseACoeff");
			PhaseCCoeff = this.FindByName<Label>("PhaseCCoeff");
			PhaseAZero = this.FindByName<Label>("PhaseAZero");
			PhaseCZero = this.FindByName<Label>("PhaseCZero");
			TempCoeff = this.FindByName<Label>("TempCoeff");
			VolCoeff = this.FindByName<Label>("VolCoeff");
			SaveNum = this.FindByName<Label>("SaveNum");
			ResetName = this.FindByName<Xamarin.Forms.Button>("ResetName");
			SaveName = this.FindByName<Xamarin.Forms.Button>("SaveName");
			ParaMode = this.FindByName<Xamarin.Forms.Button>("ParaMode");
			RcvFrames = this.FindByName<Label>("RcvFrames");
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	public class MonthData
	{
		public string month { get; set; }

		public string yearmonth { get; set; }

		public int yy { get; set; }

		public int mm { get; set; }
	}
	public class MonthGroup : List<MonthData>
	{
		public string Year { get; private set; }

		public MonthGroup(string year, List<MonthData> animals)
			: base((IEnumerable<MonthData>)animals)
		{
			Year = year;
		}
	}
	[XamlFilePath("RecordPage.xaml")]
	public class RecordPage : ContentPage
	{
		private string[] monthstr = new string[13]
		{
			"", "January", "February", "March", "April", "May", "June", "July", "August", "September",
			"October", "November", "December"
		};

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TrackRecord;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TotalDistance;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.ListView listViewMonth;

		public List<MonthGroup> Animals { get; private set; } = new List<MonthGroup>();

		public RecordPage()
		{
			InitializeComponent();
			TotalDistance.Text = "ODO:" + App.scanResult.vcu.odo;
			if (App.CN)
			{
				TrackRecord.Text = "VCU " + App.currentvcudeviceid + "ƒÍ∂»∆Ô––º«¬º";
			}
			else
			{
				TrackRecord.Text = "VCU " + App.currentvcudeviceid + "Annual Driving Record";
			}
			DateTime now = DateTime.Now;
			for (int num = now.Year; num >= 2022; num--)
			{
				MonthGroup monthGroup = ((!App.CN) ? new MonthGroup($"In {num}", new List<MonthData>()) : new MonthGroup($"{num}ƒÍ", new List<MonthData>()));
				for (int num2 = 12; num2 > 0; num2--)
				{
					if (num2 <= now.Month || num != now.Year)
					{
						MonthData monthData = new MonthData
						{
							yy = num,
							mm = num2
						};
						if (App.CN)
						{
							monthData.month = $"{num2}‘¬";
						}
						else
						{
							monthData.month = monthstr[num2] ?? "";
						}
						if (App.CN)
						{
							monthData.yearmonth = $"{num}ƒÍ{num2}‘¬";
						}
						else
						{
							monthData.yearmonth = $"{monthstr[num2]} {num}";
						}
						monthGroup.Add(monthData);
					}
				}
				Animals.Add(monthGroup);
			}
			listViewMonth.ItemsSource = Animals;
		}

		private async void OnBackButtonClicked(object sender, EventArgs e)
		{
			await base.Navigation.PopModalAsync();
		}

		private async void OnForwardButtonClicked(object sender, EventArgs e)
		{
			await base.Navigation.PopModalAsync();
		}

		private async void listViewMonth_ItemTapped(object sender, ItemTappedEventArgs e)
		{
			MonthData a = (MonthData)e.Item;
			await base.Navigation.PushModalAsync(new MonthRecordPage(a));
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			this.LoadFromXaml(typeof(RecordPage));
			TrackRecord = this.FindByName<Label>("TrackRecord");
			TotalDistance = this.FindByName<Label>("TotalDistance");
			listViewMonth = this.FindByName<Xamarin.Forms.ListView>("listViewMonth");
		}
	}
	public class ScanResultModel : INotifyPropertyChanged
	{
		public IDevice Device { get; private set; }

		public string Name { get; private set; }

		public bool IsConnected { get; set; }

		public Guid Uuid { get; private set; }

		public int Rssi { get; set; }

		public int ServiceCount { get; private set; }

		public bool IsBleOrRemoteConnected { get; set; }

		public int Index { get; set; }

		public int timeout { get; set; }

		public VCUData vcu { get; set; }

		public bool SetOK { get; set; }

		public string TopMsg { get; set; }

		public string Message { get; set; }

		public string IsVCU { get; private set; }

		public bool IsVcu { get; private set; }

		public string SerialNumber { get; set; }

		public string ModelName { get; set; }

		public event PropertyChangedEventHandler PropertyChanged;

		public virtual void OnPropertyChanged(string propertyName)
		{
			this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
		}

		public void SetTime(int time)
		{
			timeout = time;
		}

		public void SetIndex(int index)
		{
			Index = index;
		}

		public void SetVCU(bool isvcu)
		{
			if (isvcu)
			{
				IsVCU = "VCU";
			}
			else
			{
				IsVCU = "FOC";
			}
			IsVcu = isvcu;
		}

		public void SetType(string vcutype)
		{
			ModelName = vcutype;
		}

		public void SetSN(string sn)
		{
			SerialNumber = sn;
		}

		public void SetName(string name)
		{
			Name = name;
		}

		public void SettBle(string Name, int rssi)
		{
			Device = null;
			this.Name = Name;
			Rssi = rssi;
			ServiceCount = 0;
		}

		public bool TrySet(IDevice device, int index)
		{
			bool result = false;
			if (Uuid == Guid.Empty)
			{
				Index = index;
				Device = device;
				Uuid = Device.Id;
				result = true;
			}
			try
			{
				if (Uuid == device.Id)
				{
					result = true;
					Name = device.Name;
					if (Name.Length > 20)
					{
						Name = Name.Substring(0, 20);
					}
					Rssi = device.Rssi;
					ServiceCount = device.AdvertisementRecords.Count;
					IsConnected = device.State == DeviceState.Connected;
				}
			}
			catch (Exception)
			{
			}
			return result;
		}
	}
	[XamlCompilation(XamlCompilationOptions.Compile)]
	[XamlFilePath("SegRecordPage.xaml")]
	public class SegRecordPage : ContentPage
	{
		private SKPaint grayTextPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Gray,
			StrokeWidth = 1f,
			TextSize = 8f,
			IsAntialias = true
		};

		private SKPaint blueTextPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.LightBlue,
			StrokeWidth = 1f,
			TextSize = 8f,
			IsAntialias = true
		};

		private SKPaint grayFillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Gray
		};

		private SKPaint gray2FillPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			StrokeWidth = 0.5f,
			Color = SKColors.Gray
		};

		private SKPaint redDrawPaint = new SKPaint
		{
			Style = SKPaintStyle.Stroke,
			StrokeWidth = 0.5f,
			Color = SKColors.Red
		};

		private SKPaint redTextPaint = new SKPaint
		{
			Style = SKPaintStyle.Fill,
			Color = SKColors.Red,
			StrokeWidth = 1f,
			TextSize = 8f,
			IsAntialias = true
		};

		private SKPaint blueDrawPaint = new SKPaint
		{
			Style = SKPaintStyle.Stroke,
			StrokeWidth = 0.5f,
			Color = SKColors.LightBlue
		};

		private RecordData records;

		private string tracks;

		private string centerpos;

		private const double PI = Math.PI;

		private const double a = 6378245.0;

		private const double ee = 0.006693421622965943;

		public double tlng;

		public double tlat;

		public double clng;

		public double clat;

		public double cplng;

		public double cplat;

		private float maxspeed = 100f;

		private int maxtime = 1800;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.WebView webView;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DrvDate;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DrvDistance;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DrvTime;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DrvPower;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private SKCanvasView speedView;

		public bool outofchina(double lng, double lat)
		{
			if (!(lng < 72.004) && !(lng > 137.8347) && !(lat < 0.8293))
			{
				return lat > 55.8271;
			}
			return true;
		}

		public double translat(double lng, double lat)
		{
			return -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + 0.1 * lng * lat + 0.2 * Math.Sqrt(Math.Abs(lng)) + (20.0 * Math.Sin(6.0 * lng * Math.PI) + 20.0 * Math.Sin(2.0 * lng * Math.PI)) * 2.0 / 3.0 + (20.0 * Math.Sin(lat * Math.PI) + 40.0 * Math.Sin(lat / 3.0 * Math.PI)) * 2.0 / 3.0 + (160.0 * Math.Sin(lat / 12.0 * Math.PI) + 320.0 * Math.Sin(lat * Math.PI / 30.0)) * 2.0 / 3.0;
		}

		public double translng(double lng, double lat)
		{
			return 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + 0.1 * lng * lat + 0.1 * Math.Sqrt(Math.Abs(lng)) + (20.0 * Math.Sin(6.0 * lng * Math.PI) + 20.0 * Math.Sin(2.0 * lng * Math.PI)) * 2.0 / 3.0 + (20.0 * Math.Sin(lng * Math.PI) + 40.0 * Math.Sin(lng / 3.0 * Math.PI)) * 2.0 / 3.0 + (150.0 * Math.Sin(lng / 12.0 * Math.PI) + 300.0 * Math.Sin(lng / 30.0 * Math.PI)) * 2.0 / 3.0;
		}

		public void wgs84togcj02(double lng, double lat)
		{
			if (outofchina(lng, lat))
			{
				tlng = lng;
				tlat = lat;
				return;
			}
			double num = translat(lng - 105.0, lat - 35.0);
			double num2 = translng(lng - 105.0, lat - 35.0);
			double d = lat / 180.0 * Math.PI;
			double num3 = Math.Sin(d);
			num3 = 1.0 - 0.006693421622965943 * num3 * num3;
			double num4 = Math.Sqrt(num3);
			num = num * 180.0 / (6335552.717000426 / (num3 * num4) * Math.PI);
			num2 = num2 * 180.0 / (6378245.0 / num4 * Math.Cos(d) * Math.PI);
			tlat = lat + num;
			tlng = lng + num2;
		}

		public SegRecordPage(RecordData a)
		{
			InitializeComponent();
			records = a;
			maxtime = records.TotalTimes;
			maxspeed = records.DriveMaxSpeed * 1.1f;
			if (maxspeed < 1f)
			{
				maxspeed = 1f;
			}
			if (maxtime < 60)
			{
				maxtime = 60;
			}
			if (records.Records.Count > 2)
			{
				DrvDate.Text = records.DriveDay + " " + records.DriveTime;
				if (App.CN)
				{
					DrvDistance.Text = records.TotalDistance.ToString("∆Ô––¿Ô≥Ã£∫0.0km");
					DrvPower.Text = records.TotalConsumePower.ToString("ƒ‹∫ƒ£∫0Wh");
					DrvTime.Text = $"∆Ô–– ±º‰:{records.TotalTimes}∑÷÷”";
				}
				else
				{
					DrvDistance.Text = records.TotalDistance.ToString("Drive Mileage:0.0km");
					DrvPower.Text = records.TotalConsumePower.ToString("Energy Consumption: 0Wh");
					DrvTime.Text = $"Drive Time:{records.TotalTimes}mins";
				}
				speedView.InvalidateSurface();
				wgs84togcj02(records.Records[0].Lng, records.Records[0].Lat);
				tracks = "[" + tlng + "," + tlat + "]";
				centerpos = tracks;
				for (int i = 1; i < records.Records.Count; i++)
				{
					wgs84togcj02(records.Records[i].Lng, records.Records[i].Lat);
					tracks = tracks + ",[" + tlng + "," + tlat + "]";
				}
				GetCurrentMap();
			}
		}

		private async void OnBackButtonClicked(object sender, EventArgs e)
		{
			await base.Navigation.PopModalAsync();
		}

		private async void OnForwardButtonClicked(object sender, EventArgs e)
		{
			await base.Navigation.PopModalAsync();
		}

		private void GetCurrentMap()
		{
			HtmlWebViewSource htmlWebViewSource = new HtmlWebViewSource();
			htmlWebViewSource.Html = "<html>\n<head>\n<meta charset = \"utf-8\" >\n<meta http - equiv = \"X-UA-Compatible\" content = \"IE=edge\" >\n<meta name = \"viewport\" content = \"initial-scale=1.0, user-scalable=no, width=device-width\" >\n<title>πÏº£ªÿ∑≈</title>\n    <link rel=\"stylesheet\" href=\"https://a.amap.com/jsapi_demos/static/demo-center/css/demo-center.css\"/>\n    <style>\n        html, body, #container {\n            height: 100%;\n            width: 100%;\n        }\n\n        .input-card .btn{\n            margin-right: 1.2rem;\n            width: 9rem;\n        }\n\n        .input-card .btn:last-child{\n            margin-right: 0;\n        }\n    </style>\n</head>\n<body>\n<div id=\"container\"></div>\n<div class=\"input-card\">\n    <h4>πÏº£ªÿ∑≈øÿ÷∆</h4>\n    <div class=\"input-item\">\n        <input type=\"button\" class=\"btn\" value=\"ø™ º∂Øª≠\" id=\"start\" onclick=\"startAnimation()\"/>\n        <input type=\"button\" class=\"btn\" value=\"‘›Õ£∂Øª≠\" id=\"pause\" onclick=\"pauseAnimation()\"/>\n    </div>\n    <div class=\"input-item\">\n        <input type=\"button\" class=\"btn\" value=\"ºÃ–¯∂Øª≠\" id=\"resume\" onclick=\"resumeAnimation()\"/>\n        <input type=\"button\" class=\"btn\" value=\"Õ£÷π∂Øª≠\" id=\"stop\" onclick=\"stopAnimation()\"/>\n    </div>\n</div>\n<script type=\"text/javascript\" src=\"https://webapi.amap.com/maps?v=1.4.15&key='704bffe66e6cefd4502224883cce8817'\"></script>\n<script>\n var marker, lineArr = [" + tracks + "];\n var map = new AMap.Map(\"container\", {\n        resizeEnable: true,\n        center: [116.397428, 39.90923],\n        zoom: 17\n    });\nmarker = new AMap.Marker({\n        map: map,\n        position: " + centerpos + ",\n        icon: \"https://webapi.amap.com/images/car.png\",\n        offset: new AMap.Pixel(-26, -13),\n        autoRotation: true,\n        angle:-90,\n    });\nvar polyline = new AMap.Polyline({\n        map: map,\n        path: lineArr,\n        showDir:true,\n        strokeColor: \"#28F\", \n        strokeWeight: 6,\n    });\nvar passedPolyline = new AMap.Polyline({\n        map: map,\n        strokeColor: \"#AF5\",\n        strokeWeight: 6,\n    });\nmarker.on('moving', function (e) {\n      \n        passedPolyline.setPath(e.passedPath);\n    });\n\n    map.setFitView();\n\n    function startAnimation () {\n        marker.moveAlong(lineArr, 200);\n    }\n\n    function pauseAnimation () {\n        marker.pauseMove();\n    }\n\n    function resumeAnimation () {\n        marker.resumeMove();\n    }\n\n    function stopAnimation () {\n        marker.stopMove();\n    }\n</script>\n</body>\n</html>";
			webView.Source = htmlWebViewSource;
		}

		private static void GetCubicBezierCoefficients(double[] V, out double[] A, out double[] B)
		{
			int num = V.Length - 1;
			int num2 = num << 1;
			int num3 = 0;
			int num4 = 0;
			double[,] array = new double[num2, 3];
			A = new double[num];
			B = new double[num];
			double num5 = 2.0;
			double num6 = -1.0;
			double num7 = V[num4++];
			double num8 = 1.0;
			double num9 = 1.0;
			double num10 = 2.0 * V[num4++];
			double num11 = -2.0;
			double num12 = 2.0;
			double num13 = -1.0;
			double num14 = 0.0;
			double num15;
			while (true)
			{
				num15 = 1.0 / num5;
				num6 *= num15;
				num7 *= num15;
				num11 -= num6;
				num14 -= num7;
				if (num11 != 0.0)
				{
					num12 -= num11 * num9;
					num14 -= num11 * num10;
				}
				array[num3, 0] = num6;
				array[num3, 1] = 0.0;
				array[num3, 2] = num7;
				num3++;
				array[num3, 0] = num8;
				array[num3, 1] = num9;
				array[num3, 2] = num10;
				num3++;
				if (num3 >= num2 - 2)
				{
					break;
				}
				num5 = num12;
				num6 = num13;
				num7 = num14;
				num8 = 1.0;
				num9 = 1.0;
				num10 = 2.0 * V[num4++];
				num11 = -2.0;
				num12 = 2.0;
				num13 = -1.0;
				num14 = 0.0;
			}
			num5 = num12;
			num6 = num13;
			num7 = num14;
			num8 = 2.0;
			num9 = 0.0;
			num10 = V[num4++];
			num15 = 1.0 / num5;
			num6 *= num15;
			num7 *= num15;
			num8 += num6;
			num10 += num7;
			num10 /= num8;
			num8 = 1.0;
			array[num3, 0] = num6;
			array[num3, 1] = 0.0;
			array[num3, 2] = num7;
			num3++;
			array[num3, 0] = num8;
			array[num3, 1] = num9;
			array[num3, 2] = num10;
			num3++;
			num4--;
			while (num3 > 0)
			{
				num3--;
				if (num3 < num2 - 1)
				{
					num15 = array[num3, 1];
					if (num15 != 0.0)
					{
						array[num3, 1] = 0.0;
						array[num3, 2] -= num15 * array[num3 + 1, 2];
					}
				}
				B[--num4] = array[num3, 2];
				num3--;
				num15 = array[num3, 0];
				if (num15 != 0.0)
				{
					array[num3, 0] = 0.0;
					array[num3, 2] -= num15 * array[num3 + 1, 2];
				}
				A[num4] = array[num3, 2];
			}
		}

		public static SKPath CreateSpline(SKPath AppendTo, params SKPoint[] Points)
		{
			int num = Points.Length;
			if (num == 0)
			{
				throw new ArgumentException("No points provided.", "Points");
			}
			if (AppendTo == null)
			{
				AppendTo = new SKPath();
				AppendTo.MoveTo(Points[0]);
			}
			else
			{
				AppendTo.LineTo(Points[0]);
			}
			switch (num)
			{
			case 1:
				return AppendTo;
			case 2:
				AppendTo.LineTo(Points[1]);
				return AppendTo;
			default:
			{
				double[] array = new double[num];
				for (int i = 0; i < num; i++)
				{
					array[i] = Points[i].X;
				}
				GetCubicBezierCoefficients(array, out var A, out var B);
				for (int i = 0; i < num; i++)
				{
					array[i] = Points[i].Y;
				}
				GetCubicBezierCoefficients(array, out var A2, out var B2);
				for (int i = 0; i < num - 1; i++)
				{
					AppendTo.CubicTo((float)A[i], (float)A2[i], (float)B[i], (float)B2[i], Points[i + 1].X, Points[i + 1].Y);
				}
				return AppendTo;
			}
			}
		}

		private void speedView_PaintSurface(object sender, SKPaintSurfaceEventArgs e)
		{
			_ = e.Info;
			SKCanvas canvas = e.Surface.Canvas;
			SKTypeface typeface = SKTypeface.FromFamilyName("ÀŒÃÂ");
			grayTextPaint.Typeface = typeface;
			canvas.Clear();
			int width = e.Info.Width;
			int height = e.Info.Height;
			canvas.Translate(width / 2, height / 2);
			canvas.Scale((float)width / 205f);
			int num = 0;
			for (int i = -80; i <= 100; i += 45)
			{
				int num2 = maxtime * num / 240;
				if (num == 4)
				{
					canvas.DrawText($"{num2}min", i - 20, 45f, grayTextPaint);
				}
				else if (num2 > 0 || num == 0)
				{
					canvas.DrawText(num2.ToString(), i - 3, 45f, grayTextPaint);
				}
				num++;
				if (i == -80)
				{
					canvas.DrawLine(i, -45f, i, 35f, gray2FillPaint);
				}
				else
				{
					canvas.DrawLine(i, -45f, i, 35f, grayFillPaint);
				}
			}
			num = 5;
			for (int j = -45; j <= 35; j += 16)
			{
				float num3 = maxspeed * (float)num / 5f;
				if (j == -45)
				{
					canvas.DrawText(num3.ToString("0.0km/h"), -100f, j + 3, redTextPaint);
				}
				else
				{
					canvas.DrawText(num3.ToString("0.0"), -100f, j + 3, redTextPaint);
				}
				num--;
				if (j == 35)
				{
					canvas.DrawLine(-80f, j, 100f, j, gray2FillPaint);
				}
				else
				{
					canvas.DrawLine(-80f, j, 100f, j, grayFillPaint);
				}
			}
			SKPoint[] array = new SKPoint[records.Records.Count - 1];
			double num4 = 0.0;
			int num5 = 0;
			for (num5 = 0; num5 < records.Records.Count - 1; num5++)
			{
				array[num5].X = num5 * 180 / (records.Records.Count - 1) - 80;
				array[num5].Y = (0f - records.Records[num5].Speed) * 80f / maxspeed + 35f;
				num4 += (double)records.Records[num5].Speed;
			}
			num4 /= (double)(records.Records.Count - 1);
			SKPath path = CreateSpline(null, array);
			canvas.DrawPath(path, redDrawPaint);
			float num6 = (float)(-80.0 * num4 / (double)maxspeed + 35.0);
			canvas.DrawLine(-80f, num6, 100f, num6, blueDrawPaint);
			canvas.DrawText(num4.ToString("0.0km/h"), 70f, num6, blueTextPaint);
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			if (ResourceLoader.IsEnabled && ResourceLoader.CanProvideContentFor(new ResourceLoader.ResourceLoadingQuery
			{
				AssemblyName = typeof(SegRecordPage).GetTypeInfo().Assembly.GetName(),
				ResourcePath = "SegRecordPage.xaml",
				Instance = this
			}))
			{
				__InitComponentRuntime();
				return;
			}
			if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
			{
				__InitComponentRuntime();
				return;
			}
			Xamarin.Forms.WebView webView;
			VisualDiagnostics.RegisterSourceInfo(webView = new Xamarin.Forms.WebView(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 9, 14);
			RowDefinition rowDefinition;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition = new RowDefinition(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 13, 22);
			RowDefinition rowDefinition2;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition2 = new RowDefinition(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 14, 22);
			ColumnDefinition columnDefinition;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition = new ColumnDefinition(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 17, 22);
			ColumnDefinition columnDefinition2;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition2 = new ColumnDefinition(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 18, 22);
			Label label;
			VisualDiagnostics.RegisterSourceInfo(label = new Label(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 20, 18);
			Label label2;
			VisualDiagnostics.RegisterSourceInfo(label2 = new Label(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 21, 18);
			Label label3;
			VisualDiagnostics.RegisterSourceInfo(label3 = new Label(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 22, 18);
			Label label4;
			VisualDiagnostics.RegisterSourceInfo(label4 = new Label(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 23, 18);
			Grid grid;
			VisualDiagnostics.RegisterSourceInfo(grid = new Grid(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 11, 14);
			SKCanvasView sKCanvasView;
			VisualDiagnostics.RegisterSourceInfo(sKCanvasView = new SKCanvasView(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 25, 14);
			RowDefinition rowDefinition3;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition3 = new RowDefinition(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 31, 22);
			RowDefinition rowDefinition4;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition4 = new RowDefinition(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 32, 22);
			RowDefinition rowDefinition5;
			VisualDiagnostics.RegisterSourceInfo(rowDefinition5 = new RowDefinition(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 33, 22);
			ColumnDefinition columnDefinition3;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition3 = new ColumnDefinition(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 36, 22);
			ColumnDefinition columnDefinition4;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition4 = new ColumnDefinition(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 37, 22);
			Grid grid2;
			VisualDiagnostics.RegisterSourceInfo(grid2 = new Grid(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 29, 14);
			ColumnDefinition columnDefinition5;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition5 = new ColumnDefinition(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 43, 22);
			ColumnDefinition columnDefinition6;
			VisualDiagnostics.RegisterSourceInfo(columnDefinition6 = new ColumnDefinition(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 44, 22);
			Xamarin.Forms.Button button;
			VisualDiagnostics.RegisterSourceInfo(button = new Xamarin.Forms.Button(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 47, 18);
			Xamarin.Forms.Button button2;
			VisualDiagnostics.RegisterSourceInfo(button2 = new Xamarin.Forms.Button(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 48, 18);
			Grid grid3;
			VisualDiagnostics.RegisterSourceInfo(grid3 = new Grid(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 41, 14);
			StackLayout stackLayout;
			VisualDiagnostics.RegisterSourceInfo(stackLayout = new StackLayout(), new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 8, 10);
			SegRecordPage segRecordPage;
			VisualDiagnostics.RegisterSourceInfo(segRecordPage = this, new Uri("SegRecordPage.xaml" + ";assembly=" + "MotorNet6", UriKind.RelativeOrAbsolute), 2, 2);
			NameScope nameScope = (NameScope)(NameScope.GetNameScope(segRecordPage) ?? new NameScope());
			NameScope.SetNameScope(segRecordPage, nameScope);
			((INameScope)nameScope).RegisterName("webView", (object)webView);
			if (webView.StyleId == null)
			{
				webView.StyleId = "webView";
			}
			((INameScope)nameScope).RegisterName("DrvDate", (object)label);
			if (label.StyleId == null)
			{
				label.StyleId = "DrvDate";
			}
			((INameScope)nameScope).RegisterName("DrvDistance", (object)label2);
			if (label2.StyleId == null)
			{
				label2.StyleId = "DrvDistance";
			}
			((INameScope)nameScope).RegisterName("DrvTime", (object)label3);
			if (label3.StyleId == null)
			{
				label3.StyleId = "DrvTime";
			}
			((INameScope)nameScope).RegisterName("DrvPower", (object)label4);
			if (label4.StyleId == null)
			{
				label4.StyleId = "DrvPower";
			}
			((INameScope)nameScope).RegisterName("speedView", (object)sKCanvasView);
			if (sKCanvasView.StyleId == null)
			{
				sKCanvasView.StyleId = "speedView";
			}
			this.webView = webView;
			DrvDate = label;
			DrvDistance = label2;
			DrvTime = label3;
			DrvPower = label4;
			speedView = sKCanvasView;
			stackLayout.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
			stackLayout.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
			webView.SetValue(Xamarin.Forms.WebView.SourceProperty, new WebViewSourceTypeConverter().ConvertFromInvariantString("https://dotnet.microsoft.com/zh-cn/apps/xamarin"));
			webView.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 600.0);
			webView.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 1000.0);
			stackLayout.Children.Add(webView);
			rowDefinition.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition);
			rowDefinition2.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition2);
			columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
			columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
			label.SetValue(Label.TextProperty, "Name");
			label.SetValue(Grid.RowProperty, 0);
			label.SetValue(Grid.ColumnProperty, 0);
			grid.Children.Add(label);
			label2.SetValue(Label.TextProperty, "1.0km");
			label2.SetValue(Grid.RowProperty, 0);
			label2.SetValue(Grid.ColumnProperty, 1);
			grid.Children.Add(label2);
			label3.SetValue(Label.TextProperty, "Time");
			label3.SetValue(Grid.RowProperty, 1);
			label3.SetValue(Grid.ColumnProperty, 0);
			grid.Children.Add(label3);
			label4.SetValue(Label.TextProperty, "Speed");
			label4.SetValue(Grid.RowProperty, 1);
			label4.SetValue(Grid.ColumnProperty, 1);
			grid.Children.Add(label4);
			stackLayout.Children.Add(grid);
			sKCanvasView.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 205.0);
			sKCanvasView.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 400.0);
			sKCanvasView.SetValue(Grid.RowProperty, 0);
			sKCanvasView.SetValue(Grid.ColumnProperty, 0);
			sKCanvasView.PaintSurface += segRecordPage.speedView_PaintSurface;
			stackLayout.Children.Add(sKCanvasView);
			rowDefinition3.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20*"));
			((DefinitionCollection<RowDefinition>)grid2.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition3);
			rowDefinition4.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20*"));
			((DefinitionCollection<RowDefinition>)grid2.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition4);
			rowDefinition5.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("20*"));
			((DefinitionCollection<RowDefinition>)grid2.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition5);
			columnDefinition3.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition3);
			columnDefinition4.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid2.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition4);
			stackLayout.Children.Add(grid2);
			columnDefinition5.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition5);
			columnDefinition6.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("50*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition6);
			button.SetValue(Xamarin.Forms.Button.TextProperty, "<<");
			button.Clicked += segRecordPage.OnBackButtonClicked;
			button.SetValue(Grid.ColumnProperty, 0);
			grid3.Children.Add(button);
			button2.SetValue(Xamarin.Forms.Button.TextProperty, ">>");
			button2.Clicked += segRecordPage.OnForwardButtonClicked;
			button2.SetValue(Grid.ColumnProperty, 1);
			grid3.Children.Add(button2);
			stackLayout.Children.Add(grid3);
			segRecordPage.SetValue(ContentPage.ContentProperty, stackLayout);
		}

		private void __InitComponentRuntime()
		{
			this.LoadFromXaml(typeof(SegRecordPage));
			webView = this.FindByName<Xamarin.Forms.WebView>("webView");
			DrvDate = this.FindByName<Label>("DrvDate");
			DrvDistance = this.FindByName<Label>("DrvDistance");
			DrvTime = this.FindByName<Label>("DrvTime");
			DrvPower = this.FindByName<Label>("DrvPower");
			speedView = this.FindByName<SKCanvasView>("speedView");
		}
	}
	[XamlFilePath("StatPage.xaml")]
	public class StatPage : ContentPage
	{
		private int[] FlashReadAddr = new int[55]
		{
			226, 232, 238, 0, 6, 12, 18, 226, 232, 238,
			24, 30, 36, 42, 226, 232, 238, 48, 93, 99,
			105, 226, 232, 238, 124, 130, 136, 142, 226, 232,
			238, 148, 154, 160, 166, 226, 232, 238, 172, 178,
			184, 190, 226, 232, 238, 196, 202, 208, 226, 232,
			238, 214, 220, 244, 250
		};

		private byte[] crctablelo = new byte[256]
		{
			0, 192, 193, 1, 195, 3, 2, 194, 198, 6,
			7, 199, 5, 197, 196, 4, 204, 12, 13, 205,
			15, 207, 206, 14, 10, 202, 203, 11, 201, 9,
			8, 200, 216, 24, 25, 217, 27, 219, 218, 26,
			30, 222, 223, 31, 221, 29, 28, 220, 20, 212,
			213, 21, 215, 23, 22, 214, 210, 18, 19, 211,
			17, 209, 208, 16, 240, 48, 49, 241, 51, 243,
			242, 50, 54, 246, 247, 55, 245, 53, 52, 244,
			60, 252, 253, 61, 255, 63, 62, 254, 250, 58,
			59, 251, 57, 249, 248, 56, 40, 232, 233, 41,
			235, 43, 42, 234, 238, 46, 47, 239, 45, 237,
			236, 44, 228, 36, 37, 229, 39, 231, 230, 38,
			34, 226, 227, 35, 225, 33, 32, 224, 160, 96,
			97, 161, 99, 163, 162, 98, 102, 166, 167, 103,
			165, 101, 100, 164, 108, 172, 173, 109, 175, 111,
			110, 174, 170, 106, 107, 171, 105, 169, 168, 104,
			120, 184, 185, 121, 187, 123, 122, 186, 190, 126,
			127, 191, 125, 189, 188, 124, 180, 116, 117, 181,
			119, 183, 182, 118, 114, 178, 179, 115, 177, 113,
			112, 176, 80, 144, 145, 81, 147, 83, 82, 146,
			150, 86, 87, 151, 85, 149, 148, 84, 156, 92,
			93, 157, 95, 159, 158, 94, 90, 154, 155, 91,
			153, 89, 88, 152, 136, 72, 73, 137, 75, 139,
			138, 74, 78, 142, 143, 79, 141, 77, 76, 140,
			68, 132, 133, 69, 135, 71, 70, 134, 130, 66,
			67, 131, 65, 129, 128, 64
		};

		private byte[] crctablehi = new byte[256]
		{
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 0, 193, 129, 64, 1, 192,
			128, 65, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 0, 193,
			129, 64, 1, 192, 128, 65, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 0, 193,
			129, 64, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 1, 192, 128, 65, 0, 193,
			129, 64, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 0, 193, 129, 64, 1, 192,
			128, 65, 1, 192, 128, 65, 0, 193, 129, 64,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 0, 193, 129, 64, 1, 192,
			128, 65, 0, 193, 129, 64, 1, 192, 128, 65,
			1, 192, 128, 65, 0, 193, 129, 64, 1, 192,
			128, 65, 0, 193, 129, 64, 0, 193, 129, 64,
			1, 192, 128, 65, 1, 192, 128, 65, 0, 193,
			129, 64, 0, 193, 129, 64, 1, 192, 128, 65,
			0, 193, 129, 64, 1, 192, 128, 65, 1, 192,
			128, 65, 0, 193, 129, 64
		};

		private int function_state;

		private int motor_running_state;

		private int motor_stop_state;

		private int Global_state1;

		private int Global_state2;

		private int Global_state3;

		private int Global_state4;

		private float voltage;

		private float linecurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Grid productGrid;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label HbarControl;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label TbarControl;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ParkControl;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BrakeControl;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label GearControl;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label GearDisable;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DefaultFW;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label HXControl;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BlockStat;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ShouldBeStat;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label EABSStat;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label EABSStart;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label HighSpeed;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MidSpeed;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CANType;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label CommEnable;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label INVControl;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FlashWay;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RunDir1;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MosfetCheck;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LowVolRem;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LowVolControl;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LowVolStop;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VolFlash;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SyncCount;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VoltageReport;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ZeroUseable;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DeadZone;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FDBrake;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FDEnable;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label BlackBox;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MotorRun;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label WeakStat;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label SpeedLimit;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AngleFix;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MotorCloseEnable;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label NeedAL;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AL;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Exchange;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Zsignal;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FDWay;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FDClose;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FDStart;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FDWork;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DataError;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label HallError;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FlashError;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ErrorStop;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label UUVD;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VUUD;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label WUUD;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PhaseAZero;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label UUWD;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label VUWD;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label WUVD;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PhaseCZero;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label MagnetError;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label HallPosError;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label AngleError;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PABError;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PError;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ZError;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ABError;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ZABError;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label RotationSpeed;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label ModulationRatio;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Voltage;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label LineCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PhaseACurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label PhaseCCurr;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label FrameCount;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button CmdStat;

		public StatPage()
		{
			InitializeComponent();
			Device.StartTimer(TimeSpan.FromMilliseconds(400.0), delegate
			{
				if (App.CN)
				{
					FrameCount.Text = "Ω” ’÷°∫≈£∫" + App.rcvFrames;
				}
				else
				{
					FrameCount.Text = "Received Frames:" + App.rcvFrames;
				}
				if (App.RcvRemoteCount > 0)
				{
					CmdStat.BackgroundColor = Color.Orange;
				}
				else if (App.CAT1_Loggined)
				{
					if (App.PassOk == 0 || (App.BindingStat < 0 && App.PassOk == 1))
					{
						CmdStat.BackgroundColor = Color.LightBlue;
					}
					else if (App.isConnected)
					{
						CmdStat.BackgroundColor = Color.LightCyan;
					}
					else
					{
						CmdStat.BackgroundColor = Color.LightGreen;
					}
				}
				else
				{
					CmdStat.BackgroundColor = Color.LightGray;
				}
				if (App.CN)
				{
					CmdStat.Text = "∑µªÿ";
				}
				else
				{
					CmdStat.Text = "Return";
					MosfetCheck.Text = "MosFetCheck";
					LowVolRem.Text = "LowVolRem";
					HbarControl.Text = "HbarControl";
					TbarControl.Text = "TBarControl";
					HXControl.Text = "HXControl";
					GearControl.Text = "GearControl";
					ParkControl.Text = "PackControl";
					BrakeControl.Text = "BrakeControl";
					EABSStat.Text = "EABSStat";
					BlockStat.Text = "BlockStat";
					ErrorStop.Text = "AlarmStop";
					AngleFix.Text = "AngleFix";
					VoltageReport.Text = "VolReport";
					MotorRun.Text = "MotorRun";
					MotorCloseEnable.Text = "CloseEnable";
					CANType.Text = "CANType";
					SyncCount.Text = "SyncCount";
					HallError.Text = "Seated";
					RunDir1.Text = "RunDIR";
					FDBrake.Text = "StlBrake";
					FDEnable.Text = "StlEnable";
					HighSpeed.Text = "HighSpeed";
					MidSpeed.Text = "MidSpeed";
					SpeedLimit.Text = "SpeedLimit";
					LowVolControl.Text = "LovVolControl";
					LowVolStop.Text = "LowVolStop";
					INVControl.Text = "INVControl";
					FlashWay.Text = "FlashWay";
					CommEnable.Text = "CommEnable";
					DeadZone.Text = "DeadZone";
					FlashError.Text = "BackupError";
					VolFlash.Text = "VolFlash";
					UUVD.Text = "UU-VD";
					VUUD.Text = "VU-UD";
					UUWD.Text = "UU-WD";
					WUUD.Text = "WU-UD";
					VUWD.Text = "VU-WD";
					ZeroUseable.Text = "ZeroUseful";
					ShouldBeStat.Text = "ShoudBeStat";
					PhaseAZero.Text = "PhaseAZero";
					WUVD.Text = "WU-UD";
					FDWork.Text = "StlWork";
					PhaseCZero.Text = "PhaseCZero";
					SpeedLimit.Text = "SpeedLimit";
					FDWay.Text = "Charge";
					FDClose.Text = "Boost";
					FDStart.Text = "Relay";
					DefaultFW.Text = "DefaultD";
					GearDisable.Text = "Push";
					Exchange.Text = "Exchage";
					EABSStart.Text = "EABSStart";
					WeakStat.Text = "WeakStat";
					NeedAL.Text = "NeedAL";
					AL.Text = "AL";
					DataError.Text = "DataError";
					Zsignal.Text = "Zsignal";
					HallPosError.Text = "HallPosError";
					PABError.Text = "PABError";
					MagnetError.Text = "MagnetError";
					PError.Text = "PError";
					ZError.Text = "ZError";
					ABError.Text = "ABError";
					AngleError.Text = "AngleError";
					ZABError.Text = "ZABError";
					BlackBox.Text = "BlackBox";
				}
				return true;
			});
			int RatedVol = 720;
			int Voltage2Coeff = 256;
			MessagingCenter.Subscribe(this, "ReadParaMeter", delegate(ConnectPage sender, byte[] arg)
			{
				if (arg[0] == 170)
				{
					if ((arg[1] & 0xC0) == 128)
					{
						int num = arg[1] & 0x7F;
						if (num < 55)
						{
							switch (FlashReadAddr[num])
							{
							case 226:
								if (App.CN)
								{
									RotationSpeed.Text = $"µ±«∞◊™ÀŸ£∫{arg[9] * 256 + arg[8]}RPM";
									ModulationRatio.Text = ((float)(int)arg[6] / 128f).ToString("µ˜÷∆±»£∫0.00");
								}
								else
								{
									RotationSpeed.Text = $"CurrentSpeed:{arg[9] * 256 + arg[8]}RPM";
									ModulationRatio.Text = ((float)(int)arg[6] / 128f).ToString("Modulate Ratio:0.00");
								}
								if ((arg[3] & 0x80) != 0)
								{
									function_state = 128;
								}
								else
								{
									function_state = 0;
								}
								MosfetCheck.IsVisible = (function_state & 0x80) != 0;
								LowVolRem.IsVisible = (function_state & 0x40) != 0;
								break;
							case 232:
								voltage = (float)(arg[3] * 256 + arg[2]) / 10f;
								linecurr = (short)(arg[7] * 256 + arg[6]);
								linecurr /= 4f;
								_ = (float)(arg[4] * 256 + arg[5]) * 3.3f * 1.5f / 4096f;
								if (App.CN)
								{
									Voltage.Text = voltage.ToString("ƒ∏œﬂµÁ—π£∫0.0V");
									LineCurr.Text = linecurr.ToString("ƒ∏œﬂµÁ¡˜£∫0.0A");
								}
								else
								{
									Voltage.Text = voltage.ToString("Batt Voltage:0.0V");
									LineCurr.Text = linecurr.ToString("Batt Current:0.0A");
								}
								break;
							case 238:
							{
								int num2 = arg[6] * 65536 + arg[7] * 256 + arg[8];
								double num3 = 1.953125 * Math.Sqrt(num2);
								num2 = arg[9] * 65536 + arg[10] * 256 + arg[11];
								double num4 = 1.953125 * Math.Sqrt(num2);
								if (App.CN)
								{
									PhaseACurr.Text = num3.ToString("Aœ‡µÁ¡˜£∫0.0A");
									PhaseCCurr.Text = num4.ToString("Cœ‡µÁ¡˜£∫0.0A");
								}
								else
								{
									PhaseACurr.Text = num3.ToString("Phase A Current:0.0A");
									PhaseCCurr.Text = num4.ToString("Phase C Current:0.0A");
								}
								break;
							}
							case 214:
								Global_state1 = arg[5] * 256 + arg[4];
								Global_state2 = arg[7] * 256 + arg[6];
								Global_state3 = arg[9] * 256 + arg[8];
								Global_state4 = arg[11] * 256 + arg[10];
								AngleFix.IsVisible = (Global_state1 & 0x8000) != 0;
								VoltageReport.IsVisible = (Global_state1 & 0x4000) != 0;
								MotorRun.IsVisible = (Global_state1 & 0x2000) != 0;
								MotorCloseEnable.IsVisible = (Global_state1 & 0x1000) != 0;
								CANType.IsVisible = (Global_state4 & 8) != 0;
								SyncCount.IsVisible = (Global_state4 & 0x200) != 0;
								HallError.IsVisible = (Global_state1 & 0x100) != 0;
								RunDir1.IsVisible = (Global_state1 & 2) != 0;
								FDBrake.IsVisible = (Global_state2 & 0x8000) != 0;
								FDEnable.IsVisible = (Global_state2 & 0x4000) != 0;
								HighSpeed.IsVisible = (Global_state2 & 0x2000) != 0;
								MidSpeed.IsVisible = (Global_state2 & 0x1000) != 0;
								SpeedLimit.IsVisible = (Global_state2 & 0x800) != 0;
								LowVolControl.IsVisible = (Global_state2 & 0x20) != 0;
								LowVolStop.IsVisible = (Global_state2 & 0x10) != 0;
								INVControl.IsVisible = (Global_state2 & 4) != 0;
								FlashWay.IsVisible = (Global_state2 & 1) != 0;
								CommEnable.IsVisible = (Global_state4 & 8) != 0;
								DeadZone.IsVisible = (Global_state4 & 4) != 0;
								FlashError.IsVisible = (Global_state4 & 2) != 0;
								VolFlash.IsVisible = (Global_state4 & 1) != 0;
								UUVD.IsVisible = (Global_state3 & 0x8000) != 0;
								VUUD.IsVisible = (Global_state3 & 0x4000) != 0;
								UUWD.IsVisible = (Global_state3 & 0x2000) != 0;
								WUUD.IsVisible = (Global_state3 & 0x1000) != 0;
								VUWD.IsVisible = (Global_state3 & 0x800) != 0;
								ZeroUseable.IsVisible = (Global_state3 & 0x400) != 0;
								ShouldBeStat.IsVisible = (Global_state3 & 0x200) != 0;
								PhaseAZero.IsVisible = (Global_state3 & 0x100) != 0;
								WUVD.IsVisible = (Global_state3 & 0x80) != 0;
								FDWork.IsVisible = (Global_state3 & 0x40) != 0;
								PhaseCZero.IsVisible = (Global_state3 & 0x20) != 0;
								SpeedLimit.IsVisible = (Global_state3 & 0x10) != 0;
								FDWay.IsVisible = (Global_state3 & 8) != 0;
								FDClose.IsVisible = (Global_state3 & 4) != 0;
								FDStart.IsVisible = (Global_state3 & 2) != 0;
								DefaultFW.IsVisible = (Global_state2 & 0x400) != 0;
								GearDisable.IsVisible = (Global_state2 & 0x200) != 0;
								Exchange.IsVisible = (Global_state2 & 0x80) != 0;
								EABSStart.IsVisible = (Global_state2 & 0x40) != 0;
								WeakStat.IsVisible = (Global_state2 & 8) != 0;
								NeedAL.IsVisible = (Global_state1 & 0x40) != 0;
								AL.IsVisible = (Global_state1 & 0x20) != 0;
								DataError.IsVisible = (Global_state2 & 0x10) != 0;
								Zsignal.IsVisible = (Global_state4 & 0x80) != 0;
								HallPosError.IsVisible = (Global_state1 & 4) != 0;
								PABError.IsVisible = (Global_state4 & 0x4000) != 0;
								MagnetError.IsVisible = (Global_state4 & 0x1000) != 0;
								PError.IsVisible = (Global_state4 & 0x800) != 0;
								ZError.IsVisible = (Global_state4 & 0x400) != 0;
								ABError.IsVisible = (Global_state4 & 0x200) != 0;
								AngleError.IsVisible = (Global_state4 & 0x8000) != 0;
								ZABError.IsVisible = (Global_state4 & 0x2000) != 0;
								break;
							case 250:
								motor_stop_state = arg[7] * 256 + arg[6];
								motor_running_state = arg[11] * 256;
								HbarControl.IsVisible = (motor_running_state & 0x8000) != 0;
								TbarControl.IsVisible = (motor_running_state & 0x4000) != 0;
								HXControl.IsVisible = (motor_running_state & 0x2000) != 0;
								GearControl.IsVisible = (motor_running_state & 0x1000) != 0;
								ParkControl.IsVisible = (motor_stop_state & 0x800) != 0;
								BrakeControl.IsVisible = (motor_stop_state & 0x8000) != 0;
								EABSStat.IsVisible = (motor_stop_state & 0x4000) != 0;
								BlockStat.IsVisible = (motor_stop_state & 0x2000) != 0;
								ErrorStop.IsVisible = (motor_stop_state & 1) != 0;
								break;
							case 0:
								Voltage2Coeff = (short)(256 * arg[5] + arg[4]);
								break;
							case 18:
								RatedVol = (short)(256 * arg[13] + arg[12]);
								break;
							}
						}
					}
					else
					{
						switch (arg[1])
						{
						case 0:
							if (App.CN)
							{
								RotationSpeed.Text = $"µ±«∞◊™ÀŸ£∫{arg[6] * 256 + arg[7]}RPM";
							}
							else
							{
								RotationSpeed.Text = $"CurrentSpeed:{arg[6] * 256 + arg[7]}RPM";
							}
							break;
						case 1:
							voltage = (float)(arg[2] * 256 + arg[3]) / 10f;
							linecurr = (short)(arg[4] * 256 + arg[5]);
							linecurr /= 4f;
							if (App.CN)
							{
								ModulationRatio.Text = ((float)(int)arg[6] / 128f).ToString("µ˜÷∆±»£∫0.00");
								Voltage.Text = voltage.ToString("ƒ∏œﬂµÁ—π£∫0.0V");
								LineCurr.Text = linecurr.ToString("ƒ∏œﬂµÁ¡˜£∫0.0A");
							}
							else
							{
								ModulationRatio.Text = ((float)(int)arg[6] / 128f).ToString("Modulate Ratio:0.00");
								Voltage.Text = voltage.ToString("Batt Voltage:0.0V");
								LineCurr.Text = linecurr.ToString("Batt Current:0.0A");
							}
							break;
						case 2:
						{
							int num5 = arg[2] * 65536 + arg[3] * 256 + arg[4];
							double num6 = 1.953125 * Math.Sqrt(num5);
							num5 = arg[9] * 65536 + arg[10] * 256 + arg[11];
							double num7 = 1.953125 * Math.Sqrt(num5);
							if (App.CN)
							{
								PhaseACurr.Text = num6.ToString("Aœ‡µÁ¡˜£∫0.0A");
								PhaseCCurr.Text = num7.ToString("Cœ‡µÁ¡˜£∫0.0A");
							}
							else
							{
								PhaseACurr.Text = num6.ToString("Phase A Current:0.0A");
								PhaseCCurr.Text = num7.ToString("Phase C Current:0.0A");
							}
							break;
						}
						case 15:
							function_state = arg[2];
							motor_running_state = arg[3] * 256;
							motor_stop_state = arg[4] * 256 + arg[5];
							Global_state1 = arg[6] * 256 + arg[7];
							Global_state2 = arg[8] * 256 + arg[9];
							Global_state3 = arg[10] * 256 + arg[11];
							Global_state4 = arg[12] * 256 + arg[13];
							MosfetCheck.IsVisible = (function_state & 0x80) != 0;
							LowVolRem.IsVisible = (function_state & 0x40) != 0;
							HbarControl.IsVisible = (motor_running_state & 0x8000) != 0;
							TbarControl.IsVisible = (motor_running_state & 0x4000) != 0;
							HXControl.IsVisible = (motor_running_state & 0x2000) != 0;
							GearControl.IsVisible = (motor_running_state & 0x1000) != 0;
							ParkControl.IsVisible = (motor_stop_state & 0x800) != 0;
							BrakeControl.IsVisible = (motor_stop_state & 0x8000) != 0;
							EABSStat.IsVisible = (motor_stop_state & 0x4000) != 0;
							BlockStat.IsVisible = (motor_stop_state & 0x2000) != 0;
							ErrorStop.IsVisible = (motor_stop_state & 1) != 0;
							AngleFix.IsVisible = (Global_state1 & 0x8000) != 0;
							VoltageReport.IsVisible = (Global_state1 & 0x4000) != 0;
							MotorRun.IsVisible = (Global_state1 & 0x2000) != 0;
							MotorCloseEnable.IsVisible = (Global_state1 & 0x1000) != 0;
							CANType.IsVisible = (Global_state4 & 8) != 0;
							SyncCount.IsVisible = (Global_state4 & 0x200) != 0;
							HallError.IsVisible = (Global_state1 & 0x100) != 0;
							RunDir1.IsVisible = (Global_state1 & 2) != 0;
							FDBrake.IsVisible = (Global_state2 & 0x8000) != 0;
							FDEnable.IsVisible = (Global_state2 & 0x4000) != 0;
							HighSpeed.IsVisible = (Global_state2 & 0x2000) != 0;
							MidSpeed.IsVisible = (Global_state2 & 0x1000) != 0;
							SpeedLimit.IsVisible = (Global_state2 & 0x800) != 0;
							LowVolControl.IsVisible = (Global_state2 & 0x20) != 0;
							LowVolStop.IsVisible = (Global_state2 & 0x10) != 0;
							INVControl.IsVisible = (Global_state2 & 4) != 0;
							FlashWay.IsVisible = (Global_state2 & 1) != 0;
							CommEnable.IsVisible = (Global_state4 & 8) != 0;
							DeadZone.IsVisible = (Global_state4 & 4) != 0;
							FlashError.IsVisible = (Global_state4 & 2) != 0;
							VolFlash.IsVisible = (Global_state4 & 1) != 0;
							UUVD.IsVisible = (Global_state3 & 0x8000) != 0;
							VUUD.IsVisible = (Global_state3 & 0x4000) != 0;
							UUWD.IsVisible = (Global_state3 & 0x2000) != 0;
							WUUD.IsVisible = (Global_state3 & 0x1000) != 0;
							VUWD.IsVisible = (Global_state3 & 0x800) != 0;
							ZeroUseable.IsVisible = (Global_state3 & 0x400) != 0;
							ShouldBeStat.IsVisible = (Global_state3 & 0x200) != 0;
							PhaseAZero.IsVisible = (Global_state3 & 0x100) != 0;
							WUVD.IsVisible = (Global_state3 & 0x80) != 0;
							FDWork.IsVisible = (Global_state3 & 0x40) != 0;
							PhaseCZero.IsVisible = (Global_state3 & 0x20) != 0;
							SpeedLimit.IsVisible = (Global_state3 & 0x10) != 0;
							FDWay.IsVisible = (Global_state3 & 8) != 0;
							FDClose.IsVisible = (Global_state3 & 4) != 0;
							FDStart.IsVisible = (Global_state3 & 2) != 0;
							DefaultFW.IsVisible = (Global_state2 & 0x400) != 0;
							GearDisable.IsVisible = (Global_state2 & 0x200) != 0;
							Exchange.IsVisible = (Global_state2 & 0x80) != 0;
							EABSStart.IsVisible = (Global_state2 & 0x40) != 0;
							WeakStat.IsVisible = (Global_state2 & 8) != 0;
							NeedAL.IsVisible = (Global_state1 & 0x40) != 0;
							AL.IsVisible = (Global_state1 & 0x20) != 0;
							DataError.IsVisible = (Global_state2 & 0x10) != 0;
							Zsignal.IsVisible = (Global_state4 & 0x80) != 0;
							HallPosError.IsVisible = (Global_state1 & 4) != 0;
							PABError.IsVisible = (Global_state4 & 0x4000) != 0;
							MagnetError.IsVisible = (Global_state4 & 0x1000) != 0;
							PError.IsVisible = (Global_state4 & 0x800) != 0;
							ZError.IsVisible = (Global_state4 & 0x400) != 0;
							ABError.IsVisible = (Global_state4 & 0x200) != 0;
							AngleError.IsVisible = (Global_state4 & 0x8000) != 0;
							ZABError.IsVisible = (Global_state4 & 0x2000) != 0;
							break;
						case 127:
							App.rs485index = arg[2] * 256 + arg[3];
							if (App.rs485index <= 7190)
							{
								for (int i = 0; i < 10; i++)
								{
									App.rs485data[App.rs485index + i] = arg[4 + i];
								}
							}
							break;
						}
					}
				}
			});
		}

		private async void OnButtonProductClicked(object sender, EventArgs e)
		{
			await base.Navigation.PopModalAsync();
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			this.LoadFromXaml(typeof(StatPage));
			productGrid = this.FindByName<Grid>("productGrid");
			HbarControl = this.FindByName<Label>("HbarControl");
			TbarControl = this.FindByName<Label>("TbarControl");
			ParkControl = this.FindByName<Label>("ParkControl");
			BrakeControl = this.FindByName<Label>("BrakeControl");
			GearControl = this.FindByName<Label>("GearControl");
			GearDisable = this.FindByName<Label>("GearDisable");
			DefaultFW = this.FindByName<Label>("DefaultFW");
			HXControl = this.FindByName<Label>("HXControl");
			BlockStat = this.FindByName<Label>("BlockStat");
			ShouldBeStat = this.FindByName<Label>("ShouldBeStat");
			EABSStat = this.FindByName<Label>("EABSStat");
			EABSStart = this.FindByName<Label>("EABSStart");
			HighSpeed = this.FindByName<Label>("HighSpeed");
			MidSpeed = this.FindByName<Label>("MidSpeed");
			CANType = this.FindByName<Label>("CANType");
			CommEnable = this.FindByName<Label>("CommEnable");
			INVControl = this.FindByName<Label>("INVControl");
			FlashWay = this.FindByName<Label>("FlashWay");
			RunDir1 = this.FindByName<Label>("RunDir1");
			MosfetCheck = this.FindByName<Label>("MosfetCheck");
			LowVolRem = this.FindByName<Label>("LowVolRem");
			LowVolControl = this.FindByName<Label>("LowVolControl");
			LowVolStop = this.FindByName<Label>("LowVolStop");
			VolFlash = this.FindByName<Label>("VolFlash");
			SyncCount = this.FindByName<Label>("SyncCount");
			VoltageReport = this.FindByName<Label>("VoltageReport");
			ZeroUseable = this.FindByName<Label>("ZeroUseable");
			DeadZone = this.FindByName<Label>("DeadZone");
			FDBrake = this.FindByName<Label>("FDBrake");
			FDEnable = this.FindByName<Label>("FDEnable");
			BlackBox = this.FindByName<Label>("BlackBox");
			MotorRun = this.FindByName<Label>("MotorRun");
			WeakStat = this.FindByName<Label>("WeakStat");
			SpeedLimit = this.FindByName<Label>("SpeedLimit");
			AngleFix = this.FindByName<Label>("AngleFix");
			MotorCloseEnable = this.FindByName<Label>("MotorCloseEnable");
			NeedAL = this.FindByName<Label>("NeedAL");
			AL = this.FindByName<Label>("AL");
			Exchange = this.FindByName<Label>("Exchange");
			Zsignal = this.FindByName<Label>("Zsignal");
			FDWay = this.FindByName<Label>("FDWay");
			FDClose = this.FindByName<Label>("FDClose");
			FDStart = this.FindByName<Label>("FDStart");
			FDWork = this.FindByName<Label>("FDWork");
			DataError = this.FindByName<Label>("DataError");
			HallError = this.FindByName<Label>("HallError");
			FlashError = this.FindByName<Label>("FlashError");
			ErrorStop = this.FindByName<Label>("ErrorStop");
			UUVD = this.FindByName<Label>("UUVD");
			VUUD = this.FindByName<Label>("VUUD");
			WUUD = this.FindByName<Label>("WUUD");
			PhaseAZero = this.FindByName<Label>("PhaseAZero");
			UUWD = this.FindByName<Label>("UUWD");
			VUWD = this.FindByName<Label>("VUWD");
			WUVD = this.FindByName<Label>("WUVD");
			PhaseCZero = this.FindByName<Label>("PhaseCZero");
			MagnetError = this.FindByName<Label>("MagnetError");
			HallPosError = this.FindByName<Label>("HallPosError");
			AngleError = this.FindByName<Label>("AngleError");
			PABError = this.FindByName<Label>("PABError");
			PError = this.FindByName<Label>("PError");
			ZError = this.FindByName<Label>("ZError");
			ABError = this.FindByName<Label>("ABError");
			ZABError = this.FindByName<Label>("ZABError");
			RotationSpeed = this.FindByName<Label>("RotationSpeed");
			ModulationRatio = this.FindByName<Label>("ModulationRatio");
			Voltage = this.FindByName<Label>("Voltage");
			LineCurr = this.FindByName<Label>("LineCurr");
			PhaseACurr = this.FindByName<Label>("PhaseACurr");
			PhaseCCurr = this.FindByName<Label>("PhaseCCurr");
			FrameCount = this.FindByName<Label>("FrameCount");
			CmdStat = this.FindByName<Xamarin.Forms.Button>("CmdStat");
		}
	}
	[XamlFilePath("LoginPage.xaml")]
	public class LoginPage : ContentPage
	{
		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label Login;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Label DisplaySerialNumber;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Entry SerialNumber;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Entry OldPassword;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Entry PhoneNumber;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Entry Password;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Entry ConfirmPassword;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Entry VerifyCode;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button VerifyCmd;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button Command;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button FindByPhoneCommand;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button FindCommand;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private Xamarin.Forms.Button ReturnCommand;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			this.LoadFromXaml(typeof(LoginPage));
			Login = this.FindByName<Label>("Login");
			DisplaySerialNumber = this.FindByName<Label>("DisplaySerialNumber");
			SerialNumber = this.FindByName<Xamarin.Forms.Entry>("SerialNumber");
			OldPassword = this.FindByName<Xamarin.Forms.Entry>("OldPassword");
			PhoneNumber = this.FindByName<Xamarin.Forms.Entry>("PhoneNumber");
			Password = this.FindByName<Xamarin.Forms.Entry>("Password");
			ConfirmPassword = this.FindByName<Xamarin.Forms.Entry>("ConfirmPassword");
			VerifyCode = this.FindByName<Xamarin.Forms.Entry>("VerifyCode");
			VerifyCmd = this.FindByName<Xamarin.Forms.Button>("VerifyCmd");
			Command = this.FindByName<Xamarin.Forms.Button>("Command");
			FindByPhoneCommand = this.FindByName<Xamarin.Forms.Button>("FindByPhoneCommand");
			FindCommand = this.FindByName<Xamarin.Forms.Button>("FindCommand");
			ReturnCommand = this.FindByName<Xamarin.Forms.Button>("ReturnCommand");
		}
	}
}
